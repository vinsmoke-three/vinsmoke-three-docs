{"config":{"lang":["ja"],"separator":"[\\s\\-\u3000\u3001\u3002\uff0c\uff0e]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"vinsmoke-three \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3078\u3088\u3046\u3053\u305d","text":"<p>\u6a5f\u68b0\u5b66\u7fd2\u30fb\u6df1\u5c64\u5b66\u7fd2\u306e\u5b9f\u8df5\u7684\u306a\u5b66\u7fd2\u30ea\u30bd\u30fc\u30b9</p> <p>\u3053\u306e\u30b5\u30a4\u30c8\u306f\u3001PyTorch\u3092\u4e2d\u5fc3\u3068\u3057\u305f\u6a5f\u68b0\u5b66\u7fd2\u30fb\u6df1\u5c64\u5b66\u7fd2\u306e\u77e5\u8b58\u3068\u30ce\u30a6\u30cf\u30a6\u3092\u4f53\u7cfb\u7684\u306b\u307e\u3068\u3081\u305f\u65e5\u672c\u8a9e\u306e\u6280\u8853\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u30b5\u30a4\u30c8\u3067\u3059\u3002</p>"},{"location":"#_1","title":"\ud83c\udfaf \u3053\u306e\u30b5\u30a4\u30c8\u306e\u7279\u5fb4","text":"<ul> <li>\u5b9f\u8df5\u91cd\u8996: \u5b9f\u969b\u306b\u52d5\u4f5c\u3059\u308b\u30b3\u30fc\u30c9\u3068\u8a73\u7d30\u306a\u89e3\u8aac</li> <li>\u6bb5\u968e\u7684\u5b66\u7fd2: \u521d\u5fc3\u8005\u304b\u3089\u4e0a\u7d1a\u8005\u307e\u3067\u3001\u6bb5\u968e\u7684\u306b\u5b66\u7fd2\u3067\u304d\u308b\u69cb\u6210</li> <li>\u65e5\u672c\u8a9e\u89e3\u8aac: \u8907\u96d1\u306a\u6280\u8853\u6982\u5ff5\u3092\u308f\u304b\u308a\u3084\u3059\u3044\u65e5\u672c\u8a9e\u3067\u8aac\u660e</li> <li>\u6700\u65b0\u6280\u8853: Transformer\u3084Vision Transformer\u306a\u3069\u6700\u65b0\u306e\u7814\u7a76\u6210\u679c\u3092\u542b\u3080\u5b9f\u88c5</li> </ul>"},{"location":"#_2","title":"\u6280\u8853\u30b9\u30bf\u30c3\u30af","text":""},{"location":"#_3","title":"\u6a5f\u68b0\u5b66\u7fd2\u30fb\u6df1\u5c64\u5b66\u7fd2","text":"<ul> <li>PyTorch - \u30c6\u30f3\u30bd\u30eb\u64cd\u4f5c\u3001\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3001\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3\u3001\u8ee2\u79fb\u5b66\u7fd2\u3001\u5b9f\u9a13\u8ffd\u8de1\u3001\u30e2\u30c7\u30eb\u30c7\u30d7\u30ed\u30a4</li> </ul>"},{"location":"#_4","title":"\u5927\u898f\u6a21\u8a00\u8a9e\u30e2\u30c7\u30eb\u30fb\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","text":"<ul> <li>Transformers - \u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u7406\u89e3\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u6d3b\u7528\u3001\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u64cd\u4f5c\u3001\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3001\u5b9f\u8df5\u7684\u5b9f\u88c5</li> </ul>"},{"location":"#_5","title":"\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9","text":"<p>\u6e96\u5099\u4e2d</p>"},{"location":"#web","title":"Web\u958b\u767a","text":"<p>\u6e96\u5099\u4e2d</p>"},{"location":"#_6","title":"\u30af\u30e9\u30a6\u30c9\u30fb\u30a4\u30f3\u30d5\u30e9","text":"<p>\u6e96\u5099\u4e2d</p>"},{"location":"#_7","title":"\u5b66\u7fd2\u30ac\u30a4\u30c9","text":""},{"location":"#_8","title":"\u521d\u5fc3\u8005\u5411\u3051","text":"<ol> <li>PyTorch fundamentals - \u30c6\u30f3\u30bd\u30eb\u64cd\u4f5c\u3068PyTorch\u306e\u57fa\u672c\u6982\u5ff5</li> <li>PyTorch workflow - \u6a5f\u68b0\u5b66\u7fd2\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u57fa\u672c\u7684\u306a\u6d41\u308c</li> </ol>"},{"location":"#_9","title":"\u4e2d\u7d1a\u8005\u5411\u3051","text":"<ol> <li>PyTorch classification - \u5206\u985e\u554f\u984c\u306e\u5b9f\u88c5</li> <li>PyTorch computer vision - \u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3\u3068FashionMNIST\u753b\u50cf\u5206\u985e</li> <li>PyTorch custom datasets - \u30ab\u30b9\u30bf\u30e0\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3068\u753b\u50cf\u5206\u985e\u30e2\u30c7\u30eb\u306e\u69cb\u7bc9</li> </ol>"},{"location":"#_10","title":"\u4e0a\u7d1a\u8005\u5411\u3051","text":"<ol> <li>PyTorch modular - \u30b3\u30fc\u30c9\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u5316\u3068\u518d\u5229\u7528\u53ef\u80fd\u306aML\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306e\u69cb\u7bc9</li> <li>PyTorch transfer learning - \u8ee2\u79fb\u5b66\u7fd2\u3067\u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u3092\u6d3b\u7528\u3057\u305f\u9ad8\u7cbe\u5ea6\u753b\u50cf\u5206\u985e</li> <li>PyTorch experiment tracking - TensorBoard\u3092\u4f7f\u3063\u305f\u5b9f\u9a13\u8ffd\u8de1\u3068\u8907\u6570\u30e2\u30c7\u30eb\u306e\u4f53\u7cfb\u7684\u6bd4\u8f03</li> <li>PyTorch paper replicating - Vision Transformer\u3092\u4e00\u304b\u3089\u5b9f\u88c5\u3057\u3066FoodVision Mini\u306b\u9069\u7528\u3059\u308b</li> <li>PyTorch model deployment - FoodVision Big\u306e\u69cb\u7bc9\u3068Hugging Face Spaces\u3078\u306e\u516c\u958b</li> </ol>"},{"location":"#_11","title":"\u5927\u898f\u6a21\u8a00\u8a9e\u30e2\u30c7\u30eb\u30fb\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","text":""},{"location":"#_12","title":"\u57fa\u790e\u7406\u8ad6","text":"<ol> <li>Transformer\u306e\u56f3\u89e3 - \u300cAttention is All You Need\u300d\u8ad6\u6587\u306eTransformer\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3092\u56f3\u89e3\u3067\u8a73\u3057\u304f\u89e3\u8aac</li> </ol>"},{"location":"#_13","title":"\u5b9f\u88c5\u30fb\u5b9f\u8df5","text":"<ol> <li>Transformer Models - Transformer\u30e2\u30c7\u30eb\u306e\u57fa\u672c\u6982\u5ff5\u3001NLP\u3068LLM\u306e\u9055\u3044\u3001\u5b9f\u88c5\u306e\u57fa\u790e</li> <li>Using Transformers - Hugging Face Transformers\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u5b9f\u8df5\u7684\u306a\u4f7f\u3044\u65b9\u3001pipeline\u306e\u4ed5\u7d44\u307f\u3001\u30e2\u30c7\u30eb\u3068\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306e\u64cd\u4f5c</li> <li>Fine-tuning a pretrained model - \u4e8b\u524d\u8a13\u7df4\u6e08\u307f\u30e2\u30c7\u30eb\u306e\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3001Trainer API\u3068\u30ab\u30b9\u30bf\u30e0\u8a13\u7df4\u30eb\u30fc\u30d7\u306e\u5b9f\u88c5</li> <li>Hugging Face Tokenizers\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u5b8c\u5168\u30ac\u30a4\u30c9 - \u9ad8\u901f\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306e\u4ed5\u7d44\u307f\u3068\u5b9f\u88c5\u3001BPE\u30fbWordPiece\u30fbUnigram\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u8a73\u7d30\u89e3\u8aac</li> <li>GPT\u3092\u30bc\u30ed\u304b\u3089\u69cb\u7bc9\u3059\u308b\u5b8c\u5168\u30ac\u30a4\u30c9 - PyTorch\u3067GPT\u30e2\u30c7\u30eb\u3092\u4e00\u304b\u3089\u5b9f\u88c5\u3002Self-Attention\u3001\u4f4d\u7f6e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3001\u91cd\u307f\u521d\u671f\u5316\u3001\u30c6\u30ad\u30b9\u30c8\u751f\u6210\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u307e\u3067\u8a73\u7d30\u89e3\u8aac</li> <li>Hugging Face Datasets\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u5b8c\u5168\u30ac\u30a4\u30c9 - \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u8aad\u307f\u8fbc\u307f\u3001\u524d\u51e6\u7406\u3001\u4fdd\u5b58\u3001FAISS\u3092\u4f7f\u3063\u305f\u610f\u5473\u691c\u7d22\u30b7\u30b9\u30c6\u30e0\u306e\u69cb\u7bc9\u307e\u3067\u5b9f\u8df5\u7684\u306b\u89e3\u8aac</li> </ol>"},{"location":"#classical-nlp-tasks","title":"Classical NLP Tasks","text":"<ol> <li>Token Classification - Transformers\u3092\u4f7f\u3063\u305f\u30c8\u30fc\u30af\u30f3\u5206\u985e\uff1a\u56fa\u6709\u8868\u73fe\u8a8d\u8b58\uff08NER\uff09\u306e\u5b9f\u8df5\u30ac\u30a4\u30c9</li> <li>Masked Language Modeling - BERT\u30e9\u30a4\u30af\u306a\u30e2\u30c7\u30eb\u306e\u30de\u30b9\u30af\u8a00\u8a9e\u30e2\u30c7\u30eb\u306e\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0</li> <li>Summarization - Transformers\u3092\u4f7f\u3063\u305f\u30c6\u30ad\u30b9\u30c8\u8981\u7d04\u30bf\u30b9\u30af\u306e\u5b9f\u88c5</li> <li>Translation - \u30cb\u30e5\u30fc\u30e9\u30eb\u6a5f\u68b0\u7ffb\u8a33\u30e2\u30c7\u30eb\u306e\u69cb\u7bc9\u3068\u8a55\u4fa1</li> <li>Question Answering - BERT\u30e2\u30c7\u30eb\u3092SQuAD\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3067\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3057\u3066\u3001\u9ad8\u7cbe\u5ea6\u306a\u8cea\u554f\u5fdc\u7b54\u30b7\u30b9\u30c6\u30e0\u3092\u69cb\u7bc9\u3059\u308b\u65b9\u6cd5\u3092\u8a73\u7d30\u306b\u89e3\u8aac</li> </ol>"},{"location":"LLM/00_illustrated_transformer/","title":"Transformer\u306e\u56f3\u89e3","text":"<p>Transformer\u306f\u8ad6\u6587\u300cAttention is All You Need\u300d\u3067\u63d0\u6848\u3055\u308c\u305f\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3067\u3059\u3002</p> <p>\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u3064\u3044\u3066</p> <p>\u672c\u8a18\u4e8b\u306f Jay Alammar \u6c0f\u306b\u3088\u308b The Illustrated Transformer \uff082018, CC BY-NC-SA 4.0\uff09\u306e\u65e5\u672c\u8a9e\u7ffb\u8a33\uff0b\u88dc\u8db3\u89e3\u8aac\u3067\u3059\u3002 \u672c\u8a18\u4e8b\u3082\u540c\u3058\u304fCC BY-NC-SA 4.0 \u30e9\u30a4\u30bb\u30f3\u30b9 \u306e\u4e0b\u3067\u516c\u958b\u3057\u307e\u3059\u3002</p>","tags":["Transformer","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","Deep Learning","Attention"]},{"location":"LLM/00_illustrated_transformer/#_1","title":"\u6982\u8981","text":"<p>\u3053\u306e\u8a18\u4e8b\u3067\u306f\u3001\u73fe\u4ee3\u306e\u81ea\u7136\u8a00\u8a9e\u51e6\u7406\u306b\u304a\u3044\u3066\u9769\u547d\u7684\u306a\u5909\u5316\u3092\u3082\u305f\u3089\u3057\u305fTransformer\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306b\u3064\u3044\u3066\u5b66\u7fd2\u3057\u307e\u3059\u3002RNN\u3084CNN\u306b\u4f9d\u5b58\u305b\u305a\u3001Attention\u6a5f\u69cb\u306e\u307f\u3067\u69cb\u7bc9\u3055\u308c\u305f\u3053\u306e\u30e2\u30c7\u30eb\u304c\u306a\u305c\u52b9\u679c\u7684\u306a\u306e\u304b\u3001\u305d\u306e\u4ed5\u7d44\u307f\u3092\u8a73\u3057\u304f\u7406\u89e3\u3059\u308b\u3053\u3068\u304c\u76ee\u6a19\u3067\u3059\u3002</p>","tags":["Transformer","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","Deep Learning","Attention"]},{"location":"LLM/00_illustrated_transformer/#_2","title":"\u524d\u63d0\u77e5\u8b58","text":"<p>\u3053\u306e\u8a18\u4e8b\u3092\u7406\u89e3\u3059\u308b\u305f\u3081\u306b\u63a8\u5968\u3055\u308c\u308b\u77e5\u8b58\uff1a</p> <ul> <li>\u6a5f\u68b0\u5b66\u7fd2\u306e\u57fa\u672c\u6982\u5ff5\uff08\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3001\u9806\u4f1d\u64ad\u3001\u9006\u4f1d\u64ad\uff09</li> <li>\u81ea\u7136\u8a00\u8a9e\u51e6\u7406\u306e\u57fa\u790e\uff08\u5358\u8a9e\u57cb\u3081\u8fbc\u307f\u3001\u7cfb\u5217\u5909\u63db\uff09</li> <li>\u7dda\u5f62\u4ee3\u6570\u306e\u57fa\u672c\uff08\u884c\u5217\u306e\u639b\u3051\u7b97\u3001\u30d9\u30af\u30c8\u30eb\u6f14\u7b97\uff09</li> <li>seq2seq\u30e2\u30c7\u30eb\u306e\u6982\u5ff5\uff08\u30a8\u30f3\u30b3\u30fc\u30c0\u30fc\u30fb\u30c7\u30b3\u30fc\u30c0\u30fc\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\uff09</li> </ul>","tags":["Transformer","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","Deep Learning","Attention"]},{"location":"LLM/00_illustrated_transformer/#_3","title":"\u80cc\u666f\u3068\u52d5\u6a5f","text":"","tags":["Transformer","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","Deep Learning","Attention"]},{"location":"LLM/00_illustrated_transformer/#_4","title":"\u7cfb\u5217\u30e2\u30c7\u30ea\u30f3\u30b0\u306e\u6b74\u53f2\u7684\u767a\u5c55","text":"<p>\u82f1\u8a9e\u304b\u3089\u65e5\u672c\u8a9e\u3078\u306e\u7ffb\u8a33\u3092\u5b66\u7fd2\u3059\u308b\u5834\u9762\u3092\u60f3\u50cf\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u5f93\u6765\u306e\u30a2\u30d7\u30ed\u30fc\u30c1\u306f\u3069\u306e\u3088\u3046\u306a\u3082\u306e\u3060\u3063\u305f\u3067\u3057\u3087\u3046\u304b\uff1f</p>","tags":["Transformer","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","Deep Learning","Attention"]},{"location":"LLM/00_illustrated_transformer/#rnnlstm","title":"\u5f93\u6765\u624b\u6cd5\u306e\u9650\u754c\uff1aRNN\u3001LSTM\u306e\u9010\u6b21\u51e6\u7406\u554f\u984c","text":"<p>Transformer\u304c\u767b\u5834\u3059\u308b\u524d\u3001\u7cfb\u5217\u30c7\u30fc\u30bf\u3092\u51e6\u7406\u3059\u308b\u4e3b\u6d41\u624b\u6cd5\u306f\u5faa\u74b0\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\uff08RNN\uff09\u3068\u9577\u77ed\u671f\u8a18\u61b6\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\uff08LSTM\uff09\u3067\u3057\u305f\u3002\u7c21\u5358\u306a\u4f8b\u3067\u7406\u89e3\u3057\u307e\u3057\u3087\u3046\u3002</p> <p>\u300cI love machine learning\u300d\u3092\u7ffb\u8a33\u3059\u308b\u5834\u5408\u3092\u8003\u3048\u3066\u307f\u307e\u3059\u3002</p> <pre><code># \u5f93\u6765\u306eRNN/LSTM\u306e\u51e6\u7406\u65b9\u5f0f\n# \u6642\u523b1: \"I\"\u3092\u51e6\u7406 \u2192 \u96a0\u308c\u72b6\u614bh1\u3092\u751f\u6210\n# \u6642\u523b2: h1\u306b\u57fa\u3065\u3044\u3066\"love\"\u3092\u51e6\u7406 \u2192 \u96a0\u308c\u72b6\u614bh2\u3092\u751f\u6210  \n# \u6642\u523b3: h2\u306b\u57fa\u3065\u3044\u3066\"machine\"\u3092\u51e6\u7406 \u2192 \u96a0\u308c\u72b6\u614bh3\u3092\u751f\u6210\n# \u6642\u523b4: h3\u306b\u57fa\u3065\u3044\u3066\"learning\"\u3092\u51e6\u7406 \u2192 \u96a0\u308c\u72b6\u614bh4\u3092\u751f\u6210\n</code></pre> <p>\u8c46\u77e5\u8b58\uff1a\u96a0\u308c\u72b6\u614b\uff08Hidden State\uff09\u3068\u306f</p> <p>\u96a0\u308c\u72b6\u614b\u306f\u3001RNN\u304c\u7cfb\u5217\u3092\u51e6\u7406\u3059\u308b\u969b\u306e\u300c\u8a18\u61b6\u300d\u3067\u3059\u3002\u3053\u308c\u307e\u3067\u306e\u3059\u3079\u3066\u306e\u6642\u523b\u306e\u60c5\u5831\u3092\u56fa\u5b9a\u30b5\u30a4\u30ba\u306e\u30d9\u30af\u30c8\u30eb\u306b\u5727\u7e2e\u3057\u3088\u3046\u3068\u3057\u307e\u3059\u3002\u7269\u8a9e\u3092\u805e\u304f\u969b\u306b\u3001\u8133\u304c\u4ee5\u524d\u306e\u3042\u3089\u3059\u3058\u3092\u8a18\u61b6\u3057\u3066\u73fe\u5728\u306e\u5185\u5bb9\u3092\u7406\u89e3\u3059\u308b\u306e\u3068\u4f3c\u3066\u3044\u307e\u3059\u3002</p> <p>\u9010\u6b21\u51e6\u7406\u306b\u3088\u308b\u554f\u984c\u70b9\uff1a</p> <ol> <li>\u4e26\u5217\u5316\u4e0d\u53ef\u80fd\uff1a\u300cI\u300d\u306e\u51e6\u7406\u304c\u5b8c\u4e86\u3057\u3066\u304b\u3089\u300clove\u300d\u3092\u51e6\u7406\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u3001\u73fe\u4ee3GPU\u306e\u4e26\u5217\u8a08\u7b97\u80fd\u529b\u3092\u6d3b\u7528\u3067\u304d\u306a\u3044</li> <li>\u60c5\u5831\u30dc\u30c8\u30eb\u30cd\u30c3\u30af\uff1a\u3059\u3079\u3066\u306e\u5c65\u6b74\u60c5\u5831\u3092\u56fa\u5b9a\u30b5\u30a4\u30ba\u306e\u96a0\u308c\u72b6\u614b\u306b\u5727\u7e2e\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b</li> <li>\u52fe\u914d\u6d88\u5931\uff1a\u975e\u5e38\u306b\u9577\u3044\u7cfb\u5217\u306b\u5bfe\u3057\u3066\u3001\u521d\u671f\u306e\u60c5\u5831\u304c\u5f8c\u65b9\u306b\u4f1d\u9054\u3055\u308c\u306b\u304f\u3044</li> </ol>","tags":["Transformer","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","Deep Learning","Attention"]},{"location":"LLM/00_illustrated_transformer/#_5","title":"\u4e26\u5217\u8a08\u7b97\u306e\u5fc5\u8981\u6027\uff1a\u306a\u305c\u4e26\u5217\u5b66\u7fd2\u304c\u91cd\u8981\u304b\uff1f","text":"<p>\u73fe\u4ee3\u306e\u6df1\u5c64\u5b66\u7fd2\u306b\u304a\u3044\u3066\u5b66\u7fd2\u52b9\u7387\u306f\u91cd\u8981\u306a\u8981\u6c42\u306e\u4e00\u3064\u3067\u3059\u3002\u4f8b\u3048\u3066\u8a00\u3046\u306a\u3089\uff1a</p> <ul> <li>\u5f93\u6765\u624b\u6cd5\uff1a\u6d41\u308c\u4f5c\u696d\u306e\u3088\u3046\u306b\u3001\u9806\u5e8f\u306b\u5f93\u3063\u3066\u4e00\u3064\u305a\u3064\u51e6\u7406\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b</li> <li>\u6c42\u3081\u3089\u308c\u308b\u3082\u306e\uff1a\u30c1\u30fc\u30e0\u5354\u50cd\u306e\u3088\u3046\u306b\u3001\u5168\u54e1\u304c\u540c\u6642\u306b\u4f5c\u696d\u3067\u304d\u308b\u4ed5\u7d44\u307f</li> </ul>","tags":["Transformer","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","Deep Learning","Attention"]},{"location":"LLM/00_illustrated_transformer/#_6","title":"\u9577\u8ddd\u96e2\u4f9d\u5b58\u306e\u8ab2\u984c\uff1a\u60c5\u5831\u4f1d\u9054\u306e\u30dc\u30c8\u30eb\u30cd\u30c3\u30af","text":"<p>\u3053\u306e\u82f1\u8a9e\u6587\u3092\u8003\u3048\u3066\u304f\u3060\u3055\u3044\uff1a \u300cThe cat, which we found last week in the garden behind the old house, is very friendly.\u300d</p> <p>\u5f93\u6765\u306eRNN\u304c\u300ccat\u300d\u3068\u300cis\u300d\u306e\u6587\u6cd5\u95a2\u4fc2\u3092\u7406\u89e3\u3059\u308b\u306b\u306f\u3001\u60c5\u5831\u304c\u4e2d\u9593\u306e\u3059\u3079\u3066\u306e\u5358\u8a9e\u3092\u7d4c\u7531\u3057\u3066\u4f1d\u9054\u3055\u308c\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff1a <pre><code>cat \u2192 which \u2192 we \u2192 found \u2192 last \u2192 week \u2192 in \u2192 the \u2192 garden \u2192 behind \u2192 the \u2192 old \u2192 house \u2192 is\n</code></pre></p> <p>\u5404\u30b9\u30c6\u30c3\u30d7\u3067\u60c5\u5831\u304c\u5931\u308f\u308c\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u3001\u4f1d\u8a00\u30b2\u30fc\u30e0\u306e\u3088\u3046\u306a\u72b6\u6cc1\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002</p>","tags":["Transformer","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","Deep Learning","Attention"]},{"location":"LLM/00_illustrated_transformer/#_7","title":"\u6ce8\u610f\u6a5f\u69cb\u306e\u767a\u60f3","text":"","tags":["Transformer","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","Deep Learning","Attention"]},{"location":"LLM/00_illustrated_transformer/#_8","title":"\u4eba\u9593\u306e\u6ce8\u610f\u529b\u3068\u306e\u985e\u6bd4\uff1a\u8aad\u66f8\u6642\u306e\u9078\u629e\u7684\u6ce8\u610f","text":"<p>\u6587\u7ae0\u3092\u8aad\u3080\u969b\u3001\u79c1\u305f\u3061\u306e\u6ce8\u610f\u529b\u306f\u3059\u3079\u3066\u306e\u6587\u5b57\u306b\u5747\u7b49\u306b\u5411\u3051\u3089\u308c\u308b\u308f\u3051\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u8aad\u8005\u306f\uff1a</p> <ul> <li>\u91cd\u8981\u306a\u30ad\u30fc\u30ef\u30fc\u30c9\u306b\u96c6\u4e2d\u3057</li> <li>\u6a5f\u80fd\u8a9e\uff08the\u3001a\u3001is\u306a\u3069\uff09\u306f\u7d20\u65e9\u304f\u6d41\u3057\u8aad\u307f\u3057</li> <li>\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u524d\u306e\u5185\u5bb9\u3092\u632f\u308a\u8fd4\u3063\u3066\u53c2\u7167\u3057\u307e\u3059</li> </ul> <p>\u6a5f\u68b0\u5b66\u7fd2\u306e\u6ce8\u610f\u6a5f\u69cb\u304c\u6a21\u5023\u3059\u308b\u306e\u306f\u3001\u307e\u3055\u306b\u3053\u306e\u9078\u629e\u7684\u6ce8\u610f\u80fd\u529b\u3067\u3059\u3002</p>","tags":["Transformer","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","Deep Learning","Attention"]},{"location":"LLM/00_illustrated_transformer/#_9","title":"\u6a5f\u68b0\u7ffb\u8a33\u306b\u304a\u3051\u308b\u30a2\u30e9\u30a4\u30e1\u30f3\u30c8\u554f\u984c\uff1a\u5358\u8a9e\u5bfe\u5fdc\u95a2\u4fc2","text":"<p>\u82f1\u65e5\u7ffb\u8a33\u3092\u8003\u3048\u3066\u307f\u307e\u3057\u3087\u3046\uff1a <pre><code>\u82f1\u8a9e: \"I love machine learning\"\n\u65e5\u672c\u8a9e: \"\u79c1\u306f\u6a5f\u68b0\u5b66\u7fd2\u304c\u597d\u304d\u3067\u3059\"\n\n\u30a2\u30e9\u30a4\u30e1\u30f3\u30c8\u95a2\u4fc2\uff1a\nI        \u2192 \u79c1\u306f\nlove     \u2192 \u597d\u304d\u3067\u3059\nmachine  \u2192 \u6a5f\u68b0\nlearning \u2192 \u5b66\u7fd2\n</code></pre></p> <p>\u8c46\u77e5\u8b58\uff1a\u30a2\u30e9\u30a4\u30e1\u30f3\u30c8\uff08Alignment\uff09\u3068\u306f</p> <p>\u30a2\u30e9\u30a4\u30e1\u30f3\u30c8\u3068\u306f\u3001\u539f\u8a00\u8a9e\u3068\u76ee\u6a19\u8a00\u8a9e\u3067\u3069\u306e\u8a9e\u5f59\u304c\u76f8\u4e92\u306b\u5bfe\u5fdc\u3059\u308b\u304b\u3092\u6c7a\u5b9a\u3059\u308b\u904e\u7a0b\u3067\u3059\u3002\u3053\u308c\u306f\u7ffb\u8a33\u306b\u304a\u3044\u3066\u6975\u3081\u3066\u91cd\u8981\u3067\u3001\u7570\u306a\u308b\u8a00\u8a9e\u306e\u8a9e\u9806\u304c\u5b8c\u5168\u306b\u7570\u306a\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u304b\u3089\u3067\u3059\u3002</p> <p>\u5f93\u6765\u624b\u6cd5\u3067\u306f\u3001\u3053\u306e\u3088\u3046\u306a\u8907\u96d1\u306a\u30a2\u30e9\u30a4\u30e1\u30f3\u30c8\u51e6\u7406\u304c\u56f0\u96e3\u3067\u3001\u7279\u306b\u8a9e\u9806\u306e\u9055\u3044\u304c\u5927\u304d\u3044\u5834\u5408\u306b\u554f\u984c\u3068\u306a\u308a\u307e\u3059\u3002</p>","tags":["Transformer","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","Deep Learning","Attention"]},{"location":"LLM/00_illustrated_transformer/#_10","title":"\u300c\u5168\u4f53\u60c5\u5831\u5727\u7e2e\u300d\u304b\u3089\u300c\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u30a2\u30af\u30bb\u30b9\u300d\u3078\u306e\u8ee2\u63db","text":"<p>\u5f93\u6765\u624b\u6cd5\u306e\u601d\u8003\uff1a - \u3059\u3079\u3066\u306e\u60c5\u5831\u3092\u4e00\u3064\u306e\u30d9\u30af\u30c8\u30eb\u306b\u5727\u7e2e - \u3053\u306e\u30d9\u30af\u30c8\u30eb\u304c\u3059\u3079\u3066\u306e\u5fc5\u8981\u60c5\u5831\u3092\u542b\u3080\u3053\u3068\u3092\u671f\u5f85</p> <p>\u6ce8\u610f\u6a5f\u69cb\u306e\u8003\u3048\u65b9\uff1a - \u3059\u3079\u3066\u306e\u539f\u59cb\u60c5\u5831\u3092\u4fdd\u6301 - \u5fc5\u8981\u306b\u5fdc\u3058\u3066\u52d5\u7684\u306b\u95a2\u9023\u60c5\u5831\u3092\u9078\u629e</p> <p>\u3053\u308c\u306f\u300c\u3059\u3079\u3066\u306e\u672c\u3092\u6697\u8a18\u3059\u308b\u300d\u304b\u3089\u300c\u512a\u308c\u305f\u56f3\u66f8\u9928\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u30b7\u30b9\u30c6\u30e0\u3092\u69cb\u7bc9\u3059\u308b\u300d\u3078\u306e\u8ee2\u63db\u306b\u4f8b\u3048\u3089\u308c\u307e\u3059\u3002</p>","tags":["Transformer","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","Deep Learning","Attention"]},{"location":"LLM/00_illustrated_transformer/#attention-is-all-you-need","title":"\u300cAttention is All You Need\u300d\u306e\u9769\u547d\u7684\u601d\u60f3","text":"","tags":["Transformer","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","Deep Learning","Attention"]},{"location":"LLM/00_illustrated_transformer/#_11","title":"\u518d\u5e30\u3068\u7573\u307f\u8fbc\u307f\u306e\u653e\u68c4\uff1a\u7d14\u7c8b\u6ce8\u610f\u529b\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3078\u306e\u5927\u80c6\u306a\u6311\u6226","text":"<p>2017\u5e74\u3001Google\u306e\u7814\u7a76\u30c1\u30fc\u30e0\u304c\u9769\u65b0\u7684\u306a\u30a2\u30a4\u30c7\u30a2\u3092\u63d0\u6848\u3057\u307e\u3057\u305f\uff1a</p> <p>\u300c\u6ce8\u610f\u6a5f\u69cb\u304c\u3053\u308c\u307b\u3069\u52b9\u679c\u7684\u306a\u3089\u3001\u5b8c\u5168\u306b\u6ce8\u610f\u529b\u306b\u57fa\u3065\u304f\u30e2\u30c7\u30eb\u3092\u69cb\u7bc9\u3057\u3066\u306f\u3069\u3046\u3060\u308d\u3046\u304b\uff1f\u300d</p> <p>\u3053\u306e\u30a2\u30a4\u30c7\u30a2\u306e\u9769\u65b0\u6027\uff1a</p> <ul> <li>RNN\u306e\u518d\u5e30\u69cb\u9020\u3092\u5b8c\u5168\u306b\u653e\u68c4</li> <li>CNN\u306e\u7573\u307f\u8fbc\u307f\u64cd\u4f5c\u3092\u5b8c\u5168\u306b\u653e\u68c4</li> <li>\u6ce8\u610f\u6a5f\u69cb\u306e\u307f\u306b\u4f9d\u5b58\u3057\u305f\u7cfb\u5217\u95a2\u4fc2\u306e\u30e2\u30c7\u30eb\u5316</li> </ul>","tags":["Transformer","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","Deep Learning","Attention"]},{"location":"LLM/00_illustrated_transformer/#_12","title":"\u89e3\u6c7a\u3055\u308c\u305f\u4e3b\u8981\u554f\u984c\uff1a\u4e26\u5217\u5316 + \u9577\u8ddd\u96e2\u4f9d\u5b58 + \u89e3\u91c8\u53ef\u80fd\u6027","text":"<p>Transformer\u306f\u4e09\u3064\u306e\u4e3b\u8981\u554f\u984c\u3092\u4e00\u6319\u306b\u89e3\u6c7a\u3057\u307e\u3057\u305f\uff1a</p> <ol> <li>\u4e26\u5217\u5316\uff1a\u3059\u3079\u3066\u306e\u4f4d\u7f6e\u304c\u540c\u6642\u306b\u8a08\u7b97\u53ef\u80fd</li> <li>\u9577\u8ddd\u96e2\u4f9d\u5b58\uff1a\u4efb\u610f\u306e\u4e8c\u3064\u306e\u4f4d\u7f6e\u9593\u306e\u76f4\u63a5\u63a5\u7d9a</li> <li>\u89e3\u91c8\u53ef\u80fd\u6027\uff1a\u6ce8\u610f\u91cd\u307f\u304c\u30e2\u30c7\u30eb\u6c7a\u5b9a\u306e\u900f\u660e\u5ea6\u3092\u63d0\u4f9b</li> </ol>","tags":["Transformer","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","Deep Learning","Attention"]},{"location":"LLM/00_illustrated_transformer/#_13","title":"\u5168\u4f53\u50cf","text":"<p>\u307e\u305a\u3001\u30e2\u30c7\u30eb\u3092\u4e00\u3064\u306e\u30d6\u30e9\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u3068\u3057\u3066\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u6a5f\u68b0\u7ffb\u8a33\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u306f\u3001\u3042\u308b\u8a00\u8a9e\u306e\u6587\u7ae0\u3092\u5165\u529b\u3068\u3057\u3066\u53d7\u3051\u53d6\u308a\u3001\u5225\u306e\u8a00\u8a9e\u3067\u306e\u7ffb\u8a33\u3092\u51fa\u529b\u3057\u307e\u3059\u3002</p> <p></p> <p>\u3053\u306eOptimus Prime\u306e\u3088\u3046\u306a\u7d20\u6674\u3089\u3057\u3044\u4ed5\u7d44\u307f\u3092\u958b\u3044\u3066\u898b\u308b\u3068\u3001\u30a8\u30f3\u30b3\u30fc\u30c0\u30fc\u90e8\u5206\u3001\u30c7\u30b3\u30fc\u30c0\u30fc\u90e8\u5206\u3001\u305d\u3057\u3066\u305d\u308c\u3089\u3092\u7e4b\u3050\u7d50\u5408\u90e8\u304c\u898b\u3048\u3066\u304d\u307e\u3059\u3002</p> <p></p> <p>\u30a8\u30f3\u30b3\u30fc\u30c0\u30fc\u90e8\u5206\u306f\u8907\u6570\u306e\u30a8\u30f3\u30b3\u30fc\u30c0\u30fc\u3092\u7a4d\u307f\u91cd\u306d\u305f\u69cb\u9020\u306b\u306a\u3063\u3066\u3044\u307e\u3059\uff08\u8ad6\u6587\u3067\u306f6\u5c64\u69cb\u6210\u30026\u3068\u3044\u3046\u6570\u5b57\u306b\u7279\u5225\u306a\u610f\u5473\u306f\u306a\u304f\u3001\u4ed6\u306e\u5c64\u6570\u3067\u3082\u5b9f\u9a13\u53ef\u80fd\u3067\u3059\uff09\u3002\u30c7\u30b3\u30fc\u30c0\u30fc\u90e8\u5206\u3082\u540c\u69d8\u306b\u3001\u540c\u3058\u6570\u306e\u30c7\u30b3\u30fc\u30c0\u30fc\u3092\u7a4d\u307f\u91cd\u306d\u305f\u69cb\u9020\u3067\u3059\u3002</p> <p></p> <p>\u30a8\u30f3\u30b3\u30fc\u30c0\u30fc\u306f\u3059\u3079\u3066\u540c\u3058\u69cb\u9020\u3092\u6301\u3061\u307e\u3059\uff08\u305f\u3060\u3057\u91cd\u307f\u306f\u5171\u6709\u3057\u307e\u305b\u3093\uff09\u3002\u305d\u308c\u305e\u308c\u304c2\u3064\u306e\u30b5\u30d6\u30ec\u30a4\u30e4\u30fc\u306b\u5206\u304b\u308c\u3066\u3044\u307e\u3059\u3002</p> <p></p> <p>\u30a8\u30f3\u30b3\u30fc\u30c0\u30fc\u306e\u5165\u529b\u306f\u6700\u521d\u306bself-attention\u5c64\u3092\u901a\u308a\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u7279\u5b9a\u306e\u5358\u8a9e\u3092\u30a8\u30f3\u30b3\u30fc\u30c9\u3059\u308b\u969b\u306b\u3001\u5165\u529b\u6587\u306e\u4ed6\u306e\u5358\u8a9e\u3092\u898b\u308b\u3053\u3068\u3092\u53ef\u80fd\u306b\u3059\u308b\u5c64\u3067\u3059\u3002self-attention\u306b\u3064\u3044\u3066\u306f\u5f8c\u307b\u3069\u8a73\u3057\u304f\u898b\u3066\u3044\u304d\u307e\u3059\u3002</p> <p>self-attention\u5c64\u306e\u51fa\u529b\u306f\u9806\u4f1d\u64ad\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\uff08feed-forward neural network\uff09\u306b\u4f9b\u7d66\u3055\u308c\u307e\u3059\u3002\u307e\u3063\u305f\u304f\u540c\u3058\u9806\u4f1d\u64ad\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u304c\u5404\u4f4d\u7f6e\u306b\u72ec\u7acb\u3057\u3066\u9069\u7528\u3055\u308c\u307e\u3059\u3002</p> <p>\u30c7\u30b3\u30fc\u30c0\u30fc\u306b\u3082\u540c\u69d8\u306e\u5c64\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u305d\u308c\u3089\u306e\u9593\u306bEncoder-Decoder Attention\uff08Cross Attention\uff09\u5c64\u304c\u914d\u7f6e\u3055\u308c\u3066\u304a\u308a\u3001\u30c7\u30b3\u30fc\u30c0\u30fc\u304c\u5165\u529b\u6587\u7ae0\u306e\u95a2\u9023\u3059\u308b\u90e8\u5206\u3092\u53c2\u7167\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\uff08seq2seq\u30e2\u30c7\u30eb\u3067\u306eAttention\u3068\u540c\u69d8\u3067\u3059\uff09\u3002</p> <p></p>","tags":["Transformer","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","Deep Learning","Attention"]},{"location":"LLM/00_illustrated_transformer/#_14","title":"\u53ef\u8996\u5316\u306b\u30c6\u30f3\u30bd\u30eb\u306e\u5c0e\u5165","text":"<p>\u30e2\u30c7\u30eb\u306e\u4e3b\u8981\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3092\u898b\u3066\u304d\u307e\u3057\u305f\u306e\u3067\u3001\u6b21\u306b\u69d8\u3005\u306a\u30d9\u30af\u30c8\u30eb/\u30c6\u30f3\u30bd\u30eb\u3068\u3001\u3053\u308c\u3089\u304c\u5404\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u9593\u3092\u3069\u306e\u3088\u3046\u306b\u6d41\u308c\u3066\u3001\u8a13\u7df4\u6e08\u307f\u30e2\u30c7\u30eb\u306e\u5165\u529b\u3092\u51fa\u529b\u306b\u5909\u63db\u3059\u308b\u304b\u3092\u898b\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002</p> <p>\u4e00\u822c\u7684\u306a\u81ea\u7136\u8a00\u8a9e\u51e6\u7406\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3068\u540c\u69d8\u306b\u3001\u57cb\u3081\u8fbc\u307f\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u4f7f\u3063\u3066\u5404\u5165\u529b\u5358\u8a9e\u3092\u30d9\u30af\u30c8\u30eb\u306b\u5909\u63db\u3059\u308b\u3068\u3053\u308d\u304b\u3089\u59cb\u3081\u307e\u3059\u3002\u3053\u306e\u5909\u63db\u3067\u306f\u3001\u307e\u305a\u8a9e\u5f59\u8868\u304b\u3089\u5404\u5358\u8a9e\u306b\u5bfe\u5fdc\u3059\u308bID\u3092\u53d6\u5f97\u3057\u3001\u305d\u306eID\u306b\u57fa\u3065\u3044\u3066\u57cb\u3081\u8fbc\u307f\u30d9\u30af\u30c8\u30eb\u3092\u751f\u6210\u3057\u307e\u3059\u3002</p> <p>\u8c46\u77e5\u8b58\uff1a\u8a9e\u5f59\u8868\u3068\u306f\uff1f</p> <p>\u8a9e\u5f59\u8868\u306f\u30e2\u30c7\u30eb\u304c\u7406\u89e3\u3067\u304d\u308b\u3059\u3079\u3066\u306e\u5358\u8a9e\u306e\u96c6\u5408\u3067\u3059\uff1a</p> <ul> <li>\u69cb\u7bc9\u65b9\u5f0f\uff1a\u8a13\u7df4\u30c7\u30fc\u30bf\u304b\u3089\u3059\u3079\u3066\u306e\u4e00\u610f\u8a9e\u5f59\u3092\u53ce\u96c6</li> <li>\u7279\u6b8a\u30c8\u30fc\u30af\u30f3\uff1a<code>&lt;pad&gt;</code>\uff08\u30d1\u30c7\u30a3\u30f3\u30b0\uff09\u3001<code>&lt;unk&gt;</code>\uff08\u672a\u77e5\u8a9e\uff09\u3001<code>&lt;start&gt;</code>\u3001<code>&lt;end&gt;</code></li> <li>\u30b5\u30a4\u30ba\u5236\u9650\uff1a\u901a\u5e38\u6700\u3082\u983b\u7e41\u306a30K-50K\u500b\u306e\u5358\u8a9e\u3092\u542b\u3080</li> <li>\u30a8\u30f3\u30b3\u30fc\u30c9\u65b9\u5f0f\uff1a\u5404\u5358\u8a9e\u304c\u4e00\u610f\u306eID\u3092\u5272\u308a\u5f53\u3066\u3089\u308c\u308b</li> </ul> <p> \u5404\u5358\u8a9e\u306f\u30b5\u30a4\u30ba512\u306e\u30d9\u30af\u30c8\u30eb\u306b\u57cb\u3081\u8fbc\u307e\u308c\u307e\u3059\u3002\u3053\u308c\u3089\u306e\u30d9\u30af\u30c8\u30eb\u3092\u30b7\u30f3\u30d7\u30eb\u306a\u30dc\u30c3\u30af\u30b9\u3067\u8868\u73fe\u3057\u307e\u3059\u3002</p> <p>\u5358\u8a9e\u57cb\u3081\u8fbc\u307f\u306f\u6700\u4e0b\u5c64\u306e\u30a8\u30f3\u30b3\u30fc\u30c0\u30fc\u3067\u306e\u307f\u884c\u308f\u308c\u307e\u3059\u3002\u3059\u3079\u3066\u306e\u30a8\u30f3\u30b3\u30fc\u30c0\u30fc\u306b\u5171\u901a\u3059\u308b\u4ed5\u69d8\u306f\u3001\u305d\u308c\u305e\u308c\u304c\u30b5\u30a4\u30ba512\u306e\u30d9\u30af\u30c8\u30eb\u5217\u3092\u53d7\u3051\u53d6\u308b\u3053\u3068\u3067\u3059\u3002\u6700\u4e0b\u5c64\u3067\u306f\u5358\u8a9e\u57cb\u3081\u8fbc\u307f\u30d9\u30af\u30c8\u30eb\u3092\u53d7\u3051\u53d6\u308a\u307e\u3059\u304c\u3001\u4e0a\u4f4d\u5c64\u3067\u306f\u76f4\u4e0b\u306e\u30a8\u30f3\u30b3\u30fc\u30c0\u30fc\u306e\u51fa\u529b\u3092\u53d7\u3051\u53d6\u308a\u307e\u3059\u3002\u3053\u306e\u30ea\u30b9\u30c8\u306e\u30b5\u30a4\u30ba\u306f\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u3057\u3066\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002\u57fa\u672c\u7684\u306b\u306f\u3001\u8a13\u7df4\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u5185\u306e\u6700\u9577\u6587\u306e\u9577\u3055\u306b\u306a\u308a\u307e\u3059\u3002</p> <p>\u5165\u529b\u7cfb\u5217\u306e\u5358\u8a9e\u3092\u57cb\u3081\u8fbc\u3093\u3060\u5f8c\u3001\u305d\u308c\u305e\u308c\u304c\u30a8\u30f3\u30b3\u30fc\u30c0\u30fc\u306e2\u3064\u306e\u5c64\u3092\u901a\u3063\u3066\u6d41\u308c\u307e\u3059\u3002</p> <p></p> <p>\u3053\u3053\u3067\u3001Transformer\u306e\u91cd\u8981\u306a\u7279\u6027\u306e\u4e00\u3064\u304c\u898b\u3048\u3066\u304d\u307e\u3059\u3002\u5404\u4f4d\u7f6e\u306e\u5358\u8a9e\u304c\u30a8\u30f3\u30b3\u30fc\u30c0\u30fc\u5185\u3067\u72ec\u81ea\u306e\u30d1\u30b9\u3092\u901a\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002self-attention\u5c64\u3067\u3053\u308c\u3089\u306e\u30d1\u30b9\u9593\u306b\u306f\u4f9d\u5b58\u95a2\u4fc2\u304c\u3042\u308a\u307e\u3059\u3002\u3057\u304b\u3057\u3001\u9806\u4f1d\u64ad\u5c64\u306b\u306f\u305d\u306e\u3088\u3046\u306a\u4f9d\u5b58\u95a2\u4fc2\u304c\u306a\u3044\u305f\u3081\u3001\u9806\u4f1d\u64ad\u5c64\u3092\u901a\u308b\u969b\u306b\u306f\u69d8\u3005\u306a\u30d1\u30b9\u3092\u4e26\u5217\u5b9f\u884c\u3067\u304d\u307e\u3059\u3002</p> <p>\u6b21\u306b\u3001\u3088\u308a\u77ed\u3044\u6587\u306e\u4f8b\u306b\u5207\u308a\u66ff\u3048\u3066\u3001\u30a8\u30f3\u30b3\u30fc\u30c0\u30fc\u306e\u5404\u30b5\u30d6\u30ec\u30a4\u30e4\u30fc\u3067\u4f55\u304c\u8d77\u3053\u308b\u304b\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002</p>","tags":["Transformer","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","Deep Learning","Attention"]},{"location":"LLM/00_illustrated_transformer/#_15","title":"\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u306e\u958b\u59cb\uff01","text":"<p>\u65e2\u306b\u8ff0\u3079\u305f\u3088\u3046\u306b\u3001\u30a8\u30f3\u30b3\u30fc\u30c0\u30fc\u306f\u5165\u529b\u3068\u3057\u3066\u30d9\u30af\u30c8\u30eb\u306e\u30ea\u30b9\u30c8\u3092\u53d7\u3051\u53d6\u308a\u307e\u3059\u3002\u3053\u308c\u3089\u306e\u30d9\u30af\u30c8\u30eb\u3092\u300cself-attention\u300d\u5c64\u306b\u6e21\u3057\u3001\u6b21\u306b\u9806\u4f1d\u64ad\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306b\u6e21\u3059\u3053\u3068\u3067\u3053\u306e\u30ea\u30b9\u30c8\u3092\u51e6\u7406\u3057\u3001\u51fa\u529b\u3092\u4e0a\u4f4d\u306e\u6b21\u306e\u30a8\u30f3\u30b3\u30fc\u30c0\u30fc\u306b\u9001\u308a\u307e\u3059\u3002</p> <p> \u5404\u4f4d\u7f6e\u306e\u5358\u8a9e\u306fSelf-Attention\u51e6\u7406\u3092\u884c\u3044\u307e\u3059\u3002\u305d\u306e\u5f8c\u3001\u305d\u308c\u305e\u308c\u304c\u9806\u4f1d\u64ad\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u901a\u308a\u307e\u3059\u3002\u5404\u30d9\u30af\u30c8\u30eb\u304c\u500b\u5225\u306b\u540c\u3058\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u901a\u308a\u307e\u3059\u3002</p>","tags":["Transformer","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","Deep Learning","Attention"]},{"location":"LLM/00_illustrated_transformer/#self-attention","title":"Self-Attention\u306e\u6982\u8981","text":"<p>\u300cSelf-Attention\u300d\u3068\u3044\u3046\u7528\u8a9e\u304c\u5f53\u7136\u306e\u3088\u3046\u306b\u4f7f\u308f\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u6c7a\u3057\u3066\u99b4\u67d3\u307f\u6df1\u3044\u6982\u5ff5\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u7b46\u8005\u81ea\u8eab\u3082\u300cAttention is All You Need\u300d\u8ad6\u6587\u3092\u8aad\u3080\u307e\u3067\u3001\u3053\u306e\u6982\u5ff5\u3092\u77e5\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002\u3069\u306e\u3088\u3046\u306b\u52d5\u4f5c\u3059\u308b\u304b\u3092\u89e3\u8aac\u3057\u307e\u3057\u3087\u3046\u3002</p> <p>\u7ffb\u8a33\u3057\u305f\u3044\u5165\u529b\u6587\u304c\u6b21\u306e\u3088\u3046\u306a\u3082\u306e\u3060\u3068\u3057\u307e\u3059\uff1a</p> <p>\u300c<code>The animal didn't cross the street because it was too tired</code>\u300d</p> <p>\u3053\u306e\u6587\u306e\u300cit\u300d\u306f\u4f55\u3092\u6307\u3057\u3066\u3044\u308b\u3067\u3057\u3087\u3046\u304b\uff1fstreet\u3092\u6307\u3057\u3066\u3044\u308b\u306e\u304b\u3001animal\u3092\u6307\u3057\u3066\u3044\u308b\u306e\u304b\uff1f\u4eba\u9593\u306b\u306f\u7c21\u5358\u306a\u8cea\u554f\u3067\u3059\u304c\u3001\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u3068\u3063\u3066\u306f\u305d\u308c\u307b\u3069\u7c21\u5358\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002</p> <p>\u30e2\u30c7\u30eb\u304c\u300cit\u300d\u3068\u3044\u3046\u5358\u8a9e\u3092\u51e6\u7406\u3059\u308b\u969b\u3001Self-Attention\u306b\u3088\u3063\u3066\u300cit\u300d\u3068\u300canimal\u300d\u3092\u95a2\u9023\u4ed8\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p> <p>\u30e2\u30c7\u30eb\u304c\u5404\u5358\u8a9e\uff08\u5165\u529b\u7cfb\u5217\u306e\u5404\u4f4d\u7f6e\uff09\u3092\u51e6\u7406\u3059\u308b\u969b\u3001self-attention\u306b\u3088\u308a\u5165\u529b\u7cfb\u5217\u306e\u4ed6\u306e\u4f4d\u7f6e\u3092\u898b\u3066\u3001\u3053\u306e\u5358\u8a9e\u306e\u3088\u308a\u826f\u3044\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u306b\u3064\u306a\u304c\u308b\u624b\u304c\u304b\u308a\u3092\u5f97\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p> <p>RNN\u306b\u99b4\u67d3\u307f\u304c\u3042\u308b\u65b9\u306f\u3001\u96a0\u308c\u72b6\u614b\u3092\u7dad\u6301\u3059\u308b\u3053\u3068\u3067\u3001RNN\u304c\u4ee5\u524d\u306b\u51e6\u7406\u3057\u305f\u5358\u8a9e/\u30d9\u30af\u30c8\u30eb\u306e\u8868\u73fe\u3092\u73fe\u5728\u51e6\u7406\u4e2d\u306e\u3082\u306e\u3068\u7d71\u5408\u3059\u308b\u65b9\u6cd5\u3092\u601d\u3044\u51fa\u3057\u3066\u304f\u3060\u3055\u3044\u3002Self-Attention\u306f\u3001Transformer\u304c\u4ed6\u306e\u95a2\u9023\u5358\u8a9e\u306e\u60c5\u5831\u3092\u73fe\u5728\u51e6\u7406\u4e2d\u306e\u5358\u8a9e\u306b\u7d44\u307f\u8fbc\u3080\u305f\u3081\u306e\u4ed5\u7d44\u307f\u3067\u3059\u3002</p> <p></p> <p>5\u5c64\u76ee\u306e\u30a8\u30f3\u30b3\u30fc\u30c0\u30fc\uff08\u6700\u4e0a\u4f4d\u5c64\uff09\u3067\u300cit\u300d\u3068\u3044\u3046\u5358\u8a9e\u3092\u30a8\u30f3\u30b3\u30fc\u30c9\u3059\u308b\u969b\u3001Attention\u6a5f\u69cb\u304c\u300cThe Animal\u300d\u306b\u6ce8\u76ee\u3057\u3001\u305d\u306e\u60c5\u5831\u3092\u300cit\u300d\u306e\u8868\u73fe\u306b\u7d44\u307f\u8fbc\u3093\u3067\u3044\u308b\u69d8\u5b50\u3092\u793a\u3057\u3066\u3044\u307e\u3059\u3002</p> <p>Transformer\u30e2\u30c7\u30eb\u3092\u8aad\u307f\u8fbc\u3093\u3067\u3001\u3053\u306e\u30a4\u30f3\u30bf\u30e9\u30af\u30c6\u30a3\u30d6\u306a\u53ef\u8996\u5316\u3092\u4f7f\u3063\u3066\u691c\u8a3c\u3067\u304d\u308bTensor2Tensor notebook\u3082\u305c\u3072\u30c1\u30a7\u30c3\u30af\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002</p>","tags":["Transformer","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","Deep Learning","Attention"]},{"location":"LLM/00_illustrated_transformer/#self-attention_1","title":"Self-Attention\u306e\u8a73\u7d30","text":"<p>\u307e\u305a\u3001\u30d9\u30af\u30c8\u30eb\u3092\u4f7f\u7528\u3057\u3066self-attention\u3092\u8a08\u7b97\u3059\u308b\u65b9\u6cd5\u3092\u898b\u3066\u304b\u3089\u3001\u5b9f\u969b\u306e\u5b9f\u88c5\uff08\u884c\u5217\u3092\u4f7f\u7528\uff09\u3092\u898b\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002</p> <p>\u4f8b\u3068\u3057\u3066\u300cThinking Machines\u300d\u3068\u3044\u30462\u5358\u8a9e\u306e\u6587\u3092\u4f7f\u7528\u3057\u307e\u3059\uff1a</p> <ul> <li>thinking \u2192 x1 [512]</li> <li>machines \u2192 x2 [512]</li> </ul> <p>self-attention\u3092\u8a08\u7b97\u3059\u308b\u7b2c1\u30b9\u30c6\u30c3\u30d7\u306f\u3001\u30a8\u30f3\u30b3\u30fc\u30c0\u30fc\u306e\u5404\u5165\u529b\u30d9\u30af\u30c8\u30eb\uff08\u3053\u306e\u5834\u5408\u3001\u5404\u5358\u8a9e\u306e\u57cb\u3081\u8fbc\u307f\uff09\u304b\u30893\u3064\u306e\u30d9\u30af\u30c8\u30eb\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u3067\u3059\u3002\u5404\u5358\u8a9e\u306b\u3064\u3044\u3066\u3001Query\uff08\u30af\u30a8\u30ea\uff09\u30d9\u30af\u30c8\u30eb\u3001Key\uff08\u30ad\u30fc\uff09\u30d9\u30af\u30c8\u30eb\u3001Value\uff08\u30d0\u30ea\u30e5\u30fc\uff09\u30d9\u30af\u30c8\u30eb\u3092\u4f5c\u6210\u3057\u307e\u3059\uff1a</p> <p></p> <p>\u3053\u3053\u3067\u3001WQ\u3001WK\u3001WV\u306f\u5b66\u7fd2\u53ef\u80fd\u306a\u91cd\u307f\u884c\u5217\u3067\u3059\uff1a</p> <ul> <li>WQ: [512, 64] - Query\u7528\u91cd\u307f\u884c\u5217</li> <li>WK: [512, 64] - Key\u7528\u91cd\u307f\u884c\u5217  </li> <li>WV: [512, 64] - Value\u7528\u91cd\u307f\u884c\u5217</li> </ul> <p>x1\u306bWQ\u91cd\u307f\u884c\u5217\u3092\u639b\u3051\u308b\u3068\u3001\u305d\u306e\u5358\u8a9e\u306b\u95a2\u9023\u3059\u308b\u300cquery\u300d\u30d9\u30af\u30c8\u30eb\u3067\u3042\u308bq1\u304c\u751f\u6210\u3055\u308c\u307e\u3059\u3002\u6700\u7d42\u7684\u306b\u3001\u5165\u529b\u6587\u306e\u5404\u5358\u8a9e\u306b\u3064\u3044\u3066\u300cquery\u300d\u3001\u300ckey\u300d\u3001\u300cvalue\u300d\u306e\u5c04\u5f71\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002</p> <ul> <li>thinking: q1 = x1 \u00d7 WQ \u2192 [64], k1 = x1 \u00d7 WK \u2192 [64], v1 = x1 \u00d7 WV \u2192 [64]</li> <li>machines: q2 = x2 \u00d7 WQ \u2192 [64], k2 = x2 \u00d7 WK \u2192 [64], v2 = x2 \u00d7 WV \u2192 [64]</li> </ul> <p>\u300cquery\u300d\u3001\u300ckey\u300d\u3001\u300cvalue\u300d\u30d9\u30af\u30c8\u30eb\u3068\u306f\u4f55\u3067\u3057\u3087\u3046\u304b\uff1f</p> <p>\u3053\u308c\u3089\u306f\u3001attention\u306e\u8a08\u7b97\u3068\u601d\u8003\u306b\u6709\u7528\u306a\u62bd\u8c61\u5316\u3067\u3059\u3002\u4ee5\u4e0b\u3067attention\u304c\u3069\u306e\u3088\u3046\u306b\u8a08\u7b97\u3055\u308c\u308b\u304b\u3092\u8aad\u307f\u9032\u3081\u308c\u3070\u3001\u3053\u308c\u3089\u306e\u5404\u30d9\u30af\u30c8\u30eb\u304c\u679c\u305f\u3059\u5f79\u5272\u306b\u3064\u3044\u3066\u77e5\u308b\u5fc5\u8981\u304c\u3042\u308b\u3053\u3068\u306f\u307b\u307c\u5168\u3066\u5206\u304b\u308b\u3067\u3057\u3087\u3046\u3002</p> <p>self-attention\u3092\u8a08\u7b97\u3059\u308b\u7b2c2\u30b9\u30c6\u30c3\u30d7\u306f\u3001\u30b9\u30b3\u30a2\u3092\u8a08\u7b97\u3059\u308b\u3053\u3068\u3067\u3059\u3002\u3053\u306e\u4f8b\u306e\u6700\u521d\u306e\u5358\u8a9e\u300cThinking\u300d\u306eself-attention\u3092\u8a08\u7b97\u3059\u308b\u3068\u3057\u307e\u3057\u3087\u3046\u3002\u5165\u529b\u6587\u306e\u5404\u5358\u8a9e\u3092\u3053\u306e\u5358\u8a9e\u306b\u5bfe\u3057\u3066\u30b9\u30b3\u30a2\u5316\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u30b9\u30b3\u30a2\u306f\u3001\u7279\u5b9a\u306e\u4f4d\u7f6e\u3067\u5358\u8a9e\u3092\u30a8\u30f3\u30b3\u30fc\u30c9\u3059\u308b\u969b\u306b\u3001\u5165\u529b\u6587\u306e\u4ed6\u306e\u90e8\u5206\u306b\u3069\u306e\u7a0b\u5ea6\u7126\u70b9\u3092\u5f53\u3066\u308b\u304b\u3092\u6c7a\u5b9a\u3057\u307e\u3059\u3002</p> <p>\u30b9\u30b3\u30a2\u306f\u3001query\u30d9\u30af\u30c8\u30eb\u3068\u3001\u30b9\u30b3\u30a2\u5316\u3059\u308b\u5404\u5358\u8a9e\u306ekey\u30d9\u30af\u30c8\u30eb\u306e\u5185\u7a4d\u3092\u53d6\u308b\u3053\u3068\u3067\u8a08\u7b97\u3055\u308c\u307e\u3059\uff1a</p> <ul> <li>score\u2081\u2081 = q1 \u2022 k1 \u2192 \u30b9\u30ab\u30e9\u30fc\u5024</li> <li>score\u2081\u2082 = q1 \u2022 k2 \u2192 \u30b9\u30ab\u30e9\u30fc\u5024</li> </ul> <p>\u5404\u30b9\u30b3\u30a2\u306f64\u6b21\u5143\u30d9\u30af\u30c8\u30eb\u540c\u58eb\u306e\u5185\u7a4d\u306b\u3088\u308a\u3001\u5358\u4e00\u306e\u6570\u5024\u3068\u3057\u3066\u8a08\u7b97\u3055\u308c\u307e\u3059\u3002</p> <p></p> <p>\u8c46\u77e5\u8b58\uff1a\u5185\u7a4d\u306e\u5e7e\u4f55\u5b66\u7684\u610f\u5473</p> <p>\u5185\u7a4d\u306f\u4e8c\u3064\u306e\u30d9\u30af\u30c8\u30eb\u306e\u985e\u4f3c\u7a0b\u5ea6\u3092\u6e2c\u5b9a\u3057\u307e\u3059\uff1a</p> <ul> <li>\u5185\u7a4d\u304c\u5927 \u2192 \u30d9\u30af\u30c8\u30eb\u65b9\u5411\u304c\u985e\u4f3c \u2192 \u5185\u5bb9\u304c\u95a2\u9023</li> <li>\u5185\u7a4d\u304c\u5c0f \u2192 \u30d9\u30af\u30c8\u30eb\u65b9\u5411\u304c\u7570\u306a\u308b \u2192 \u5185\u5bb9\u304c\u7121\u95a2\u9023</li> <li>\u5185\u7a4d\u304c0 \u2192 \u30d9\u30af\u30c8\u30eb\u304c\u5782\u76f4 \u2192 \u5b8c\u5168\u306b\u7121\u95a2\u4fc2</li> </ul> <p>\u5e7e\u4f55\u5b66\u7684\u306b\u3001\u5185\u7a4d\u306f <code>|a| \u00d7 |b| \u00d7 cos(\u03b8)</code> \u306b\u7b49\u3057\u304f\u3001\u03b8\u306f\u4e8c\u3064\u306e\u30d9\u30af\u30c8\u30eb\u306e\u593e\u89d2\u3067\u3059\u3002</p> <p>\u306a\u305c\u5185\u7a4d\u3092\u9078\u629e\u3057\u3066\u4ed6\u306e\u985e\u4f3c\u5ea6\u8a08\u7b97\u3067\u306f\u306a\u3044\u306e\u304b\uff1f</p> <ol> <li>\u8a08\u7b97\u52b9\u7387\uff1a\u884c\u5217\u4e57\u6cd5\u304c\u9ad8\u5ea6\u306b\u4e26\u5217\u5316\u53ef\u80fd</li> <li>\u6570\u5b66\u7684\u6027\u8cea\uff1a\u52fe\u914d\u8a08\u7b97\u304c\u7c21\u5358\u3067\u3001\u8a13\u7df4\u304c\u5b89\u5b9a</li> <li>\u62e1\u5f35\u53ef\u80fd\u6027\uff1a\u9ad8\u6b21\u5143\u30d9\u30af\u30c8\u30eb\u306b\u3082\u540c\u69d8\u306b\u9069\u7528</li> </ol> <p>\u7b2c3\u3068\u7b2c4\u30b9\u30c6\u30c3\u30d7\u306f\u3001\u30b9\u30b3\u30a2\u30928\u3067\u5272\u308b\uff08\u8ad6\u6587\u3067\u4f7f\u7528\u3055\u308c\u305fkey\u30d9\u30af\u30c8\u30eb\u306e\u6b21\u5143\u306e\u5e73\u65b9\u6839 - 64\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u3088\u308a\u5b89\u5b9a\u3057\u305f\u52fe\u914d\u304c\u5f97\u3089\u308c\u307e\u3059\u3002\u4ed6\u306e\u5024\u3082\u53ef\u80fd\u3067\u3059\u304c\u3001\u3053\u308c\u304c\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u3059\uff09\u3001\u305d\u306e\u5f8c\u7d50\u679c\u3092softmax\u6f14\u7b97\u306b\u901a\u3059\u3053\u3068\u3067\u3059\u3002Softmax\u306f\u30b9\u30b3\u30a2\u3092\u6b63\u898f\u5316\u3057\u3001\u3059\u3079\u3066\u6b63\u306e\u5024\u306b\u306a\u308a\u3001\u5408\u8a08\u304c1\u306b\u306a\u308a\u307e\u3059\u3002</p> <p>\u8c46\u77e5\u8b58\uff1a\u306a\u305c\u221ad_k\u3067\u9664\u7b97\u3059\u308b\u306e\u304b\uff1f</p> <p>\u3053\u308c\u306f\u30b9\u30b1\u30fc\u30eb\u5185\u7a4d\u6ce8\u610f\u529b\u306e\u91cd\u8981\u306a\u6280\u8853\uff1a</p> <ul> <li>\u6b21\u5143d_k\u304c\u5927\u304d\u3044\u6642\u3001\u5185\u7a4d\u306e\u5206\u6563\u304c\u5927\u304d\u304f\u306a\u308b</li> <li>\u5927\u304d\u306a\u5185\u7a4d\u5024\u306fsoftmax\u5f8c\u306b\u6975\u7aef\u306a\u91cd\u307f\u5206\u5e03\u3092\u751f\u6210</li> <li>\u221ad_k\u3067\u9664\u7b97\u3059\u308b\u3053\u3068\u3067\u5185\u7a4d\u306e\u5206\u6563\u3092\u5236\u5fa1\u3057\u3001\u52fe\u914d\u3092\u3088\u308a\u5b89\u5b9a\u3055\u305b\u308b</li> </ul> <p>\u6570\u5b66\u7684\u306b\uff1a\u30d9\u30af\u30c8\u30eb\u8981\u7d20\u304c\u72ec\u7acb\u540c\u5206\u5e03\u306e\u5834\u5408\u3001d_k\u6b21\u5143\u5185\u7a4d\u306e\u5206\u6563\u306f\u7d04d_k\u3067\u3059\u3002</p> <p></p> <p>\u3053\u306esoftmax\u30b9\u30b3\u30a2\u306f\u3001\u3053\u306e\u4f4d\u7f6e\u3067\u5404\u5358\u8a9e\u304c\u3069\u306e\u7a0b\u5ea6\u8868\u73fe\u3055\u308c\u308b\u304b\u3092\u6c7a\u5b9a\u3057\u307e\u3059\u3002\u660e\u3089\u304b\u306b\u3001\u3053\u306e\u4f4d\u7f6e\u306e\u5358\u8a9e\u304c\u6700\u3082\u9ad8\u3044softmax\u30b9\u30b3\u30a2\u3092\u6301\u3061\u307e\u3059\u304c\u3001\u6642\u306b\u306f\u73fe\u5728\u306e\u5358\u8a9e\u306b\u95a2\u9023\u3059\u308b\u5225\u306e\u5358\u8a9e\u306b\u6ce8\u610f\u3092\u6255\u3046\u3053\u3068\u304c\u6709\u7528\u3067\u3059\u3002</p> <p>\u8c46\u77e5\u8b58\uff1aSoftmax\u95a2\u6570\u8a73\u89e3</p> <p>Softmax\u306f\u4efb\u610f\u306e\u5b9f\u6570\u30d9\u30af\u30c8\u30eb\u3092\u78ba\u7387\u5206\u5e03\u306b\u5909\u63db\uff1a</p> <ul> <li>\u51fa\u529b\u7bc4\u56f2\uff1a\u5404\u5024\u306f(0,1)\u9593</li> <li>\u7dcf\u548c\u304c1\uff1a\u3059\u3079\u3066\u306e\u91cd\u307f\u3092\u52a0\u3048\u308b\u30681\u306b\u7b49\u3057\u3044</li> <li>\u9806\u5e8f\u4fdd\u6301\uff1a\u5143\u3005\u5927\u304d\u3044\u5024\u306f\u5909\u63db\u5f8c\u3082\u5927\u304d\u3044</li> <li>\u6ed1\u3089\u304b\u306a\u5206\u5e03\uff1a\u786c\u76f4\u306a0/1\u9078\u629e\u3092\u751f\u6210\u3057\u306a\u3044</li> </ul> <p>Softmax\u306e\u6570\u5b66\u8868\u73fe\u5f0f\uff1a<code>softmax(x\u1d62) = exp(x\u1d62) / \u03a3\u2c7cexp(x\u2c7c)</code></p> <p>\u7b2c5\u30b9\u30c6\u30c3\u30d7\u306f\u3001\u5404value\u30d9\u30af\u30c8\u30eb\u306bsoftmax\u30b9\u30b3\u30a2\u3092\u639b\u3051\u3066\u91cd\u307f\u4ed8\u3051\u3057\u307e\u3059\u3002\u3053\u306e\u64cd\u4f5c\u306b\u3088\u308a\u3001\u91cd\u8981\u306a\u5358\u8a9e\u306e\u60c5\u5831\u306f\u4fdd\u6301\u3055\u308c\u3001\u95a2\u9023\u6027\u306e\u4f4e\u3044\u5358\u8a9e\u306e\u60c5\u5831\u306f\u6291\u5236\u3055\u308c\u307e\u3059\uff08\u4f8b\u3048\u3070\u3001\u91cd\u8981\u306a\u5358\u8a9e\u306b\u306f1.0\u306b\u8fd1\u3044\u5024\u3001\u95a2\u9023\u6027\u306e\u4f4e\u3044\u5358\u8a9e\u306b\u306f0.001\u306e\u3088\u3046\u306a\u5c0f\u3055\u306a\u5024\u304c\u639b\u3051\u3089\u308c\u307e\u3059\uff09\u3002</p> <p>\u7b2c6\u30b9\u30c6\u30c3\u30d7\u306f\u3001\u91cd\u307f\u4ed8\u3051\u3055\u308c\u305fvalue\u30d9\u30af\u30c8\u30eb\u3092\u3059\u3079\u3066\u8db3\u3057\u5408\u308f\u305b\u308b\u3053\u3068\u3067\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u3053\u306e\u4f4d\u7f6e\uff08\u6700\u521d\u306e\u5358\u8a9e\uff09\u306b\u304a\u3051\u308bSelf-Attention\u5c64\u306e\u6700\u7d42\u51fa\u529b\u304c\u5f97\u3089\u308c\u307e\u3059\u3002</p> <p></p> <p>\u3053\u308c\u3067self-attention\u306e\u8a08\u7b97\u306f\u5b8c\u4e86\u3067\u3059\u3002\u7d50\u679c\u306e\u30d9\u30af\u30c8\u30eb\u306f\u9806\u4f1d\u64ad\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306b\u9001\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3057\u304b\u3057\u3001\u5b9f\u969b\u306e\u5b9f\u88c5\u3067\u306f\u3001\u3088\u308a\u9ad8\u901f\u306a\u51e6\u7406\u306e\u305f\u3081\u306b\u3053\u306e\u8a08\u7b97\u306f\u884c\u5217\u5f62\u5f0f\u3067\u884c\u308f\u308c\u307e\u3059\u3002\u5358\u8a9e\u30ec\u30d9\u30eb\u3067\u306e\u8a08\u7b97\u306e\u76f4\u611f\u3092\u898b\u3066\u304d\u307e\u3057\u305f\u306e\u3067\u3001\u4eca\u5ea6\u306f\u305d\u308c\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002</p>","tags":["Transformer","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","Deep Learning","Attention"]},{"location":"LLM/00_illustrated_transformer/#self-attention_2","title":"Self-Attention\u306e\u884c\u5217\u8a08\u7b97","text":"<p>\u7b2c1\u30b9\u30c6\u30c3\u30d7\u306f\u3001Query\u3001Key\u3001Value\u306e\u884c\u5217\u3092\u8a08\u7b97\u3059\u308b\u3053\u3068\u3067\u3059\u3002\u57cb\u3081\u8fbc\u307f\u3092\u884c\u5217X\u306b\u30d1\u30c3\u30af\u3057\u3001\u8a13\u7df4\u3057\u305f\u91cd\u307f\u884c\u5217\uff08WQ\u3001WK\u3001WV\uff09\u3092\u639b\u3051\u308b\u3053\u3068\u3067\u884c\u3044\u307e\u3059\u3002</p> <p></p> <p>X\u884c\u5217\u306e\u5404\u884c\u306f\u3001\u5165\u529b\u6587\u306e\u5358\u8a9e\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u3059\u3002\u518d\u3073\u3001\u57cb\u3081\u8fbc\u307f\u30d9\u30af\u30c8\u30eb\uff08512\u3001\u307e\u305f\u306f\u56f3\u306e4\u30dc\u30c3\u30af\u30b9\uff09\u3068q/k/v\u30d9\u30af\u30c8\u30eb\uff0864\u3001\u307e\u305f\u306f\u56f3\u306e3\u30dc\u30c3\u30af\u30b9\uff09\u306e\u30b5\u30a4\u30ba\u306e\u9055\u3044\u304c\u898b\u3048\u307e\u3059\u3002</p> <p>2\u5358\u8a9e\u306e\u4f8b\u306e\u5834\u5408\uff1a</p> <ul> <li>X: [2, 512] - \u5165\u529b\u57cb\u3081\u8fbc\u307f\u884c\u5217</li> <li>WQ: [512, 64] - Query\u7528\u91cd\u307f\u884c\u5217</li> <li>WK: [512, 64] - Key\u7528\u91cd\u307f\u884c\u5217  </li> <li>WV: [512, 64] - Value\u7528\u91cd\u307f\u884c\u5217</li> </ul> <p>\u884c\u5217\u8a08\u7b97\uff1a</p> <ul> <li>Q = X \u00d7 WQ \u2192 [2, 64]</li> <li>K = X \u00d7 WK \u2192 [2, 64]</li> <li>V = X \u00d7 WV \u2192 [2, 64]</li> </ul> <p>\u6700\u5f8c\u306b\u3001\u884c\u5217\u3092\u6271\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u30b9\u30c6\u30c3\u30d72\u304b\u30896\u3092\u4e00\u3064\u306e\u5f0f\u306b\u307e\u3068\u3081\u3066\u3001Self-Attention\u5c64\u306e\u51fa\u529b\u3092\u8a08\u7b97\u3067\u304d\u307e\u3059\uff1a</p> <pre><code>Attention(Q,K,V) = softmax(QK^T / \u221ad_k) \u00d7 V\n</code></pre> <p></p> <p>\u884c\u5217\u5f62\u5f0f\u3067\u306eself-attention\u8a08\u7b97</p> <p>\u5177\u4f53\u7684\u306ashape\u5909\u5316\uff1a <pre><code>1. QK^T: [2, 64] \u00d7 [64, 2] \u2192 [2, 2] (attention scores)\n2. softmax(QK^T / \u221ad_k): [2, 2] \u2192 [2, 2] (attention weights)  \n3. \u6700\u7d42\u7d50\u679c: [2, 2] \u00d7 [2, 64] \u2192 [2, 64] (weighted values)\n</code></pre></p> <p>\u8c46\u77e5\u8b58\uff1a\u884c\u5217\u306e\u7a4d\u306e\u5fa9\u7fd2</p> <p>\u884c\u5217\u306e\u7a4d A \u00d7 B \u306e\u6761\u4ef6\uff1aA\u306e\u5217\u6570 = B\u306e\u884c\u6570</p> <ul> <li>A\u304c (m\u00d7n) \u884c\u5217\u3001B\u304c (n\u00d7p) \u884c\u5217\u306e\u5834\u5408</li> <li>\u7d50\u679cC\u306f (m\u00d7p) \u884c\u5217\u306b\u306a\u308b</li> <li>C[i,j] = \u03a3\u2096 A[i,k] \u00d7 B[k,j]</li> </ul>","tags":["Transformer","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","Deep Learning","Attention"]},{"location":"LLM/00_illustrated_transformer/#multi-head-attention","title":"Multi-Head Attention\uff08\u8907\u6570\u30d8\u30c3\u30c9\u6ce8\u610f\u529b\uff09","text":"<p>\u8ad6\u6587\u3067\u306f\u3001Multi-Head Attention\u3068\u547c\u3070\u308c\u308b\u6a5f\u69cb\u3092\u8ffd\u52a0\u3059\u308b\u3053\u3068\u3067\u3001Self-Attention\u5c64\u3092\u3055\u3089\u306b\u6d17\u7df4\u3055\u305b\u307e\u3057\u305f\u3002\u3053\u308c\u306b\u3088\u308a\u3001Attention\u5c64\u306e\u6027\u80fd\u304c2\u3064\u306e\u65b9\u6cd5\u3067\u5411\u4e0a\u3057\u307e\u3059\uff1a</p> <ol> <li> <p>\u30e2\u30c7\u30eb\u304c\u7570\u306a\u308b\u4f4d\u7f6e\u306b\u7126\u70b9\u3092\u5f53\u3066\u308b\u80fd\u529b\u3092\u62e1\u5f35\uff1a\u4e0a\u8a18\u306e\u4f8b\u3067\u306f\u3001z1\u306b\u306f\u4ed6\u306e\u3059\u3079\u3066\u306e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u304c\u5c11\u3057\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u5b9f\u969b\u306e\u5358\u8a9e\u81ea\u4f53\u304c\u652f\u914d\u7684\u306b\u306a\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002\u300cThe animal didn't cross the street because it was too tired\u300d\u306e\u3088\u3046\u306a\u6587\u3092\u7ffb\u8a33\u3059\u308b\u5834\u5408\u3001\u300cit\u300d\u304c\u3069\u306e\u5358\u8a9e\u3092\u6307\u3059\u304b\u3092\u77e5\u308b\u3053\u3068\u306f\u91cd\u8981\u3067\u3059\u3002</p> </li> <li> <p>Attention\u5c64\u306b\u8907\u6570\u306e\u300c\u8868\u73fe\u30b5\u30d6\u7a7a\u9593\u300d\u3092\u63d0\u4f9b\uff1a\u6b21\u306b\u898b\u308b\u3088\u3046\u306b\u3001Multi-Head Attention\u3067\u306f1\u3064\u3060\u3051\u3067\u306a\u304f\u3001\u8907\u6570\u306eQuery/Key/Value\u91cd\u307f\u884c\u5217\u306e\u30bb\u30c3\u30c8\u304c\u3042\u308a\u307e\u3059\uff08Transformer\u306f8\u500b\u306eAttention\u30d8\u30c3\u30c9\u3092\u4f7f\u7528\u3059\u308b\u305f\u3081\u3001\u5404\u30a8\u30f3\u30b3\u30fc\u30c0\u30fc/\u30c7\u30b3\u30fc\u30c0\u30fc\u306b8\u30bb\u30c3\u30c8\u6301\u3064\u3053\u3068\u306b\u306a\u308a\u307e\u3059\uff09\u3002\u3053\u308c\u3089\u306e\u91cd\u307f\u884c\u5217\u30bb\u30c3\u30c8\u306f\u30e9\u30f3\u30c0\u30e0\u306b\u521d\u671f\u5316\u3055\u308c\u307e\u3059\u3002\u5b66\u7fd2\u5f8c\u3001\u5404\u30bb\u30c3\u30c8\u306f\u5165\u529b\u57cb\u3081\u8fbc\u307f\uff08\u307e\u305f\u306f\u4e0b\u4f4d\u5c64\u306e\u30a8\u30f3\u30b3\u30fc\u30c0\u30fc/\u30c7\u30b3\u30fc\u30c0\u30fc\u304b\u3089\u306e\u30d9\u30af\u30c8\u30eb\uff09\u3092\u7570\u306a\u308b\u8868\u73fe\u30b5\u30d6\u7a7a\u9593\u306b\u6295\u5f71\u3059\u308b\u5f79\u5272\u3092\u679c\u305f\u3057\u307e\u3059\u3002</p> </li> </ol> <p> \u30de\u30eb\u30c1\u30d8\u30c3\u30c9attention\u3067\u306f\u3001\u5404\u30d8\u30c3\u30c9\u306b\u5bfe\u3057\u3066\u5225\u3005\u306eQ/K/V\u91cd\u307f\u884c\u5217\u3092\u7dad\u6301\u3057\u3001\u7570\u306a\u308bQ/K/V\u884c\u5217\u306b\u306a\u308a\u307e\u3059\u3002\u4ee5\u524d\u3068\u540c\u69d8\u306b\u3001X\u306bWQ/WK/WV\u884c\u5217\u3092\u639b\u3051\u3066Q/K/V\u884c\u5217\u3092\u751f\u6210\u3057\u307e\u3059\u3002</p> <p>\u4e0a\u8a18\u3067\u8aac\u660e\u3057\u305f\u306e\u3068\u540c\u3058self-attention\u8a08\u7b97\u3092\u3001\u7570\u306a\u308b\u91cd\u307f\u884c\u5217\u30678\u56de\u7570\u306a\u3063\u3066\u884c\u3046\u3068\u30018\u3064\u306e\u7570\u306a\u308bZ\u884c\u5217\u3092\u5f97\u307e\u3059\u3002</p> <p></p> <p>\u3053\u3053\u3067\u554f\u984c\u304c\u751f\u3058\u307e\u3059\u3002\u6b21\u306e\u30d5\u30a3\u30fc\u30c9\u30d5\u30a9\u30ef\u30fc\u30c9\u5c64\u306f8\u3064\u306e\u884c\u5217\u3092\u53d7\u3051\u53d6\u308b\u3053\u3068\u3092\u60f3\u5b9a\u3057\u3066\u304a\u3089\u305a\u3001\u5358\u4e00\u306e\u884c\u5217\uff08\u5404\u5358\u8a9e\u306b\u5bfe\u3059\u308b\u30d9\u30af\u30c8\u30eb\uff09\u3092\u671f\u5f85\u3057\u3066\u3044\u307e\u3059\u3002\u305d\u306e\u305f\u3081\u3001\u3053\u308c\u30898\u3064\u3092\u5358\u4e00\u306e\u884c\u5217\u306b\u7d71\u5408\u3059\u308b\u65b9\u6cd5\u304c\u5fc5\u8981\u3067\u3059\u3002</p> <p>\u3053\u306e\u554f\u984c\u306f\u3069\u3046\u89e3\u6c7a\u3059\u308b\u306e\u3067\u3057\u3087\u3046\u304b\uff1f8\u3064\u306e\u884c\u5217\u3092\u9023\u7d50\u3057\u3001\u3055\u3089\u306b\u91cd\u307f\u884c\u5217WO\u3092\u639b\u3051\u308b\u3053\u3068\u3067\u5bfe\u51e6\u3057\u307e\u3059\uff1a</p> <pre><code>MultiHead(Q,K,V) = Concat(head1, head2, ..., head8) \u00d7 WO\n</code></pre> <p>\u5177\u4f53\u7684\u306a\u8a08\u7b97\uff1a <pre><code>Concat([Z1, Z2, ..., Z8]) \u00d7 WO = [2, 512] \u00d7 [512, 512] \u2192 [2, 512]\n</code></pre></p> <p>Shape\u5909\u5316\u306e\u8a73\u7d30\uff1a</p> <ul> <li>\u5404Zi (i=1...8): [2, 64] \uff082\u5358\u8a9e\u3001\u540464\u6b21\u5143\uff09</li> <li>\u9023\u7d50\u5f8c: [2, 512] \uff0864\u00d78=512\u6b21\u5143\uff09</li> <li>WO\u91cd\u307f\u884c\u5217: [512, 512]</li> <li>\u6700\u7d42\u51fa\u529b: [2, 512] \uff08\u5143\u306e\u6b21\u5143\u306b\u623b\u308b\uff09</li> </ul> <p></p> <p>\u3053\u308c\u304c\u30de\u30eb\u30c1\u30d8\u30c3\u30c9self-attention\u306e\u307b\u307c\u3059\u3079\u3066\u3067\u3059\u3002\u78ba\u304b\u306b\u305f\u304f\u3055\u3093\u306e\u884c\u5217\u304c\u3042\u308b\u3053\u3068\u306f\u7406\u89e3\u3057\u3066\u3044\u307e\u3059\u3002\u4e00\u3064\u306e\u8996\u899a\u7684\u8868\u73fe\u306b\u307e\u3068\u3081\u3066\u3001\u4e00\u7b87\u6240\u3067\u898b\u3089\u308c\u308b\u3088\u3046\u306b\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002</p> <p></p> <p>attention\u30d8\u30c3\u30c9\u306b\u3064\u3044\u3066\u89e6\u308c\u307e\u3057\u305f\u306e\u3067\u3001\u4f8b\u6587\u3067\u300cit\u300d\u3068\u3044\u3046\u5358\u8a9e\u3092\u30a8\u30f3\u30b3\u30fc\u30c9\u3059\u308b\u969b\u306b\u3001\u7570\u306a\u308battention\u30d8\u30c3\u30c9\u304c\u3069\u3053\u306b\u7126\u70b9\u3092\u5f53\u3066\u3066\u3044\u308b\u304b\u3092\u898b\u308b\u305f\u3081\u3001\u4ee5\u524d\u306e\u4f8b\u3092\u518d\u8a2a\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff1a</p> <p></p> <p>\u300cit\u300d\u3068\u3044\u3046\u5358\u8a9e\u3092\u30a8\u30f3\u30b3\u30fc\u30c9\u3059\u308b\u969b\u3001\u4e00\u3064\u306eattention\u30d8\u30c3\u30c9\u306f\u300cthe animal\u300d\u306b\u6700\u3082\u7126\u70b9\u3092\u5f53\u3066\u3001\u5225\u306e\u30d8\u30c3\u30c9\u306f\u300ctired\u300d\u306b\u7126\u70b9\u3092\u5f53\u3066\u3066\u3044\u307e\u3059\u3002\u3042\u308b\u610f\u5473\u3067\u3001\u30e2\u30c7\u30eb\u306e\u300cit\u300d\u3068\u3044\u3046\u5358\u8a9e\u306e\u8868\u73fe\u306f\u3001\u300canimal\u300d\u3068\u300ctired\u300d\u4e21\u65b9\u306e\u8868\u73fe\u306e\u4e00\u90e8\u3092\u7d44\u307f\u8fbc\u3093\u3067\u3044\u307e\u3059\u3002</p> <p>\u3057\u304b\u3057\u3001\u3059\u3079\u3066\u306eattention\u30d8\u30c3\u30c9\u3092\u56f3\u306b\u8ffd\u52a0\u3059\u308b\u3068\u3001\u89e3\u91c8\u304c\u56f0\u96e3\u306b\u306a\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\uff1a</p> <p></p>","tags":["Transformer","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","Deep Learning","Attention"]},{"location":"LLM/00_illustrated_transformer/#_16","title":"\u4f4d\u7f6e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3092\u4f7f\u7528\u3057\u305f\u7cfb\u5217\u306e\u9806\u5e8f\u8868\u73fe","text":"<p>\u3053\u308c\u307e\u3067\u8aac\u660e\u3057\u305f\u30e2\u30c7\u30eb\u306b\u6b20\u3051\u3066\u3044\u308b\u3082\u306e\u306e\u4e00\u3064\u306f\u3001\u5165\u529b\u7cfb\u5217\u3067\u306e\u5358\u8a9e\u306e\u9806\u5e8f\u3092\u8003\u616e\u3059\u308b\u65b9\u6cd5\u3067\u3059\u3002</p> <p>\u3053\u308c\u306b\u5bfe\u51e6\u3059\u308b\u305f\u3081\u3001transformer\u306f\u5404\u5165\u529b\u57cb\u3081\u8fbc\u307f\u306b\u30d9\u30af\u30c8\u30eb\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\u3053\u308c\u3089\u306e\u30d9\u30af\u30c8\u30eb\u306f\u7279\u5b9a\u306e\u30d1\u30bf\u30fc\u30f3\u306b\u5f93\u3063\u3066\u8a2d\u8a08\u3055\u308c\u3001\u5404\u5358\u8a9e\u306e\u4f4d\u7f6e\u60c5\u5831\u3084\u7cfb\u5217\u5185\u306e\u7570\u306a\u308b\u5358\u8a9e\u9593\u306e\u8ddd\u96e2\u60c5\u5831\u3092\u30e2\u30c7\u30eb\u306b\u63d0\u4f9b\u3057\u307e\u3059\u3002\u3053\u306e\u4ed5\u7d44\u307f\u306e\u72d9\u3044\u306f\u3001\u4f4d\u7f6e\u60c5\u5831\u3092\u57cb\u3081\u8fbc\u307f\u306b\u52a0\u3048\u308b\u3053\u3068\u3067\u3001Q/K/V\u30d9\u30af\u30c8\u30eb\u3078\u306e\u5909\u63db\u6642\u306b\u3001\u5185\u7a4dAttention\u306e\u8a08\u7b97\u306b\u304a\u3044\u3066\u57cb\u3081\u8fbc\u307f\u30d9\u30af\u30c8\u30eb\u9593\u306b\u610f\u5473\u306e\u3042\u308b\u8ddd\u96e2\u95a2\u4fc2\u3092\u4e0e\u3048\u308b\u3053\u3068\u3067\u3059\u3002</p> <p> \u30e2\u30c7\u30eb\u306b\u5358\u8a9e\u306e\u9806\u5e8f\u611f\u899a\u3092\u4e0e\u3048\u308b\u305f\u3081\u3001\u4f4d\u7f6e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u30d9\u30af\u30c8\u30eb\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\u305d\u306e\u5024\u306f\u7279\u5b9a\u306e\u30d1\u30bf\u30fc\u30f3\u306b\u5f93\u3044\u307e\u3059\u3002</p> <p>\u57cb\u3081\u8fbc\u307f\u306e\u6b21\u5143\u304c4\u3060\u3068\u4eee\u5b9a\u3059\u308b\u3068\u3001\u5b9f\u969b\u306e\u4f4d\u7f6e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff1a</p> <p> \u57cb\u3081\u8fbc\u307f\u30b5\u30a4\u30ba4\u306e\u304a\u3082\u3061\u3083\u306e\u4f8b\u3067\u306e\u4f4d\u7f6e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u306e\u5b9f\u4f8b</p> <p>\u3053\u306e\u30d1\u30bf\u30fc\u30f3\u306f\u3069\u306e\u3088\u3046\u306a\u3082\u306e\u3067\u3057\u3087\u3046\u304b\uff1f</p> <p>\u6b21\u306e\u56f3\u3067\u306f\u3001\u5404\u884c\u304c\u4f4d\u7f6e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u306e\u30d9\u30af\u30c8\u30eb\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u3059\u3002\u6700\u521d\u306e\u884c\u306f\u3001\u5165\u529b\u7cfb\u5217\u306e\u6700\u521d\u306e\u5358\u8a9e\u306e\u57cb\u3081\u8fbc\u307f\u306b\u8ffd\u52a0\u3059\u308b\u30d9\u30af\u30c8\u30eb\u3067\u3059\u3002\u5404\u884c\u306b\u306f512\u306e\u5024\u304c\u542b\u307e\u308c\u3066\u304a\u308a\u3001\u305d\u308c\u305e\u308c1\u3068-1\u306e\u9593\u306e\u5024\u3092\u6301\u3061\u307e\u3059\u3002\u30d1\u30bf\u30fc\u30f3\u304c\u898b\u3048\u308b\u3088\u3046\u306b\u8272\u5206\u3051\u3057\u3066\u3044\u307e\u3059\u3002</p> <p> 20\u8a9e\uff08\u884c\uff09\u3067\u57cb\u3081\u8fbc\u307f\u30b5\u30a4\u30ba512\uff08\u5217\uff09\u306e\u4f4d\u7f6e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u306e\u5b9f\u4f8b\u3002\u4e2d\u592e\u3067\u534a\u5206\u306b\u5206\u304b\u308c\u3066\u3044\u308b\u3088\u3046\u306b\u898b\u3048\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u5de6\u534a\u5206\u306e\u5024\u304c\u4e00\u3064\u306e\u95a2\u6570\uff08sine\u3092\u4f7f\u7528\uff09\u3067\u751f\u6210\u3055\u308c\u3001\u53f3\u534a\u5206\u304c\u5225\u306e\u95a2\u6570\uff08cosine\u3092\u4f7f\u7528\uff09\u3067\u751f\u6210\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3067\u3059\u3002\u305d\u306e\u5f8c\u3001\u305d\u308c\u3089\u304c\u9023\u7d50\u3055\u308c\u3066\u5404\u4f4d\u7f6e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u30d9\u30af\u30c8\u30eb\u3092\u5f62\u6210\u3057\u307e\u3059\u3002</p> <p>\u4f4d\u7f6e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u306e\u5f0f\u306f\u8ad6\u6587\uff08\u30bb\u30af\u30b7\u30e7\u30f33.5\uff09\u3067\u8aac\u660e\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u4f4d\u7f6e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3092\u751f\u6210\u3059\u308b\u30b3\u30fc\u30c9\u306f<code>get_timing_signal_1d()</code>\u3067\u898b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u4f4d\u7f6e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u306f\u3053\u306e\u65b9\u6cd5\u306b\u9650\u5b9a\u3055\u308c\u308b\u308f\u3051\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u305f\u3060\u3057\u3001\u3053\u306e\u624b\u6cd5\u306b\u306f\u53ef\u5909\u9577\u306e\u7cfb\u5217\u306b\u5bfe\u5fdc\u3067\u304d\u308b\u3068\u3044\u3046\u5229\u70b9\u304c\u3042\u308a\u307e\u3059\uff08\u4f8b\u3048\u3070\u3001\u5b66\u7fd2\u6642\u3088\u308a\u9577\u3044\u6587\u7ae0\u306e\u7ffb\u8a33\u304c\u6c42\u3081\u3089\u308c\u308b\u5834\u5408\u3067\u3082\u5bfe\u5fdc\u53ef\u80fd\uff09\u3002</p> <p>2020\u5e747\u6708\u66f4\u65b0\uff1a \u4e0a\u8a18\u3067\u793a\u3057\u305f\u4f4d\u7f6e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u306f\u3001Transformer\u306eTensor2Tensor\u5b9f\u88c5\u304b\u3089\u306e\u3082\u306e\u3067\u3059\u3002\u8ad6\u6587\u3067\u793a\u3055\u308c\u305f\u65b9\u6cd5\u306f\u30012\u3064\u306e\u4fe1\u53f7\u3092\u76f4\u63a5\u9023\u7d50\u3059\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u4ea4\u4e92\u306b\u914d\u7f6e\u3059\u308b\u3068\u3044\u3046\u70b9\u3067\u5c11\u3057\u7570\u306a\u308a\u307e\u3059\u3002\u6b21\u306e\u56f3\u304c\u305d\u306e\u69d8\u5b50\u3092\u793a\u3057\u3066\u3044\u307e\u3059\u3002\u751f\u6210\u3059\u308b\u305f\u3081\u306e\u30b3\u30fc\u30c9\u306f\u3053\u3061\u3089\uff1a</p> <p></p>","tags":["Transformer","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","Deep Learning","Attention"]},{"location":"LLM/00_illustrated_transformer/#_17","title":"\u6b8b\u5dee\u63a5\u7d9a","text":"<p>\u5148\u306b\u9032\u3080\u524d\u306b\u3001\u30a8\u30f3\u30b3\u30fc\u30c0\u30fc\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306e\u91cd\u8981\u306a\u8a73\u7d30\u306b\u3064\u3044\u3066\u89e6\u308c\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002\u5404\u30a8\u30f3\u30b3\u30fc\u30c0\u30fc\u306e\u5404\u30b5\u30d6\u30ec\u30a4\u30e4\u30fc\uff08Self-Attention\u3001\u30d5\u30a3\u30fc\u30c9\u30d5\u30a9\u30ef\u30fc\u30c9\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\uff09\u306b\u306f\u6b8b\u5dee\u63a5\u7d9a\uff08Residual Connection\uff09\u304c\u8a2d\u3051\u3089\u308c\u3001\u305d\u306e\u5f8c\u306b\u5c64\u6b63\u898f\u5316\uff08Layer Normalization\uff09\u304c\u7d9a\u304d\u307e\u3059\u3002</p> <p>\u8c46\u77e5\u8b58\uff1aFeed Forward Network\uff08FFN\uff09\u3068\u306f\uff1f</p> <ul> <li>\u5f79\u5272\uff1a\u81ea\u5df1\u6ce8\u610f\uff08Self-Attention\uff09\u5f8c\u306e\u7279\u5fb4\u3092\u975e\u7dda\u5f62\u5909\u63db\u3057\u3001\u8868\u73fe\u529b\u3092\u9ad8\u3081\u308b</li> <li>\u69cb\u9020\uff1a2\u5c64\u306e\u5168\u7d50\u5408\u5c64 + \u6d3b\u6027\u5316\u95a2\u6570\uff08\u901a\u5e38 ReLU/GELU\uff09</li> <li>\u6b21\u5143\u62e1\u5f35\uff1a\u4e2d\u9593\u5c64\u3067\u96a0\u308c\u6b21\u5143\u3092\u4e00\u6642\u7684\u306b\u5927\u304d\u304f\u3057\u3066\uff08\u4f8b\uff1ad_model=512 \u2192 2048 \u2192 512\uff09\u3001\u60c5\u5831\u3092\u8c4a\u304b\u306b\u8868\u73fe</li> <li>\u4f4d\u7f6e\u3054\u3068\u72ec\u7acb\uff1a\u7cfb\u5217\u5185\u306e\u5404\u30c8\u30fc\u30af\u30f3\u306b\u5bfe\u3057\u3066 \u540c\u3058 FFN \u304c\u9069\u7528\u3055\u308c\u308b\uff08\u30c8\u30fc\u30af\u30f3\u3054\u3068\u4e26\u5217\u8a08\u7b97\u53ef\uff09</li> <li>\u6570\u5b66\u8868\u73fe\uff1a <pre><code>FFN(x) = max(0, xW\u2081 + b\u2081)W\u2082 + b\u2082 \uff08ReLU \u306e\u5834\u5408\uff09\n</code></pre></li> </ul> <p></p> <p>\u8c46\u77e5\u8b58\uff1aLayer Normalization\u8a73\u89e3</p> <p>Batch Normalization\u3068\u7570\u306a\u308a\u3001Layer Norm\u306f\u5404\u30b5\u30f3\u30d7\u30eb\u3092\u72ec\u7acb\u306b\u6b63\u898f\u5316\uff1a</p> <ul> <li>Batch Norm\uff1abatch\u6b21\u5143\u3067\u6b63\u898f\u5316\uff08\u540c\u4e00\u7279\u5fb4\u306e\u7570\u306a\u308b\u30b5\u30f3\u30d7\u30eb\u9593\uff09</li> <li>Layer Norm\uff1a\u7279\u5fb4\u6b21\u5143\u3067\u6b63\u898f\u5316\uff08\u540c\u4e00\u30b5\u30f3\u30d7\u30eb\u306e\u7570\u306a\u308b\u7279\u5fb4\u9593\uff09</li> <li>\u512a\u4f4d\u6027\uff1abatch\u30b5\u30a4\u30ba\u306b\u4f9d\u5b58\u305b\u305a\u3001RNN/Transformer\u3067\u3088\u308a\u5b89\u5b9a</li> </ul> <p>self-attention\u306b\u95a2\u9023\u3059\u308b\u30d9\u30af\u30c8\u30eb\u3068\u5c64\u6b63\u898f\u5316\u64cd\u4f5c\u3092\u53ef\u8996\u5316\u3059\u308b\u3068\u3001\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff1a</p> <p></p> <p>\u3053\u308c\u306f\u30c7\u30b3\u30fc\u30c0\u30fc\u306e\u30b5\u30d6\u30ec\u30a4\u30e4\u30fc\u306b\u3082\u5f53\u3066\u306f\u307e\u308a\u307e\u3059\u30022\u3064\u306e\u30a8\u30f3\u30b3\u30fc\u30c0\u30fc\u3068\u30c7\u30b3\u30fc\u30c0\u30fc\u3092\u7a4d\u307f\u91cd\u306d\u305fTransformer\u3092\u8003\u3048\u308b\u3068\u3001\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff1a</p> <p></p> <p>\u8c46\u77e5\u8b58\uff1a\u306a\u305c\u6b8b\u5dee\u63a5\u7d9a\uff08Residual Connection\uff09\u304c\u5fc5\u8981\uff1f</p> <ul> <li>\u52fe\u914d\u6d41\u52d5\uff1a\u52fe\u914d\u6d88\u5931\u3092\u9632\u304e\u3001\u6df1\u5c64\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u5b66\u7fd2\u3092\u5b89\u5b9a\u5316</li> <li>\u60c5\u5831\u4fdd\u8b77\uff1a\u5165\u529b\u60c5\u5831\u304c\u5c64\u3092\u901a\u3058\u3066\u5931\u308f\u308c\u306b\u304f\u3044</li> <li>\u8a13\u7df4\u5b89\u5b9a\uff1a\u6df1\u5c64\u30e2\u30c7\u30eb\u3067\u3082\u6700\u9069\u5316\u304c\u5bb9\u6613\u306b\u306a\u308b</li> <li>\u6052\u7b49\u5199\u50cf\u306e\u5b66\u7fd2\uff1a\u6700\u60aa\u3067\u3082\u300c\u5165\u529b\uff1d\u51fa\u529b\u300d\u3092\u5b66\u7fd2\u3067\u304d\u308b</li> <li>\u52fe\u914d\u9ad8\u901f\u9053\u8def\uff1a\u52fe\u914d\u304c\u76f4\u63a5\u524d\u306e\u5c64\u306b\u4f1d\u308f\u308b\u30eb\u30fc\u30c8\u3092\u78ba\u4fdd</li> </ul> <p>\u6570\u5f0f\u3067\u8868\u3059\u3068\uff1a<code>y = F(x) + x</code> \u2192 \u30b5\u30d6\u30ec\u30a4\u30e4\u30fc\u95a2\u6570 <code>F(x)</code> \u304c \u5143\u306e\u60c5\u5831\u306b\"\u4f55\u3092\u8db3\u3059\u304b\" \u3092\u5b66\u7fd2\u3059\u308b\u4ed5\u7d44\u307f\u3002</p>","tags":["Transformer","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","Deep Learning","Attention"]},{"location":"LLM/00_illustrated_transformer/#_18","title":"\u30c7\u30b3\u30fc\u30c0\u30fc\u5074","text":"<p>\u30a8\u30f3\u30b3\u30fc\u30c0\u30fc\u5074\u306e\u307b\u3068\u3093\u3069\u306e\u6982\u5ff5\u3092\u30ab\u30d0\u30fc\u3057\u307e\u3057\u305f\u306e\u3067\u3001\u30c7\u30b3\u30fc\u30c0\u30fc\u306e\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u304c\u3069\u306e\u3088\u3046\u306b\u52d5\u4f5c\u3059\u308b\u304b\u3082\u57fa\u672c\u7684\u306b\u7406\u89e3\u3067\u304d\u307e\u3059\u3002\u3067\u306f\u3001\u305d\u308c\u3089\u304c\u3069\u306e\u3088\u3046\u306b\u9023\u643a\u3059\u308b\u304b\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002</p> <p>\u30a8\u30f3\u30b3\u30fc\u30c0\u30fc\u306f\u5165\u529b\u7cfb\u5217\u306e\u51e6\u7406\u304b\u3089\u958b\u59cb\u3057\u307e\u3059\u3002\u6700\u4e0a\u4f4d\u30a8\u30f3\u30b3\u30fc\u30c0\u30fc\u306e\u51fa\u529b\u306f\u3001attention\u30d9\u30af\u30c8\u30ebK\u3068V\u306e\u30bb\u30c3\u30c8\u306b\u5909\u63db\u3055\u308c\u307e\u3059\u3002\u3053\u308c\u3089\u306f\u5404\u30c7\u30b3\u30fc\u30c0\u30fc\u306e\u300c\u30a8\u30f3\u30b3\u30fc\u30c0\u30fc\u30fb\u30c7\u30b3\u30fc\u30c0\u30fcattention\u300d\u5c64\u3067\u4f7f\u7528\u3055\u308c\u3001\u30c7\u30b3\u30fc\u30c0\u30fc\u304c\u5165\u529b\u7cfb\u5217\u306e\u9069\u5207\u306a\u5834\u6240\u306b\u7126\u70b9\u3092\u5f53\u3066\u308b\u3053\u3068\u3092\u52a9\u3051\u307e\u3059\uff1a</p> <p> \u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u30d5\u30a7\u30fc\u30ba\u3092\u7d42\u4e86\u3057\u305f\u5f8c\u3001\u30c7\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u30d5\u30a7\u30fc\u30ba\u3092\u958b\u59cb\u3057\u307e\u3059\u3002\u30c7\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u30d5\u30a7\u30fc\u30ba\u306e\u5404\u30b9\u30c6\u30c3\u30d7\u306f\u3001\u51fa\u529b\u7cfb\u5217\uff08\u3053\u306e\u5834\u5408\u306f\u82f1\u8a9e\u306e\u7ffb\u8a33\u6587\uff09\u306e\u8981\u7d20\u3092\u51fa\u529b\u3057\u307e\u3059\u3002</p> <p>\u4ee5\u4e0b\u306e\u30b9\u30c6\u30c3\u30d7\u306f\u3001\u7279\u5225\u306a\u6587\u7d42\u4e86\u8a18\u53f7\u306b\u5230\u9054\u3057\u3066Transformer\u30c7\u30b3\u30fc\u30c0\u30fc\u304c\u51fa\u529b\u3092\u5b8c\u4e86\u3057\u305f\u3053\u3068\u3092\u793a\u3059\u307e\u3067\u3001\u3053\u306e\u30d7\u30ed\u30bb\u30b9\u3092\u7e70\u308a\u8fd4\u3057\u307e\u3059\u3002\u5404\u30b9\u30c6\u30c3\u30d7\u306e\u51fa\u529b\u306f\u3001\u6b21\u306e\u6642\u9593\u30b9\u30c6\u30c3\u30d7\u3067\u6700\u4e0b\u4f4d\u30c7\u30b3\u30fc\u30c0\u30fc\u306b\u4f9b\u7d66\u3055\u308c\u3001\u30c7\u30b3\u30fc\u30c0\u30fc\u306f\u30a8\u30f3\u30b3\u30fc\u30c0\u30fc\u3068\u540c\u69d8\u306b\u30c7\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u7d50\u679c\u3092\u4e0a\u4f4d\u306b\u4f1d\u64ad\u3055\u305b\u307e\u3059\u3002\u30a8\u30f3\u30b3\u30fc\u30c0\u30fc\u306e\u5165\u529b\u3068\u540c\u69d8\u306b\u3001\u3053\u308c\u3089\u306e\u30c7\u30b3\u30fc\u30c0\u30fc\u5165\u529b\u306b\u57cb\u3081\u8fbc\u307f\u3068\u4f4d\u7f6e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3092\u8ffd\u52a0\u3057\u3066\u5404\u5358\u8a9e\u306e\u4f4d\u7f6e\u3092\u793a\u3057\u307e\u3059\u3002</p> <p></p> <p>\u30c7\u30b3\u30fc\u30c0\u30fc\u306eself-attention\u5c64\u306f\u3001\u30a8\u30f3\u30b3\u30fc\u30c0\u30fc\u306e\u3082\u306e\u3068\u306f\u5c11\u3057\u7570\u306a\u308b\u65b9\u6cd5\u3067\u52d5\u4f5c\u3057\u307e\u3059\uff1a</p> <p>\u30c7\u30b3\u30fc\u30c0\u30fc\u3067\u306f\u3001Self-Attention\u5c64\u306f\u51fa\u529b\u7cfb\u5217\u306e\u4ee5\u524d\u306e\u4f4d\u7f6e\u306b\u306e\u307f\u6ce8\u610f\u3092\u6255\u3046\u3053\u3068\u304c\u8a31\u53ef\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u306f\u3001Self-Attention\u8a08\u7b97\u306eSoftmax\u30b9\u30c6\u30c3\u30d7\u306e\u524d\u306b\u3001\u5c06\u6765\u306e\u4f4d\u7f6e\u3092\u30de\u30b9\u30af\u3059\u308b\uff08<code>-inf</code>\u306b\u8a2d\u5b9a\u3059\u308b\uff09\u3053\u3068\u3067\u884c\u308f\u308c\u307e\u3059\u3002</p> <p>\u300c\u30a8\u30f3\u30b3\u30fc\u30c0\u30fc\u30fb\u30c7\u30b3\u30fc\u30c0\u30fcAttention\u300d\u5c64\u306f\u3001Multi-Head Self-Attention\u3068\u307e\u3063\u305f\u304f\u540c\u3058\u3088\u3046\u306b\u52d5\u4f5c\u3057\u307e\u3059\u304c\u3001\u4e0b\u4f4d\u306e\u5c64\u304b\u3089Query\u884c\u5217\u3092\u4f5c\u6210\u3057\u3001\u30a8\u30f3\u30b3\u30fc\u30c0\u30fc\u30b9\u30bf\u30c3\u30af\u306e\u51fa\u529b\u304b\u3089Key\u3068Value\u884c\u5217\u3092\u53d6\u5f97\u3059\u308b\u70b9\u304c\u7570\u306a\u308a\u307e\u3059\u3002</p>","tags":["Transformer","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","Deep Learning","Attention"]},{"location":"LLM/00_illustrated_transformer/#softmax","title":"\u6700\u7d42\u7684\u306a\u7dda\u5f62\u5c64\u3068Softmax\u5c64","text":"<p>\u30c7\u30b3\u30fc\u30c0\u30fc\u30b9\u30bf\u30c3\u30af\u306f\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u306e\u30d9\u30af\u30c8\u30eb\u3092\u51fa\u529b\u3057\u307e\u3059\u3002\u305d\u308c\u3092\u3069\u306e\u3088\u3046\u306b\u5358\u8a9e\u306b\u5909\u63db\u3059\u308b\u306e\u3067\u3057\u3087\u3046\u304b\uff1f\u305d\u308c\u304c\u6700\u7d42\u7684\u306a\u7dda\u5f62\u5c64\u306e\u4ed5\u4e8b\u3067\u3001\u305d\u306e\u5f8c\u306bSoftmax\u5c64\u304c\u7d9a\u304d\u307e\u3059\u3002</p> <p>\u7dda\u5f62\u5c64\u306f\u3001\u30c7\u30b3\u30fc\u30c0\u30fc\u30b9\u30bf\u30c3\u30af\u306b\u3088\u3063\u3066\u751f\u6210\u3055\u308c\u305f\u30d9\u30af\u30c8\u30eb\u3092\u3001\u30ed\u30b8\u30c3\u30c8\u30d9\u30af\u30c8\u30eb\u3068\u547c\u3070\u308c\u308b\u306f\u308b\u304b\u306b\u5927\u304d\u306a\u30d9\u30af\u30c8\u30eb\u306b\u5c04\u5f71\u3059\u308b\u5358\u7d14\u306a\u5168\u7d50\u5408\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3067\u3059\u3002</p> <p>\u6211\u3005\u306e\u30e2\u30c7\u30eb\u304c\u3001\u8a13\u7df4\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304b\u3089\u5b66\u7fd2\u3057\u305f10,000\u306e\u4e00\u610f\u306a\u82f1\u5358\u8a9e\uff08\u6211\u3005\u306e\u30e2\u30c7\u30eb\u306e\u300c\u51fa\u529b\u8a9e\u5f59\u300d\uff09\u3092\u77e5\u3063\u3066\u3044\u308b\u3068\u3057\u307e\u3057\u3087\u3046\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u30ed\u30b8\u30c3\u30c8\u30d9\u30af\u30c8\u30eb\u306f10,000\u30bb\u30eb\u306e\u5e45\u306b\u306a\u308a\u307e\u3059\u3002\u5404\u30bb\u30eb\u306f\u4e00\u610f\u306a\u5358\u8a9e\u306e\u30b9\u30b3\u30a2\u306b\u5bfe\u5fdc\u3057\u307e\u3059\u3002\u3053\u308c\u304c\u3001\u7dda\u5f62\u5c64\u306b\u7d9a\u304f\u30e2\u30c7\u30eb\u306e\u51fa\u529b\u3092\u89e3\u91c8\u3059\u308b\u65b9\u6cd5\u3067\u3059\u3002</p> <p>\u305d\u3057\u3066\u3001Softmax\u5c64\u304c\u3053\u308c\u3089\u306e\u30b9\u30b3\u30a2\u3092\u78ba\u7387\u306b\u5909\u63db\u3057\u307e\u3059\uff08\u3059\u3079\u3066\u6b63\u3067\u3001\u5408\u8a08\u304c1.0\u306b\u306a\u308a\u307e\u3059\uff09\u3002\u6700\u3082\u9ad8\u3044\u78ba\u7387\u3092\u6301\u3064\u30bb\u30eb\u304c\u9078\u3070\u308c\u3001\u305d\u308c\u306b\u95a2\u9023\u3059\u308b\u5358\u8a9e\u304c\u3053\u306e\u6642\u9593\u30b9\u30c6\u30c3\u30d7\u306e\u51fa\u529b\u3068\u3057\u3066\u751f\u6210\u3055\u308c\u307e\u3059\u3002</p> <p> \u3053\u306e\u56f3\u306f\u3001\u30c7\u30b3\u30fc\u30c0\u30fc\u30b9\u30bf\u30c3\u30af\u306e\u51fa\u529b\u3068\u3057\u3066\u751f\u6210\u3055\u308c\u305f\u30d9\u30af\u30c8\u30eb\u304b\u3089\u4e0b\u304b\u3089\u59cb\u307e\u308a\u307e\u3059\u3002\u305d\u306e\u5f8c\u3001\u51fa\u529b\u5358\u8a9e\u306b\u5909\u63db\u3055\u308c\u307e\u3059\u3002</p>","tags":["Transformer","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","Deep Learning","Attention"]},{"location":"LLM/00_illustrated_transformer/#_19","title":"\u8a13\u7df4\u6982\u8981","text":"<p>\u8a13\u7df4\u6e08\u307fTransformer\u3092\u901a\u308b\u5b8c\u5168\u306a\u30d5\u30a9\u30ef\u30fc\u30c9\u30d1\u30b9\uff08\u9806\u4f1d\u64ad\uff09\u30d7\u30ed\u30bb\u30b9\u3092\u30ab\u30d0\u30fc\u3057\u307e\u3057\u305f\u306e\u3067\u3001\u30e2\u30c7\u30eb\u306e\u8a13\u7df4\u306e\u76f4\u611f\u7684\u7406\u89e3\u3092\u5f97\u308b\u3053\u3068\u304c\u6709\u7528\u3067\u3057\u3087\u3046\u3002</p> <p>\u8a13\u7df4\u4e2d\u3001\u672a\u8a13\u7df4\u306e\u30e2\u30c7\u30eb\u306f\u5168\u304f\u540c\u3058\u30d5\u30a9\u30ef\u30fc\u30c9\u30d1\u30b9\u3092\u901a\u308a\u307e\u3059\u3002\u3057\u304b\u3057\u3001\u30e9\u30d9\u30eb\u4ed8\u304d\u306e\u8a13\u7df4\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3067\u8a13\u7df4\u3057\u3066\u3044\u308b\u305f\u3081\u3001\u305d\u306e\u51fa\u529b\u3092\u5b9f\u969b\u306e\u6b63\u89e3\u51fa\u529b\u3068\u6bd4\u8f03\u3067\u304d\u307e\u3059\u3002</p> <p>\u3053\u308c\u3092\u53ef\u8996\u5316\u3059\u308b\u305f\u3081\u3001\u51fa\u529b\u8a9e\u5f59\u304c6\u3064\u306e\u5358\u8a9e\uff08\u300ca\u300d\u3001\u300cam\u300d\u3001\u300ci\u300d\u3001\u300cthanks\u300d\u3001\u300cstudent\u300d\u3001\u300c\u300d\uff08\u6587\u7d42\u4e86\u8a18\u53f7\uff09\uff09\u306e\u307f\u3092\u542b\u3080\u3068\u4eee\u5b9a\u3057\u307e\u3057\u3087\u3046\u3002 <p> \u30e2\u30c7\u30eb\u306e\u51fa\u529b\u8a9e\u5f59\u306f\u3001\u8a13\u7df4\u3092\u958b\u59cb\u3059\u308b\u524d\u306e\u524d\u51e6\u7406\u30d5\u30a7\u30fc\u30ba\u3067\u4f5c\u6210\u3055\u308c\u307e\u3059\u3002</p> <p>\u51fa\u529b\u8a9e\u5f59\u3092\u5b9a\u7fa9\u3057\u305f\u3089\u3001\u8a9e\u5f59\u5185\u306e\u5404\u5358\u8a9e\u3092\u8868\u73fe\u3059\u308b\u305f\u3081\u306b\u540c\u3058\u5e45\u306e\u30d9\u30af\u30c8\u30eb\u3092\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u306fOne-Hot Encoding\uff08\u30ef\u30f3\u30db\u30c3\u30c8\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\uff09\u3068\u3057\u3066\u3082\u77e5\u3089\u308c\u3066\u3044\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001\u300cam\u300d\u3068\u3044\u3046\u5358\u8a9e\u306f\u6b21\u306e\u30d9\u30af\u30c8\u30eb\u3067\u8868\u73fe\u3067\u304d\u307e\u3059\uff1a</p> <p> \u4f8b\uff1a\u51fa\u529b\u8a9e\u5f59\u306e\u30ef\u30f3\u30db\u30c3\u30c8\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0</p> <p>\u3053\u306e\u8981\u7d04\u306b\u7d9a\u3044\u3066\u3001\u30e2\u30c7\u30eb\u306e\u640d\u5931\u95a2\u6570\u306b\u3064\u3044\u3066\u8b70\u8ad6\u3057\u307e\u3057\u3087\u3046\u3002\u3053\u308c\u306f\u3001\u9ad8\u6027\u80fd\u3067\u6b63\u78ba\u306a\u30e2\u30c7\u30eb\u3092\u69cb\u7bc9\u3059\u308b\u305f\u3081\u306b\u8a13\u7df4\u30d5\u30a7\u30fc\u30ba\u3067\u6700\u9069\u5316\u3059\u308b\u6307\u6a19\u3067\u3059\u3002</p>","tags":["Transformer","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","Deep Learning","Attention"]},{"location":"LLM/00_illustrated_transformer/#_20","title":"\u640d\u5931\u95a2\u6570","text":"<p>\u30e2\u30c7\u30eb\u3092\u8a13\u7df4\u3057\u3066\u3044\u308b\u3068\u4eee\u5b9a\u3057\u307e\u3057\u3087\u3046\u3002\u8a13\u7df4\u30d5\u30a7\u30fc\u30ba\u306e\u6700\u521d\u306e\u30b9\u30c6\u30c3\u30d7\u3067\u3001\u7c21\u5358\u306a\u4f8b\u3067\u3042\u308b\u300cmerci\u300d\u3092\u300cthanks\u300d\u306b\u7ffb\u8a33\u3059\u308b\u3053\u3068\u3067\u8a13\u7df4\u3057\u3066\u3044\u308b\u3068\u3057\u307e\u3059\u3002</p> <p>\u3053\u308c\u306f\u3001\u51fa\u529b\u304c\u300cthanks\u300d\u3068\u3044\u3046\u5358\u8a9e\u3092\u793a\u3059\u78ba\u7387\u5206\u5e03\u306b\u306a\u308b\u3053\u3068\u3092\u671f\u5f85\u3057\u3066\u3044\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002\u3057\u304b\u3057\u3001\u3053\u306e\u30e2\u30c7\u30eb\u306f\u307e\u3060\u8a13\u7df4\u3055\u308c\u3066\u3044\u306a\u3044\u305f\u3081\u3001\u6b63\u3057\u3044\u51fa\u529b\u3092\u751f\u6210\u3059\u308b\u53ef\u80fd\u6027\u306f\u4f4e\u3044\u3067\u3059\u3002</p> <p> \u30e2\u30c7\u30eb\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\uff08\u91cd\u307f\uff09\u304c\u3059\u3079\u3066\u30e9\u30f3\u30c0\u30e0\u306b\u521d\u671f\u5316\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3001\uff08\u672a\u8a13\u7df4\u306e\uff09\u30e2\u30c7\u30eb\u306f\u5404\u30bb\u30eb/\u5358\u8a9e\u306b\u4efb\u610f\u306e\u5024\u3092\u6301\u3064\u78ba\u7387\u5206\u5e03\u3092\u751f\u6210\u3057\u307e\u3059\u3002\u3053\u308c\u3092\u5b9f\u969b\u306e\u51fa\u529b\u3068\u6bd4\u8f03\u3057\u3001\u9006\u4f1d\u64ad\u3092\u4f7f\u7528\u3057\u3066\u3059\u3079\u3066\u306e\u30e2\u30c7\u30eb\u306e\u91cd\u307f\u3092\u8abf\u6574\u3057\u3066\u3001\u51fa\u529b\u3092\u671b\u307e\u3057\u3044\u51fa\u529b\u306b\u8fd1\u3065\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p> <p>2\u3064\u306e\u78ba\u7387\u5206\u5e03\u3092\u3069\u306e\u3088\u3046\u306b\u6bd4\u8f03\u3059\u308b\u306e\u3067\u3057\u3087\u3046\u304b\uff1f\u5b9f\u969b\u306b\u306f\u5358\u7d14\u306a\u5f15\u304d\u7b97\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u8a73\u7d30\u306b\u3064\u3044\u3066\u306f\u3001\u4ea4\u5dee\u30a8\u30f3\u30c8\u30ed\u30d4\u30fc\u3068Kullback\u2013Leibler divergence\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <p>\u305f\u3060\u3057\u3001\u3053\u308c\u306f\u904e\u5ea6\u306b\u7c21\u7565\u5316\u3055\u308c\u305f\u4f8b\u3067\u3042\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u3088\u308a\u73fe\u5b9f\u7684\u306b\u306f\u3001\u5358\u4e00\u306e\u5358\u8a9e\u3067\u306f\u306a\u304f\u9577\u3044\u6587\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001\u5165\u529b\uff1a\u300cje suis \u00e9tudiant\u300d\u3001\u671f\u5f85\u3059\u308b\u51fa\u529b\uff1a\u300ci am a student\u300d\u3002\u3053\u308c\u304c\u5b9f\u969b\u306b\u610f\u5473\u3059\u308b\u306e\u306f\u3001\u30e2\u30c7\u30eb\u306b\u9023\u7d9a\u3057\u3066\u78ba\u7387\u5206\u5e03\u3092\u51fa\u529b\u3057\u3066\u3082\u3089\u3046\u3068\u3044\u3046\u3053\u3068\u3067\u3059\uff1a</p> <ul> <li>\u5404\u78ba\u7387\u5206\u5e03\u306f\u8a9e\u5f59\u30b5\u30a4\u30ba\u6570\u306e\u6b21\u5143\u3092\u6301\u3061\u307e\u3059\uff08\u3053\u306e\u4f8b\u3067\u306f6\u3067\u3059\u304c\u3001\u5b9f\u969b\u306f30,000\u306850,000\u7a0b\u5ea6\uff09</li> <li>1\u756a\u76ee\u306e\u78ba\u7387\u5206\u5e03\u306f\u300ci\u300d\u306b\u6700\u9ad8\u78ba\u7387\u3092\u4e0e\u3048\u307e\u3059</li> <li>2\u756a\u76ee\u306e\u78ba\u7387\u5206\u5e03\u306f\u300cam\u300d\u306b\u6700\u9ad8\u78ba\u7387\u3092\u4e0e\u3048\u307e\u3059</li> <li>\u540c\u69d8\u306b\u30015\u756a\u76ee\u306e\u51fa\u529b\u5206\u5e03\u3067\u300c\u300d\u8a18\u53f7\u304c\u793a\u3055\u308c\u308b\u307e\u3067\u7d9a\u304d\u307e\u3059 <p> 1\u3064\u306e\u30b5\u30f3\u30d7\u30eb\u6587\u306b\u5bfe\u3059\u308b\u8a13\u7df4\u4f8b\u3067\u3001\u30e2\u30c7\u30eb\u3092\u8a13\u7df4\u3059\u308b\u5bfe\u8c61\u306e\u78ba\u7387\u5206\u5e03\u3002</p> <p>\u5927\u304d\u306a\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3067\u5341\u5206\u306a\u6642\u9593\u30e2\u30c7\u30eb\u3092\u8a13\u7df4\u3057\u305f\u5f8c\u3001\u751f\u6210\u3055\u308c\u308b\u78ba\u7387\u5206\u5e03\u304c\u6b21\u306e\u3088\u3046\u306b\u306a\u308b\u3053\u3068\u3092\u671f\u5f85\u3057\u307e\u3059\uff1a</p> <p> \u8a13\u7df4\u5f8c\u3001\u30e2\u30c7\u30eb\u304c\u671f\u5f85\u3059\u308b\u6b63\u3057\u3044\u7ffb\u8a33\u3092\u51fa\u529b\u3059\u308b\u3053\u3068\u3092\u9858\u3044\u307e\u3059\u3002\u3082\u3061\u308d\u3093\u3001\u3053\u306e\u30d5\u30ec\u30fc\u30ba\u304c\u8a13\u7df4\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u4e00\u90e8\u3060\u3063\u305f\u5834\u5408\u3001\u3053\u308c\u306f\u5b9f\u969b\u306e\u6307\u6a19\u3067\u306f\u3042\u308a\u307e\u305b\u3093\uff08\u53c2\u7167\uff1a\u4ea4\u5dee\u691c\u8a3c\uff09\u3002\u5404\u4f4d\u7f6e\u304c\u3001\u305d\u306e\u6642\u9593\u30b9\u30c6\u30c3\u30d7\u306e\u51fa\u529b\u3067\u3042\u308b\u53ef\u80fd\u6027\u304c\u4f4e\u304f\u3066\u3082\u5c11\u3057\u306e\u78ba\u7387\u3092\u5f97\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u3053\u308c\u306f\u3001\u8a13\u7df4\u30d7\u30ed\u30bb\u30b9\u3092\u52a9\u3051\u308bsoftmax\u306e\u975e\u5e38\u306b\u6709\u7528\u306a\u7279\u6027\u3067\u3059\u3002</p> <p>\u3055\u3066\u3001\u30e2\u30c7\u30eb\u306f\u4e00\u5ea6\u306b\u4e00\u3064\u305a\u3064\u51fa\u529b\u3092\u751f\u6210\u3059\u308b\u305f\u3081\u3001\u30e2\u30c7\u30eb\u304c\u305d\u306e\u78ba\u7387\u5206\u5e03\u304b\u3089\u6700\u3082\u9ad8\u3044\u78ba\u7387\u3092\u6301\u3064\u5358\u8a9e\u3092\u9078\u629e\u3057\u3001\u6b8b\u308a\u3092\u6368\u3066\u308b\u3068\u4eee\u5b9a\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u306f1\u3064\u306e\u65b9\u6cd5\u3067\u3059\uff08greedy decoding\u3068\u547c\u3070\u308c\u307e\u3059\uff09\u3002\u5225\u306e\u65b9\u6cd5\u306f\u3001\u4f8b\u3048\u3070\u4e0a\u4f4d2\u3064\u306e\u5358\u8a9e\uff08\u4f8b\u3048\u3070\u300cI\u300d\u3068\u300ca\u300d\uff09\u3092\u4fdd\u6301\u3057\u3001\u6b21\u306e\u30b9\u30c6\u30c3\u30d7\u3067\u3001\u6700\u521d\u306e\u51fa\u529b\u4f4d\u7f6e\u304c\u5358\u8a9e\u300cI\u300d\u3060\u3063\u305f\u3068\u4eee\u5b9a\u3059\u308b\u5834\u5408\u3068\u3001\u6700\u521d\u306e\u51fa\u529b\u4f4d\u7f6e\u304c\u5358\u8a9e\u300ca\u300d\u3060\u3063\u305f\u3068\u4eee\u5b9a\u3059\u308b\u5834\u5408\u306e2\u56de\u3001\u30e2\u30c7\u30eb\u3092\u5b9f\u884c\u3059\u308b\u3053\u3068\u3067\u3059\u3002\u4f4d\u7f6e#1\u3068#2\u306e\u4e21\u65b9\u3092\u8003\u616e\u3057\u3066\u3001\u3088\u308a\u5c11\u306a\u3044\u30a8\u30e9\u30fc\u3092\u751f\u6210\u3057\u305f\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u4fdd\u6301\u3057\u307e\u3059\u3002\u4f4d\u7f6e#2\u3068#3\u306b\u3064\u3044\u3066\u3053\u308c\u3092\u7e70\u308a\u8fd4\u3057\u307e\u3059...\u306a\u3069\u3002\u3053\u306e\u65b9\u6cd5\u306f\u300cbeam search\u300d\u3068\u547c\u3070\u308c\u3001\u6211\u3005\u306e\u4f8b\u3067\u306f\u3001beam_size\u304c2\uff08\u5e38\u306b2\u3064\u306e\u90e8\u5206\u7684\u4eee\u8aac\uff08\u672a\u5b8c\u6210\u306e\u7ffb\u8a33\uff09\u304c\u30e1\u30e2\u30ea\u306b\u4fdd\u6301\u3055\u308c\u308b\uff09\u3067\u3001top_beams\u30822\uff082\u3064\u306e\u7ffb\u8a33\u3092\u8fd4\u3059\uff09\u3067\u3057\u305f\u3002\u3053\u308c\u3089\u306f\u4e21\u65b9\u3068\u3082\u5b9f\u9a13\u3067\u304d\u308b\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u3059\u3002</p>","tags":["Transformer","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","Deep Learning","Attention"]},{"location":"LLM/00_illustrated_transformer/#_21","title":"\u8a13\u7df4\u30d7\u30ed\u30bb\u30b9\u306e\u8a73\u7d30\u306a\u53ef\u8996\u5316","text":"<p>\u5177\u4f53\u7684\u306a\u4f8b\u3092\u901a\u3057\u3066\u3001Transformer\u306e\u8a13\u7df4\u30d7\u30ed\u30bb\u30b9\u3092\u3088\u308a\u76f4\u611f\u7684\u306b\u7406\u89e3\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u300cI am a student.\u300d\u3092\u300c\u79c1\u306f\u5b66\u751f\u3067\u3059\u3002\u300d\u306b\u7ffb\u8a33\u3059\u308b\u8a13\u7df4\u4f8b\u3092\u8003\u3048\u3066\u307f\u307e\u3059\u3002</p>","tags":["Transformer","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","Deep Learning","Attention"]},{"location":"LLM/00_illustrated_transformer/#encoder","title":"Encoder\u306e\u5165\u529b","text":"<p>\u5165\u529b\u7cfb\u5217: <code>[I, am, a, student, ., &lt;EOS&gt;]</code> \uff086\u30c8\u30fc\u30af\u30f3\uff09</p> <p>\u5404\u30c8\u30fc\u30af\u30f3\u306f\u307e\u305a\uff1a</p> <ol> <li>\u5358\u8a9e\u57cb\u3081\u8fbc\u307f\u306b\u5909\u63db: \u5404\u30c8\u30fc\u30af\u30f3 \u2192 [512]\u6b21\u5143\u30d9\u30af\u30c8\u30eb</li> <li>\u4f4d\u7f6e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3092\u8ffd\u52a0: \u4f4d\u7f6e\u60c5\u5831\u3092\u4ed8\u4e0e  </li> <li>\u6700\u7d42\u7684\u306aEncoder\u5165\u529b: 6\u500b\u306e[512]\u6b21\u5143\u30d9\u30af\u30c8\u30eb</li> </ol> <pre><code>I        \u2192 \u57cb\u3081\u8fbc\u307f[512] + \u4f4d\u7f6e[0] = \u30a8\u30f3\u30b3\u30fc\u30c0\u30fc\u5165\u529b[0]\nam       \u2192 \u57cb\u3081\u8fbc\u307f[512] + \u4f4d\u7f6e[1] = \u30a8\u30f3\u30b3\u30fc\u30c0\u30fc\u5165\u529b[1]\na        \u2192 \u57cb\u3081\u8fbc\u307f[512] + \u4f4d\u7f6e[2] = \u30a8\u30f3\u30b3\u30fc\u30c0\u30fc\u5165\u529b[2] \nstudent  \u2192 \u57cb\u3081\u8fbc\u307f[512] + \u4f4d\u7f6e[3] = \u30a8\u30f3\u30b3\u30fc\u30c0\u30fc\u5165\u529b[3]\n.        \u2192 \u57cb\u3081\u8fbc\u307f[512] + \u4f4d\u7f6e[4] = \u30a8\u30f3\u30b3\u30fc\u30c0\u30fc\u5165\u529b[4]\n&lt;EOS&gt;    \u2192 \u57cb\u3081\u8fbc\u307f[512] + \u4f4d\u7f6e[5] = \u30a8\u30f3\u30b3\u30fc\u30c0\u30fc\u5165\u529b[5]\n</code></pre> <p>\u7279\u5225\u306a\u30c8\u30fc\u30af\u30f3\u306e\u4f7f\u3044\u5206\u3051</p> <ul> <li> (Beginning of Sentence): Decoder\u5c02\u7528\u306e\u6587\u958b\u59cb\u8a18\u53f7 <li> (End of Sentence): Encoder/Decoder\u5171\u901a\u306e\u6587\u7d42\u4e86\u8a18\u53f7 <li>Encoder\u306f\u5165\u529b\u6587\u306e\u7d42\u4e86\u3092\u793a\u3059\u305f\u3081<code>&lt;EOS&gt;</code>\u306e\u307f\u4f7f\u7528</li> <li>Decoder\u306f\u751f\u6210\u958b\u59cb\u306e\u305f\u3081<code>&lt;BOS&gt;</code>\u304b\u3089\u59cb\u307e\u308a\u3001<code>&lt;EOS&gt;</code>\u3067\u7d42\u4e86</li>","tags":["Transformer","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","Deep Learning","Attention"]},{"location":"LLM/00_illustrated_transformer/#decoder","title":"Decoder\u306e\u5165\u529b\u3068\u76ee\u6a19\u51fa\u529b","text":"<p>\u5b8c\u5168\u306a\u76ee\u6a19\u7cfb\u5217: <code>[\u79c1, \u306f, \u5b66\u751f, \u3067\u3059, \u3002, &lt;EOS&gt;]</code> \uff086\u30c8\u30fc\u30af\u30f3\uff09</p> <p>\u8a13\u7df4\u6642\u3001Decoder\u306fTeacher Forcing\u3092\u4f7f\u7528\u3057\u3001\u76ee\u6a19\u7cfb\u5217\u3092\u53f3\u306b\u30b7\u30d5\u30c8\u3057\u3066\u5165\u529b\u3068\u3057\u307e\u3059\uff1a</p> \u6642\u9593\u30b9\u30c6\u30c3\u30d7 Decoder\u5165\u529b \u76ee\u6a19\u51fa\u529b \u8aac\u660e t=1 <code>&lt;BOS&gt;</code> <code>\u79c1</code> \u6587\u958b\u59cb\u8a18\u53f7\u304b\u3089\u300c\u79c1\u300d\u3092\u4e88\u6e2c t=2 <code>&lt;BOS&gt; \u79c1</code> <code>\u306f</code> \u300c\u79c1\u300d\u307e\u3067\u898b\u3066\u300c\u306f\u300d\u3092\u4e88\u6e2c t=3 <code>&lt;BOS&gt; \u79c1 \u306f</code> <code>\u5b66\u751f</code> \u300c\u79c1\u306f\u300d\u307e\u3067\u898b\u3066\u300c\u5b66\u751f\u300d\u3092\u4e88\u6e2c t=4 <code>&lt;BOS&gt; \u79c1 \u306f \u5b66\u751f</code> <code>\u3067\u3059</code> \u300c\u79c1\u306f\u5b66\u751f\u300d\u307e\u3067\u898b\u3066\u300c\u3067\u3059\u300d\u3092\u4e88\u6e2c t=5 <code>&lt;BOS&gt; \u79c1 \u306f \u5b66\u751f \u3067\u3059</code> <code>\u3002</code> \u300c\u79c1\u306f\u5b66\u751f\u3067\u3059\u300d\u307e\u3067\u898b\u3066\u300c\u3002\u300d\u3092\u4e88\u6e2c t=6 <code>&lt;BOS&gt; \u79c1 \u306f \u5b66\u751f \u3067\u3059 \u3002</code> <code>&lt;EOS&gt;</code> \u5168\u4f53\u3092\u898b\u3066\u6587\u7d42\u4e86\u3092\u4e88\u6e2c <p>\u8981\u7d04\uff1a</p> <ul> <li>Decoder\u5165\u529b: <code>[&lt;BOS&gt;, \u79c1, \u306f, \u5b66\u751f, \u3067\u3059, \u3002]</code> \uff086\u30c8\u30fc\u30af\u30f3\u3001\u53f3\u30b7\u30d5\u30c8\uff09</li> <li>\u76ee\u6a19\u51fa\u529b: <code>[\u79c1, \u306f, \u5b66\u751f, \u3067\u3059, \u3002, &lt;EOS&gt;]</code> \uff086\u30c8\u30fc\u30af\u30f3\uff09</li> </ul> <p>Teacher Forcing\u306e\u91cd\u8981\u306a\u7279\u5fb4</p> <ul> <li>\u5165\u529b: \u6b63\u89e3\u7cfb\u5217\u30921\u3064\u305a\u3064\u30b7\u30d5\u30c8\u3057\u3066\u4f7f\u7528</li> <li>\u51fa\u529b: \u6b63\u89e3\u7cfb\u5217\u30921\u3064\u305a\u3064\u30b7\u30d5\u30c8\u3057\u3066\u4e88\u6e2c</li> <li>\u4e26\u5217\u51e6\u7406: \u5168\u3066\u306e\u6642\u9593\u30b9\u30c6\u30c3\u30d7\u3092\u540c\u6642\u306b\u8a08\u7b97\u53ef\u80fd\uff08\u8a13\u7df4\u6642\u306e\u307f\uff09</li> </ul>","tags":["Transformer","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","Deep Learning","Attention"]},{"location":"LLM/00_illustrated_transformer/#_22","title":"\u640d\u5931\u8a08\u7b97\u306e\u8a73\u7d30","text":"<p>\u8a13\u7df4\u6642\u306b\u8a08\u7b97\u3055\u308c\u308b\u640d\u5931\u6570: 6\u3064\u306e\u4f4d\u7f6e\uff08t=1\u304b\u3089t=6\uff09</p> <p>\u5404\u4f4d\u7f6e\u3067\u306e\u640d\u5931\u8a08\u7b97\uff1a</p> <pre><code>\u6642\u9593\u30b9\u30c6\u30c3\u30d7 t=1:\n- Decoder\u51fa\u529b: [P(\u79c1)=0.1, P(\u306f)=0.2, P(\u5b66\u751f)=0.1, ..., P(\u3067\u3059)=0.05, ...]\n- \u76ee\u6a19: \u300c\u79c1\u300d\uff08one-hot: [1, 0, 0, ..., 0]\uff09\n- \u640d\u5931\u2081 = -log(0.1) = 2.30\n\n\u6642\u9593\u30b9\u30c6\u30c3\u30d7 t=2:  \n- Decoder\u51fa\u529b: [P(\u79c1)=0.05, P(\u306f)=0.3, P(\u5b66\u751f)=0.1, ..., P(\u3067\u3059)=0.1, ...]\n- \u76ee\u6a19: \u300c\u306f\u300d\uff08one-hot: [0, 1, 0, ..., 0]\uff09\n- \u640d\u5931\u2082 = -log(0.3) = 1.20\n\n... (\u4ee5\u4e0b\u540c\u69d8\u306b t=6\u307e\u3067)\n</code></pre> <p>\u7dcf\u640d\u5931 = (\u640d\u5931\u2081 + \u640d\u5931\u2082 + \u640d\u5931\u2083 + \u640d\u5931\u2084 + \u640d\u5931\u2085 + \u640d\u5931\u2086) / 6</p>","tags":["Transformer","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","Deep Learning","Attention"]},{"location":"LLM/00_illustrated_transformer/#_23","title":"\u91cd\u8981\u306a\u30dd\u30a4\u30f3\u30c8","text":"<p>\u30de\u30b9\u30af\u6a5f\u69cb</p> <p>Decoder\u306e Self-Attention\u3067\u306f\u3001\u672a\u6765\u306e\u60c5\u5831\u3092\u898b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\uff1a</p> <p>\u30de\u30b9\u30af\u306e\u4ed5\u7d44\u307f\u8a73\u7d30\uff1a</p> <ol> <li>\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u30b9\u30b3\u30a2\u8a08\u7b97: \u901a\u5e38\u901a\u308aQ\u00d7K^T\u3067\u30b9\u30b3\u30a2\u884c\u5217\u3092\u8a08\u7b97</li> <li>\u30de\u30b9\u30af\u9069\u7528: \u672a\u6765\u4f4d\u7f6e\u306e\u30b9\u30b3\u30a2\u3092-\u221e\u306b\u8a2d\u5b9a</li> <li>Softmax\u51e6\u7406: e^(-\u221e) = 0\u3068\u306a\u308a\u3001\u8a72\u5f53\u4f4d\u7f6e\u306e\u91cd\u307f\u304c0\u306b\u306a\u308b</li> <li>\u7d50\u679c: \u5404\u4f4d\u7f6e\u306f\u904e\u53bb\u3068\u73fe\u5728\u306e\u60c5\u5831\u306e\u307f\u3092\u53c2\u7167\u53ef\u80fd</li> </ol> <pre><code># \u30de\u30b9\u30af\u306e\u4f8b\uff084\u00d74\u884c\u5217\uff09\nmask = [\n    [0,   -\u221e,  -\u221e,  -\u221e],  # \u4f4d\u7f6e1: \u81ea\u5206\u306e\u307f\u53c2\u7167\n    [0,    0,  -\u221e,  -\u221e],  # \u4f4d\u7f6e2: \u4f4d\u7f6e1,2\u3092\u53c2\u7167\n    [0,    0,   0,  -\u221e],  # \u4f4d\u7f6e3: \u4f4d\u7f6e1,2,3\u3092\u53c2\u7167\n    [0,    0,   0,   0]   # \u4f4d\u7f6e4: \u3059\u3079\u3066\u53c2\u7167\u53ef\u80fd\n]\n</code></pre> <p>\u3053\u306e\u4ed5\u7d44\u307f\u306b\u3088\u308a\u3001\u81ea\u5df1\u56de\u5e30\u7684\u306a\u751f\u6210\uff08\u5de6\u304b\u3089\u53f3\u3078\u306e\u9806\u6b21\u751f\u6210\uff09\u304c\u5b9f\u73fe\u3055\u308c\u307e\u3059\u3002</p>","tags":["Transformer","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","Deep Learning","Attention"]},{"location":"LLM/00_illustrated_transformer/#_24","title":"\u3055\u3089\u306a\u308b\u7406\u89e3\u306e\u52a9\u3051\u306b","text":"<p>\u3053\u308c\u304cTransformer\u306e\u4e3b\u8981\u6982\u5ff5\u3068\u306e\u6c37\u3092\u7815\u304f\u6709\u7528\u306a\u51fa\u767a\u70b9\u3060\u3063\u305f\u3053\u3068\u3092\u9858\u3044\u307e\u3059\u3002\u3088\u308a\u6df1\u304f\u5b66\u3073\u305f\u3044\u5834\u5408\u306f\u3001\u6b21\u306e\u30b9\u30c6\u30c3\u30d7\u3092\u304a\u52e7\u3081\u3057\u307e\u3059\uff1a</p> <ul> <li>Attention Is All You Need\u8ad6\u6587\u3001Transformer\u30d6\u30ed\u30b0\u6295\u7a3f\uff08Transformer: A Novel Neural Network Architecture for Language Understanding\uff09\u3001Tensor2Tensor announcement\u3092\u8aad\u3080</li> <li>\u30e2\u30c7\u30eb\u3068\u305d\u306e\u8a73\u7d30\u3092\u8aac\u660e\u3059\u308b\u0141ukasz Kaiser\u306e\u8b1b\u6f14\u3092\u898b\u308b</li> <li>Tensor2Tensor\u30ea\u30dd\u30b8\u30c8\u30ea\u306e\u4e00\u90e8\u3068\u3057\u3066\u63d0\u4f9b\u3055\u308c\u308bJupyter Notebook\u3067\u904a\u3076</li> <li>Tensor2Tensor\u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u63a2\u7d22\u3059\u308b</li> </ul> <p>\u30d5\u30a9\u30ed\u30fc\u30a2\u30c3\u30d7\u7814\u7a76\uff1a</p> <ul> <li>Depthwise Separable Convolutions for Neural Machine Translation</li> <li>One Model To Learn Them All</li> <li>Discrete Autoencoders for Sequence Models</li> <li>Generating Wikipedia by Summarizing Long Sequences</li> <li>Image Transformer</li> <li>Training Tips for the Transformer Model</li> <li>Self-Attention with Relative Position Representations</li> <li>Fast Decoding in Sequence Models using Discrete Latent Variables</li> <li>Adafactor: Adaptive Learning Rates with Sublinear Memory Cost</li> </ul>","tags":["Transformer","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","Deep Learning","Attention"]},{"location":"LLM/00_illustrated_transformer/#_25","title":"\u307e\u3068\u3081","text":"<p>\u3053\u306e\u8a18\u4e8b\u3067\u306f\u3001\u73fe\u4ee3\u306e\u81ea\u7136\u8a00\u8a9e\u51e6\u7406\u3092\u9769\u65b0\u3057\u305fTransformer\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306b\u3064\u3044\u3066\u8a73\u3057\u304f\u5b66\u7fd2\u3057\u307e\u3057\u305f\u3002\u4ee5\u4e0b\u304c\u4e3b\u8981\u306a\u5b66\u7fd2\u30dd\u30a4\u30f3\u30c8\u3067\u3059\uff1a</p>","tags":["Transformer","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","Deep Learning","Attention"]},{"location":"LLM/00_illustrated_transformer/#_26","title":"\u91cd\u8981\u306a\u6982\u5ff5","text":"<ul> <li>Self-Attention\u6a5f\u69cb: \u5165\u529b\u7cfb\u5217\u306e\u5404\u4f4d\u7f6e\u304c\u4ed6\u306e\u4f4d\u7f6e\u306e\u60c5\u5831\u3092\u8003\u616e\u3067\u304d\u308b\u4ed5\u7d44\u307f</li> <li>Multi-Head Attention: \u8907\u6570\u306e\u8868\u73fe\u90e8\u5206\u7a7a\u9593\u3067\u4e26\u5217\u306battention\u3092\u8a08\u7b97\u3059\u308b\u624b\u6cd5</li> <li>\u4f4d\u7f6e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0: \u7cfb\u5217\u306e\u9806\u5e8f\u60c5\u5831\u3092\u30e2\u30c7\u30eb\u306b\u4e0e\u3048\u308b\u65b9\u6cd5</li> <li>\u30a8\u30f3\u30b3\u30fc\u30c0\u30fc\u30fb\u30c7\u30b3\u30fc\u30c0\u30fc\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3: \u5165\u529b\u306e\u8868\u73fe\u5b66\u7fd2\u3068\u51fa\u529b\u751f\u6210\u3092\u5206\u96e2\u3057\u305f\u69cb\u9020</li> </ul>","tags":["Transformer","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","Deep Learning","Attention"]},{"location":"LLM/00_illustrated_transformer/#_27","title":"\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306e\u7279\u5fb4","text":"<ul> <li>\u4e26\u5217\u51e6\u7406: RNN\u3068\u306f\u7570\u306a\u308a\u3001\u7cfb\u5217\u306e\u5404\u4f4d\u7f6e\u3092\u4e26\u5217\u51e6\u7406\u53ef\u80fd</li> <li>\u9577\u8ddd\u96e2\u4f9d\u5b58\u95a2\u4fc2: Self-attention\u306b\u3088\u308a\u9060\u3044\u4f4d\u7f6e\u306e\u5358\u8a9e\u9593\u306e\u95a2\u4fc2\u3082\u52b9\u679c\u7684\u306b\u6349\u3048\u308b</li> <li>\u30b9\u30b1\u30fc\u30e9\u30d3\u30ea\u30c6\u30a3: \u5927\u898f\u6a21\u306a\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3068\u8a08\u7b97\u8cc7\u6e90\u3092\u52b9\u679c\u7684\u306b\u6d3b\u7528</li> </ul>","tags":["Transformer","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","Deep Learning","Attention"]},{"location":"LLM/00_illustrated_transformer/#_28","title":"\u5b9f\u7528\u7684\u306a\u4fa1\u5024","text":"<p>Transformer\u306f\u6a5f\u68b0\u7ffb\u8a33\u3060\u3051\u3067\u306a\u304f\u3001BERT\u3001GPT\u3001T5\u306a\u3069\u591a\u304f\u306e\u6210\u529f\u3057\u305f\u8a00\u8a9e\u30e2\u30c7\u30eb\u306e\u57fa\u76e4\u3068\u306a\u3063\u3066\u304a\u308a\u3001\u73fe\u4ee3\u306eNLP\u306b\u304a\u3044\u3066\u4e0d\u53ef\u6b20\u306a\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002</p>","tags":["Transformer","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","Deep Learning","Attention"]},{"location":"LLM/00_illustrated_transformer/#_29","title":"\u6b21\u306e\u30b9\u30c6\u30c3\u30d7","text":"<p>Transformer\u306e\u7406\u89e3\u3092\u3055\u3089\u306b\u6df1\u3081\u308b\u305f\u3081\u306b\uff1a</p> <ol> <li>\u5b9f\u88c5: PyTorch\u3084TensorFlow\u3067\u30b7\u30f3\u30d7\u30eb\u306aTransformer\u3092\u5b9f\u88c5\u3057\u3066\u307f\u308b</li> <li>\u5b9f\u9a13: \u7570\u306a\u308b\u30d8\u30c3\u30c9\u6570\u3084\u5c64\u6570\u3067\u306e\u6027\u80fd\u5909\u5316\u3092\u89b3\u5bdf</li> <li>\u4e8b\u524d\u5b66\u7fd2\u30e2\u30c7\u30eb: BERT\u3001GPT\u306a\u3069\u306e\u5b9f\u969b\u306eTransformer\u30d9\u30fc\u30b9\u30e2\u30c7\u30eb\u3092\u8a66\u7528</li> <li>\u5fdc\u7528\u5206\u91ce: \u6a5f\u68b0\u7ffb\u8a33\u4ee5\u5916\u306e\u30bf\u30b9\u30af\uff08\u6587\u66f8\u5206\u985e\u3001\u611f\u60c5\u5206\u6790\u306a\u3069\uff09\u3067\u306e\u6d3b\u7528\u3092\u691c\u8a0e</li> </ol> <p>\u3053\u306e\u57fa\u790e\u77e5\u8b58\u304c\u3042\u308c\u3070\u3001\u73fe\u4ee3\u306e\u5927\u898f\u6a21\u8a00\u8a9e\u30e2\u30c7\u30eb\u306e\u7406\u89e3\u304c\u3088\u308a\u6df1\u307e\u308b\u3053\u3068\u3067\u3057\u3087\u3046\u3002</p>","tags":["Transformer","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","Deep Learning","Attention"]},{"location":"LLM/01_transformer_models/","title":"Transformer Models - \u57fa\u790e\u304b\u3089\u5fdc\u7528\u307e\u3067","text":"","tags":["transformer","nlp","llm","bert","gpt","machine-learning","deep-learning"]},{"location":"LLM/01_transformer_models/#_1","title":"\u6982\u8981","text":"<p>\u672c\u8a18\u4e8b\u3067\u306f\u3001\u73fe\u4ee3\u306eAI\u3092\u652f\u3048\u308b\u91cd\u8981\u306a\u6280\u8853\u3067\u3042\u308bTransformer\u30e2\u30c7\u30eb\u306b\u3064\u3044\u3066\u8a73\u3057\u304f\u89e3\u8aac\u3057\u307e\u3059\u3002\u81ea\u7136\u8a00\u8a9e\u51e6\u7406\uff08NLP\uff09\u306e\u57fa\u672c\u6982\u5ff5\u304b\u3089\u5927\u898f\u6a21\u8a00\u8a9e\u30e2\u30c7\u30eb\uff08LLM\uff09\u306e\u6700\u65b0\u52d5\u5411\u307e\u3067\u3001\u5b9f\u8df5\u7684\u306a\u30b3\u30fc\u30c9\u4f8b\u3068\u3068\u3082\u306b\u5b66\u7fd2\u3057\u3066\u3044\u304d\u307e\u3059\u3002</p> <p>\u53c2\u8003\u8cc7\u6599</p> <p>\u672c\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306f Hugging Face LLM Course \u3092\u53c2\u8003\u306b\u3001\u65e5\u672c\u8a9e\u3067\u5b66\u7fd2\u5185\u5bb9\u3092\u307e\u3068\u3081\u305f\u500b\u4eba\u7684\u306a\u5b66\u7fd2\u30ce\u30fc\u30c8\u3067\u3059\u3002\u8a73\u7d30\u306a\u5185\u5bb9\u3084\u6700\u65b0\u60c5\u5831\u306b\u3064\u3044\u3066\u306f\u3001\u539f\u6587\u3082\u4f75\u305b\u3066\u3054\u53c2\u7167\u304f\u3060\u3055\u3044\u3002</p>","tags":["transformer","nlp","llm","bert","gpt","machine-learning","deep-learning"]},{"location":"LLM/01_transformer_models/#_2","title":"\u524d\u63d0\u77e5\u8b58","text":"<ul> <li>Python \u306e\u57fa\u672c\u7684\u306a\u7406\u89e3</li> <li>\u6a5f\u68b0\u5b66\u7fd2\u306e\u57fa\u790e\u6982\u5ff5</li> <li>\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0\u306e\u57fa\u672c\u7684\u306a\u77e5\u8b58</li> </ul>","tags":["transformer","nlp","llm","bert","gpt","machine-learning","deep-learning"]},{"location":"LLM/01_transformer_models/#nlpllm","title":"\u81ea\u7136\u8a00\u8a9e\u51e6\u7406\uff08NLP\uff09\u3068\u5927\u898f\u6a21\u8a00\u8a9e\u30e2\u30c7\u30eb\uff08LLM\uff09\u306e\u7406\u89e3","text":"<p>\u3053\u306e\u30b3\u30fc\u30b9\u306f\u5f53\u521dNLP\uff08\u81ea\u7136\u8a00\u8a9e\u51e6\u7406\uff09\u306b\u7126\u70b9\u3092\u5f53\u3066\u3066\u3044\u307e\u3057\u305f\u304c\u3001\u73fe\u5728\u3067\u306f\u540c\u5206\u91ce\u306e\u6700\u65b0\u306e\u9032\u6b69\u3092\u8868\u3059\u5927\u898f\u6a21\u8a00\u8a9e\u30e2\u30c7\u30eb\uff08LLM\uff09\u3092\u91cd\u8996\u3059\u308b\u3088\u3046\u306b\u767a\u5c55\u3057\u3066\u3044\u307e\u3059\u3002</p>","tags":["transformer","nlp","llm","bert","gpt","machine-learning","deep-learning"]},{"location":"LLM/01_transformer_models/#_3","title":"\u4e21\u8005\u306e\u9055\u3044\u3068\u306f\uff1f","text":"<ul> <li>NLP\uff08\u81ea\u7136\u8a00\u8a9e\u51e6\u7406\uff09 \u306f\u3001\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u304c\u4eba\u9593\u306e\u8a00\u8a9e\u3092\u7406\u89e3\u3001\u89e3\u91c8\u3001\u751f\u6210\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u3053\u3068\u306b\u7126\u70b9\u3092\u5f53\u3066\u305f\u3001\u3088\u308a\u5e83\u7bc4\u306a\u5206\u91ce\u3067\u3059\u3002NLP\u306b\u306f\u611f\u60c5\u5206\u6790\u3001\u56fa\u6709\u8868\u73fe\u8a8d\u8b58\u3001\u6a5f\u68b0\u7ffb\u8a33\u306a\u3069\u306e\u591a\u304f\u306e\u6280\u8853\u3068\u30bf\u30b9\u30af\u304c\u542b\u307e\u308c\u307e\u3059\u3002</li> <li>LLM\uff08\u5927\u898f\u6a21\u8a00\u8a9e\u30e2\u30c7\u30eb\uff09 \u306f\u3001\u305d\u306e\u5de8\u5927\u306a\u30b5\u30a4\u30ba\u3001\u81a8\u5927\u306a\u8a13\u7df4\u30c7\u30fc\u30bf\u3001\u30bf\u30b9\u30af\u56fa\u6709\u306e\u8a13\u7df4\u3092\u6700\u5c0f\u9650\u306b\u6291\u3048\u3066\u5e45\u5e83\u3044\u8a00\u8a9e\u30bf\u30b9\u30af\u3092\u5b9f\u884c\u3059\u308b\u80fd\u529b\u3092\u7279\u5fb4\u3068\u3059\u308bNLP\u30e2\u30c7\u30eb\u306e\u5f37\u529b\u306a\u30b5\u30d6\u30bb\u30c3\u30c8\u3067\u3059\u3002Llama\u3084GPT\u3001Claude\u30b7\u30ea\u30fc\u30ba\u306a\u3069\u306e\u30e2\u30c7\u30eb\u306f\u3001NLP\u3067\u53ef\u80fd\u306a\u3053\u3068\u3092\u9769\u547d\u7684\u306b\u5909\u3048\u305fLLM\u306e\u4f8b\u3067\u3059\u3002</li> </ul>","tags":["transformer","nlp","llm","bert","gpt","machine-learning","deep-learning"]},{"location":"LLM/01_transformer_models/#_4","title":"\u81ea\u7136\u8a00\u8a9e\u51e6\u7406\u3068\u5927\u898f\u6a21\u8a00\u8a9e\u30e2\u30c7\u30eb","text":"","tags":["transformer","nlp","llm","bert","gpt","machine-learning","deep-learning"]},{"location":"LLM/01_transformer_models/#nlp","title":"NLP\u3068\u306f\u4f55\u304b\uff1f","text":"<p>NLP\u306f\u3001\u4eba\u9593\u306e\u8a00\u8a9e\u306b\u95a2\u3059\u308b\u3042\u3089\u3086\u308b\u3053\u3068\u3092\u7406\u89e3\u3059\u308b\u3053\u3068\u306b\u7126\u70b9\u3092\u5f53\u3066\u305f\u8a00\u8a9e\u5b66\u3068\u6a5f\u68b0\u5b66\u7fd2\u306e\u5206\u91ce\u3067\u3059\u3002NLP\u30bf\u30b9\u30af\u306e\u76ee\u7684\u306f\u3001\u5358\u8a9e\u3092\u500b\u5225\u306b\u7406\u89e3\u3059\u308b\u3060\u3051\u3067\u306a\u304f\u3001\u305d\u308c\u3089\u306e\u5358\u8a9e\u306e\u6587\u8108\u3092\u7406\u89e3\u3059\u308b\u3053\u3068\u3067\u3059\u3002</p> <p>\u4ee5\u4e0b\u306f\u4e00\u822c\u7684\u306aNLP\u30bf\u30b9\u30af\u306e\u30ea\u30b9\u30c8\u3068\u3001\u305d\u308c\u305e\u308c\u306e\u4f8b\u3067\u3059\uff1a</p> <ul> <li>\u6587\u5168\u4f53\u306e\u5206\u985e: \u30ec\u30d3\u30e5\u30fc\u306e\u611f\u60c5\u3092\u53d6\u5f97\u3059\u308b\u3001\u30e1\u30fc\u30eb\u304c\u30b9\u30d1\u30e0\u304b\u3069\u3046\u304b\u3092\u691c\u51fa\u3059\u308b\u3001\u6587\u304c\u6587\u6cd5\u7684\u306b\u6b63\u3057\u3044\u304b\u3001\u307e\u305f\u306f2\u3064\u306e\u6587\u304c\u8ad6\u7406\u7684\u306b\u95a2\u9023\u3057\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b</li> <li>\u6587\u4e2d\u306e\u5404\u5358\u8a9e\u306e\u5206\u985e: \u6587\u306e\u6587\u6cd5\u7684\u69cb\u6210\u8981\u7d20\uff08\u540d\u8a5e\u3001\u52d5\u8a5e\u3001\u5f62\u5bb9\u8a5e\uff09\u307e\u305f\u306f\u56fa\u6709\u8868\u73fe\uff08\u4eba\u3001\u5834\u6240\u3001\u7d44\u7e54\uff09\u3092\u8b58\u5225\u3059\u308b</li> <li>\u30c6\u30ad\u30b9\u30c8\u30b3\u30f3\u30c6\u30f3\u30c4\u306e\u751f\u6210: \u81ea\u52d5\u751f\u6210\u3055\u308c\u305f\u30c6\u30ad\u30b9\u30c8\u3067\u30d7\u30ed\u30f3\u30d7\u30c8\u3092\u5b8c\u6210\u3055\u305b\u308b\u3001\u30de\u30b9\u30af\u3055\u308c\u305f\u5358\u8a9e\u3067\u30c6\u30ad\u30b9\u30c8\u306e\u7a7a\u767d\u3092\u57cb\u3081\u308b</li> <li>\u30c6\u30ad\u30b9\u30c8\u304b\u3089\u56de\u7b54\u3092\u62bd\u51fa\u3059\u308b: \u8cea\u554f\u3068\u6587\u8108\u304c\u4e0e\u3048\u3089\u308c\u305f\u3068\u304d\u3001\u6587\u8108\u3067\u63d0\u4f9b\u3055\u308c\u305f\u60c5\u5831\u306b\u57fa\u3065\u3044\u3066\u8cea\u554f\u3078\u306e\u56de\u7b54\u3092\u62bd\u51fa\u3059\u308b</li> <li>\u5165\u529b\u30c6\u30ad\u30b9\u30c8\u304b\u3089\u65b0\u3057\u3044\u6587\u3092\u751f\u6210\u3059\u308b: \u30c6\u30ad\u30b9\u30c8\u3092\u5225\u306e\u8a00\u8a9e\u306b\u7ffb\u8a33\u3059\u308b\u3001\u30c6\u30ad\u30b9\u30c8\u3092\u8981\u7d04\u3059\u308b</li> </ul> <p>\u305f\u3060\u3057\u3001NLP\u306f\u66f8\u304b\u308c\u305f\u30c6\u30ad\u30b9\u30c8\u306b\u9650\u5b9a\u3055\u308c\u307e\u305b\u3093\u3002\u97f3\u58f0\u8a8d\u8b58\u3084\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3\u306e\u8907\u96d1\u306a\u8ab2\u984c\u306b\u3082\u53d6\u308a\u7d44\u3093\u3067\u304a\u308a\u3001\u97f3\u58f0\u30b5\u30f3\u30d7\u30eb\u306e\u8ee2\u5199\u3084\u753b\u50cf\u306e\u8aac\u660e\u306e\u751f\u6210\u306a\u3069\u3092\u884c\u3044\u307e\u3059\u3002</p>","tags":["transformer","nlp","llm","bert","gpt","machine-learning","deep-learning"]},{"location":"LLM/01_transformer_models/#llm","title":"\u5927\u898f\u6a21\u8a00\u8a9e\u30e2\u30c7\u30eb\uff08LLM\uff09\u306e\u53f0\u982d","text":"<p>\u8fd1\u5e74\u3001NLP\u5206\u91ce\u306f\u5927\u898f\u6a21\u8a00\u8a9e\u30e2\u30c7\u30eb\uff08LLM\uff09\u306b\u3088\u3063\u3066\u9769\u547d\u7684\u306a\u5909\u5316\u3092\u9042\u3052\u3066\u3044\u307e\u3059\u3002GPT\uff08Generative Pre-trained Transformer\uff09\u3084Llama\u306a\u3069\u306e\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3092\u542b\u3080\u3053\u308c\u3089\u306e\u30e2\u30c7\u30eb\u306f\u3001\u8a00\u8a9e\u51e6\u7406\u3067\u53ef\u80fd\u306a\u3053\u3068\u3092\u5909\u9769\u3057\u307e\u3057\u305f\u3002</p> <p>\u8c46\u77e5\u8b58</p> <p>\u5927\u898f\u6a21\u8a00\u8a9e\u30e2\u30c7\u30eb\uff08LLM\uff09\u306f\u3001\u81a8\u5927\u306a\u30c6\u30ad\u30b9\u30c8\u30c7\u30fc\u30bf\u3067\u8a13\u7df4\u3055\u308c\u305fAI\u30e2\u30c7\u30eb\u3067\u3001\u4eba\u9593\u306e\u3088\u3046\u306a\u30c6\u30ad\u30b9\u30c8\u3092\u7406\u89e3\u30fb\u751f\u6210\u3057\u3001\u8a00\u8a9e\u306e\u30d1\u30bf\u30fc\u30f3\u3092\u8a8d\u8b58\u3057\u3001\u30bf\u30b9\u30af\u56fa\u6709\u306e\u8a13\u7df4\u306a\u3057\u306b\u591a\u69d8\u306a\u8a00\u8a9e\u30bf\u30b9\u30af\u3092\u5b9f\u884c\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u3089\u306f\u81ea\u7136\u8a00\u8a9e\u51e6\u7406\uff08NLP\uff09\u5206\u91ce\u306b\u304a\u3051\u308b\u91cd\u8981\u306a\u9032\u6b69\u3092\u8868\u3057\u3066\u3044\u307e\u3059\u3002</p> <p>LLM\u306e\u7279\u5fb4\uff1a</p> <ul> <li>\u30b9\u30b1\u30fc\u30eb: \u6570\u767e\u4e07\u3001\u6570\u5341\u5104\u3001\u3055\u3089\u306b\u306f\u6570\u5343\u5104\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u542b\u3080</li> <li>\u4e00\u822c\u7684\u306a\u80fd\u529b: \u30bf\u30b9\u30af\u56fa\u6709\u306e\u8a13\u7df4\u306a\u3057\u306b\u8907\u6570\u306e\u30bf\u30b9\u30af\u3092\u5b9f\u884c\u3067\u304d\u308b</li> <li>\u6587\u8108\u5185\u5b66\u7fd2: \u30d7\u30ed\u30f3\u30d7\u30c8\u3067\u63d0\u4f9b\u3055\u308c\u305f\u4f8b\u304b\u3089\u5b66\u7fd2\u3067\u304d\u308b</li> <li>\u5275\u767a\u7684\u80fd\u529b: \u3053\u308c\u3089\u306e\u30e2\u30c7\u30eb\u304c\u30b5\u30a4\u30ba\u3067\u6210\u9577\u3059\u308b\u306b\u3064\u308c\u3001\u660e\u793a\u7684\u306b\u30d7\u30ed\u30b0\u30e9\u30e0\u3055\u308c\u305f\u308a\u4e88\u60f3\u3055\u308c\u305f\u308a\u3057\u306a\u304b\u3063\u305f\u80fd\u529b\u3092\u793a\u3059</li> </ul> <p>LLM\u306e\u51fa\u73fe\u306b\u3088\u308a\u3001\u7279\u5b9a\u306eNLP\u30bf\u30b9\u30af\u306e\u305f\u3081\u306e\u5c02\u9580\u30e2\u30c7\u30eb\u3092\u69cb\u7bc9\u3059\u308b\u30d1\u30e9\u30c0\u30a4\u30e0\u304b\u3089\u3001\u5e45\u5e83\u3044\u8a00\u8a9e\u30bf\u30b9\u30af\u306b\u5bfe\u51e6\u3059\u308b\u305f\u3081\u306b\u30d7\u30ed\u30f3\u30d7\u30c8\u3092\u4e0e\u3048\u305f\u308a\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3057\u305f\u308a\u3067\u304d\u308b\u5358\u4e00\u306e\u5927\u578b\u30e2\u30c7\u30eb\u3092\u4f7f\u7528\u3059\u308b\u30d1\u30e9\u30c0\u30a4\u30e0\u3078\u3068\u79fb\u884c\u3057\u307e\u3057\u305f\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u6d17\u7df4\u3055\u308c\u305f\u8a00\u8a9e\u51e6\u7406\u304c\u3088\u308a\u8eab\u8fd1\u306b\u306a\u3063\u305f\u4e00\u65b9\u3067\u3001\u52b9\u7387\u6027\u3001\u502b\u7406\u3001\u30c7\u30d7\u30ed\u30a4\u30e1\u30f3\u30c8\u306a\u3069\u306e\u5206\u91ce\u3067\u65b0\u305f\u306a\u8ab2\u984c\u3082\u751f\u3058\u3066\u3044\u307e\u3059\u3002</p> <p>\u305f\u3060\u3057\u3001LLM\u306b\u306f\u91cd\u8981\u306a\u5236\u9650\u3082\u3042\u308a\u307e\u3059\uff1a</p> <ul> <li>\u5e7b\u899a: \u9593\u9055\u3063\u305f\u60c5\u5831\u3092\u78ba\u4fe1\u3092\u6301\u3063\u3066\u751f\u6210\u3059\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b</li> <li>\u771f\u306e\u7406\u89e3\u306e\u6b20\u5982: \u4e16\u754c\u306e\u771f\u306e\u7406\u89e3\u3092\u6b20\u304d\u3001\u7d14\u7c8b\u306b\u7d71\u8a08\u7684\u30d1\u30bf\u30fc\u30f3\u3067\u52d5\u4f5c\u3059\u308b</li> <li>\u30d0\u30a4\u30a2\u30b9: \u8a13\u7df4\u30c7\u30fc\u30bf\u3084\u5165\u529b\u306b\u5b58\u5728\u3059\u308b\u30d0\u30a4\u30a2\u30b9\u3092\u518d\u73fe\u3059\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b</li> <li>\u6587\u8108\u30a6\u30a3\u30f3\u30c9\u30a6: \u9650\u3089\u308c\u305f\u6587\u8108\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u6301\u3064\uff08\u305f\u3060\u3057\u3001\u3053\u308c\u306f\u6539\u5584\u3055\u308c\u3066\u3044\u308b\uff09</li> <li>\u8a08\u7b97\u30ea\u30bd\u30fc\u30b9: \u91cd\u8981\u306a\u8a08\u7b97\u30ea\u30bd\u30fc\u30b9\u3092\u5fc5\u8981\u3068\u3059\u308b</li> </ul>","tags":["transformer","nlp","llm","bert","gpt","machine-learning","deep-learning"]},{"location":"LLM/01_transformer_models/#_5","title":"\u306a\u305c\u8a00\u8a9e\u51e6\u7406\u306f\u56f0\u96e3\u306a\u306e\u304b\uff1f","text":"<p>\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u306f\u4eba\u9593\u3068\u540c\u3058\u65b9\u6cd5\u3067\u60c5\u5831\u3092\u51e6\u7406\u3057\u307e\u305b\u3093\u3002\u4f8b\u3048\u3070\u3001\u300c\u304a\u8179\u304c\u7a7a\u3044\u305f\u300d\u3068\u3044\u3046\u6587\u3092\u8aad\u3080\u3068\u304d\u3001\u79c1\u305f\u3061\u306f\u305d\u306e\u610f\u5473\u3092\u7c21\u5358\u306b\u7406\u89e3\u3067\u304d\u307e\u3059\u3002\u540c\u69d8\u306b\u3001\u300c\u304a\u8179\u304c\u7a7a\u3044\u305f\u300d\u3068\u300c\u60b2\u3057\u3044\u300d\u306e2\u3064\u306e\u6587\u304c\u4e0e\u3048\u3089\u308c\u305f\u3068\u304d\u3001\u79c1\u305f\u3061\u306f\u3053\u308c\u3089\u304c\u3069\u306e\u7a0b\u5ea6\u4f3c\u3066\u3044\u308b\u304b\u3092\u7c21\u5358\u306b\u5224\u65ad\u3067\u304d\u307e\u3059\u3002\u6a5f\u68b0\u5b66\u7fd2\uff08ML\uff09\u30e2\u30c7\u30eb\u306b\u3068\u3063\u3066\u3001\u3053\u306e\u3088\u3046\u306a\u30bf\u30b9\u30af\u306f\u3088\u308a\u56f0\u96e3\u3067\u3059\u3002\u30c6\u30ad\u30b9\u30c8\u306f\u3001\u30e2\u30c7\u30eb\u304c\u305d\u308c\u304b\u3089\u5b66\u7fd2\u3067\u304d\u308b\u65b9\u6cd5\u3067\u51e6\u7406\u3055\u308c\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u305d\u3057\u3066\u8a00\u8a9e\u306f\u8907\u96d1\u306a\u305f\u3081\u3001\u3053\u306e\u51e6\u7406\u3092\u3069\u306e\u3088\u3046\u306b\u884c\u3046\u3079\u304d\u304b\u3092\u614e\u91cd\u306b\u8003\u3048\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u30c6\u30ad\u30b9\u30c8\u3092\u8868\u73fe\u3059\u308b\u65b9\u6cd5\u306b\u3064\u3044\u3066\u591a\u304f\u306e\u7814\u7a76\u304c\u884c\u308f\u308c\u3066\u304a\u308a\u3001\u6b21\u306e\u7ae0\u3067\u3044\u304f\u3064\u304b\u306e\u65b9\u6cd5\u3092\u898b\u3066\u3044\u304d\u307e\u3059\u3002</p> <p>LLM\u306e\u9032\u6b69\u304c\u3042\u3063\u3066\u3082\u3001\u591a\u304f\u306e\u57fa\u672c\u7684\u306a\u8ab2\u984c\u304c\u6b8b\u3063\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u306b\u306f\u66d6\u6627\u3055\u3001\u6587\u5316\u7684\u6587\u8108\u3001\u76ae\u8089\u3001\u30e6\u30fc\u30e2\u30a2\u306e\u7406\u89e3\u304c\u542b\u307e\u308c\u307e\u3059\u3002LLM\u306f\u591a\u69d8\u306a\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3067\u306e\u5927\u898f\u6a21\u306a\u8a13\u7df4\u3092\u901a\u3058\u3066\u3053\u308c\u3089\u306e\u8ab2\u984c\u306b\u5bfe\u51e6\u3057\u307e\u3059\u304c\u3001\u591a\u304f\u306e\u8907\u96d1\u306a\u30b7\u30ca\u30ea\u30aa\u3067\u4eba\u9593\u30ec\u30d9\u30eb\u306e\u7406\u89e3\u306b\u306f\u4f9d\u7136\u3068\u3057\u3066\u53ca\u3073\u307e\u305b\u3093\u3002</p>","tags":["transformer","nlp","llm","bert","gpt","machine-learning","deep-learning"]},{"location":"LLM/01_transformer_models/#transformers","title":"Transformers \u3067\u3067\u304d\u308b\u3053\u3068","text":"","tags":["transformer","nlp","llm","bert","gpt","machine-learning","deep-learning"]},{"location":"LLM/01_transformer_models/#_6","title":"\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u3092\u4f7f\u3063\u305f\u4f5c\u696d","text":"<p>Transformers\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u6700\u3082\u57fa\u672c\u7684\u306a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f <code>pipeline()</code> \u95a2\u6570\u3067\u3059\u3002\u3053\u308c\u306f\u3001\u30e2\u30c7\u30eb\u3068\u5fc5\u8981\u306a\u524d\u51e6\u7406\u304a\u3088\u3073\u5f8c\u51e6\u7406\u30b9\u30c6\u30c3\u30d7\u3092\u63a5\u7d9a\u3057\u3001\u4efb\u610f\u306e\u30c6\u30ad\u30b9\u30c8\u3092\u76f4\u63a5\u5165\u529b\u3057\u3066\u7406\u89e3\u53ef\u80fd\u306a\u7b54\u3048\u3092\u5f97\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a</p> <pre><code>import transformers\n</code></pre> <pre><code># \u9ad8\u30ec\u30d9\u30eb\u30d8\u30eb\u30d1\u30fc\u3068\u3057\u3066\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u3092\u4f7f\u7528\nfrom transformers import pipeline\n\nclassifier = pipeline(\"sentiment-analysis\", model=\"distilbert/distilbert-base-uncased-finetuned-sst-2-english\")\nclassifier(\"I've been waiting for a HuggingFace course my whole life.\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c\uff1a <pre><code>Device set to use mps:0\n\n[{'label': 'POSITIVE', 'score': 0.9598050713539124}]\n</code></pre></p> <pre><code>classifier(\n    [\"I've been waiting for a HuggingFace course my whole life.\", \"I hate this so much!\"]\n)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c\uff1a <pre><code>[{'label': 'POSITIVE', 'score': 0.9598050713539124},\n {'label': 'NEGATIVE', 'score': 0.9994558691978455}]\n</code></pre></p> <p>\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u3001\u3053\u306e\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306f\u82f1\u8a9e\u306e\u611f\u60c5\u5206\u6790\u7528\u306b\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3055\u308c\u305f\u7279\u5b9a\u306e\u4e8b\u524d\u8a13\u7df4\u6e08\u307f\u30e2\u30c7\u30eb\u3092\u9078\u629e\u3057\u307e\u3059\u3002\u5206\u985e\u5668\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b\u3068\u3001\u30e2\u30c7\u30eb\u304c\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3055\u308c\u3066\u30ad\u30e3\u30c3\u30b7\u30e5\u3055\u308c\u307e\u3059\u3002\u30b3\u30de\u30f3\u30c9\u3092\u518d\u5b9f\u884c\u3059\u308b\u3068\u3001\u30ad\u30e3\u30c3\u30b7\u30e5\u3055\u308c\u305f\u30e2\u30c7\u30eb\u304c\u4f7f\u7528\u3055\u308c\u3001\u30e2\u30c7\u30eb\u3092\u518d\u5ea6\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u305b\u3093\u3002</p> <p>\u30c6\u30ad\u30b9\u30c8\u3092\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306b\u6e21\u3059\u3068\u304d\u306b\u95a2\u4e0e\u3059\u308b3\u3064\u306e\u4e3b\u8981\u306a\u30b9\u30c6\u30c3\u30d7\u304c\u3042\u308a\u307e\u3059\uff1a</p> <ol> <li>\u30c6\u30ad\u30b9\u30c8\u306f\u3001\u30e2\u30c7\u30eb\u304c\u7406\u89e3\u3067\u304d\u308b\u5f62\u5f0f\u306b\u524d\u51e6\u7406\u3055\u308c\u307e\u3059\u3002</li> <li>\u524d\u51e6\u7406\u3055\u308c\u305f\u5165\u529b\u304c\u30e2\u30c7\u30eb\u306b\u6e21\u3055\u308c\u307e\u3059\u3002</li> <li>\u30e2\u30c7\u30eb\u306e\u4e88\u6e2c\u304c\u5f8c\u51e6\u7406\u3055\u308c\u3001\u7406\u89e3\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002</li> </ol>","tags":["transformer","nlp","llm","bert","gpt","machine-learning","deep-learning"]},{"location":"LLM/01_transformer_models/#_7","title":"\u7570\u306a\u308b\u30e2\u30c0\u30ea\u30c6\u30a3\u7528\u306e\u5229\u7528\u53ef\u80fd\u306a\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3","text":"<p><code>pipeline()</code> \u95a2\u6570\u306f\u8907\u6570\u306e\u30e2\u30c0\u30ea\u30c6\u30a3\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3001\u30c6\u30ad\u30b9\u30c8\u3001\u753b\u50cf\u3001\u97f3\u58f0\u3001\u3055\u3089\u306b\u306f\u30de\u30eb\u30c1\u30e2\u30fc\u30c0\u30eb\u306a\u30bf\u30b9\u30af\u3067\u4f5c\u696d\u3067\u304d\u307e\u3059\u3002\u3053\u306e\u30b3\u30fc\u30b9\u3067\u306f\u30c6\u30ad\u30b9\u30c8\u30bf\u30b9\u30af\u306b\u7126\u70b9\u3092\u5f53\u3066\u307e\u3059\u304c\u3001Transformer\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306e\u53ef\u80fd\u6027\u3092\u7406\u89e3\u3059\u308b\u306e\u306b\u5f79\u7acb\u3064\u306e\u3067\u3001\u7c21\u5358\u306b\u6982\u8981\u3092\u8aac\u660e\u3057\u307e\u3059\u3002</p> <p>\u5229\u7528\u53ef\u80fd\u306a\u3082\u306e\u306e\u6982\u8981\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\uff1a</p>","tags":["transformer","nlp","llm","bert","gpt","machine-learning","deep-learning"]},{"location":"LLM/01_transformer_models/#_8","title":"\u30c6\u30ad\u30b9\u30c8\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3","text":"<ul> <li><code>text-generation</code>: \u30d7\u30ed\u30f3\u30d7\u30c8\u304b\u3089\u30c6\u30ad\u30b9\u30c8\u3092\u751f\u6210</li> <li><code>text-classification</code>: \u30c6\u30ad\u30b9\u30c8\u3092\u4e8b\u524d\u5b9a\u7fa9\u3055\u308c\u305f\u30ab\u30c6\u30b4\u30ea\u306b\u5206\u985e</li> <li><code>summarization</code>: \u30ad\u30fc\u60c5\u5831\u3092\u4fdd\u6301\u3057\u306a\u304c\u3089\u30c6\u30ad\u30b9\u30c8\u306e\u77ed\u7e2e\u7248\u3092\u4f5c\u6210</li> <li><code>translation</code>: \u30c6\u30ad\u30b9\u30c8\u3092\u3042\u308b\u8a00\u8a9e\u304b\u3089\u5225\u306e\u8a00\u8a9e\u306b\u7ffb\u8a33</li> <li><code>zero-shot-classification</code>: \u7279\u5b9a\u306e\u30e9\u30d9\u30eb\u3067\u306e\u4e8b\u524d\u8a13\u7df4\u306a\u3057\u306b\u30c6\u30ad\u30b9\u30c8\u3092\u5206\u985e</li> <li><code>feature-extraction</code>: \u30c6\u30ad\u30b9\u30c8\u306e\u30d9\u30af\u30c8\u30eb\u8868\u73fe\u3092\u62bd\u51fa</li> </ul>","tags":["transformer","nlp","llm","bert","gpt","machine-learning","deep-learning"]},{"location":"LLM/01_transformer_models/#_9","title":"\u753b\u50cf\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3","text":"<ul> <li><code>image-to-text</code>: \u753b\u50cf\u306e\u30c6\u30ad\u30b9\u30c8\u8aac\u660e\u3092\u751f\u6210</li> <li><code>image-classification</code>: \u753b\u50cf\u5185\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u8b58\u5225</li> <li><code>object-detection</code>: \u753b\u50cf\u5185\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u7279\u5b9a\u3057\u8b58\u5225</li> </ul>","tags":["transformer","nlp","llm","bert","gpt","machine-learning","deep-learning"]},{"location":"LLM/01_transformer_models/#_10","title":"\u97f3\u58f0\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3","text":"<ul> <li><code>automatic-speech-recognition</code>: \u97f3\u58f0\u3092\u30c6\u30ad\u30b9\u30c8\u306b\u5909\u63db</li> <li><code>audio-classification</code>: \u97f3\u58f0\u3092\u30ab\u30c6\u30b4\u30ea\u306b\u5206\u985e</li> <li><code>text-to-speech</code>: \u30c6\u30ad\u30b9\u30c8\u3092\u8a71\u3057\u8a00\u8449\u306e\u97f3\u58f0\u306b\u5909\u63db</li> </ul>","tags":["transformer","nlp","llm","bert","gpt","machine-learning","deep-learning"]},{"location":"LLM/01_transformer_models/#_11","title":"\u30de\u30eb\u30c1\u30e2\u30fc\u30c0\u30eb\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3","text":"<ul> <li><code>image-text-to-text</code>: \u30c6\u30ad\u30b9\u30c8\u30d7\u30ed\u30f3\u30d7\u30c8\u306b\u57fa\u3065\u3044\u3066\u753b\u50cf\u306b\u5fdc\u7b54</li> </ul>","tags":["transformer","nlp","llm","bert","gpt","machine-learning","deep-learning"]},{"location":"LLM/01_transformer_models/#_12","title":"\u30bc\u30ed\u30b7\u30e7\u30c3\u30c8\u5206\u985e","text":"<p>\u30e9\u30d9\u30eb\u4ed8\u3051\u3055\u308c\u3066\u3044\u306a\u3044\u30c6\u30ad\u30b9\u30c8\u3092\u5206\u985e\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3001\u3088\u308a\u56f0\u96e3\u306a\u30bf\u30b9\u30af\u304b\u3089\u59cb\u3081\u307e\u3057\u3087\u3046\u3002\u3053\u308c\u306f\u5b9f\u969b\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u306f\u4e00\u822c\u7684\u306a\u30b7\u30ca\u30ea\u30aa\u3067\u3059\u3002\u30c6\u30ad\u30b9\u30c8\u306b\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u4ed8\u3051\u308b\u4f5c\u696d\u306f\u901a\u5e38\u6642\u9593\u304c\u304b\u304b\u308a\u3001\u30c9\u30e1\u30a4\u30f3\u306e\u5c02\u9580\u77e5\u8b58\u3082\u5fc5\u8981\u306b\u306a\u308b\u305f\u3081\u3067\u3059\u3002\u3053\u306e\u7528\u9014\u3067\u306f\u3001<code>zero-shot-classification</code> \u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u304c\u975e\u5e38\u306b\u5f37\u529b\u3067\u3059\u3002\u5206\u985e\u306b\u4f7f\u7528\u3059\u308b\u30e9\u30d9\u30eb\u3092\u6307\u5b9a\u3067\u304d\u308b\u305f\u3081\u3001\u4e8b\u524d\u8a13\u7df4\u6e08\u307f\u30e2\u30c7\u30eb\u306e\u30e9\u30d9\u30eb\u306b\u4f9d\u5b58\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u305b\u3093\u3002</p> <p>\u30e2\u30c7\u30eb\u304c\u6b63\uff0f\u8ca0\u306e\u30e9\u30d9\u30eb\u3092\u4f7f\u7528\u3057\u3066\u6587\u3092\u5206\u985e\u3059\u308b\u65b9\u6cd5\u3092\u3059\u3067\u306b\u898b\u3066\u304d\u307e\u3057\u305f\u304c\u3001\u4ed6\u306e\u4efb\u610f\u306e\u30e9\u30d9\u30eb\u30bb\u30c3\u30c8\u3092\u4f7f\u7528\u3057\u3066\u30c6\u30ad\u30b9\u30c8\u3092\u5206\u985e\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002</p> <pre><code>from transformers import pipeline\n\nclassifier = pipeline(\"zero-shot-classification\")\nclassifier(\"This is a course about the Transformers library\",\n           candidate_labels=[\"education\", \"politics\", \"business\"])\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c\uff1a <pre><code>Device set to use mps:0\n{'sequence': 'This is a course about the Transformers library',\n 'labels': ['education', 'business', 'politics'],\n 'scores': [0.8445975184440613, 0.11197531223297119, 0.04342718794941902]}\n</code></pre></p> <p>\u3053\u306e\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306f \u30bc\u30ed\u30b7\u30e7\u30c3\u30c8 \u3068\u547c\u3070\u308c\u307e\u3059\u3002\u306a\u305c\u306a\u3089\u3001\u305d\u308c\u3092\u4f7f\u7528\u3059\u308b\u305f\u3081\u306b\u30c7\u30fc\u30bf\u3067\u30e2\u30c7\u30eb\u3092\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3059\u308b\u5fc5\u8981\u304c\u306a\u3044\u304b\u3089\u3067\u3059\u3002\u5e0c\u671b\u3059\u308b\u4efb\u610f\u306e\u30e9\u30d9\u30eb\u30ea\u30b9\u30c8\u306b\u5bfe\u3057\u3066\u76f4\u63a5\u78ba\u7387\u30b9\u30b3\u30a2\u3092\u8fd4\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff01</p>","tags":["transformer","nlp","llm","bert","gpt","machine-learning","deep-learning"]},{"location":"LLM/01_transformer_models/#_13","title":"\u30c6\u30ad\u30b9\u30c8\u751f\u6210","text":"<p>\u6b21\u306b\u3001\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u3092\u4f7f\u7528\u3057\u3066\u30c6\u30ad\u30b9\u30c8\u3092\u751f\u6210\u3059\u308b\u65b9\u6cd5\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u3053\u3053\u3067\u306e\u4e3b\u306a\u30a2\u30a4\u30c7\u30a2\u306f\u3001\u30d7\u30ed\u30f3\u30d7\u30c8\u3092\u63d0\u4f9b\u3059\u308b\u3068\u3001\u30e2\u30c7\u30eb\u304c\u6b8b\u308a\u306e\u30c6\u30ad\u30b9\u30c8\u3092\u751f\u6210\u3059\u308b\u3053\u3068\u3067\u81ea\u52d5\u5b8c\u6210\u3059\u308b\u3053\u3068\u3067\u3059\u3002\u3053\u308c\u306f\u3001\u591a\u304f\u306e\u643a\u5e2f\u96fb\u8a71\u306b\u3042\u308b\u4e88\u6e2c\u30c6\u30ad\u30b9\u30c8\u6a5f\u80fd\u306b\u4f3c\u3066\u3044\u307e\u3059\u3002\u30c6\u30ad\u30b9\u30c8\u751f\u6210\u306b\u306f\u30e9\u30f3\u30c0\u30e0\u6027\u304c\u95a2\u4e0e\u3059\u308b\u305f\u3081\u3001\u4ee5\u4e0b\u306b\u793a\u3059\u306e\u3068\u540c\u3058\u7d50\u679c\u304c\u5f97\u3089\u308c\u306a\u304f\u3066\u3082\u6b63\u5e38\u3067\u3059\u3002</p> <pre><code>from transformers import pipeline\n\ngenerator = pipeline(\"text-generation\", model=\"openai-community/gpt2\") \ngenerator(\"In this course, we will teach you how to\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c\uff1a <pre><code>Device set to use mps:0\nSetting `pad_token_id` to `eos_token_id`:50256 for open-end generation.\n\n[{'generated_text': 'In this course, we will teach you how to use the most powerful JavaScript APIs and APIs with the most powerful technologies.\\n\\nIn this course, we will introduce you to the most powerful JavaScript APIs.\\n\\nWe will also introduce you to the most powerful JavaScript APIs.\\n\\nIn this course, we will learn how to use the most powerful JavaScript APIs to build mobile apps.\\n\\nWe will also learn how to use the most powerful JavaScript APIs to build mobile apps.\\n\\nWe will also learn how to use the most powerful JavaScript APIs to build mobile apps.\\n\\nIn this course, we will learn how to use the most powerful JavaScript APIs to build mobile apps.\\n\\nWe will also learn how to use the most powerful JavaScript APIs to build mobile apps.\\n\\nIn this course, we will learn how to use the most powerful JavaScript APIs to build mobile apps.\\n\\nWe will also learn how to use the most powerful JavaScript APIs to build mobile apps.\\n\\nThis course is designed to showcase the most powerful JavaScript APIs available, in this way, that can be used in mobile apps.\\n\\nThis course is designed to showcase the most powerful JavaScript APIs available, in this way, that can be used in mobile apps.\\n\\nThis course is designed to showcase the most powerful JavaScript APIs available,'}]\n</code></pre></p> <p><code>num_return_sequences</code> \u5f15\u6570\u3067\u751f\u6210\u3055\u308c\u308b\u7570\u306a\u308b\u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u6570\u3092\u5236\u5fa1\u3057\u3001<code>max_length</code> \u5f15\u6570\u3067\u51fa\u529b\u30c6\u30ad\u30b9\u30c8\u306e\u7dcf\u9577\u3092\u5236\u5fa1\u3067\u304d\u307e\u3059\u3002</p> <pre><code>generator = pipeline(\"text-generation\", model=\"openai-community/gpt2\") \ngenerator(\"In this course, we will teach you how to\",\n          num_return_sequences=2,\n          max_new_tokens=15,\n          truncation=True)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c\uff1a <pre><code>Device set to use mps:0\nSetting `pad_token_id` to `eos_token_id`:50256 for open-end generation.\n\n[{'generated_text': 'In this course, we will teach you how to use the new Microsoft Paint 3D editor and 3D Markdown editor in'},\n {'generated_text': 'In this course, we will teach you how to manipulate the world in a way that is both effective and practical.\\n\\n'}]\n</code></pre></p>","tags":["transformer","nlp","llm","bert","gpt","machine-learning","deep-learning"]},{"location":"LLM/01_transformer_models/#hub","title":"Hub \u306e\u4efb\u610f\u306e\u30e2\u30c7\u30eb\u3092\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u3067\u4f7f\u7528","text":"<p>\u524d\u306e\u4f8b\u3067\u306f\u3001\u5f53\u8a72\u30bf\u30b9\u30af\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u30e2\u30c7\u30eb\u3092\u4f7f\u7528\u3057\u307e\u3057\u305f\u304c\u3001\u7279\u5b9a\u306e\u30bf\u30b9\u30af\uff08\u30c6\u30ad\u30b9\u30c8\u751f\u6210\u306a\u3069\uff09\u306e\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u3067Hub\u304b\u3089\u7279\u5b9a\u306e\u30e2\u30c7\u30eb\u3092\u9078\u629e\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002Model Hub \u306b\u79fb\u52d5\u3057\u3001\u5de6\u5074\u306e\u5bfe\u5fdc\u3059\u308b\u30bf\u30b0\u3092\u30af\u30ea\u30c3\u30af\u3057\u3066\u3001\u305d\u306e\u30bf\u30b9\u30af\u3067\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u308b\u30e2\u30c7\u30eb\u306e\u307f\u3092\u8868\u793a\u3057\u307e\u3059\u3002\u3053\u3061\u3089 \u306e\u3088\u3046\u306a\u30da\u30fc\u30b8\u304c\u8868\u793a\u3055\u308c\u308b\u306f\u305a\u3067\u3059\u3002</p> <p><code>distilgpt2</code> \u30e2\u30c7\u30eb\u3092\u8a66\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff01\u524d\u3068\u540c\u3058\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306b\u8aad\u307f\u8fbc\u3080\u65b9\u6cd5\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\uff1a</p> <pre><code>from transformers import pipeline\n\ngenerator = pipeline(\"text-generation\", model=\"distilgpt2\")\ngenerator(\"In this course, we will teach you how to\",\n    max_new_tokens=30,\n    num_return_sequences=2,\n    truncation=True)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c\uff1a <pre><code>Device set to use mps:0\nSetting `pad_token_id` to `eos_token_id`:50256 for open-end generation.\n\n[{'generated_text': 'In this course, we will teach you how to use your tool to add a new feature to your application with the new API:\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n'},\n {'generated_text': 'In this course, we will teach you how to do so, so that you can build your own relationships with them.'}]\n</code></pre></p> <p>\u8a00\u8a9e\u30bf\u30b0\u3092\u30af\u30ea\u30c3\u30af\u3057\u3066\u30e2\u30c7\u30eb\u306e\u691c\u7d22\u3092\u7d5e\u308a\u8fbc\u307f\u3001\u5225\u306e\u8a00\u8a9e\u3067\u30c6\u30ad\u30b9\u30c8\u3092\u751f\u6210\u3059\u308b\u30e2\u30c7\u30eb\u3092\u9078\u629e\u3067\u304d\u307e\u3059\u3002Model Hub\u306b\u306f\u3001\u8907\u6570\u306e\u8a00\u8a9e\u3092\u30b5\u30dd\u30fc\u30c8\u3059\u308b\u591a\u8a00\u8a9e\u30e2\u30c7\u30eb\u306e\u30c1\u30a7\u30c3\u30af\u30dd\u30a4\u30f3\u30c8\u3082\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002</p> <p>\u30e2\u30c7\u30eb\u3092\u30af\u30ea\u30c3\u30af\u3057\u3066\u9078\u629e\u3059\u308b\u3068\u3001\u76f4\u63a5\u30aa\u30f3\u30e9\u30a4\u30f3\u3067\u8a66\u3059\u3053\u3068\u304c\u3067\u304d\u308b\u30a6\u30a3\u30b8\u30a7\u30c3\u30c8\u304c\u3042\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\u3053\u306e\u65b9\u6cd5\u3067\u3001\u30e2\u30c7\u30eb\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u524d\u306b\u30e2\u30c7\u30eb\u306e\u6a5f\u80fd\u3092\u7d20\u65e9\u304f\u30c6\u30b9\u30c8\u3067\u304d\u307e\u3059\u3002</p>","tags":["transformer","nlp","llm","bert","gpt","machine-learning","deep-learning"]},{"location":"LLM/01_transformer_models/#_14","title":"\u63a8\u8ad6\u30d7\u30ed\u30d0\u30a4\u30c0\u30fc","text":"<p>\u3059\u3079\u3066\u306e\u30e2\u30c7\u30eb\u306f\u3001Hugging Face \u30a6\u30a7\u30d6\u30b5\u30a4\u30c8 \u3067\u5229\u7528\u53ef\u80fd\u306a\u63a8\u8ad6\u30d7\u30ed\u30d0\u30a4\u30c0\u30fc\u3092\u4f7f\u7528\u3057\u3066\u30d6\u30e9\u30a6\u30b6\u304b\u3089\u76f4\u63a5\u30c6\u30b9\u30c8\u3067\u304d\u307e\u3059\u3002\u3053\u306e\u30da\u30fc\u30b8\u3067\u30ab\u30b9\u30bf\u30e0\u30c6\u30ad\u30b9\u30c8\u3092\u5165\u529b\u3057\u3001\u30e2\u30c7\u30eb\u304c\u5165\u529b\u30c7\u30fc\u30bf\u3092\u51e6\u7406\u3059\u308b\u306e\u3092\u898b\u308b\u3053\u3068\u3067\u3001\u76f4\u63a5\u30e2\u30c7\u30eb\u3067\u904a\u3076\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p>","tags":["transformer","nlp","llm","bert","gpt","machine-learning","deep-learning"]},{"location":"LLM/01_transformer_models/#_15","title":"\u30de\u30b9\u30af\u57cb\u3081","text":"<p>\u6b21\u306b\u8a66\u3059\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306f <code>fill-mask</code> \u3067\u3059\u3002\u3053\u306e\u30bf\u30b9\u30af\u306e\u30a2\u30a4\u30c7\u30a2\u306f\u3001\u4e0e\u3048\u3089\u308c\u305f\u30c6\u30ad\u30b9\u30c8\u306e\u7a7a\u767d\u3092\u57cb\u3081\u308b\u3053\u3068\u3067\u3059\uff1a</p> <pre><code>from transformers import pipeline\n\nunmasker = pipeline(\"fill-mask\", model=\"bert-base-cased\")\nunmasker(\"Hello I'm a [MASK] model.\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c\uff1a <pre><code>Device set to use mps:0\n\n[{'score': 0.0901925191283226,\n  'token': 4633,\n  'token_str': 'fashion',\n  'sequence': \"Hello I ' m a fashion model.\"},\n {'score': 0.06349994987249374,\n  'token': 1207,\n  'token_str': 'new',\n  'sequence': \"Hello I ' m a new model.\"},\n {'score': 0.06228220462799072,\n  'token': 2581,\n  'token_str': 'male',\n  'sequence': \"Hello I ' m a male model.\"},\n {'score': 0.04417308047413826,\n  'token': 1848,\n  'token_str': 'professional',\n  'sequence': \"Hello I ' m a professional model.\"},\n {'score': 0.03326161950826645,\n  'token': 7688,\n  'token_str': 'super',\n  'sequence': \"Hello I ' m a super model.\"}]\n</code></pre></p> <p><code>top_k</code> \u5f15\u6570\u306f\u3001\u8868\u793a\u3057\u305f\u3044\u53ef\u80fd\u6027\u306e\u6570\u3092\u5236\u5fa1\u3057\u307e\u3059\u3002\u3053\u3053\u3067\u3001\u30e2\u30c7\u30eb\u306f\u7279\u5225\u306a <code>&lt;mask&gt;</code> \u30ef\u30fc\u30c9\u3092\u57cb\u3081\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u3053\u308c\u306f \u30de\u30b9\u30af\u30c8\u30fc\u30af\u30f3 \u3068\u547c\u3070\u308c\u308b\u3053\u3068\u304c\u3088\u304f\u3042\u308a\u307e\u3059\u3002\u4ed6\u306e\u30de\u30b9\u30af\u57cb\u3081\u30e2\u30c7\u30eb\u306f\u7570\u306a\u308b\u30de\u30b9\u30af\u30c8\u30fc\u30af\u30f3\u3092\u6301\u3064\u53ef\u80fd\u6027\u304c\u3042\u308b\u305f\u3081\u3001\u4ed6\u306e\u30e2\u30c7\u30eb\u3092\u63a2\u7d22\u3059\u308b\u3068\u304d\u306f\u5e38\u306b\u9069\u5207\u306a\u30de\u30b9\u30af\u30ef\u30fc\u30c9\u3092\u78ba\u8a8d\u3059\u308b\u3053\u3068\u304c\u826f\u3044\u3067\u3057\u3087\u3046\u3002\u78ba\u8a8d\u3059\u308b\u4e00\u3064\u306e\u65b9\u6cd5\u306f\u3001\u30a6\u30a3\u30b8\u30a7\u30c3\u30c8\u3067\u4f7f\u7528\u3055\u308c\u3066\u3044\u308b\u30de\u30b9\u30af\u30ef\u30fc\u30c9\u3092\u898b\u308b\u3053\u3068\u3067\u3059\u3002</p>","tags":["transformer","nlp","llm","bert","gpt","machine-learning","deep-learning"]},{"location":"LLM/01_transformer_models/#_16","title":"\u56fa\u6709\u8868\u73fe\u8a8d\u8b58","text":"<p>\u56fa\u6709\u8868\u73fe\u8a8d\u8b58\uff08NER\uff09\u306f\u3001\u30e2\u30c7\u30eb\u304c\u5165\u529b\u30c6\u30ad\u30b9\u30c8\u306e\u3069\u306e\u90e8\u5206\u304c\u4eba\u3001\u5834\u6240\u3001\u7d44\u7e54\u306a\u3069\u306e\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u306b\u5bfe\u5fdc\u3059\u308b\u304b\u3092\u898b\u3064\u3051\u308b\u30bf\u30b9\u30af\u3067\u3059\u3002\u4f8b\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\uff1a</p> <pre><code>from transformers import pipeline\n\nner = pipeline(\"ner\", aggregation_strategy=\"simple\", model=\"dbmdz/bert-large-cased-finetuned-conll03-english\")\nner(\"My name is Sylvain and I work at Hugging Face in Brooklyn. \")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c\uff1a <pre><code>Device set to use mps:0\n\n[{'entity_group': 'PER',\n  'score': np.float32(0.9981694),\n  'word': 'Sylvain',\n  'start': 11,\n  'end': 18},\n {'entity_group': 'ORG',\n  'score': np.float32(0.9796019),\n  'word': 'Hugging Face',\n  'start': 33,\n  'end': 45},\n {'entity_group': 'LOC',\n  'score': np.float32(0.9932106),\n  'word': 'Brooklyn',\n  'start': 49,\n  'end': 57}]\n</code></pre></p> <p>\u3053\u3053\u3067\u3001\u30e2\u30c7\u30eb\u306fSylvain\u304c\u4eba\uff08PER\uff09\u3001Hugging Face\u304c\u7d44\u7e54\uff08ORG\uff09\u3001Brooklyn\u304c\u5834\u6240\uff08LOC\uff09\u3067\u3042\u308b\u3053\u3068\u3092\u6b63\u3057\u304f\u8b58\u5225\u3057\u307e\u3057\u305f\u3002</p> <p>\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u4f5c\u6210\u95a2\u6570\u3067 <code>grouped_entities=True</code> \u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u6e21\u3057\u3066\u3001\u540c\u3058\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u306b\u5bfe\u5fdc\u3059\u308b\u6587\u306e\u90e8\u5206\u3092\u518d\u30b0\u30eb\u30fc\u30d7\u5316\u3059\u308b\u3088\u3046\u306b\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306b\u6307\u793a\u3057\u307e\u3059\uff1a\u3053\u3053\u3067\u3001\u30e2\u30c7\u30eb\u306f\u540d\u524d\u304c\u8907\u6570\u306e\u5358\u8a9e\u3067\u69cb\u6210\u3055\u308c\u3066\u3044\u3066\u3082\u3001\u300cHugging\u300d\u3068\u300cFace\u300d\u3092\u5358\u4e00\u306e\u7d44\u7e54\u3068\u3057\u3066\u6b63\u3057\u304f\u30b0\u30eb\u30fc\u30d7\u5316\u3057\u307e\u3057\u305f\u3002\u5b9f\u969b\u3001\u6b21\u306e\u7ae0\u3067\u898b\u308b\u3088\u3046\u306b\u3001\u524d\u51e6\u7406\u3067\u306f\u5358\u8a9e\u3092\u3088\u308a\u5c0f\u3055\u306a\u90e8\u5206\u306b\u5206\u5272\u3059\u308b\u3053\u3068\u3055\u3048\u3042\u308a\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001<code>Sylvain</code> \u306f4\u3064\u306e\u90e8\u5206\u306b\u5206\u5272\u3055\u308c\u307e\u3059\uff1a<code>S</code>\u3001<code>##yl</code>\u3001<code>##va</code>\u3001<code>##in</code>\u3002\u5f8c\u51e6\u7406\u30b9\u30c6\u30c3\u30d7\u3067\u3001\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306f\u3053\u308c\u3089\u306e\u90e8\u5206\u3092\u6b63\u5e38\u306b\u518d\u30b0\u30eb\u30fc\u30d7\u5316\u3057\u307e\u3057\u305f\u3002</p>","tags":["transformer","nlp","llm","bert","gpt","machine-learning","deep-learning"]},{"location":"LLM/01_transformer_models/#_17","title":"\u8cea\u554f\u5fdc\u7b54","text":"<p><code>question-answering</code> \u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306f\u3001\u4e0e\u3048\u3089\u308c\u305f\u6587\u8108\u304b\u3089\u306e\u60c5\u5831\u3092\u4f7f\u7528\u3057\u3066\u8cea\u554f\u306b\u7b54\u3048\u307e\u3059\uff1a</p> <pre><code>from transformers import pipeline\n\nquestion_answerer = pipeline(\"question-answering\", model=\"distilbert/distilbert-base-cased-distilled-squad\")\nquestion_answerer(\n    question=\"Where do I work?\",\n    context=\"My name is Sylvain and I work at Hugging Face in Brooklyn.\",\n)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c\uff1a <pre><code>Device set to use mps:0\n{'score': 0.638590395450592, 'start': 33, 'end': 45, 'answer': 'Hugging Face'}\n</code></pre></p> <p>\u3053\u306e\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306f\u3001\u63d0\u4f9b\u3055\u308c\u305f\u6587\u8108\u304b\u3089\u60c5\u5831\u3092\u62bd\u51fa\u3059\u308b\u3053\u3068\u3067\u6a5f\u80fd\u3059\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\uff1b\u7b54\u3048\u3092\u751f\u6210\u3059\u308b\u308f\u3051\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002</p>","tags":["transformer","nlp","llm","bert","gpt","machine-learning","deep-learning"]},{"location":"LLM/01_transformer_models/#_18","title":"\u8981\u7d04","text":"<p>\u8981\u7d04\u306f\u3001\u30c6\u30ad\u30b9\u30c8\u5185\u3067\u53c2\u7167\u3055\u308c\u308b\u3059\u3079\u3066\u306e\uff08\u307e\u305f\u306f\u307b\u3068\u3093\u3069\u306e\uff09\u91cd\u8981\u306a\u5074\u9762\u3092\u4fdd\u6301\u3057\u306a\u304c\u3089\u3001\u30c6\u30ad\u30b9\u30c8\u3092\u3088\u308a\u77ed\u3044\u30c6\u30ad\u30b9\u30c8\u306b\u524a\u6e1b\u3059\u308b\u30bf\u30b9\u30af\u3067\u3059\u3002\u4f8b\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\uff1a</p> <pre><code>from transformers import pipeline\n\nsummarizer = pipeline(\"summarization\", model=\"sshleifer/distilbart-cnn-12-6\")\nsummarizer(\n    \"\"\"\n    America has changed dramatically during recent years. Not only has the number of \n    graduates in traditional engineering disciplines such as mechanical, civil, \n    electrical, chemical, and aeronautical engineering declined, but in most of \n    the premier American universities engineering curricula now concentrate on \n    and encourage largely the study of engineering science. As a result, there \n    are declining offerings in engineering subjects dealing with infrastructure, \n    the environment, and related issues, and greater concentration on high \n    technology subjects, largely supporting increasingly complex scientific \n    developments. While the latter is important, it should not be at the expense \n    of more traditional engineering.\n\n    Rapidly developing economies such as China and India, as well as other \n    industrial countries in Europe and Asia, continue to encourage and advance \n    the teaching of engineering. Both China and India, respectively, graduate \n    six and eight times as many traditional engineers as does the United States. \n    Other industrial countries at minimum maintain their output, while America \n    suffers an increasingly serious decline in the number of engineering graduates \n    and a lack of well-educated engineers.\n\"\"\"\n)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c\uff1a <pre><code>Device set to use mps:0\n[{'summary_text': ' America has changed dramatically during recent years . The numberof engineering graduates in the U.S. has declined in traditional engineeringdisciplines such as mechanical, civil,    electrical, chemical, and aeronauticalengineering . Rapidly developing economies such as China and India continue toencourage and advance the teaching of engineering .'}]\n</code></pre></p> <p>\u30c6\u30ad\u30b9\u30c8\u751f\u6210\u3068\u540c\u69d8\u306b\u3001\u7d50\u679c\u306e <code>max_length</code> \u307e\u305f\u306f <code>min_length</code> \u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002</p>","tags":["transformer","nlp","llm","bert","gpt","machine-learning","deep-learning"]},{"location":"LLM/01_transformer_models/#_19","title":"\u7ffb\u8a33","text":"<p>\u7ffb\u8a33\u3067\u306f\u3001\u30bf\u30b9\u30af\u540d\u306b\u8a00\u8a9e\u30da\u30a2\u3092\u63d0\u4f9b\u3059\u308c\u3070\uff08<code>\"translation_en_to_fr\"</code> \u306a\u3069\uff09\u30c7\u30d5\u30a9\u30eb\u30c8\u30e2\u30c7\u30eb\u3092\u4f7f\u7528\u3067\u304d\u307e\u3059\u304c\u3001\u6700\u3082\u7c21\u5358\u306a\u65b9\u6cd5\u306f Model Hub \u3067\u4f7f\u7528\u3057\u305f\u3044\u30e2\u30c7\u30eb\u3092\u9078\u629e\u3059\u308b\u3053\u3068\u3067\u3059\u3002\u3053\u3053\u3067\u306f\u3001\u4e2d\u56fd\u8a9e\u304b\u3089\u82f1\u8a9e\u3078\u306e\u7ffb\u8a33\u3092\u8a66\u3057\u307e\u3059\uff1a</p> <pre><code>from transformers import pipeline\n\ntranslator = pipeline(\"translation\",model=\"Helsinki-NLP/opus-mt-zh-en\")\ntranslator(\"\u6211\u5728Hugging Face\u5de5\u4f5c\u3002\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c\uff1a <pre><code>Device set to use mps:0\n[{'translation_text': 'I work for Hugging Face.'}]\n</code></pre></p> <p>\u30c6\u30ad\u30b9\u30c8\u751f\u6210\u3084\u8981\u7d04\u3068\u540c\u69d8\u306b\u3001\u7d50\u679c\u306e <code>max_length</code> \u307e\u305f\u306f <code>min_length</code> \u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002</p>","tags":["transformer","nlp","llm","bert","gpt","machine-learning","deep-learning"]},{"location":"LLM/01_transformer_models/#transformers_1","title":"Transformers\u306f\u3069\u306e\u3088\u3046\u306b\u52d5\u4f5c\u3059\u308b\u304b\uff1f","text":"<p>\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u306f\u3001Transformer\u30e2\u30c7\u30eb\u306e\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3092\u898b\u3066\u3001\u6ce8\u610f\u30e1\u30ab\u30cb\u30ba\u30e0\u3001\u30a8\u30f3\u30b3\u30fc\u30c0\u30fb\u30c7\u30b3\u30fc\u30c0\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306a\u3069\u306e\u6982\u5ff5\u3092\u3055\u3089\u306b\u6df1\u304f\u6398\u308a\u4e0b\u3052\u307e\u3059\u3002</p> <p>\ud83d\ude80 \u3053\u3053\u3067\u306f\u30ec\u30d9\u30eb\u3092\u4e0a\u3052\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306f\u8a73\u7d30\u3067\u6280\u8853\u7684\u306a\u306e\u3067\u3001\u3059\u3079\u3066\u3092\u3059\u3050\u306b\u7406\u89e3\u3067\u304d\u306a\u304f\u3066\u3082\u5fc3\u914d\u3057\u306a\u3044\u3067\u304f\u3060\u3055\u3044\u3002\u3053\u308c\u3089\u306e\u6982\u5ff5\u306b\u3064\u3044\u3066\u306f\u3001\u30b3\u30fc\u30b9\u306e\u5f8c\u534a\u3067\u518d\u3073\u6271\u3044\u307e\u3059\u3002</p>","tags":["transformer","nlp","llm","bert","gpt","machine-learning","deep-learning"]},{"location":"LLM/01_transformer_models/#transformer","title":"Transformer\u306e\u6b74\u53f2","text":"<p>Transformer\u30e2\u30c7\u30eb\u306e\uff08\u77ed\u3044\uff09\u6b74\u53f2\u306b\u304a\u3051\u308b\u3044\u304f\u3064\u304b\u306e\u53c2\u8003\u70b9\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\uff1a</p> <p>Transformer\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3 \u306f2017\u5e746\u6708\u306b\u5c0e\u5165\u3055\u308c\u307e\u3057\u305f\u3002\u5143\u306e\u7814\u7a76\u306e\u7126\u70b9\u306f\u7ffb\u8a33\u30bf\u30b9\u30af\u3067\u3057\u305f\u3002\u305d\u306e\u5f8c\u3001\u4ee5\u4e0b\u3092\u542b\u3080\u3044\u304f\u3064\u304b\u306e\u5f71\u97ff\u529b\u306e\u3042\u308b\u30e2\u30c7\u30eb\u304c\u5c0e\u5165\u3055\u308c\u307e\u3057\u305f\uff1a</p> <ul> <li> <p>2018\u5e746\u6708: GPT\u3001\u6700\u521d\u306e\u4e8b\u524d\u8a13\u7df4\u6e08\u307fTransformer\u30e2\u30c7\u30eb\u3001\u69d8\u3005\u306aNLP\u30bf\u30b9\u30af\u3067\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u306b\u4f7f\u7528\u3055\u308c\u3001\u6700\u5148\u7aef\u306e\u7d50\u679c\u3092\u5f97\u305f</p> </li> <li> <p>2018\u5e7410\u6708: BERT\u3001\u3082\u3046\u4e00\u3064\u306e\u5927\u578b\u306e\u4e8b\u524d\u8a13\u7df4\u6e08\u307f\u30e2\u30c7\u30eb\u3001\u6587\u306e\u3088\u308a\u826f\u3044\u8981\u7d04\u3092\u751f\u6210\u3059\u308b\u305f\u3081\u306b\u8a2d\u8a08\u3055\u308c\u305f\uff08\u8a73\u7d30\u306f\u6b21\u306e\u7ae0\u3067\uff01\uff09</p> </li> <li> <p>2019\u5e742\u6708: GPT-2\u3001GPT\u306e\u6539\u826f\u3055\u308c\u305f\uff08\u305d\u3057\u3066\u3088\u308a\u5927\u304d\u306a\uff09\u30d0\u30fc\u30b8\u30e7\u30f3\u3001\u502b\u7406\u7684\u306a\u61f8\u5ff5\u306e\u305f\u3081\u3059\u3050\u306b\u306f\u516c\u958b\u3055\u308c\u306a\u304b\u3063\u305f</p> </li> <li> <p>2019\u5e7410\u6708: T5\u3001sequence-to-sequence Transformer\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306e\u30de\u30eb\u30c1\u30bf\u30b9\u30af\u91cd\u8996\u5b9f\u88c5</p> </li> <li> <p>2020\u5e745\u6708: GPT-3\u3001\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u306e\u5fc5\u8981\u306a\u3057\u306b\uff08\u30bc\u30ed\u30b7\u30e7\u30c3\u30c8\u5b66\u7fd2 \u3068\u547c\u3070\u308c\u308b\uff09\u69d8\u3005\u306a\u30bf\u30b9\u30af\u3067\u826f\u597d\u306b\u5b9f\u884c\u3067\u304d\u308b\u3001GPT-2\u306e\u3055\u3089\u306b\u5927\u304d\u306a\u30d0\u30fc\u30b8\u30e7\u30f3</p> </li> <li> <p>2022\u5e741\u6708: InstructGPT\u3001\u6307\u793a\u306b\u3088\u308a\u826f\u304f\u5f93\u3046\u3088\u3046\u306b\u8a13\u7df4\u3055\u308c\u305fGPT-3\u306e\u30d0\u30fc\u30b8\u30e7\u30f3</p> </li> </ul> <p>\u3053\u306e\u30ea\u30b9\u30c8\u306f\u5305\u62ec\u7684\u3067\u306f\u306a\u304f\u3001\u7570\u306a\u308b\u7a2e\u985e\u306eTransformer\u30e2\u30c7\u30eb\u306e\u3044\u304f\u3064\u304b\u3092\u5f37\u8abf\u3059\u308b\u3053\u3068\u3092\u610f\u56f3\u3057\u3066\u3044\u307e\u3059\u3002\u5927\u307e\u304b\u306b\u3001\u3053\u308c\u3089\u306f3\u3064\u306e\u30ab\u30c6\u30b4\u30ea\u306b\u30b0\u30eb\u30fc\u30d7\u5316\u3067\u304d\u307e\u3059\uff1a</p> <ul> <li> <p>2023\u5e741\u6708: Llama\u3001\u69d8\u3005\u306a\u8a00\u8a9e\u3067\u30c6\u30ad\u30b9\u30c8\u3092\u751f\u6210\u3067\u304d\u308b\u5927\u898f\u6a21\u8a00\u8a9e\u30e2\u30c7\u30eb</p> </li> <li> <p>2023\u5e743\u6708: Mistral\u3001\u8a55\u4fa1\u3055\u308c\u305f\u3059\u3079\u3066\u306e\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u3067Llama 2 13B\u3092\u4e0a\u56de\u308b70\u5104\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8a00\u8a9e\u30e2\u30c7\u30eb\u3001\u3088\u308a\u9ad8\u901f\u306a\u63a8\u8ad6\u306e\u305f\u3081\u306e\u30b0\u30eb\u30fc\u30d7\u30af\u30a8\u30ea\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u3068\u4efb\u610f\u306e\u9577\u3055\u306e\u30b7\u30fc\u30b1\u30f3\u30b9\u3092\u51e6\u7406\u3059\u308b\u30b9\u30e9\u30a4\u30c7\u30a3\u30f3\u30b0\u30a6\u30a3\u30f3\u30c9\u30a6\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u3092\u6d3b\u7528</p> </li> <li> <p>2024\u5e745\u6708: Gemma 2\u30012B\u304b\u308927B\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u7bc4\u56f2\u306e\u8efd\u91cf\u3067\u6700\u5148\u7aef\u306e\u30aa\u30fc\u30d7\u30f3\u30e2\u30c7\u30eb\u30d5\u30a1\u30df\u30ea\u30fc\u3001\u30a4\u30f3\u30bf\u30fc\u30ea\u30fc\u30d6\u3055\u308c\u305f\u30ed\u30fc\u30ab\u30eb\u30fb\u30b0\u30ed\u30fc\u30d0\u30eb\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u3068\u30b0\u30eb\u30fc\u30d7\u30af\u30a8\u30ea\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u3092\u7d44\u307f\u5408\u308f\u305b\u3001\u5c0f\u3055\u306a\u30e2\u30c7\u30eb\u306f\u77e5\u8b58\u84b8\u7559\u3092\u4f7f\u7528\u3057\u3066\u8a13\u7df4\u3055\u308c\u30012-3\u500d\u5927\u304d\u306a\u30e2\u30c7\u30eb\u3068\u7af6\u5408\u3059\u308b\u6027\u80fd\u3092\u63d0\u4f9b</p> </li> <li> <p>2024\u5e7411\u6708: SmolLM2\u3001\u30b3\u30f3\u30d1\u30af\u30c8\u306a\u30b5\u30a4\u30ba\u306b\u3082\u304b\u304b\u308f\u3089\u305a\u5370\u8c61\u7684\u306a\u6027\u80fd\u3092\u9054\u6210\u3059\u308b\u6700\u5148\u7aef\u306e\u5c0f\u898f\u6a21\u8a00\u8a9e\u30e2\u30c7\u30eb\uff081\u51043500\u4e07\u304b\u308917\u5104\u30d1\u30e9\u30e1\u30fc\u30bf\uff09\u3001\u30e2\u30d0\u30a4\u30eb\u3068\u30a8\u30c3\u30b8\u30c7\u30d0\u30a4\u30b9\u3067\u65b0\u3057\u3044\u53ef\u80fd\u6027\u3092\u5207\u308a\u958b\u304f</p> </li> <li> <p>GPT\u30e9\u30a4\u30af\uff08\u81ea\u5df1\u56de\u5e30 Transformer\u30e2\u30c7\u30eb\u3068\u3082\u547c\u3070\u308c\u308b\uff09</p> </li> <li>BERT\u30e9\u30a4\u30af\uff08\u81ea\u5df1\u7b26\u53f7\u5316 Transformer\u30e2\u30c7\u30eb\u3068\u3082\u547c\u3070\u308c\u308b\uff09</li> <li>T5\u30e9\u30a4\u30af\uff08sequence-to-sequence Transformer\u30e2\u30c7\u30eb\u3068\u3082\u547c\u3070\u308c\u308b\uff09</li> </ul> <p>\u3053\u308c\u3089\u306e\u30d5\u30a1\u30df\u30ea\u30fc\u306b\u3064\u3044\u3066\u306f\u3001\u5f8c\u3067\u3088\u308a\u8a73\u3057\u304f\u6398\u308a\u4e0b\u3052\u307e\u3059\u3002</p>","tags":["transformer","nlp","llm","bert","gpt","machine-learning","deep-learning"]},{"location":"LLM/01_transformer_models/#transformers_2","title":"Transformers\u306f\u8a00\u8a9e\u30e2\u30c7\u30eb\u3067\u3042\u308b","text":"<p>\u4e0a\u8a18\u3067\u8a00\u53ca\u3055\u308c\u305f\u3059\u3079\u3066\u306eTransformer\u30e2\u30c7\u30eb\uff08GPT\u3001BERT\u3001T5\u306a\u3069\uff09\u306f \u8a00\u8a9e\u30e2\u30c7\u30eb \u3068\u3057\u3066\u8a13\u7df4\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u5927\u91cf\u306e\u751f\u30c6\u30ad\u30b9\u30c8\u3067\u81ea\u5df1\u6559\u5e2b\u3042\u308a\u65b9\u5f0f\u3067\u8a13\u7df4\u3055\u308c\u305f\u3053\u3068\u3092\u610f\u5473\u3057\u307e\u3059\u3002</p> <p>\u81ea\u5df1\u6559\u5e2b\u3042\u308a\u5b66\u7fd2\u306f\u3001\u76ee\u7684\u304c\u30e2\u30c7\u30eb\u306e\u5165\u529b\u304b\u3089\u81ea\u52d5\u7684\u306b\u8a08\u7b97\u3055\u308c\u308b\u8a13\u7df4\u306e\u4e00\u7a2e\u3067\u3059\u3002\u3064\u307e\u308a\u3001\u30c7\u30fc\u30bf\u306b\u30e9\u30d9\u30eb\u3092\u4ed8\u3051\u308b\u305f\u3081\u306b\u4eba\u9593\u306f\u5fc5\u8981\u3042\u308a\u307e\u305b\u3093\uff01</p> <p>\u3053\u306e\u30bf\u30a4\u30d7\u306e\u30e2\u30c7\u30eb\u306f\u3001\u8a13\u7df4\u3055\u308c\u305f\u8a00\u8a9e\u306e\u7d71\u8a08\u7684\u7406\u89e3\u3092\u767a\u9054\u3055\u305b\u307e\u3059\u304c\u3001\u7279\u5b9a\u306e\u5b9f\u7528\u7684\u306a\u30bf\u30b9\u30af\u306b\u306f\u3042\u307e\u308a\u6709\u7528\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u3053\u306e\u305f\u3081\u3001\u4e00\u822c\u7684\u306a\u4e8b\u524d\u8a13\u7df4\u6e08\u307f\u30e2\u30c7\u30eb\u306f \u8ee2\u79fb\u5b66\u7fd2 \u307e\u305f\u306f \u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0 \u3068\u547c\u3070\u308c\u308b\u30d7\u30ed\u30bb\u30b9\u3092\u7d4c\u307e\u3059\u3002\u3053\u306e\u30d7\u30ed\u30bb\u30b9\u306e\u9593\u3001\u30e2\u30c7\u30eb\u306f\u6559\u5e2b\u3042\u308a\u65b9\u5f0f\u3067\uff08\u3064\u307e\u308a\u3001\u4eba\u9593\u306e\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u4ed8\u304d\u30e9\u30d9\u30eb\u3092\u4f7f\u7528\u3057\u3066\uff09\u4e0e\u3048\u3089\u308c\u305f\u30bf\u30b9\u30af\u3067\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3055\u308c\u307e\u3059\u3002</p> <p>\u30bf\u30b9\u30af\u306e\u4f8b\u306f\u3001n \u500b\u306e\u524d\u306e\u5358\u8a9e\u3092\u8aad\u3093\u3060\u5f8c\u306e\u6587\u306e\u6b21\u306e\u5358\u8a9e\u3092\u4e88\u6e2c\u3059\u308b\u3053\u3068\u3067\u3059\u3002\u3053\u308c\u306f \u56e0\u679c\u8a00\u8a9e\u30e2\u30c7\u30ea\u30f3\u30b0 \u3068\u547c\u3070\u308c\u307e\u3059\u3002\u51fa\u529b\u304c\u904e\u53bb\u3068\u73fe\u5728\u306e\u5165\u529b\u306b\u4f9d\u5b58\u3059\u308b\u304c\u3001\u5c06\u6765\u306e\u3082\u306e\u306b\u306f\u4f9d\u5b58\u3057\u306a\u3044\u305f\u3081\u3067\u3059\u3002</p> <p></p> <p>\u5225\u306e\u4f8b\u306f \u30de\u30b9\u30af\u8a00\u8a9e\u30e2\u30c7\u30ea\u30f3\u30b0 \u3067\u3001\u30e2\u30c7\u30eb\u304c\u6587\u4e2d\u306e\u30de\u30b9\u30af\u3055\u308c\u305f\u5358\u8a9e\u3092\u4e88\u6e2c\u3057\u307e\u3059\u3002</p> <p></p>","tags":["transformer","nlp","llm","bert","gpt","machine-learning","deep-learning"]},{"location":"LLM/01_transformer_models/#transformers_3","title":"Transformers\u306f\u5927\u304d\u306a\u30e2\u30c7\u30eb\u3067\u3042\u308b","text":"<p>\u3044\u304f\u3064\u304b\u306e\u5916\u308c\u5024\uff08DistilBERT\u306a\u3069\uff09\u3092\u9664\u3044\u3066\u3001\u3088\u308a\u826f\u3044\u6027\u80fd\u3092\u9054\u6210\u3059\u308b\u4e00\u822c\u7684\u306a\u6226\u7565\u306f\u3001\u30e2\u30c7\u30eb\u306e\u30b5\u30a4\u30ba\u3068\u4e8b\u524d\u8a13\u7df4\u3055\u308c\u308b\u30c7\u30fc\u30bf\u306e\u91cf\u3092\u5897\u3084\u3059\u3053\u3068\u3067\u3059\u3002</p> <p></p> <p>\u6b8b\u5ff5\u306a\u304c\u3089\u3001\u30e2\u30c7\u30eb\u3001\u7279\u306b\u5927\u304d\u306a\u30e2\u30c7\u30eb\u306e\u8a13\u7df4\u306b\u306f\u5927\u91cf\u306e\u30c7\u30fc\u30bf\u304c\u5fc5\u8981\u3067\u3059\u3002\u3053\u308c\u306f\u6642\u9593\u3068\u8a08\u7b97\u30ea\u30bd\u30fc\u30b9\u306e\u70b9\u3067\u975e\u5e38\u306b\u30b3\u30b9\u30c8\u304c\u304b\u304b\u308a\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u30b0\u30e9\u30d5\u3067\u898b\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u3001\u74b0\u5883\u3078\u306e\u5f71\u97ff\u306b\u3082\u5909\u63db\u3055\u308c\u307e\u3059\u3002</p> <p></p>","tags":["transformer","nlp","llm","bert","gpt","machine-learning","deep-learning"]},{"location":"LLM/01_transformer_models/#_20","title":"\u8ee2\u79fb\u5b66\u7fd2","text":"<p>\u4e8b\u524d\u8a13\u7df4 \u306f\u3001\u30e2\u30c7\u30eb\u3092\u30bc\u30ed\u304b\u3089\u8a13\u7df4\u3059\u308b\u884c\u70ba\u3067\u3059\uff1a\u91cd\u307f\u304c\u30e9\u30f3\u30c0\u30e0\u306b\u521d\u671f\u5316\u3055\u308c\u3001\u4e8b\u524d\u306e\u77e5\u8b58\u306a\u3057\u306b\u8a13\u7df4\u304c\u958b\u59cb\u3055\u308c\u307e\u3059\u3002</p> <p></p> <p>\u3053\u306e\u4e8b\u524d\u8a13\u7df4\u306f\u901a\u5e38\u3001\u975e\u5e38\u306b\u5927\u91cf\u306e\u30c7\u30fc\u30bf\u3067\u884c\u308f\u308c\u307e\u3059\u3002\u3057\u305f\u304c\u3063\u3066\u3001\u975e\u5e38\u306b\u5927\u304d\u306a\u30c7\u30fc\u30bf\u30b3\u30fc\u30d1\u30b9\u304c\u5fc5\u8981\u3067\u3001\u8a13\u7df4\u306b\u306f\u6570\u9031\u9593\u304b\u304b\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002</p> <p>\u4e00\u65b9\u3001\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0 \u306f\u3001\u30e2\u30c7\u30eb\u304c\u4e8b\u524d\u8a13\u7df4\u3055\u308c\u305f \u5f8c \u306b\u884c\u308f\u308c\u308b\u8a13\u7df4\u3067\u3059\u3002\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3092\u5b9f\u884c\u3059\u308b\u306b\u306f\u3001\u307e\u305a\u4e8b\u524d\u8a13\u7df4\u6e08\u307f\u8a00\u8a9e\u30e2\u30c7\u30eb\u3092\u53d6\u5f97\u3057\u3001\u6b21\u306b\u30bf\u30b9\u30af\u306b\u56fa\u6709\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3067\u8ffd\u52a0\u306e\u8a13\u7df4\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\u5f85\u3063\u3066\u2015\u306a\u305c\u6700\u521d\u304b\u3089\u6700\u7d42\u7528\u9014\u306e\u305f\u3081\u306b\u30e2\u30c7\u30eb\u3092\u8a13\u7df4\u3057\u306a\u3044\uff08\u30b9\u30af\u30e9\u30c3\u30c1\u304b\u3089\uff09\u306e\u3067\u3057\u3087\u3046\u304b\uff1f\u3044\u304f\u3064\u304b\u306e\u7406\u7531\u304c\u3042\u308a\u307e\u3059\uff1a</p> <ul> <li>\u4e8b\u524d\u8a13\u7df4\u6e08\u307f\u30e2\u30c7\u30eb\u306f\u3001\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3068\u985e\u4f3c\u6027\u306e\u3042\u308b\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3067\u65e2\u306b\u8a13\u7df4\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u3057\u305f\u304c\u3063\u3066\u3001\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u30d7\u30ed\u30bb\u30b9\u306f\u3001\u4e8b\u524d\u8a13\u7df4\u4e2d\u306b\u521d\u671f\u30e2\u30c7\u30eb\u304c\u53d6\u5f97\u3057\u305f\u77e5\u8b58\u3092\u6d3b\u7528\u3067\u304d\u307e\u3059\uff08\u4f8b\u3048\u3070\u3001NLP\u554f\u984c\u3067\u306f\u3001\u4e8b\u524d\u8a13\u7df4\u6e08\u307f\u30e2\u30c7\u30eb\u306f\u30bf\u30b9\u30af\u306b\u4f7f\u7528\u3057\u3066\u3044\u308b\u8a00\u8a9e\u306e\u3042\u308b\u7a2e\u306e\u7d71\u8a08\u7684\u7406\u89e3\u3092\u6301\u3063\u3066\u3044\u308b\u3067\u3057\u3087\u3046\uff09\u3002</li> <li>\u4e8b\u524d\u8a13\u7df4\u6e08\u307f\u30e2\u30c7\u30eb\u306f\u65e2\u306b\u591a\u304f\u306e\u30c7\u30fc\u30bf\u3067\u8a13\u7df4\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3001\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u306f\u826f\u3044\u7d50\u679c\u3092\u5f97\u308b\u305f\u3081\u306b\u306f\u308b\u304b\u306b\u5c11\u306a\u3044\u30c7\u30fc\u30bf\u3092\u5fc5\u8981\u3068\u3057\u307e\u3059\u3002</li> <li>\u540c\u3058\u7406\u7531\u3067\u3001\u826f\u3044\u7d50\u679c\u3092\u5f97\u308b\u306e\u306b\u5fc5\u8981\u306a\u6642\u9593\u3068\u30ea\u30bd\u30fc\u30b9\u306e\u91cf\u306f\u306f\u308b\u304b\u306b\u5c11\u306a\u304f\u306a\u308a\u307e\u3059\u3002</li> </ul> <p>\u4f8b\u3048\u3070\u3001\u82f1\u8a9e\u3067\u8a13\u7df4\u3055\u308c\u305f\u4e8b\u524d\u8a13\u7df4\u6e08\u307f\u30e2\u30c7\u30eb\u3092\u6d3b\u7528\u3057\u3001\u6b21\u306barXiv\u30b3\u30fc\u30d1\u30b9\u3067\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3057\u3066\u3001\u79d1\u5b66\uff0f\u7814\u7a76\u30d9\u30fc\u30b9\u306e\u30e2\u30c7\u30eb\u3092\u4f5c\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u306b\u306f\u9650\u3089\u308c\u305f\u91cf\u306e\u30c7\u30fc\u30bf\u306e\u307f\u304c\u5fc5\u8981\u3067\u3059\uff1a\u4e8b\u524d\u8a13\u7df4\u6e08\u307f\u30e2\u30c7\u30eb\u304c\u53d6\u5f97\u3057\u305f\u77e5\u8b58\u304c\u300c\u8ee2\u79fb\u300d\u3055\u308c\u308b\u305f\u3081\u3001\u8ee2\u79fb\u5b66\u7fd2 \u3068\u3044\u3046\u7528\u8a9e\u304c\u4f7f\u308f\u308c\u307e\u3059\u3002</p> <p></p> <p>\u3057\u305f\u304c\u3063\u3066\u3001\u30e2\u30c7\u30eb\u306e\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u306f\u3001\u6642\u9593\u3001\u30c7\u30fc\u30bf\u3001\u91d1\u92ad\u3001\u74b0\u5883\u306e\u30b3\u30b9\u30c8\u304c\u4f4e\u304f\u306a\u308a\u307e\u3059\u3002\u5b8c\u5168\u306a\u4e8b\u524d\u8a13\u7df4\u3088\u308a\u3082\u5236\u7d04\u304c\u5c11\u306a\u3044\u305f\u3081\u3001\u7570\u306a\u308b\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u30b9\u30ad\u30fc\u30e0\u3067\u53cd\u5fa9\u3059\u308b\u3053\u3068\u3082\u3001\u3088\u308a\u8fc5\u901f\u3067\u7c21\u5358\u3067\u3059\u3002</p> <p>\u3053\u306e\u30d7\u30ed\u30bb\u30b9\u306f\u3001\u30b9\u30af\u30e9\u30c3\u30c1\u304b\u3089\u8a13\u7df4\u3059\u308b\u3088\u308a\u3082\u826f\u3044\u7d50\u679c\u3092\u9054\u6210\u3057\u307e\u3059\uff08\u5927\u91cf\u306e\u30c7\u30fc\u30bf\u304c\u306a\u3044\u9650\u308a\uff09\u3002\u305d\u306e\u305f\u3081\u3001\u5e38\u306b\u4e8b\u524d\u8a13\u7df4\u6e08\u307f\u30e2\u30c7\u30eb\u2015\u624b\u5143\u306e\u30bf\u30b9\u30af\u306b\u3067\u304d\u308b\u3060\u3051\u8fd1\u3044\u30e2\u30c7\u30eb\u2015\u3092\u6d3b\u7528\u3057\u3001\u305d\u308c\u3092\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002</p>","tags":["transformer","nlp","llm","bert","gpt","machine-learning","deep-learning"]},{"location":"LLM/01_transformer_models/#transformer_1","title":"\u4e00\u822c\u7684\u306aTransformer\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3","text":"<p>\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u306f\u3001Transformer\u30e2\u30c7\u30eb\u306e\u4e00\u822c\u7684\u306a\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3092\u6982\u89b3\u3057\u307e\u3059\u3002\u3044\u304f\u3064\u304b\u306e\u6982\u5ff5\u3092\u7406\u89e3\u3067\u304d\u306a\u304f\u3066\u3082\u5fc3\u914d\u3057\u306a\u3044\u3067\u304f\u3060\u3055\u3044\uff1b\u5404\u69cb\u6210\u8981\u7d20\u3092\u8a73\u3057\u304f\u8aac\u660e\u3059\u308b\u30bb\u30af\u30b7\u30e7\u30f3\u304c\u5f8c\u306b\u3042\u308a\u307e\u3059\u3002</p> <p>\u30e2\u30c7\u30eb\u306f\u4e3b\u306b2\u3064\u306e\u30d6\u30ed\u30c3\u30af\u3067\u69cb\u6210\u3055\u308c\u3066\u3044\u307e\u3059\uff1a * \u30a8\u30f3\u30b3\u30fc\u30c0\uff08\u5de6\uff09: \u30a8\u30f3\u30b3\u30fc\u30c0\u306f\u5165\u529b\u3092\u53d7\u3051\u53d6\u308a\u3001\u305d\u306e\u8868\u73fe\uff08\u7279\u5fb4\uff09\u3092\u69cb\u7bc9\u3057\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u30e2\u30c7\u30eb\u304c\u5165\u529b\u304b\u3089\u7406\u89e3\u3092\u7372\u5f97\u3059\u308b\u3088\u3046\u306b\u6700\u9069\u5316\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u610f\u5473\u3057\u307e\u3059\u3002 * \u30c7\u30b3\u30fc\u30c0\uff08\u53f3\uff09: \u30c7\u30b3\u30fc\u30c0\u306f\u3001\u30a8\u30f3\u30b3\u30fc\u30c0\u306e\u8868\u73fe\uff08\u7279\u5fb4\uff09\u3092\u4ed6\u306e\u5165\u529b\u3068\u4e00\u7dd2\u306b\u4f7f\u7528\u3057\u3066\u3001\u30bf\u30fc\u30b2\u30c3\u30c8\u30b7\u30fc\u30b1\u30f3\u30b9\u3092\u751f\u6210\u3057\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u30e2\u30c7\u30eb\u304c\u51fa\u529b\u3092\u751f\u6210\u3059\u308b\u3088\u3046\u306b\u6700\u9069\u5316\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u610f\u5473\u3057\u307e\u3059\u3002</p> <p></p> <p>\u3053\u308c\u3089\u306e\u5404\u90e8\u5206\u306f\u3001\u30bf\u30b9\u30af\u306b\u5fdc\u3058\u3066\u72ec\u7acb\u3057\u3066\u4f7f\u7528\u3067\u304d\u307e\u3059\uff1a</p> <ul> <li>\u30a8\u30f3\u30b3\u30fc\u30c0\u306e\u307f\u306e\u30e2\u30c7\u30eb: \u6587\u5206\u985e\u3084\u56fa\u6709\u8868\u73fe\u8a8d\u8b58\u306a\u3069\u3001\u5165\u529b\u306e\u7406\u89e3\u3092\u5fc5\u8981\u3068\u3059\u308b\u30bf\u30b9\u30af\u306b\u9069\u3057\u3066\u3044\u308b\u3002</li> <li>\u30c7\u30b3\u30fc\u30c0\u306e\u307f\u306e\u30e2\u30c7\u30eb: \u30c6\u30ad\u30b9\u30c8\u751f\u6210\u306a\u3069\u306e\u751f\u6210\u30bf\u30b9\u30af\u306b\u9069\u3057\u3066\u3044\u308b\u3002</li> <li>\u30a8\u30f3\u30b3\u30fc\u30c0\u30fb\u30c7\u30b3\u30fc\u30c0\u30e2\u30c7\u30eb \u307e\u305f\u306f sequence-to-sequence\u30e2\u30c7\u30eb: \u7ffb\u8a33\u3084\u8981\u7d04\u306a\u3069\u3001\u5165\u529b\u3092\u5fc5\u8981\u3068\u3059\u308b\u751f\u6210\u30bf\u30b9\u30af\u306b\u9069\u3057\u3066\u3044\u308b\u3002</li> </ul> <p>\u5f8c\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u3053\u308c\u3089\u306e\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3092\u72ec\u7acb\u3057\u3066\u8a73\u3057\u304f\u6398\u308a\u4e0b\u3052\u307e\u3059\u3002</p>","tags":["transformer","nlp","llm","bert","gpt","machine-learning","deep-learning"]},{"location":"LLM/01_transformer_models/#_21","title":"\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u5c64","text":"<p>Transformer\u30e2\u30c7\u30eb\u306e\u91cd\u8981\u306a\u7279\u5fb4\u306f\u3001\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u5c64 \u3068\u547c\u3070\u308c\u308b\u7279\u5225\u306a\u5c64\u3067\u69cb\u7bc9\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3067\u3059\u3002\u5b9f\u969b\u3001Transformer\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3092\u5c0e\u5165\u3057\u305f\u8ad6\u6587\u306e\u30bf\u30a4\u30c8\u30eb\u306f\"Attention Is All You Need\"\u3067\u3057\u305f\uff01\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u5c64\u306e\u8a73\u7d30\u306b\u3064\u3044\u3066\u306f\u30b3\u30fc\u30b9\u306e\u5f8c\u534a\u3067\u63a2\u6c42\u3057\u307e\u3059\uff1b\u4eca\u77e5\u3063\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308b\u306e\u306f\u3001\u3053\u306e\u5c64\u304c\u30e2\u30c7\u30eb\u306b\u5bfe\u3057\u3001\u6e21\u3055\u308c\u305f\u6587\u4e2d\u306e\u7279\u5b9a\u306e\u5358\u8a9e\u306b\u7279\u5b9a\u306e\u6ce8\u610f\u3092\u6255\u3046\uff08\u305d\u3057\u3066\u4ed6\u306e\u5358\u8a9e\u3092\u3042\u308b\u7a0b\u5ea6\u7121\u8996\u3059\u308b\uff09\u3088\u3046\u306b\u6307\u793a\u3059\u308b\u3053\u3068\u3067\u3059\u3002\u5404\u5358\u8a9e\u306e\u8868\u73fe\u3092\u6271\u3046\u3068\u304d\u3067\u3059\u3002</p> <p>\u3053\u308c\u3092\u6587\u8108\u306b\u5165\u308c\u308b\u305f\u3081\u306b\u3001\u82f1\u8a9e\u304b\u3089\u30d5\u30e9\u30f3\u30b9\u8a9e\u306b\u30c6\u30ad\u30b9\u30c8\u3092\u7ffb\u8a33\u3059\u308b\u30bf\u30b9\u30af\u3092\u8003\u3048\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u300cYou like this course\u300d\u3068\u3044\u3046\u5165\u529b\u304c\u4e0e\u3048\u3089\u308c\u305f\u3068\u304d\u3001\u7ffb\u8a33\u30e2\u30c7\u30eb\u306f\u300clike\u300d\u3068\u3044\u3046\u5358\u8a9e\u306e\u9069\u5207\u306a\u7ffb\u8a33\u3092\u5f97\u308b\u305f\u3081\u306b\u96a3\u63a5\u3059\u308b\u300cYou\u300d\u3068\u3044\u3046\u5358\u8a9e\u306b\u3082\u6ce8\u610f\u3092\u6255\u3046\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u306a\u305c\u306a\u3089\u3001\u30d5\u30e9\u30f3\u30b9\u8a9e\u3067\u306f\u52d5\u8a5e\u300clike\u300d\u306f\u4e3b\u8a9e\u306b\u3088\u3063\u3066\u7570\u306a\u308b\u6d3b\u7528\u3092\u3059\u308b\u304b\u3089\u3067\u3059\u3002\u3057\u304b\u3057\u3001\u6587\u306e\u6b8b\u308a\u306e\u90e8\u5206\u306f\u305d\u306e\u5358\u8a9e\u306e\u7ffb\u8a33\u306b\u306f\u6709\u7528\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u540c\u3058\u3088\u3046\u306b\u3001\u300cthis\u300d\u3092\u7ffb\u8a33\u3059\u308b\u3068\u304d\u3001\u30e2\u30c7\u30eb\u306f\u300ccourse\u300d\u3068\u3044\u3046\u5358\u8a9e\u306b\u3082\u6ce8\u610f\u3092\u6255\u3046\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u306a\u305c\u306a\u3089\u3001\u300cthis\u300d\u306f\u95a2\u9023\u3059\u308b\u540d\u8a5e\u304c\u7537\u6027\u5f62\u304b\u5973\u6027\u5f62\u304b\u306b\u3088\u3063\u3066\u7570\u306a\u3063\u3066\u7ffb\u8a33\u3055\u308c\u308b\u304b\u3089\u3067\u3059\u3002\u518d\u3073\u3001\u6587\u4e2d\u306e\u4ed6\u306e\u5358\u8a9e\u306f\u300ccourse\u300d\u306e\u7ffb\u8a33\u306b\u306f\u95a2\u4fc2\u3042\u308a\u307e\u305b\u3093\u3002\u3088\u308a\u8907\u96d1\u306a\u6587\uff08\u305d\u3057\u3066\u3088\u308a\u8907\u96d1\u306a\u6587\u6cd5\u898f\u5247\uff09\u3067\u306f\u3001\u30e2\u30c7\u30eb\u306f\u5404\u5358\u8a9e\u3092\u9069\u5207\u306b\u7ffb\u8a33\u3059\u308b\u305f\u3081\u306b\u3001\u6587\u4e2d\u306e\u3055\u3089\u306b\u96e2\u308c\u305f\u5834\u6240\u306b\u3042\u308b\u5358\u8a9e\u306b\u7279\u5225\u306a\u6ce8\u610f\u3092\u6255\u3046\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002</p> <p>\u540c\u3058\u6982\u5ff5\u304c\u81ea\u7136\u8a00\u8a9e\u306b\u95a2\u9023\u3059\u308b\u4efb\u610f\u306e\u30bf\u30b9\u30af\u306b\u9069\u7528\u3055\u308c\u307e\u3059\uff1a\u5358\u8a9e\u305d\u308c\u81ea\u4f53\u306b\u610f\u5473\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u305d\u306e\u610f\u5473\u306f\u6587\u8108\u306b\u3088\u3063\u3066\u6df1\u304f\u5f71\u97ff\u3092\u53d7\u3051\u307e\u3059\u3002\u6587\u8108\u3068\u306f\u3001\u7814\u7a76\u3055\u308c\u3066\u3044\u308b\u5358\u8a9e\u306e\u524d\u307e\u305f\u306f\u5f8c\u306b\u3042\u308b\u4ed6\u306e\u4efb\u610f\u306e\u5358\u8a9e\uff08\u8907\u6570\u53ef\uff09\u3067\u3059\u3002</p> <p>\u3053\u308c\u3067\u3001\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u5c64\u304c\u4f55\u3067\u3042\u308b\u304b\u306e\u30a2\u30a4\u30c7\u30a2\u3092\u5f97\u305f\u306e\u3067\u3001Transformer\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3092\u3088\u308a\u8a73\u3057\u304f\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002</p>","tags":["transformer","nlp","llm","bert","gpt","machine-learning","deep-learning"]},{"location":"LLM/01_transformer_models/#_22","title":"\u5143\u306e\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3","text":"<p>Transformer\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306f\u5f53\u521d\u7ffb\u8a33\u306e\u305f\u3081\u306b\u8a2d\u8a08\u3055\u308c\u307e\u3057\u305f\u3002\u8a13\u7df4\u4e2d\u3001\u30a8\u30f3\u30b3\u30fc\u30c0\u306f\u7279\u5b9a\u306e\u8a00\u8a9e\u3067\u5165\u529b\uff08\u6587\uff09\u3092\u53d7\u3051\u53d6\u308a\u3001\u30c7\u30b3\u30fc\u30c0\u306f\u5e0c\u671b\u3059\u308b\u30bf\u30fc\u30b2\u30c3\u30c8\u8a00\u8a9e\u3067\u540c\u3058\u6587\u3092\u53d7\u3051\u53d6\u308a\u307e\u3059\u3002\u30a8\u30f3\u30b3\u30fc\u30c0\u3067\u306f\u3001\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u5c64\u306f\u6587\u4e2d\u306e\u3059\u3079\u3066\u306e\u5358\u8a9e\u3092\u4f7f\u7528\u3067\u304d\u307e\u3059\uff08\u4eca\u898b\u305f\u3088\u3046\u306b\u3001\u4e0e\u3048\u3089\u308c\u305f\u5358\u8a9e\u306e\u7ffb\u8a33\u306f\u3001\u6587\u4e2d\u306e\u305d\u306e\u524d\u306b\u3082\u5f8c\u306b\u3082\u3042\u308b\u3082\u306e\u306b\u4f9d\u5b58\u3059\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u305f\u3081\uff09\u3002\u3057\u304b\u3057\u3001\u30c7\u30b3\u30fc\u30c0\u306f\u9806\u6b21\u52d5\u4f5c\u3057\u3001\u65e2\u306b\u7ffb\u8a33\u3057\u305f\u6587\u4e2d\u306e\u5358\u8a9e\u306e\u307f\u306b\u6ce8\u610f\u3092\u6255\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff08\u3064\u307e\u308a\u3001\u73fe\u5728\u751f\u6210\u3055\u308c\u3066\u3044\u308b\u5358\u8a9e\u3088\u308a\u524d\u306e\u5358\u8a9e\u306e\u307f\uff09\u3002\u4f8b\u3048\u3070\u3001\u7ffb\u8a33\u3055\u308c\u305f\u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u6700\u521d\u306e3\u3064\u306e\u5358\u8a9e\u3092\u4e88\u6e2c\u3057\u305f\u3068\u304d\u3001\u305d\u308c\u3089\u3092\u30c7\u30b3\u30fc\u30c0\u306b\u4e0e\u3048\u3001\u30c7\u30b3\u30fc\u30c0\u306f\u30a8\u30f3\u30b3\u30fc\u30c0\u306e\u3059\u3079\u3066\u306e\u5165\u529b\u3092\u4f7f\u7528\u3057\u30664\u756a\u76ee\u306e\u5358\u8a9e\u3092\u4e88\u6e2c\u3057\u3088\u3046\u3068\u3057\u307e\u3059\u3002</p> <p>\u8a13\u7df4\u4e2d\u306b\u901f\u5ea6\u3092\u4e0a\u3052\u308b\u305f\u3081\uff08\u30e2\u30c7\u30eb\u304c\u30bf\u30fc\u30b2\u30c3\u30c8\u6587\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u3068\u304d\uff09\u3001\u30c7\u30b3\u30fc\u30c0\u306b\u306f\u5168\u4f53\u306e\u30bf\u30fc\u30b2\u30c3\u30c8\u304c\u4f9b\u7d66\u3055\u308c\u307e\u3059\u304c\u3001\u5c06\u6765\u306e\u5358\u8a9e\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u306f\u8a31\u53ef\u3055\u308c\u307e\u305b\u3093\uff08\u4f4d\u7f6e2\u306e\u5358\u8a9e\u3092\u4e88\u6e2c\u3057\u3088\u3046\u3068\u3059\u308b\u3068\u304d\u306b\u4f4d\u7f6e2\u306e\u5358\u8a9e\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308c\u3070\u3001\u554f\u984c\u306f\u305d\u308c\u307b\u3069\u56f0\u96e3\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\uff01\uff09\u3002\u4f8b\u3048\u3070\u30014\u756a\u76ee\u306e\u5358\u8a9e\u3092\u4e88\u6e2c\u3057\u3088\u3046\u3068\u3059\u308b\u3068\u304d\u3001\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u5c64\u306f\u4f4d\u7f6e1\u304b\u30893\u306e\u5358\u8a9e\u306e\u307f\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u307e\u3059\u3002</p> <p>\u5143\u306eTransformer\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u304a\u308a\u3001\u30a8\u30f3\u30b3\u30fc\u30c0\u304c\u5de6\u5074\u3001\u30c7\u30b3\u30fc\u30c0\u304c\u53f3\u5074\u306b\u3042\u308a\u307e\u3059\uff1a</p> <p></p> <p>\u30c7\u30b3\u30fc\u30c0\u30d6\u30ed\u30c3\u30af\u5185\u306e\u6700\u521d\u306e\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u5c64\u306f\u3001\u30c7\u30b3\u30fc\u30c0\u3078\u306e\u3059\u3079\u3066\u306e\uff08\u904e\u53bb\u306e\uff09\u5165\u529b\u306b\u6ce8\u610f\u3092\u6255\u3044\u307e\u3059\u304c\u30012\u756a\u76ee\u306e\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u5c64\u306f\u30a8\u30f3\u30b3\u30fc\u30c0\u306e\u51fa\u529b\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u3057\u305f\u304c\u3063\u3066\u3001\u73fe\u5728\u306e\u5358\u8a9e\u3092\u6700\u9069\u306b\u4e88\u6e2c\u3059\u308b\u305f\u3081\u306b\u3001\u5165\u529b\u6587\u5168\u4f53\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u7570\u306a\u308b\u8a00\u8a9e\u304c\u7570\u306a\u308b\u9806\u5e8f\u3067\u5358\u8a9e\u3092\u914d\u7f6e\u3059\u308b\u6587\u6cd5\u898f\u5247\u3092\u6301\u3064\u53ef\u80fd\u6027\u304c\u3042\u308b\u305f\u3081\u3001\u307e\u305f\u306f\u6587\u4e2d\u3067\u5f8c\u306b\u63d0\u4f9b\u3055\u308c\u308b\u4e00\u90e8\u306e\u6587\u8108\u304c\u4e0e\u3048\u3089\u308c\u305f\u5358\u8a9e\u306e\u6700\u9069\u306a\u7ffb\u8a33\u3092\u6c7a\u5b9a\u3059\u308b\u306e\u306b\u5f79\u7acb\u3064\u53ef\u80fd\u6027\u304c\u3042\u308b\u305f\u3081\u3001\u975e\u5e38\u306b\u6709\u7528\u3067\u3059\u3002</p> <p>\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u30de\u30b9\u30af \u306f\u3001\u30a8\u30f3\u30b3\u30fc\u30c0\uff0f\u30c7\u30b3\u30fc\u30c0\u3067\u30e2\u30c7\u30eb\u304c\u7279\u5b9a\u306e\u7279\u5225\u306a\u5358\u8a9e\u306b\u6ce8\u610f\u3092\u6255\u3046\u3053\u3068\u3092\u9632\u3050\u305f\u3081\u306b\u3082\u4f7f\u7528\u3067\u304d\u307e\u3059\u2015\u4f8b\u3048\u3070\u3001\u6587\u3092\u4e00\u7dd2\u306b\u30d0\u30c3\u30c1\u51e6\u7406\u3059\u308b\u3068\u304d\u306b\u3059\u3079\u3066\u306e\u5165\u529b\u3092\u540c\u3058\u9577\u3055\u306b\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3055\u308c\u308b\u7279\u5225\u306a\u30d1\u30c7\u30a3\u30f3\u30b0\u5358\u8a9e\u3067\u3059\u3002</p>","tags":["transformer","nlp","llm","bert","gpt","machine-learning","deep-learning"]},{"location":"LLM/01_transformer_models/#vs","title":"\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3 vs. \u30c1\u30a7\u30c3\u30af\u30dd\u30a4\u30f3\u30c8","text":"<p>\u3053\u306e\u30b3\u30fc\u30b9\u3067Transformer\u30e2\u30c7\u30eb\u306b\u6398\u308a\u4e0b\u3052\u308b\u3068\u304d\u3001\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3 \u3068 \u30c1\u30a7\u30c3\u30af\u30dd\u30a4\u30f3\u30c8 \u304a\u3088\u3073 \u30e2\u30c7\u30eb \u306e\u8a00\u53ca\u3092\u898b\u308b\u3067\u3057\u3087\u3046\u3002\u3053\u308c\u3089\u306e\u7528\u8a9e\u306f\u3059\u3079\u3066\u82e5\u5e72\u7570\u306a\u308b\u610f\u5473\u3092\u6301\u3061\u307e\u3059\uff1a</p> <ul> <li>\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3: \u3053\u308c\u306f\u30e2\u30c7\u30eb\u306e\u9aa8\u683c\u3067\u3059\u2015\u30e2\u30c7\u30eb\u5185\u3067\u767a\u751f\u3059\u308b\u5404\u5c64\u3068\u5404\u64cd\u4f5c\u306e\u5b9a\u7fa9\u3002</li> <li>\u30c1\u30a7\u30c3\u30af\u30dd\u30a4\u30f3\u30c8: \u3053\u308c\u3089\u306f\u3001\u4e0e\u3048\u3089\u308c\u305f\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306b\u8aad\u307f\u8fbc\u307e\u308c\u308b\u91cd\u307f\u3067\u3059\u3002</li> <li>\u30e2\u30c7\u30eb: \u3053\u308c\u306f\u300c\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u300d\u3084\u300c\u30c1\u30a7\u30c3\u30af\u30dd\u30a4\u30f3\u30c8\u300d\u307b\u3069\u6b63\u78ba\u3067\u306f\u306a\u3044\u5305\u62ec\u7684\u306a\u7528\u8a9e\u3067\u3059\uff1a\u4e21\u65b9\u3092\u610f\u5473\u3059\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u306e\u30b3\u30fc\u30b9\u3067\u306f\u3001\u66d6\u6627\u3055\u3092\u6e1b\u3089\u3059\u305f\u3081\u306b\u91cd\u8981\u306a\u5834\u5408\u306f \u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3 \u307e\u305f\u306f \u30c1\u30a7\u30c3\u30af\u30dd\u30a4\u30f3\u30c8 \u3092\u6307\u5b9a\u3057\u307e\u3059\u3002</li> </ul> <p>\u4f8b\u3048\u3070\u3001BERT\u306f\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3067\u3042\u308a\u3001<code>bert-base-cased</code>\u306fBERT\u306e\u6700\u521d\u306e\u30ea\u30ea\u30fc\u30b9\u3067Google\u30c1\u30fc\u30e0\u306b\u3088\u3063\u3066\u8a13\u7df4\u3055\u308c\u305f\u91cd\u307f\u306e\u30bb\u30c3\u30c8\u3067\u30c1\u30a7\u30c3\u30af\u30dd\u30a4\u30f3\u30c8\u3067\u3059\u3002\u3057\u304b\u3057\u3001\u300cBERT\u30e2\u30c7\u30eb\u300d\u3084\u300c<code>bert-base-cased</code>\u30e2\u30c7\u30eb\u300d\u3068\u8a00\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p>","tags":["transformer","nlp","llm","bert","gpt","machine-learning","deep-learning"]},{"location":"LLM/01_transformer_models/#transformers_4","title":"Transformers\u304c\u30bf\u30b9\u30af\u3092\u89e3\u6c7a\u3059\u308b\u65b9\u6cd5","text":"<p>[Transformers \u3067\u3067\u304d\u308b\u3053\u3068] \u3067\u306f\u3001\u81ea\u7136\u8a00\u8a9e\u51e6\u7406\uff08NLP\uff09\u3001\u97f3\u58f0\u3068\u97f3\u97ff\u3001\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3\u30bf\u30b9\u30af\u3001\u304a\u3088\u3073\u305d\u308c\u3089\u306e\u91cd\u8981\u306a\u5fdc\u7528\u306b\u3064\u3044\u3066\u5b66\u3073\u307e\u3057\u305f\u3002\u3053\u306e\u30da\u30fc\u30b8\u3067\u306f\u3001\u30e2\u30c7\u30eb\u304c\u3053\u308c\u3089\u306e\u30bf\u30b9\u30af\u3092\u3069\u306e\u3088\u3046\u306b\u89e3\u6c7a\u3059\u308b\u304b\u3092\u8a73\u3057\u304f\u898b\u3066\u3001\u5185\u90e8\u3067\u4f55\u304c\u8d77\u3053\u3063\u3066\u3044\u308b\u304b\u3092\u8aac\u660e\u3057\u307e\u3059\u3002\u4e0e\u3048\u3089\u308c\u305f\u30bf\u30b9\u30af\u3092\u89e3\u6c7a\u3059\u308b\u65b9\u6cd5\u306f\u591a\u304f\u3042\u308a\u307e\u3059\u304c\u3001\u4e00\u90e8\u306e\u30e2\u30c7\u30eb\u306f\u7279\u5b9a\u306e\u6280\u8853\u3092\u5b9f\u88c5\u3057\u305f\u308a\u3001\u65b0\u3057\u3044\u89d2\u5ea6\u304b\u3089\u30bf\u30b9\u30af\u306b\u30a2\u30d7\u30ed\u30fc\u30c1\u3057\u305f\u308a\u3059\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u304c\u3001Transformer\u30e2\u30c7\u30eb\u3067\u306f\u4e00\u822c\u7684\u306a\u30a2\u30a4\u30c7\u30a2\u306f\u540c\u3058\u3067\u3059\u3002\u305d\u306e\u67d4\u8edf\u306a\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306e\u304a\u304b\u3052\u3067\u3001\u307b\u3068\u3093\u3069\u306e\u30e2\u30c7\u30eb\u306f\u30a8\u30f3\u30b3\u30fc\u30c0\u3001\u30c7\u30b3\u30fc\u30c0\u3001\u307e\u305f\u306f\u30a8\u30f3\u30b3\u30fc\u30c0\u30fb\u30c7\u30b3\u30fc\u30c0\u69cb\u9020\u306e\u30d0\u30ea\u30a2\u30f3\u30c8\u3067\u3059\u3002</p> <p>\u30bf\u30b9\u30af\u304c\u3069\u306e\u3088\u3046\u306b\u89e3\u6c7a\u3055\u308c\u308b\u304b\u3092\u8aac\u660e\u3059\u308b\u305f\u3081\u306b\u3001\u6709\u7528\u306a\u4e88\u6e2c\u3092\u51fa\u529b\u3059\u308b\u305f\u3081\u306b\u30e2\u30c7\u30eb\u5185\u3067\u4f55\u304c\u8d77\u3053\u308b\u304b\u3092\u8a73\u3057\u304f\u898b\u3066\u3044\u304d\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u30e2\u30c7\u30eb\u3068\u305d\u308c\u306b\u5bfe\u5fdc\u3059\u308b\u30bf\u30b9\u30af\u3092\u30ab\u30d0\u30fc\u3057\u307e\u3059\uff1a</p> <ul> <li>\u97f3\u58f0\u5206\u985e\u3068\u81ea\u52d5\u97f3\u58f0\u8a8d\u8b58\uff08ASR\uff09\u306e\u305f\u3081\u306eWav2Vec2</li> <li>\u753b\u50cf\u5206\u985e\u306e\u305f\u3081\u306eVision Transformer (ViT)\u3068ConvNeXT</li> <li>\u7269\u4f53\u691c\u51fa\u306e\u305f\u3081\u306eDETR</li> <li>\u753b\u50cf\u30bb\u30b0\u30e1\u30f3\u30c6\u30fc\u30b7\u30e7\u30f3\u306e\u305f\u3081\u306eMask2Former</li> <li>\u6df1\u5ea6\u63a8\u5b9a\u306e\u305f\u3081\u306eGLPN</li> <li>\u30a8\u30f3\u30b3\u30fc\u30c0\u3092\u4f7f\u7528\u3059\u308b\u30c6\u30ad\u30b9\u30c8\u5206\u985e\u3001\u30c8\u30fc\u30af\u30f3\u5206\u985e\u3001\u8cea\u554f\u5fdc\u7b54\u306a\u3069\u306eNLP\u30bf\u30b9\u30af\u306e\u305f\u3081\u306eBERT</li> <li>\u30c7\u30b3\u30fc\u30c0\u3092\u4f7f\u7528\u3059\u308b\u30c6\u30ad\u30b9\u30c8\u751f\u6210\u306a\u3069\u306eNLP\u30bf\u30b9\u30af\u306e\u305f\u3081\u306eGPT2</li> <li>\u30a8\u30f3\u30b3\u30fc\u30c0\u30fb\u30c7\u30b3\u30fc\u30c0\u3092\u4f7f\u7528\u3059\u308b\u8981\u7d04\u3084\u7ffb\u8a33\u306a\u3069\u306eNLP\u30bf\u30b9\u30af\u306e\u305f\u3081\u306eBART</li> </ul>","tags":["transformer","nlp","llm","bert","gpt","machine-learning","deep-learning"]},{"location":"LLM/01_transformer_models/#transformer_2","title":"\u8a00\u8a9e\u7528\u306eTransformer\u30e2\u30c7\u30eb","text":"<p>\u8a00\u8a9e\u30e2\u30c7\u30eb\u306f\u73fe\u4ee3\u306eNLP\u306e\u6838\u5fc3\u306b\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u3089\u306f\u3001\u30c6\u30ad\u30b9\u30c8\u5185\u306e\u5358\u8a9e\u3084\u30c8\u30fc\u30af\u30f3\u9593\u306e\u7d71\u8a08\u7684\u30d1\u30bf\u30fc\u30f3\u3068\u95a2\u4fc2\u3092\u5b66\u7fd2\u3059\u308b\u3053\u3068\u3067\u3001\u4eba\u9593\u306e\u8a00\u8a9e\u3092\u7406\u89e3\u3057\u751f\u6210\u3059\u308b\u3088\u3046\u306b\u8a2d\u8a08\u3055\u308c\u3066\u3044\u307e\u3059\u3002</p> <p>Transformer\u306f\u5f53\u521d\u6a5f\u68b0\u7ffb\u8a33\u306e\u305f\u3081\u306b\u8a2d\u8a08\u3055\u308c\u3001\u305d\u308c\u4ee5\u6765\u3001\u3059\u3079\u3066\u306eAI\u30bf\u30b9\u30af\u3092\u89e3\u6c7a\u3059\u308b\u305f\u3081\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306b\u306a\u308a\u307e\u3057\u305f\u3002\u4e00\u90e8\u306e\u30bf\u30b9\u30af\u306fTransformer\u306e\u30a8\u30f3\u30b3\u30fc\u30c0\u69cb\u9020\u306b\u9069\u3057\u3066\u304a\u308a\u3001\u4ed6\u306e\u30bf\u30b9\u30af\u306f\u30c7\u30b3\u30fc\u30c0\u306b\u3088\u308a\u9069\u3057\u3066\u3044\u307e\u3059\u3002\u3055\u3089\u306b\u4ed6\u306e\u30bf\u30b9\u30af\u306f\u3001Transformer\u306e\u30a8\u30f3\u30b3\u30fc\u30c0\u30fb\u30c7\u30b3\u30fc\u30c0\u69cb\u9020\u306e\u4e21\u65b9\u3092\u5229\u7528\u3057\u307e\u3059\u3002</p>","tags":["transformer","nlp","llm","bert","gpt","machine-learning","deep-learning"]},{"location":"LLM/01_transformer_models/#_23","title":"\u8a00\u8a9e\u30e2\u30c7\u30eb\u306e\u52d5\u4f5c\u65b9\u6cd5","text":"<p>\u8a00\u8a9e\u30e2\u30c7\u30eb\u306f\u3001\u5468\u56f2\u306e\u5358\u8a9e\u306e\u6587\u8108\u304c\u4e0e\u3048\u3089\u308c\u305f\u5358\u8a9e\u306e\u78ba\u7387\u3092\u4e88\u6e2c\u3059\u308b\u3088\u3046\u306b\u8a13\u7df4\u3055\u308c\u308b\u3053\u3068\u3067\u52d5\u4f5c\u3057\u307e\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u4ed6\u306e\u30bf\u30b9\u30af\u306b\u4e00\u822c\u5316\u3067\u304d\u308b\u8a00\u8a9e\u306e\u57fa\u672c\u7684\u306a\u7406\u89e3\u304c\u5f97\u3089\u308c\u307e\u3059\u3002</p> <p>Transformer\u30e2\u30c7\u30eb\u3092\u8a13\u7df4\u3059\u308b\u305f\u3081\u306e2\u3064\u306e\u4e3b\u8981\u306a\u30a2\u30d7\u30ed\u30fc\u30c1\u304c\u3042\u308a\u307e\u3059\uff1a</p> <ol> <li> <p>\u30de\u30b9\u30af\u8a00\u8a9e\u30e2\u30c7\u30ea\u30f3\u30b0\uff08MLM\uff09: BERT\u306a\u3069\u306e\u30a8\u30f3\u30b3\u30fc\u30c0\u30e2\u30c7\u30eb\u3067\u4f7f\u7528\u3055\u308c\u308b\u3053\u306e\u30a2\u30d7\u30ed\u30fc\u30c1\u306f\u3001\u5165\u529b\u306e\u4e00\u90e8\u306e\u30c8\u30fc\u30af\u30f3\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u30de\u30b9\u30af\u3057\u3001\u5468\u56f2\u306e\u6587\u8108\u306b\u57fa\u3065\u3044\u3066\u5143\u306e\u30c8\u30fc\u30af\u30f3\u3092\u4e88\u6e2c\u3059\u308b\u3088\u3046\u306b\u30e2\u30c7\u30eb\u3092\u8a13\u7df4\u3057\u307e\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u30e2\u30c7\u30eb\u306f\u53cc\u65b9\u5411\u306e\u6587\u8108\u3092\u5b66\u7fd2\u3067\u304d\u307e\u3059\uff08\u30de\u30b9\u30af\u3055\u308c\u305f\u5358\u8a9e\u306e\u524d\u5f8c\u306e\u5358\u8a9e\u3092\u898b\u308b\uff09\u3002</p> </li> <li> <p>\u56e0\u679c\u8a00\u8a9e\u30e2\u30c7\u30ea\u30f3\u30b0\uff08CLM\uff09: GPT\u306a\u3069\u306e\u30c7\u30b3\u30fc\u30c0\u30e2\u30c7\u30eb\u3067\u4f7f\u7528\u3055\u308c\u308b\u3053\u306e\u30a2\u30d7\u30ed\u30fc\u30c1\u306f\u3001\u30b7\u30fc\u30b1\u30f3\u30b9\u5185\u306e\u3059\u3079\u3066\u306e\u524d\u306e\u30c8\u30fc\u30af\u30f3\u306b\u57fa\u3065\u3044\u3066\u6b21\u306e\u30c8\u30fc\u30af\u30f3\u3092\u4e88\u6e2c\u3057\u307e\u3059\u3002\u30e2\u30c7\u30eb\u306f\u5de6\u304b\u3089\u306e\u6587\u8108\uff08\u524d\u306e\u30c8\u30fc\u30af\u30f3\uff09\u306e\u307f\u3092\u4f7f\u7528\u3057\u3066\u6b21\u306e\u30c8\u30fc\u30af\u30f3\u3092\u4e88\u6e2c\u3067\u304d\u307e\u3059\u3002</p> </li> </ol>","tags":["transformer","nlp","llm","bert","gpt","machine-learning","deep-learning"]},{"location":"LLM/01_transformer_models/#_24","title":"\u8a00\u8a9e\u30e2\u30c7\u30eb\u306e\u7a2e\u985e","text":"<p>Transformers\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u306f\u3001\u8a00\u8a9e\u30e2\u30c7\u30eb\u306f\u4e00\u822c\u7684\u306b3\u3064\u306e\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u30ab\u30c6\u30b4\u30ea\u306b\u5206\u985e\u3055\u308c\u307e\u3059\uff1a</p> <ol> <li> <p>\u30a8\u30f3\u30b3\u30fc\u30c0\u306e\u307f\u306e\u30e2\u30c7\u30eb\uff08BERT\u306a\u3069\uff09: \u3053\u308c\u3089\u306e\u30e2\u30c7\u30eb\u306f\u53cc\u65b9\u5411\u30a2\u30d7\u30ed\u30fc\u30c1\u3092\u4f7f\u7528\u3057\u3066\u4e21\u65b9\u5411\u304b\u3089\u306e\u6587\u8108\u3092\u7406\u89e3\u3057\u307e\u3059\u3002\u5206\u985e\u3001\u56fa\u6709\u8868\u73fe\u8a8d\u8b58\u3001\u8cea\u554f\u5fdc\u7b54\u306a\u3069\u3001\u30c6\u30ad\u30b9\u30c8\u306e\u6df1\u3044\u7406\u89e3\u3092\u5fc5\u8981\u3068\u3059\u308b\u30bf\u30b9\u30af\u306b\u6700\u9069\u3067\u3059\u3002</p> </li> <li> <p>\u30c7\u30b3\u30fc\u30c0\u306e\u307f\u306e\u30e2\u30c7\u30eb\uff08GPT\u3001Llama\u306a\u3069\uff09: \u3053\u308c\u3089\u306e\u30e2\u30c7\u30eb\u306f\u30c6\u30ad\u30b9\u30c8\u3092\u5de6\u304b\u3089\u53f3\u306b\u51e6\u7406\u3057\u3001\u30c6\u30ad\u30b9\u30c8\u751f\u6210\u30bf\u30b9\u30af\u306b\u7279\u306b\u512a\u308c\u3066\u3044\u307e\u3059\u3002\u6587\u3092\u5b8c\u6210\u3055\u305b\u305f\u308a\u3001\u30a8\u30c3\u30bb\u30a4\u3092\u66f8\u3044\u305f\u308a\u3001\u30d7\u30ed\u30f3\u30d7\u30c8\u306b\u57fa\u3065\u3044\u3066\u30b3\u30fc\u30c9\u3092\u751f\u6210\u3057\u305f\u308a\u3067\u304d\u307e\u3059\u3002</p> </li> <li> <p>\u30a8\u30f3\u30b3\u30fc\u30c0\u30fb\u30c7\u30b3\u30fc\u30c0\u30e2\u30c7\u30eb\uff08T5\u3001BART\u306a\u3069\uff09: \u3053\u308c\u3089\u306e\u30e2\u30c7\u30eb\u306f\u4e21\u65b9\u306e\u30a2\u30d7\u30ed\u30fc\u30c1\u3092\u7d44\u307f\u5408\u308f\u305b\u3001\u30a8\u30f3\u30b3\u30fc\u30c0\u3092\u4f7f\u7528\u3057\u3066\u5165\u529b\u3092\u7406\u89e3\u3057\u3001\u30c7\u30b3\u30fc\u30c0\u3092\u4f7f\u7528\u3057\u3066\u51fa\u529b\u3092\u751f\u6210\u3057\u307e\u3059\u3002\u7ffb\u8a33\u3001\u8981\u7d04\u3001\u8cea\u554f\u5fdc\u7b54\u306a\u3069\u306esequence-to-sequence\u30bf\u30b9\u30af\u306b\u512a\u308c\u3066\u3044\u307e\u3059\u3002</p> </li> </ol> <p></p> <p>\u524d\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u30ab\u30d0\u30fc\u3057\u305f\u3088\u3046\u306b\u3001\u8a00\u8a9e\u30e2\u30c7\u30eb\u306f\u901a\u5e38\u3001\u5927\u91cf\u306e\u30c6\u30ad\u30b9\u30c8\u30c7\u30fc\u30bf\u3067\u81ea\u5df1\u6559\u5e2b\u3042\u308a\u65b9\u5f0f\uff08\u4eba\u9593\u306e\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u306a\u3057\uff09\u3067\u4e8b\u524d\u8a13\u7df4\u3055\u308c\u3001\u6b21\u306b\u7279\u5b9a\u306e\u30bf\u30b9\u30af\u3067\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3055\u308c\u307e\u3059\u3002\u8ee2\u79fb\u5b66\u7fd2\u3068\u3057\u3066\u77e5\u3089\u308c\u308b\u3053\u306e\u30a2\u30d7\u30ed\u30fc\u30c1\u306b\u3088\u308a\u3001\u3053\u308c\u3089\u306e\u30e2\u30c7\u30eb\u306f\u6bd4\u8f03\u7684\u5c11\u91cf\u306e\u30bf\u30b9\u30af\u56fa\u6709\u30c7\u30fc\u30bf\u3067\u591a\u304f\u306e\u7570\u306a\u308bNLP\u30bf\u30b9\u30af\u306b\u9069\u5fdc\u3067\u304d\u307e\u3059\u3002</p> <p>\u4ee5\u4e0b\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u306f\u3001\u7279\u5b9a\u306e\u30e2\u30c7\u30eb\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3068\u3001\u305d\u308c\u3089\u304c\u97f3\u58f0\u3001\u30d3\u30b8\u30e7\u30f3\u3001\u30c6\u30ad\u30b9\u30c8\u30c9\u30e1\u30a4\u30f3\u306e\u69d8\u3005\u306a\u30bf\u30b9\u30af\u306b\u3069\u306e\u3088\u3046\u306b\u9069\u7528\u3055\u308c\u308b\u304b\u3092\u63a2\u6c42\u3057\u307e\u3059\u3002</p> <p>\u8c46\u77e5\u8b58</p> <p>\u7279\u5b9a\u306eNLP\u30bf\u30b9\u30af\u306b\u6700\u9069\u306aTransformer\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\uff08\u30a8\u30f3\u30b3\u30fc\u30c0\u3001\u30c7\u30b3\u30fc\u30c0\u3001\u307e\u305f\u306f\u4e21\u65b9\uff09\u306e\u3069\u306e\u90e8\u5206\u304b\u3092\u7406\u89e3\u3059\u308b\u3053\u3068\u306f\u3001\u9069\u5207\u306a\u30e2\u30c7\u30eb\u3092\u9078\u629e\u3059\u308b\u305f\u3081\u306b\u91cd\u8981\u3067\u3059\u3002\u4e00\u822c\u7684\u306b\u3001\u53cc\u65b9\u5411\u306e\u6587\u8108\u3092\u5fc5\u8981\u3068\u3059\u308b\u30bf\u30b9\u30af\u306f\u30a8\u30f3\u30b3\u30fc\u30c0\u3092\u4f7f\u7528\u3057\u3001\u30c6\u30ad\u30b9\u30c8\u3092\u751f\u6210\u3059\u308b\u30bf\u30b9\u30af\u306f\u30c7\u30b3\u30fc\u30c0\u3092\u4f7f\u7528\u3057\u3001\u3042\u308b\u30b7\u30fc\u30b1\u30f3\u30b9\u3092\u5225\u306e\u30b7\u30fc\u30b1\u30f3\u30b9\u306b\u5909\u63db\u3059\u308b\u30bf\u30b9\u30af\u306f\u30a8\u30f3\u30b3\u30fc\u30c0\u30fb\u30c7\u30b3\u30fc\u30c0\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002</p>","tags":["transformer","nlp","llm","bert","gpt","machine-learning","deep-learning"]},{"location":"LLM/01_transformer_models/#_25","title":"\u30c6\u30ad\u30b9\u30c8\u751f\u6210","text":"<p>\u30c6\u30ad\u30b9\u30c8\u751f\u6210\u306f\u3001\u30d7\u30ed\u30f3\u30d7\u30c8\u3084\u5165\u529b\u306b\u57fa\u3065\u3044\u3066\u4e00\u8cab\u6027\u304c\u3042\u308a\u6587\u8108\u306b\u95a2\u9023\u3059\u308b\u30c6\u30ad\u30b9\u30c8\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u3092\u542b\u307f\u307e\u3059\u3002</p> <p>GPT-2\u306f\u3001\u5927\u91cf\u306e\u30c6\u30ad\u30b9\u30c8\u3067\u4e8b\u524d\u8a13\u7df4\u3055\u308c\u305f\u30c7\u30b3\u30fc\u30c0\u306e\u307f\u306e\u30e2\u30c7\u30eb\u3067\u3059\u3002\u30d7\u30ed\u30f3\u30d7\u30c8\u304c\u4e0e\u3048\u3089\u308c\u308b\u3068\u8aac\u5f97\u529b\u306e\u3042\u308b\uff08\u305f\u3060\u3057\u5e38\u306b\u771f\u5b9f\u3067\u306f\u306a\u3044\uff01\uff09\u30c6\u30ad\u30b9\u30c8\u3092\u751f\u6210\u3057\u3001\u660e\u793a\u7684\u306b\u8a13\u7df4\u3055\u308c\u3066\u3044\u306a\u3044\u306b\u3082\u304b\u304b\u308f\u3089\u305a\u8cea\u554f\u5fdc\u7b54\u306a\u3069\u306e\u4ed6\u306eNLP\u30bf\u30b9\u30af\u3092\u5b8c\u4e86\u3067\u304d\u307e\u3059\u3002</p> <p></p> <ol> <li> <p>GPT-2\u306f\u30d0\u30a4\u30c8\u30da\u30a2\u7b26\u53f7\u5316\uff08BPE\uff09\u3092\u4f7f\u7528\u3057\u3066\u5358\u8a9e\u3092\u30c8\u30fc\u30af\u30f3\u5316\u3057\u3001\u30c8\u30fc\u30af\u30f3\u57cb\u3081\u8fbc\u307f\u3092\u751f\u6210\u3057\u307e\u3059\u3002\u4f4d\u7f6e\u7b26\u53f7\u5316\u304c\u30c8\u30fc\u30af\u30f3\u57cb\u3081\u8fbc\u307f\u306b\u8ffd\u52a0\u3055\u308c\u3001\u30b7\u30fc\u30b1\u30f3\u30b9\u5185\u306e\u5404\u30c8\u30fc\u30af\u30f3\u306e\u4f4d\u7f6e\u3092\u793a\u3057\u307e\u3059\u3002\u5165\u529b\u57cb\u3081\u8fbc\u307f\u306f\u8907\u6570\u306e\u30c7\u30b3\u30fc\u30c0\u30d6\u30ed\u30c3\u30af\u3092\u901a\u904e\u3057\u3066\u3001\u6700\u7d42\u7684\u306a\u96a0\u308c\u72b6\u614b\u3092\u51fa\u529b\u3057\u307e\u3059\u3002\u5404\u30c7\u30b3\u30fc\u30c0\u30d6\u30ed\u30c3\u30af\u5185\u3067\u3001GPT-2\u306f \u30de\u30b9\u30af\u3055\u308c\u305f\u81ea\u5df1\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3 \u5c64\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u3053\u308c\u306f\u3001GPT-2\u304c\u5c06\u6765\u306e\u30c8\u30fc\u30af\u30f3\u306b\u6ce8\u610f\u3092\u6255\u3046\u3053\u3068\u304c\u3067\u304d\u306a\u3044\u3053\u3068\u3092\u610f\u5473\u3057\u307e\u3059\u3002\u5de6\u5074\u306e\u30c8\u30fc\u30af\u30f3\u306e\u307f\u306b\u6ce8\u610f\u3092\u6255\u3046\u3053\u3068\u304c\u8a31\u53ef\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u30de\u30b9\u30af\u3055\u308c\u305f\u81ea\u5df1\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u3067\u306f\u3001\u5c06\u6765\u306e\u30c8\u30fc\u30af\u30f3\u306e\u30b9\u30b3\u30a2\u3092<code>0</code>\u306b\u8a2d\u5b9a\u3059\u308b\u305f\u3081\u306b\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u30de\u30b9\u30af\u304c\u4f7f\u7528\u3055\u308c\u308b\u305f\u3081\u3001BERT\u306e[<code>mask</code>]\u30c8\u30fc\u30af\u30f3\u3068\u306f\u7570\u306a\u308a\u307e\u3059\u3002</p> </li> <li> <p>\u30c7\u30b3\u30fc\u30c0\u304b\u3089\u306e\u51fa\u529b\u306f\u8a00\u8a9e\u30e2\u30c7\u30ea\u30f3\u30b0\u30d8\u30c3\u30c9\u306b\u6e21\u3055\u308c\u3001\u96a0\u308c\u72b6\u614b\u3092\u30ed\u30b8\u30c3\u30c8\u306b\u5909\u63db\u3059\u308b\u305f\u3081\u306b\u7dda\u5f62\u5909\u63db\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\u30e9\u30d9\u30eb\u306f\u3001\u30ed\u30b8\u30c3\u30c8\u3092\u53f3\u306b1\u3064\u30b7\u30d5\u30c8\u3059\u308b\u3053\u3068\u3067\u4f5c\u6210\u3055\u308c\u308b\u30b7\u30fc\u30b1\u30f3\u30b9\u5185\u306e\u6b21\u306e\u30c8\u30fc\u30af\u30f3\u3067\u3059\u3002\u30af\u30ed\u30b9\u30a8\u30f3\u30c8\u30ed\u30d4\u30fc\u640d\u5931\u304c\u30b7\u30d5\u30c8\u3055\u308c\u305f\u30ed\u30b8\u30c3\u30c8\u3068\u30e9\u30d9\u30eb\u306e\u9593\u3067\u8a08\u7b97\u3055\u308c\u3001\u6b21\u306e\u6700\u3082\u53ef\u80fd\u6027\u306e\u9ad8\u3044\u30c8\u30fc\u30af\u30f3\u3092\u51fa\u529b\u3057\u307e\u3059\u3002</p> </li> </ol> <p>GPT-2\u306e\u4e8b\u524d\u8a13\u7df4\u76ee\u7684\u306f\u5b8c\u5168\u306b\u56e0\u679c\u8a00\u8a9e\u30e2\u30c7\u30ea\u30f3\u30b0\u306b\u57fa\u3065\u3044\u3066\u304a\u308a\u3001\u30b7\u30fc\u30b1\u30f3\u30b9\u5185\u306e\u6b21\u306e\u5358\u8a9e\u3092\u4e88\u6e2c\u3057\u307e\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u3001GPT-2\u306f\u30c6\u30ad\u30b9\u30c8\u3092\u751f\u6210\u3059\u308b\u30bf\u30b9\u30af\u306b\u7279\u306b\u512a\u308c\u3066\u3044\u307e\u3059\u3002</p> <p>\u30c6\u30ad\u30b9\u30c8\u751f\u6210\u306b\u6311\u6226\u3059\u308b\u6e96\u5099\u306f\u3067\u304d\u307e\u3057\u305f\u304b\uff1f\u5b8c\u5168\u306a\u56e0\u679c\u8a00\u8a9e\u30e2\u30c7\u30ea\u30f3\u30b0\u30ac\u30a4\u30c9\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3066\u3001DistilGPT-2\u3092\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3057\u3001\u63a8\u8ad6\u306b\u4f7f\u7528\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3057\u3087\u3046\uff01</p>","tags":["transformer","nlp","llm","bert","gpt","machine-learning","deep-learning"]},{"location":"LLM/01_transformer_models/#_26","title":"\u30c6\u30ad\u30b9\u30c8\u5206\u985e","text":"<p>\u30c6\u30ad\u30b9\u30c8\u5206\u985e\u306f\u3001\u611f\u60c5\u5206\u6790\u3001\u30c8\u30d4\u30c3\u30af\u5206\u985e\u3001\u30b9\u30d1\u30e0\u691c\u51fa\u306a\u3069\u3001\u30c6\u30ad\u30b9\u30c8\u6587\u66f8\u3092\u4e8b\u524d\u5b9a\u7fa9\u3055\u308c\u305f\u30ab\u30c6\u30b4\u30ea\u306b\u5272\u308a\u5f53\u3066\u308b\u3053\u3068\u3092\u542b\u307f\u307e\u3059\u3002</p> <p>BERT\u306f\u30a8\u30f3\u30b3\u30fc\u30c0\u306e\u307f\u306e\u30e2\u30c7\u30eb\u3067\u3001\u6df1\u3044\u53cc\u65b9\u5411\u6027\u3092\u52b9\u679c\u7684\u306b\u5b9f\u88c5\u3057\u3001\u4e21\u5074\u306e\u5358\u8a9e\u306b\u6ce8\u610f\u3092\u6255\u3046\u3053\u3068\u3067\u30c6\u30ad\u30b9\u30c8\u306e\u3088\u308a\u8c4a\u304b\u306a\u8868\u73fe\u3092\u5b66\u7fd2\u3057\u305f\u6700\u521d\u306e\u30e2\u30c7\u30eb\u3067\u3059\u3002</p> <ol> <li> <p>BERT\u306fWordPiece\u30c8\u30fc\u30af\u30ca\u30a4\u30bc\u30fc\u30b7\u30e7\u30f3\u3092\u4f7f\u7528\u3057\u3066\u30c6\u30ad\u30b9\u30c8\u306e\u30c8\u30fc\u30af\u30f3\u57cb\u3081\u8fbc\u307f\u3092\u751f\u6210\u3057\u307e\u3059\u3002\u5358\u4e00\u306e\u6587\u3068\u6587\u306e\u30da\u30a2\u3092\u533a\u5225\u3059\u308b\u305f\u3081\u306b\u3001\u7279\u5225\u306a<code>[SEP]</code>\u30c8\u30fc\u30af\u30f3\u304c\u8ffd\u52a0\u3055\u308c\u3066\u533a\u5225\u3055\u308c\u307e\u3059\u3002\u7279\u5225\u306a<code>[CLS]</code>\u30c8\u30fc\u30af\u30f3\u304c\u3059\u3079\u3066\u306e\u30c6\u30ad\u30b9\u30c8\u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u6700\u521d\u306b\u8ffd\u52a0\u3055\u308c\u307e\u3059\u3002<code>[CLS]</code>\u30c8\u30fc\u30af\u30f3\u3092\u6301\u3064\u6700\u7d42\u51fa\u529b\u306f\u3001\u5206\u985e\u30bf\u30b9\u30af\u306e\u5206\u985e\u30d8\u30c3\u30c9\u3078\u306e\u5165\u529b\u3068\u3057\u3066\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002BERT\u306f\u3001\u30c8\u30fc\u30af\u30f3\u304c\u6587\u306e\u30da\u30a2\u306e\u6700\u521d\u307e\u305f\u306f2\u756a\u76ee\u306e\u6587\u306b\u5c5e\u3059\u308b\u304b\u3092\u793a\u3059\u305f\u3081\u306b\u30bb\u30b0\u30e1\u30f3\u30c8\u57cb\u3081\u8fbc\u307f\u3082\u8ffd\u52a0\u3057\u307e\u3059\u3002</p> </li> <li> <p>BERT\u306f2\u3064\u306e\u76ee\u7684\u3067\u4e8b\u524d\u8a13\u7df4\u3055\u308c\u307e\u3059\uff1a\u30de\u30b9\u30af\u8a00\u8a9e\u30e2\u30c7\u30ea\u30f3\u30b0\u3068\u6b21\u6587\u4e88\u6e2c\u3067\u3059\u3002\u30de\u30b9\u30af\u8a00\u8a9e\u30e2\u30c7\u30ea\u30f3\u30b0\u3067\u306f\u3001\u5165\u529b\u30c8\u30fc\u30af\u30f3\u306e\u3042\u308b\u5272\u5408\u304c\u30e9\u30f3\u30c0\u30e0\u306b\u30de\u30b9\u30af\u3055\u308c\u3001\u30e2\u30c7\u30eb\u306f\u3053\u308c\u3089\u3092\u4e88\u6e2c\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u306f\u53cc\u65b9\u5411\u6027\u306e\u554f\u984c\u3092\u89e3\u6c7a\u3057\u307e\u3059\u3002\u30e2\u30c7\u30eb\u304c\u3059\u3079\u3066\u306e\u5358\u8a9e\u3092\u898b\u3066\u6b21\u306e\u5358\u8a9e\u3092\u300c\u4e88\u6e2c\u300d\u3067\u304d\u308b\u5834\u5408\u3001\u30c1\u30fc\u30c8\u3067\u304d\u307e\u3059\u3002\u4e88\u6e2c\u3055\u308c\u305f\u30de\u30b9\u30af\u30c8\u30fc\u30af\u30f3\u306e\u6700\u7d42\u96a0\u308c\u72b6\u614b\u306f\u3001\u8a9e\u5f59\u4e0a\u306e\u30bd\u30d5\u30c8\u30de\u30c3\u30af\u30b9\u3092\u6301\u3064\u30d5\u30a3\u30fc\u30c9\u30d5\u30a9\u30ef\u30fc\u30c9\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306b\u6e21\u3055\u308c\u3001\u30de\u30b9\u30af\u3055\u308c\u305f\u5358\u8a9e\u3092\u4e88\u6e2c\u3057\u307e\u3059\u3002</p> <p>2\u756a\u76ee\u306e\u4e8b\u524d\u8a13\u7df4\u76ee\u7684\u306f\u6b21\u6587\u4e88\u6e2c\u3067\u3059\u3002\u30e2\u30c7\u30eb\u306f\u6587B\u304c\u6587A\u306b\u7d9a\u304f\u304b\u3069\u3046\u304b\u3092\u4e88\u6e2c\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u534a\u5206\u306e\u6642\u9593\u3067\u6587B\u306f\u6b21\u306e\u6587\u3067\u3042\u308a\u3001\u6b8b\u308a\u306e\u534a\u5206\u306e\u6642\u9593\u3067\u306f\u3001\u6587B\u306f\u30e9\u30f3\u30c0\u30e0\u306a\u6587\u3067\u3059\u3002\u6b21\u306e\u6587\u304b\u3069\u3046\u304b\u306e\u4e88\u6e2c\u306f\u30012\u3064\u306e\u30af\u30e9\u30b9\uff08<code>IsNext</code>\u3068<code>NotNext</code>\uff09\u4e0a\u306e\u30bd\u30d5\u30c8\u30de\u30c3\u30af\u30b9\u3092\u6301\u3064\u30d5\u30a3\u30fc\u30c9\u30d5\u30a9\u30ef\u30fc\u30c9\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306b\u6e21\u3055\u308c\u307e\u3059\u3002</p> </li> <li> <p>\u5165\u529b\u57cb\u3081\u8fbc\u307f\u306f\u8907\u6570\u306e\u30a8\u30f3\u30b3\u30fc\u30c0\u5c64\u3092\u901a\u904e\u3057\u3066\u3001\u6700\u7d42\u7684\u306a\u96a0\u308c\u72b6\u614b\u3092\u51fa\u529b\u3057\u307e\u3059\u3002</p> </li> </ol> <p>\u4e8b\u524d\u8a13\u7df4\u6e08\u307f\u30e2\u30c7\u30eb\u3092\u30c6\u30ad\u30b9\u30c8\u5206\u985e\u306b\u4f7f\u7528\u3059\u308b\u306b\u306f\u3001\u30d9\u30fc\u30b9BERT\u30e2\u30c7\u30eb\u306e\u4e0a\u306b\u30b7\u30fc\u30b1\u30f3\u30b9\u5206\u985e\u30d8\u30c3\u30c9\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\u30b7\u30fc\u30b1\u30f3\u30b9\u5206\u985e\u30d8\u30c3\u30c9\u306f\u3001\u6700\u7d42\u96a0\u308c\u72b6\u614b\u3092\u53d7\u3051\u5165\u308c\u3001\u305d\u308c\u3089\u3092\u30ed\u30b8\u30c3\u30c8\u306b\u5909\u63db\u3059\u308b\u305f\u3081\u306b\u7dda\u5f62\u5909\u63db\u3092\u5b9f\u884c\u3059\u308b\u7dda\u5f62\u5c64\u3067\u3059\u3002\u30af\u30ed\u30b9\u30a8\u30f3\u30c8\u30ed\u30d4\u30fc\u640d\u5931\u304c\u30ed\u30b8\u30c3\u30c8\u3068\u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u9593\u3067\u8a08\u7b97\u3055\u308c\u3001\u6700\u3082\u53ef\u80fd\u6027\u306e\u9ad8\u3044\u30e9\u30d9\u30eb\u3092\u898b\u3064\u3051\u307e\u3059\u3002</p> <p>\u30c6\u30ad\u30b9\u30c8\u5206\u985e\u306b\u6311\u6226\u3059\u308b\u6e96\u5099\u306f\u3067\u304d\u307e\u3057\u305f\u304b\uff1f\u5b8c\u5168\u306a\u30c6\u30ad\u30b9\u30c8\u5206\u985e\u30ac\u30a4\u30c9\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3066\u3001DistilBERT\u3092\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3057\u3001\u63a8\u8ad6\u306b\u4f7f\u7528\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3057\u3087\u3046\uff01</p>","tags":["transformer","nlp","llm","bert","gpt","machine-learning","deep-learning"]},{"location":"LLM/01_transformer_models/#_27","title":"\u30c8\u30fc\u30af\u30f3\u5206\u985e","text":"<p>\u30c8\u30fc\u30af\u30f3\u5206\u985e\u306f\u3001\u56fa\u6709\u8868\u73fe\u8a8d\u8b58\u3084\u54c1\u8a5e\u30bf\u30b0\u4ed8\u3051\u306a\u3069\u3001\u30b7\u30fc\u30b1\u30f3\u30b9\u5185\u306e\u5404\u30c8\u30fc\u30af\u30f3\u306b\u30e9\u30d9\u30eb\u3092\u5272\u308a\u5f53\u3066\u308b\u3053\u3068\u3092\u542b\u307f\u307e\u3059\u3002</p> <p>\u56fa\u6709\u8868\u73fe\u8a8d\u8b58\uff08NER\uff09\u306a\u3069\u306e\u30c8\u30fc\u30af\u30f3\u5206\u985e\u30bf\u30b9\u30af\u306bBERT\u3092\u4f7f\u7528\u3059\u308b\u306b\u306f\u3001\u30d9\u30fc\u30b9BERT\u30e2\u30c7\u30eb\u306e\u4e0a\u306b\u30c8\u30fc\u30af\u30f3\u5206\u985e\u30d8\u30c3\u30c9\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\u30c8\u30fc\u30af\u30f3\u5206\u985e\u30d8\u30c3\u30c9\u306f\u3001\u6700\u7d42\u96a0\u308c\u72b6\u614b\u3092\u53d7\u3051\u5165\u308c\u3001\u305d\u308c\u3089\u3092\u30ed\u30b8\u30c3\u30c8\u306b\u5909\u63db\u3059\u308b\u305f\u3081\u306b\u7dda\u5f62\u5909\u63db\u3092\u5b9f\u884c\u3059\u308b\u7dda\u5f62\u5c64\u3067\u3059\u3002\u30af\u30ed\u30b9\u30a8\u30f3\u30c8\u30ed\u30d4\u30fc\u640d\u5931\u304c\u30ed\u30b8\u30c3\u30c8\u3068\u5404\u30c8\u30fc\u30af\u30f3\u306e\u9593\u3067\u8a08\u7b97\u3055\u308c\u3001\u6700\u3082\u53ef\u80fd\u6027\u306e\u9ad8\u3044\u30e9\u30d9\u30eb\u3092\u898b\u3064\u3051\u307e\u3059\u3002</p> <p>\u30c8\u30fc\u30af\u30f3\u5206\u985e\u306b\u6311\u6226\u3059\u308b\u6e96\u5099\u306f\u3067\u304d\u307e\u3057\u305f\u304b\uff1f\u5b8c\u5168\u306a\u30c8\u30fc\u30af\u30f3\u5206\u985e\u30ac\u30a4\u30c9\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3066\u3001DistilBERT\u3092\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3057\u3001\u63a8\u8ad6\u306b\u4f7f\u7528\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3057\u3087\u3046\uff01</p>","tags":["transformer","nlp","llm","bert","gpt","machine-learning","deep-learning"]},{"location":"LLM/01_transformer_models/#_28","title":"\u8cea\u554f\u5fdc\u7b54","text":"<p>\u8cea\u554f\u5fdc\u7b54\u306f\u3001\u4e0e\u3048\u3089\u308c\u305f\u6587\u8108\u3084\u7ae0\u5185\u3067\u8cea\u554f\u3078\u306e\u7b54\u3048\u3092\u898b\u3064\u3051\u308b\u3053\u3068\u3092\u542b\u307f\u307e\u3059\u3002</p> <p>\u8cea\u554f\u5fdc\u7b54\u306bBERT\u3092\u4f7f\u7528\u3059\u308b\u306b\u306f\u3001\u30d9\u30fc\u30b9BERT\u30e2\u30c7\u30eb\u306e\u4e0a\u306b\u30b9\u30d1\u30f3\u5206\u985e\u30d8\u30c3\u30c9\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\u3053\u306e\u7dda\u5f62\u5c64\u306f\u6700\u7d42\u96a0\u308c\u72b6\u614b\u3092\u53d7\u3051\u5165\u308c\u3001\u7b54\u3048\u306b\u5bfe\u5fdc\u3059\u308b<code>span</code>\u958b\u59cb\u3068\u7d42\u4e86\u30ed\u30b8\u30c3\u30c8\u3092\u8a08\u7b97\u3059\u308b\u305f\u3081\u306b\u7dda\u5f62\u5909\u63db\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\u30af\u30ed\u30b9\u30a8\u30f3\u30c8\u30ed\u30d4\u30fc\u640d\u5931\u304c\u30ed\u30b8\u30c3\u30c8\u3068\u30e9\u30d9\u30eb\u4f4d\u7f6e\u306e\u9593\u3067\u8a08\u7b97\u3055\u308c\u3001\u7b54\u3048\u306b\u5bfe\u5fdc\u3059\u308b\u30c6\u30ad\u30b9\u30c8\u306e\u6700\u3082\u53ef\u80fd\u6027\u306e\u9ad8\u3044\u30b9\u30d1\u30f3\u3092\u898b\u3064\u3051\u307e\u3059\u3002</p> <p>\u8cea\u554f\u5fdc\u7b54\u306b\u6311\u6226\u3059\u308b\u6e96\u5099\u306f\u3067\u304d\u307e\u3057\u305f\u304b\uff1f\u5b8c\u5168\u306a\u8cea\u554f\u5fdc\u7b54\u30ac\u30a4\u30c9\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3066\u3001DistilBERT\u3092\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3057\u3001\u63a8\u8ad6\u306b\u4f7f\u7528\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3057\u3087\u3046\uff01</p> <p>\u8c46\u77e5\u8b58</p> <p>\ud83d\udca1 BERT\u304c\u4e8b\u524d\u8a13\u7df4\u3055\u308c\u308b\u3068\u3001\u7570\u306a\u308b\u30bf\u30b9\u30af\u306b\u4f7f\u7528\u3059\u308b\u306e\u304c\u3044\u304b\u306b\u7c21\u5358\u304b\u306b\u6ce8\u76ee\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u4e8b\u524d\u8a13\u7df4\u6e08\u307f\u30e2\u30c7\u30eb\u306b\u7279\u5b9a\u306e\u30d8\u30c3\u30c9\u3092\u8ffd\u52a0\u3057\u3066\u3001\u96a0\u308c\u72b6\u614b\u3092\u5e0c\u671b\u3059\u308b\u51fa\u529b\u306b\u64cd\u4f5c\u3059\u308b\u3060\u3051\u3067\u3059\uff01</p>","tags":["transformer","nlp","llm","bert","gpt","machine-learning","deep-learning"]},{"location":"LLM/01_transformer_models/#_29","title":"\u8981\u7d04","text":"<p>\u8981\u7d04\u306f\u3001\u30ad\u30fc\u60c5\u5831\u3068\u610f\u5473\u3092\u4fdd\u6301\u3057\u306a\u304c\u3089\u3001\u3088\u308a\u9577\u3044\u30c6\u30ad\u30b9\u30c8\u3092\u3088\u308a\u77ed\u3044\u30d0\u30fc\u30b8\u30e7\u30f3\u306b\u51dd\u7e2e\u3059\u308b\u3053\u3068\u3092\u542b\u307f\u307e\u3059\u3002</p> <p>BART\u3084T5\u306a\u3069\u306e\u30a8\u30f3\u30b3\u30fc\u30c0\u30fb\u30c7\u30b3\u30fc\u30c0\u30e2\u30c7\u30eb\u306f\u3001\u8981\u7d04\u30bf\u30b9\u30af\u306esequence-to-sequence\u30d1\u30bf\u30fc\u30f3\u7528\u306b\u8a2d\u8a08\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3067BART\u304c\u3069\u306e\u3088\u3046\u306b\u52d5\u4f5c\u3059\u308b\u304b\u3092\u8aac\u660e\u3057\u3001\u6700\u5f8c\u306bT5\u3092\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3057\u3066\u307f\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p> <p></p> <ol> <li> <p>BART\u306e\u30a8\u30f3\u30b3\u30fc\u30c0\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306fBERT\u3068\u975e\u5e38\u306b\u4f3c\u3066\u304a\u308a\u3001\u30c6\u30ad\u30b9\u30c8\u306e\u30c8\u30fc\u30af\u30f3\u3068\u4f4d\u7f6e\u57cb\u3081\u8fbc\u307f\u3092\u53d7\u3051\u5165\u308c\u307e\u3059\u3002BART\u306f\u5165\u529b\u3092\u7834\u640d\u3055\u305b\u3001\u6b21\u306b\u30c7\u30b3\u30fc\u30c0\u3067\u305d\u308c\u3092\u518d\u69cb\u7bc9\u3059\u308b\u3053\u3068\u3067\u4e8b\u524d\u8a13\u7df4\u3055\u308c\u307e\u3059\u3002\u7279\u5b9a\u306e\u7834\u640d\u6226\u7565\u3092\u6301\u3064\u4ed6\u306e\u30a8\u30f3\u30b3\u30fc\u30c0\u3068\u306f\u7570\u306a\u308a\u3001BART\u306f\u4efb\u610f\u306e\u30bf\u30a4\u30d7\u306e\u7834\u640d\u3092\u9069\u7528\u3067\u304d\u307e\u3059\u3002\u305f\u3060\u3057\u3001\u30c6\u30ad\u30b9\u30c8\u57cb\u8fbc\u307f\u7834\u640d\u6226\u7565\u304c\u6700\u3082\u52b9\u679c\u7684\u3067\u3059\u3002\u30c6\u30ad\u30b9\u30c8\u57cb\u8fbc\u307f\u3067\u306f\u3001\u591a\u6570\u306e\u30c6\u30ad\u30b9\u30c8\u30b9\u30d1\u30f3\u304c \u5358\u4e00\u306e [<code>mask</code>]\u30c8\u30fc\u30af\u30f3\u306b\u7f6e\u304d\u63db\u3048\u3089\u308c\u307e\u3059\u3002\u3053\u308c\u306f\u91cd\u8981\u3067\u3059\u3002\u306a\u305c\u306a\u3089\u3001\u30e2\u30c7\u30eb\u306f\u30de\u30b9\u30af\u3055\u308c\u305f\u30c8\u30fc\u30af\u30f3\u3092\u4e88\u6e2c\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u3001\u30e2\u30c7\u30eb\u306b\u6b20\u843d\u3057\u305f\u30c8\u30fc\u30af\u30f3\u306e\u6570\u3092\u4e88\u6e2c\u3059\u308b\u3053\u3068\u3092\u6559\u3048\u308b\u304b\u3089\u3067\u3059\u3002\u5165\u529b\u57cb\u3081\u8fbc\u307f\u3068\u30de\u30b9\u30af\u3055\u308c\u305f\u30b9\u30d1\u30f3\u306f\u30a8\u30f3\u30b3\u30fc\u30c0\u3092\u901a\u904e\u3057\u3066\u6700\u7d42\u96a0\u308c\u72b6\u614b\u3092\u51fa\u529b\u3057\u307e\u3059\u304c\u3001BERT\u3068\u306f\u7570\u306a\u308a\u3001BART\u306f\u6700\u5f8c\u306b\u5358\u8a9e\u3092\u4e88\u6e2c\u3059\u308b\u305f\u3081\u306e\u6700\u7d42\u30d5\u30a3\u30fc\u30c9\u30d5\u30a9\u30ef\u30fc\u30c9\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u8ffd\u52a0\u3057\u307e\u305b\u3093\u3002</p> </li> <li> <p>\u30a8\u30f3\u30b3\u30fc\u30c0\u306e\u51fa\u529b\u306f\u30c7\u30b3\u30fc\u30c0\u306b\u6e21\u3055\u308c\u3001\u30c7\u30b3\u30fc\u30c0\u306f\u30a8\u30f3\u30b3\u30fc\u30c0\u306e\u51fa\u529b\u304b\u3089\u30de\u30b9\u30af\u3055\u308c\u305f\u30c8\u30fc\u30af\u30f3\u3068\u4efb\u610f\u306e\u7834\u640d\u3057\u3066\u3044\u306a\u3044\u30c8\u30fc\u30af\u30f3\u3092\u4e88\u6e2c\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u30c7\u30b3\u30fc\u30c0\u304c\u5143\u306e\u30c6\u30ad\u30b9\u30c8\u3092\u5fa9\u5143\u3059\u308b\u306e\u306b\u5f79\u7acb\u3064\u8ffd\u52a0\u306e\u6587\u8108\u304c\u63d0\u4f9b\u3055\u308c\u307e\u3059\u3002\u30c7\u30b3\u30fc\u30c0\u304b\u3089\u306e\u51fa\u529b\u306f\u8a00\u8a9e\u30e2\u30c7\u30ea\u30f3\u30b0\u30d8\u30c3\u30c9\u306b\u6e21\u3055\u308c\u3001\u96a0\u308c\u72b6\u614b\u3092\u30ed\u30b8\u30c3\u30c8\u306b\u5909\u63db\u3059\u308b\u305f\u3081\u306b\u7dda\u5f62\u5909\u63db\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\u30af\u30ed\u30b9\u30a8\u30f3\u30c8\u30ed\u30d4\u30fc\u640d\u5931\u304c\u30ed\u30b8\u30c3\u30c8\u3068\u30e9\u30d9\u30eb\u306e\u9593\u3067\u8a08\u7b97\u3055\u308c\u307e\u3059\u3002\u30e9\u30d9\u30eb\u306f\u53f3\u306b1\u3064\u30b7\u30d5\u30c8\u3055\u308c\u305f\u3060\u3051\u306e\u30c8\u30fc\u30af\u30f3\u3067\u3059\u3002</p> </li> </ol> <p>\u8981\u7d04\u306b\u6311\u6226\u3059\u308b\u6e96\u5099\u306f\u3067\u304d\u307e\u3057\u305f\u304b\uff1f\u5b8c\u5168\u306a\u8981\u7d04\u30ac\u30a4\u30c9\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3066\u3001T5\u3092\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3057\u3001\u63a8\u8ad6\u306b\u4f7f\u7528\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3057\u3087\u3046\uff01</p>","tags":["transformer","nlp","llm","bert","gpt","machine-learning","deep-learning"]},{"location":"LLM/01_transformer_models/#_30","title":"\u7ffb\u8a33","text":"<p>\u7ffb\u8a33\u306f\u3001\u610f\u5473\u3092\u4fdd\u6301\u3057\u306a\u304c\u3089\u30c6\u30ad\u30b9\u30c8\u3092\u3042\u308b\u8a00\u8a9e\u304b\u3089\u5225\u306e\u8a00\u8a9e\u306b\u5909\u63db\u3059\u308b\u3053\u3068\u3092\u542b\u307f\u307e\u3059\u3002\u7ffb\u8a33\u306f\u3001BART\u3084T5\u306a\u3069\u306e\u30a8\u30f3\u30b3\u30fc\u30c0\u30fb\u30c7\u30b3\u30fc\u30c0\u30e2\u30c7\u30eb\u3092\u4f7f\u7528\u3067\u304d\u308bsequence-to-sequence\u30bf\u30b9\u30af\u306e\u3082\u3046\u4e00\u3064\u306e\u4f8b\u3067\u3059\u3002\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3067BART\u304c\u3069\u306e\u3088\u3046\u306b\u52d5\u4f5c\u3059\u308b\u304b\u3092\u8aac\u660e\u3057\u3001\u6700\u5f8c\u306bT5\u3092\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3057\u3066\u307f\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p> <p>BART\u306f\u3001\u30bd\u30fc\u30b9\u8a00\u8a9e\u3092\u30bf\u30fc\u30b2\u30c3\u30c8\u8a00\u8a9e\u306b\u30c7\u30b3\u30fc\u30c9\u3067\u304d\u308b\u5165\u529b\u306b\u30de\u30c3\u30d7\u3059\u308b\u305f\u3081\u306b\u3001\u5225\u500b\u306e\u30e9\u30f3\u30c0\u30e0\u306b\u521d\u671f\u5316\u3055\u308c\u305f\u30a8\u30f3\u30b3\u30fc\u30c0\u3092\u8ffd\u52a0\u3059\u308b\u3053\u3068\u3067\u7ffb\u8a33\u306b\u9069\u5fdc\u3057\u307e\u3059\u3002\u3053\u306e\u65b0\u3057\u3044\u30a8\u30f3\u30b3\u30fc\u30c0\u306e\u57cb\u3081\u8fbc\u307f\u306f\u3001\u5143\u306e\u5358\u8a9e\u57cb\u3081\u8fbc\u307f\u306e\u4ee3\u308f\u308a\u306b\u4e8b\u524d\u8a13\u7df4\u6e08\u307f\u30a8\u30f3\u30b3\u30fc\u30c0\u306b\u6e21\u3055\u308c\u307e\u3059\u3002\u30bd\u30fc\u30b9\u30a8\u30f3\u30b3\u30fc\u30c0\u306f\u3001\u30bd\u30fc\u30b9\u30a8\u30f3\u30b3\u30fc\u30c0\u3001\u4f4d\u7f6e\u57cb\u3081\u8fbc\u307f\u3001\u5165\u529b\u57cb\u3081\u8fbc\u307f\u3092\u30e2\u30c7\u30eb\u51fa\u529b\u304b\u3089\u306e\u30af\u30ed\u30b9\u30a8\u30f3\u30c8\u30ed\u30d4\u30fc\u640d\u5931\u3067\u66f4\u65b0\u3059\u308b\u3053\u3068\u3067\u8a13\u7df4\u3055\u308c\u307e\u3059\u3002\u30e2\u30c7\u30eb\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u3053\u306e\u6700\u521d\u306e\u30b9\u30c6\u30c3\u30d7\u3067\u51cd\u7d50\u3055\u308c\u3001\u3059\u3079\u3066\u306e\u30e2\u30c7\u30eb\u30d1\u30e9\u30e1\u30fc\u30bf\u304c2\u756a\u76ee\u306e\u30b9\u30c6\u30c3\u30d7\u3067\u4e00\u7dd2\u306b\u8a13\u7df4\u3055\u308c\u307e\u3059\u3002</p> <p>BART\u306f\u3001\u591a\u304f\u306e\u7570\u306a\u308b\u8a00\u8a9e\u3067\u4e8b\u524d\u8a13\u7df4\u3055\u308c\u305f\u7ffb\u8a33\u3092\u76ee\u7684\u3068\u3057\u305f\u591a\u8a00\u8a9e\u30d0\u30fc\u30b8\u30e7\u30f3\u3067\u3042\u308bmBART\u306b\u3088\u3063\u3066\u305d\u306e\u5f8c\u30d5\u30a9\u30ed\u30fc\u30a2\u30c3\u30d7\u3055\u308c\u3066\u3044\u307e\u3059\u3002</p> <p>\u7ffb\u8a33\u306b\u6311\u6226\u3059\u308b\u6e96\u5099\u306f\u3067\u304d\u307e\u3057\u305f\u304b\uff1f\u5b8c\u5168\u306a\u7ffb\u8a33\u30ac\u30a4\u30c9\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3066\u3001T5\u3092\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3057\u3001\u63a8\u8ad6\u306b\u4f7f\u7528\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3057\u3087\u3046\uff01</p> <p>\u8c46\u77e5\u8b58</p> <p>\u3053\u306e\u30ac\u30a4\u30c9\u5168\u4f53\u3067\u898b\u3066\u304d\u305f\u3088\u3046\u306b\u3001\u591a\u304f\u306e\u30e2\u30c7\u30eb\u306f\u7570\u306a\u308b\u30bf\u30b9\u30af\u306b\u5bfe\u51e6\u3059\u308b\u306b\u3082\u304b\u304b\u308f\u3089\u305a\u3001\u985e\u4f3c\u306e\u30d1\u30bf\u30fc\u30f3\u306b\u5f93\u3044\u307e\u3059\u3002\u3053\u308c\u3089\u306e\u5171\u901a\u30d1\u30bf\u30fc\u30f3\u3092\u7406\u89e3\u3059\u308b\u3053\u3068\u3067\u3001\u65b0\u3057\u3044\u30e2\u30c7\u30eb\u304c\u3069\u306e\u3088\u3046\u306b\u52d5\u4f5c\u3059\u308b\u304b\u3092\u7d20\u65e9\u304f\u628a\u63e1\u3057\u3001\u65e2\u5b58\u306e\u30e2\u30c7\u30eb\u3092\u7279\u5b9a\u306e\u30cb\u30fc\u30ba\u306b\u9069\u5fdc\u3055\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p>","tags":["transformer","nlp","llm","bert","gpt","machine-learning","deep-learning"]},{"location":"LLM/01_transformer_models/#_31","title":"\u30c6\u30ad\u30b9\u30c8\u3092\u8d85\u3048\u305f\u30e2\u30c0\u30ea\u30c6\u30a3","text":"<p>Transformer\u306f\u30c6\u30ad\u30b9\u30c8\u306b\u9650\u5b9a\u3055\u308c\u307e\u305b\u3093\u3002\u97f3\u58f0\u3001\u753b\u50cf\u3001\u30d3\u30c7\u30aa\u306a\u3069\u3001\u4ed6\u306e\u30e2\u30c0\u30ea\u30c6\u30a3\u306b\u3082\u9069\u7528\u3067\u304d\u307e\u3059\u3002\u3082\u3061\u308d\u3093\u3001\u3053\u306e\u30b3\u30fc\u30b9\u3067\u306f\u30c6\u30ad\u30b9\u30c8\u306b\u7126\u70b9\u3092\u5f53\u3066\u307e\u3059\u304c\u3001\u4ed6\u306e\u30e2\u30c0\u30ea\u30c6\u30a3\u3092\u7c21\u5358\u306b\u7d39\u4ecb\u3067\u304d\u307e\u3059\u3002</p>","tags":["transformer","nlp","llm","bert","gpt","machine-learning","deep-learning"]},{"location":"LLM/01_transformer_models/#_32","title":"\u97f3\u58f0\u3068\u97f3\u97ff","text":"<p>\u307e\u305a\u3001\u30c6\u30ad\u30b9\u30c8\u3084\u753b\u50cf\u3068\u6bd4\u8f03\u3057\u3066\u72ec\u7279\u306e\u8ab2\u984c\u3092\u63d0\u793a\u3059\u308b\u97f3\u58f0\u3068\u97f3\u97ff\u30c7\u30fc\u30bf\u3092Transformer\u30e2\u30c7\u30eb\u304c\u3069\u306e\u3088\u3046\u306b\u51e6\u7406\u3059\u308b\u304b\u3092\u63a2\u6c42\u3057\u307e\u3057\u3087\u3046\u3002</p> <p>Whisper\u306f\u300168\u4e07\u6642\u9593\u306e\u30e9\u30d9\u30eb\u4ed8\u304d\u97f3\u58f0\u30c7\u30fc\u30bf\u3067\u4e8b\u524d\u8a13\u7df4\u3055\u308c\u305f\u30a8\u30f3\u30b3\u30fc\u30c0\u30fb\u30c7\u30b3\u30fc\u30c0\uff08sequence-to-sequence\uff09transformer\u3067\u3059\u3002\u3053\u306e\u5927\u91cf\u306e\u4e8b\u524d\u8a13\u7df4\u30c7\u30fc\u30bf\u306b\u3088\u308a\u3001\u82f1\u8a9e\u3084\u591a\u304f\u306e\u4ed6\u306e\u8a00\u8a9e\u3067\u306e\u97f3\u58f0\u30bf\u30b9\u30af\u3067\u30bc\u30ed\u30b7\u30e7\u30c3\u30c8\u6027\u80fd\u304c\u53ef\u80fd\u306b\u306a\u308a\u307e\u3059\u3002\u30c7\u30b3\u30fc\u30c0\u306b\u3088\u308a\u3001Whisper\u306f\u30a8\u30f3\u30b3\u30fc\u30c0\u304c\u5b66\u7fd2\u3057\u305f\u97f3\u58f0\u8868\u73fe\u3092\u3001\u8ffd\u52a0\u306e\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u306a\u3057\u3067\u30c6\u30ad\u30b9\u30c8\u306a\u3069\u306e\u6709\u7528\u306a\u51fa\u529b\u306b\u30de\u30c3\u30d7\u3067\u304d\u307e\u3059\u3002Whisper\u306f\u305d\u306e\u307e\u307e\u52d5\u4f5c\u3057\u307e\u3059\u3002</p> <p></p> <p>\u56f3\u306fWhisper\u8ad6\u6587\u304b\u3089\u3067\u3059\u3002</p> <p>\u3053\u306e\u30e2\u30c7\u30eb\u306b\u306f2\u3064\u306e\u4e3b\u8981\u306a\u69cb\u6210\u8981\u7d20\u304c\u3042\u308a\u307e\u3059\uff1a</p> <ol> <li> <p>\u30a8\u30f3\u30b3\u30fc\u30c0\u306f\u5165\u529b\u97f3\u58f0\u3092\u51e6\u7406\u3057\u307e\u3059\u3002\u751f\u97f3\u58f0\u306f\u6700\u521d\u306blog-Mel\u30b9\u30da\u30af\u30c8\u30ed\u30b0\u30e9\u30e0\u306b\u5909\u63db\u3055\u308c\u307e\u3059\u3002\u3053\u306e\u30b9\u30da\u30af\u30c8\u30ed\u30b0\u30e9\u30e0\u306f\u6b21\u306bTransformer\u30a8\u30f3\u30b3\u30fc\u30c0\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u901a\u904e\u3057\u307e\u3059\u3002</p> </li> <li> <p>\u30c7\u30b3\u30fc\u30c0\u306f\u7b26\u53f7\u5316\u3055\u308c\u305f\u97f3\u58f0\u8868\u73fe\u3092\u53d6\u5f97\u3057\u3001\u5bfe\u5fdc\u3059\u308b\u30c6\u30ad\u30b9\u30c8\u30c8\u30fc\u30af\u30f3\u3092\u81ea\u5df1\u56de\u5e30\u7684\u306b\u4e88\u6e2c\u3057\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u524d\u306e\u30c8\u30fc\u30af\u30f3\u3068\u30a8\u30f3\u30b3\u30fc\u30c0\u51fa\u529b\u304c\u4e0e\u3048\u3089\u308c\u305f\u6b21\u306e\u30c6\u30ad\u30b9\u30c8\u30c8\u30fc\u30af\u30f3\u3092\u4e88\u6e2c\u3059\u308b\u3088\u3046\u306b\u8a13\u7df4\u3055\u308c\u305f\u6a19\u6e96\u306eTransformer\u30c7\u30b3\u30fc\u30c0\u3067\u3059\u3002\u7279\u5225\u306a\u30c8\u30fc\u30af\u30f3\u304c\u30c7\u30b3\u30fc\u30c0\u5165\u529b\u306e\u958b\u59cb\u6642\u306b\u4f7f\u7528\u3055\u308c\u3001\u8ee2\u5199\u3001\u7ffb\u8a33\u3001\u8a00\u8a9e\u8b58\u5225\u306a\u3069\u306e\u7279\u5b9a\u306e\u30bf\u30b9\u30af\u306b\u5411\u3051\u3066\u30e2\u30c7\u30eb\u3092\u8a98\u5c0e\u3057\u307e\u3059\u3002</p> </li> </ol> <p>Whisper\u306f\u3001\u30a6\u30a7\u30d6\u304b\u3089\u53ce\u96c6\u3055\u308c\u305f68\u4e07\u6642\u9593\u306e\u30e9\u30d9\u30eb\u4ed8\u304d\u97f3\u58f0\u30c7\u30fc\u30bf\u306e\u5927\u898f\u6a21\u3067\u591a\u69d8\u306a\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3067\u4e8b\u524d\u8a13\u7df4\u3055\u308c\u307e\u3057\u305f\u3002\u3053\u306e\u5927\u898f\u6a21\u3067\u5f31\u3044\u76e3\u7763\u306e\u4e8b\u524d\u8a13\u7df4\u304c\u3001\u591a\u304f\u306e\u8a00\u8a9e\u3068\u30bf\u30b9\u30af\u306b\u308f\u305f\u308b\u5f37\u529b\u306a\u30bc\u30ed\u30b7\u30e7\u30c3\u30c8\u6027\u80fd\u306e\u9375\u3067\u3059\u3002</p> <p>Whisper\u304c\u4e8b\u524d\u8a13\u7df4\u3055\u308c\u305f\u306e\u3067\u3001\u30bc\u30ed\u30b7\u30e7\u30c3\u30c8\u63a8\u8ad6\u306b\u76f4\u63a5\u4f7f\u7528\u3059\u308b\u304b\u3001\u7279\u5b9a\u306e\u30bf\u30b9\u30af\u3067\u306e\u6027\u80fd\u5411\u4e0a\u306e\u305f\u3081\u306b\u30c7\u30fc\u30bf\u3067\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3067\u304d\u307e\u3059\u3002\u81ea\u52d5\u97f3\u58f0\u8a8d\u8b58\u3084\u97f3\u58f0\u7ffb\u8a33\u306a\u3069\u3067\u3059\uff01</p> <p>\u8c46\u77e5\u8b58</p> <p>Whisper\u306e\u91cd\u8981\u306a\u9769\u65b0\u306f\u3001\u30a4\u30f3\u30bf\u30fc\u30cd\u30c3\u30c8\u304b\u3089\u306e\u591a\u69d8\u3067\u5f31\u3044\u76e3\u7763\u306e\u97f3\u58f0\u30c7\u30fc\u30bf\u3067\u306e\u524d\u4f8b\u306e\u306a\u3044\u898f\u6a21\u3067\u306e\u8a13\u7df4\u3067\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u30bf\u30b9\u30af\u56fa\u6709\u306e\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u306a\u3057\u3067\u7570\u306a\u308b\u8a00\u8a9e\u3001\u30a2\u30af\u30bb\u30f3\u30c8\u3001\u30bf\u30b9\u30af\u306b\u9a5a\u304f\u307b\u3069\u3088\u304f\u4e00\u822c\u5316\u3067\u304d\u307e\u3059\u3002</p>","tags":["transformer","nlp","llm","bert","gpt","machine-learning","deep-learning"]},{"location":"LLM/01_transformer_models/#_33","title":"\u81ea\u52d5\u97f3\u58f0\u8a8d\u8b58","text":"<p>\u81ea\u52d5\u97f3\u58f0\u8a8d\u8b58\u306b\u4e8b\u524d\u8a13\u7df4\u6e08\u307f\u30e2\u30c7\u30eb\u3092\u4f7f\u7528\u3059\u308b\u306b\u306f\u3001\u5b8c\u5168\u306a\u30a8\u30f3\u30b3\u30fc\u30c0\u30fb\u30c7\u30b3\u30fc\u30c0\u69cb\u9020\u3092\u6d3b\u7528\u3057\u307e\u3059\u3002\u30a8\u30f3\u30b3\u30fc\u30c0\u304c\u97f3\u58f0\u5165\u529b\u3092\u51e6\u7406\u3057\u3001\u30c7\u30b3\u30fc\u30c0\u304c\u30c8\u30fc\u30af\u30f3\u3054\u3068\u306b\u81ea\u5df1\u56de\u5e30\u7684\u306b\u8ee2\u5199\u3092\u751f\u6210\u3057\u307e\u3059\u3002\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u6642\u3001\u30e2\u30c7\u30eb\u306f\u901a\u5e38\u3001\u97f3\u58f0\u5165\u529b\u306b\u57fa\u3065\u3044\u3066\u6b63\u3057\u3044\u30c6\u30ad\u30b9\u30c8\u30c8\u30fc\u30af\u30f3\u3092\u4e88\u6e2c\u3059\u308b\u305f\u3081\u306b\u6a19\u6e96\u306esequence-to-sequence\u640d\u5931\uff08\u30af\u30ed\u30b9\u30a8\u30f3\u30c8\u30ed\u30d4\u30fc\u306a\u3069\uff09\u3092\u4f7f\u7528\u3057\u3066\u8a13\u7df4\u3055\u308c\u307e\u3059\u3002</p> <p>\u63a8\u8ad6\u306b\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3055\u308c\u305f\u30e2\u30c7\u30eb\u3092\u4f7f\u7528\u3059\u308b\u6700\u3082\u7c21\u5358\u306a\u65b9\u6cd5\u306f\u3001<code>pipeline</code>\u5185\u3067\u3059\u3002</p> <pre><code>from transformers import pipeline\n\ntranscriber = pipeline(\n    task=\"automatic-speech-recognition\", model=\"openai/whisper-base.en\"\n)\ntranscriber(\"https://huggingface.co/datasets/Narsil/asr_dummy/resolve/main/mlk.flv\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c\uff1a <pre><code>Device set to use mps:0\n{'text': ' I have a dream that one day this nation will rise up and live out the truemeaning of its creed.'}\n</code></pre></p> <p>\u81ea\u52d5\u97f3\u58f0\u8a8d\u8b58\u306b\u6311\u6226\u3059\u308b\u6e96\u5099\u306f\u3067\u304d\u307e\u3057\u305f\u304b\uff1f\u5b8c\u5168\u306a\u81ea\u52d5\u97f3\u58f0\u8a8d\u8b58\u30ac\u30a4\u30c9\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3066\u3001Whisper\u3092\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3057\u3001\u63a8\u8ad6\u306b\u4f7f\u7528\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3057\u3087\u3046\uff01</p>","tags":["transformer","nlp","llm","bert","gpt","machine-learning","deep-learning"]},{"location":"LLM/01_transformer_models/#_34","title":"\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","text":"<p>\u6b21\u306b\u3001\u753b\u50cf\u3084\u30d3\u30c7\u30aa\u304b\u3089\u306e\u8996\u899a\u60c5\u5831\u3092\u7406\u89e3\u3057\u89e3\u91c8\u3059\u308b\u3053\u3068\u3092\u6271\u3046\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3\u30bf\u30b9\u30af\u306b\u79fb\u308a\u307e\u3057\u3087\u3046\u3002</p> <p>\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3\u30bf\u30b9\u30af\u306b\u30a2\u30d7\u30ed\u30fc\u30c1\u3059\u308b2\u3064\u306e\u65b9\u6cd5\u304c\u3042\u308a\u307e\u3059\uff1a</p> <ol> <li>\u753b\u50cf\u3092\u30d1\u30c3\u30c1\u306e\u30b7\u30fc\u30b1\u30f3\u30b9\u306b\u5206\u5272\u3057\u3001Transformer\u3067\u4e26\u5217\u306b\u51e6\u7406\u3059\u308b\u3002</li> <li>ConvNeXT\u306a\u3069\u306e\u73fe\u4ee3\u7684\u306aCNN\u3092\u4f7f\u7528\u3059\u308b\u3002\u3053\u308c\u306f\u7573\u307f\u8fbc\u307f\u5c64\u306b\u4f9d\u5b58\u3057\u307e\u3059\u304c\u3001\u73fe\u4ee3\u306e\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u8a2d\u8a08\u3092\u63a1\u7528\u3057\u3066\u3044\u307e\u3059\u3002</li> </ol> <p>\u8c46\u77e5\u8b58</p> <p>3\u756a\u76ee\u306e\u30a2\u30d7\u30ed\u30fc\u30c1\u306f\u3001Transformer\u3068\u7573\u307f\u8fbc\u307f\u3092\u6df7\u5408\u3057\u307e\u3059\uff08\u4f8b\uff1aConvolutional Vision Transformer\u3084LeViT\uff09\u3002\u3053\u308c\u3089\u306f\u3001\u3053\u3053\u3067\u691c\u8a0e\u3059\u308b2\u3064\u306e\u30a2\u30d7\u30ed\u30fc\u30c1\u3092\u7d44\u307f\u5408\u308f\u305b\u308b\u3060\u3051\u306a\u306e\u3067\u3001\u8b70\u8ad6\u3057\u307e\u305b\u3093\u3002</p> <p>ViT\u3068ConvNeXT\u306f\u4e00\u822c\u7684\u306b\u753b\u50cf\u5206\u985e\u306b\u4f7f\u7528\u3055\u308c\u307e\u3059\u304c\u3001\u7269\u4f53\u691c\u51fa\u3001\u30bb\u30b0\u30e1\u30f3\u30c6\u30fc\u30b7\u30e7\u30f3\u3001\u6df1\u5ea6\u63a8\u5b9a\u306a\u3069\u306e\u4ed6\u306e\u30d3\u30b8\u30e7\u30f3\u30bf\u30b9\u30af\u306b\u3064\u3044\u3066\u306f\u3001DETR\u3001Mask2Former\u3001GLPN\u3092\u305d\u308c\u305e\u308c\u898b\u3066\u3044\u304d\u307e\u3059\uff1b\u3053\u308c\u3089\u306e\u30e2\u30c7\u30eb\u306f\u305d\u308c\u3089\u306e\u30bf\u30b9\u30af\u306b\u3088\u308a\u9069\u3057\u3066\u3044\u307e\u3059\u3002</p>","tags":["transformer","nlp","llm","bert","gpt","machine-learning","deep-learning"]},{"location":"LLM/01_transformer_models/#_35","title":"\u753b\u50cf\u5206\u985e","text":"<p>\u753b\u50cf\u5206\u985e\u306f\u3001\u57fa\u672c\u7684\u306a\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3\u30bf\u30b9\u30af\u306e1\u3064\u3067\u3059\u3002\u7570\u306a\u308b\u30e2\u30c7\u30eb\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u304c\u3053\u306e\u554f\u984c\u306b\u3069\u306e\u3088\u3046\u306b\u30a2\u30d7\u30ed\u30fc\u30c1\u3059\u308b\u304b\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002</p> <p>ViT\u3068ConvNeXT\u306f\u4e21\u65b9\u3068\u3082\u753b\u50cf\u5206\u985e\u306b\u4f7f\u7528\u3067\u304d\u307e\u3059\uff1b\u4e3b\u306a\u9055\u3044\u306f\u3001ViT\u304c\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u30e1\u30ab\u30cb\u30ba\u30e0\u3092\u4f7f\u7528\u3059\u308b\u306e\u306b\u5bfe\u3057\u3001ConvNeXT\u304c\u7573\u307f\u8fbc\u307f\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3067\u3059\u3002</p> <p>ViT\u306f\u7573\u307f\u8fbc\u307f\u3092\u7d14\u7c8b\u306aTransformer\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306b\u5b8c\u5168\u306b\u7f6e\u304d\u63db\u3048\u307e\u3059\u3002\u5143\u306eTransformer\u306b\u6163\u308c\u3066\u3044\u308b\u5834\u5408\u3001ViT\u3092\u7406\u89e3\u3059\u308b\u306e\u306b\u307b\u307c\u5230\u9054\u3057\u3066\u3044\u307e\u3059\u3002</p> <p></p> <p>ViT\u304c\u5c0e\u5165\u3057\u305f\u4e3b\u306a\u5909\u66f4\u306f\u3001\u753b\u50cf\u304cTransformer\u306b\u4f9b\u7d66\u3055\u308c\u308b\u65b9\u6cd5\u3067\u3057\u305f\uff1a</p> <ol> <li> <p>\u753b\u50cf\u306f\u91cd\u8907\u3057\u306a\u3044\u6b63\u65b9\u5f62\u306e\u30d1\u30c3\u30c1\u306b\u5206\u5272\u3055\u308c\u3001\u305d\u308c\u305e\u308c\u304c\u30d9\u30af\u30c8\u30eb\u307e\u305f\u306f\u30d1\u30c3\u30c1\u57cb\u3081\u8fbc\u307f\u306b\u5909\u63db\u3055\u308c\u307e\u3059\u3002\u30d1\u30c3\u30c1\u57cb\u3081\u8fbc\u307f\u306f\u3001\u9069\u5207\u306a\u5165\u529b\u6b21\u5143\uff08\u30d9\u30fc\u30b9Transformer\u3067\u306f\u5404\u30d1\u30c3\u30c1\u57cb\u3081\u8fbc\u307f\u306b768\u5024\uff09\u3092\u4f5c\u6210\u3059\u308b\u7573\u307f\u8fbc\u307f2D\u5c64\u304b\u3089\u751f\u6210\u3055\u308c\u307e\u3059\u3002224x224\u30d4\u30af\u30bb\u30eb\u306e\u753b\u50cf\u304c\u3042\u3063\u305f\u5834\u5408\u3001196\u500b\u306e16x16\u753b\u50cf\u30d1\u30c3\u30c1\u306b\u5206\u5272\u3067\u304d\u307e\u3059\u3002\u30c6\u30ad\u30b9\u30c8\u304c\u5358\u8a9e\u306b\u30c8\u30fc\u30af\u30f3\u5316\u3055\u308c\u308b\u306e\u3068\u540c\u3058\u3088\u3046\u306b\u3001\u753b\u50cf\u306f\u30d1\u30c3\u30c1\u306e\u30b7\u30fc\u30b1\u30f3\u30b9\u306b\u300c\u30c8\u30fc\u30af\u30f3\u5316\u300d\u3055\u308c\u307e\u3059\u3002</p> </li> <li> <p>\u5b66\u7fd2\u53ef\u80fd\u306a\u57cb\u3081\u8fbc\u307f - BERT\u3068\u540c\u3058\u3088\u3046\u306a\u7279\u5225\u306a<code>[CLS]</code>\u30c8\u30fc\u30af\u30f3 - \u304c\u30d1\u30c3\u30c1\u57cb\u3081\u8fbc\u307f\u306e\u6700\u521d\u306b\u8ffd\u52a0\u3055\u308c\u307e\u3059\u3002<code>[CLS]</code>\u30c8\u30fc\u30af\u30f3\u306e\u6700\u7d42\u96a0\u308c\u72b6\u614b\u306f\u3001\u4ed8\u5c5e\u306e\u5206\u985e\u30d8\u30c3\u30c9\u3078\u306e\u5165\u529b\u3068\u3057\u3066\u4f7f\u7528\u3055\u308c\u307e\u3059\uff1b\u4ed6\u306e\u51fa\u529b\u306f\u7121\u8996\u3055\u308c\u307e\u3059\u3002\u3053\u306e\u30c8\u30fc\u30af\u30f3\u306f\u3001\u30e2\u30c7\u30eb\u304c\u753b\u50cf\u306e\u8868\u73fe\u3092\u7b26\u53f7\u5316\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u7fd2\u3059\u308b\u306e\u306b\u5f79\u7acb\u3061\u307e\u3059\u3002</p> </li> <li> <p>\u30d1\u30c3\u30c1\u3068\u5b66\u7fd2\u53ef\u80fd\u306a\u57cb\u3081\u8fbc\u307f\u306b\u8ffd\u52a0\u3059\u308b\u6700\u5f8c\u306e\u3082\u306e\u306f\u4f4d\u7f6e\u57cb\u3081\u8fbc\u307f\u3067\u3059\u3002\u306a\u305c\u306a\u3089\u3001\u30e2\u30c7\u30eb\u306f\u753b\u50cf\u30d1\u30c3\u30c1\u304c\u3069\u306e\u3088\u3046\u306b\u9806\u5e8f\u4ed8\u3051\u3089\u308c\u3066\u3044\u308b\u304b\u3092\u77e5\u3089\u306a\u3044\u304b\u3089\u3067\u3059\u3002\u4f4d\u7f6e\u57cb\u3081\u8fbc\u307f\u3082\u5b66\u7fd2\u53ef\u80fd\u3067\u3001\u30d1\u30c3\u30c1\u57cb\u3081\u8fbc\u307f\u3068\u540c\u3058\u30b5\u30a4\u30ba\u3092\u6301\u3061\u307e\u3059\u3002\u6700\u5f8c\u306b\u3001\u3059\u3079\u3066\u306e\u57cb\u3081\u8fbc\u307f\u304cTransformer\u30a8\u30f3\u30b3\u30fc\u30c0\u306b\u6e21\u3055\u308c\u307e\u3059\u3002</p> </li> <li> <p>\u51fa\u529b\u3001\u5177\u4f53\u7684\u306b\u306f<code>[CLS]</code>\u30c8\u30fc\u30af\u30f3\u3092\u6301\u3064\u51fa\u529b\u306e\u307f\u304c\u3001\u591a\u5c64\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3\u30d8\u30c3\u30c9\uff08MLP\uff09\u306b\u6e21\u3055\u308c\u307e\u3059\u3002ViT\u306e\u4e8b\u524d\u8a13\u7df4\u76ee\u7684\u306f\u5358\u7d14\u306b\u5206\u985e\u3067\u3059\u3002\u4ed6\u306e\u5206\u985e\u30d8\u30c3\u30c9\u3068\u540c\u69d8\u306b\u3001MLP\u30d8\u30c3\u30c9\u306f\u51fa\u529b\u3092\u30af\u30e9\u30b9\u30e9\u30d9\u30eb\u4e0a\u306e\u30ed\u30b8\u30c3\u30c8\u306b\u5909\u63db\u3057\u3001\u6700\u3082\u53ef\u80fd\u6027\u306e\u9ad8\u3044\u30af\u30e9\u30b9\u3092\u898b\u3064\u3051\u308b\u305f\u3081\u306b\u30af\u30ed\u30b9\u30a8\u30f3\u30c8\u30ed\u30d4\u30fc\u640d\u5931\u3092\u8a08\u7b97\u3057\u307e\u3059\u3002</p> </li> </ol> <p>\u753b\u50cf\u5206\u985e\u306b\u6311\u6226\u3059\u308b\u6e96\u5099\u306f\u3067\u304d\u307e\u3057\u305f\u304b\uff1f\u5b8c\u5168\u306a\u753b\u50cf\u5206\u985e\u30ac\u30a4\u30c9\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3066\u3001ViT\u3092\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3057\u3001\u63a8\u8ad6\u306b\u4f7f\u7528\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3057\u3087\u3046\uff01</p> <p>\u8c46\u77e5\u8b58</p> <p>ViT\u3068BERT\u306e\u985e\u4f3c\u6027\u306b\u6ce8\u76ee\u3057\u3066\u304f\u3060\u3055\u3044\uff1a\u4e21\u65b9\u3068\u3082\u5168\u4f53\u7684\u306a\u8868\u73fe\u3092\u30ad\u30e3\u30d7\u30c1\u30e3\u3059\u308b\u305f\u3081\u306b\u7279\u5225\u306a\u30c8\u30fc\u30af\u30f3\uff08<code>[CLS]</code>\uff09\u3092\u4f7f\u7528\u3057\u3001\u4e21\u65b9\u3068\u3082\u57cb\u3081\u8fbc\u307f\u306b\u4f4d\u7f6e\u60c5\u5831\u3092\u8ffd\u52a0\u3057\u3001\u4e21\u65b9\u3068\u3082Transformer\u30a8\u30f3\u30b3\u30fc\u30c0\u3092\u4f7f\u7528\u3057\u3066\u30c8\u30fc\u30af\u30f3/\u30d1\u30c3\u30c1\u306e\u30b7\u30fc\u30b1\u30f3\u30b9\u3092\u51e6\u7406\u3057\u307e\u3059\u3002</p>","tags":["transformer","nlp","llm","bert","gpt","machine-learning","deep-learning"]},{"location":"LLM/01_transformer_models/#transformer_3","title":"Transformer\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3","text":"<p>\u4ee5\u524d\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u306f\u3001\u4e00\u822c\u7684\u306aTransformer\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3092\u7d39\u4ecb\u3057\u3001\u3053\u308c\u3089\u306e\u30e2\u30c7\u30eb\u304c\u69d8\u3005\u306a\u30bf\u30b9\u30af\u3092\u3069\u306e\u3088\u3046\u306b\u89e3\u6c7a\u3067\u304d\u308b\u304b\u3092\u63a2\u6c42\u3057\u307e\u3057\u305f\u3002\u6b21\u306b\u3001Transformer\u30e2\u30c7\u30eb\u306e3\u3064\u306e\u4e3b\u8981\u306a\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u30d0\u30ea\u30a2\u30f3\u30c8\u3092\u8a73\u3057\u304f\u898b\u3066\u3001\u305d\u308c\u305e\u308c\u3092\u3044\u3064\u4f7f\u7528\u3059\u308b\u304b\u3092\u7406\u89e3\u3057\u307e\u3057\u3087\u3046\u3002\u305d\u308c\u304b\u3089\u3001\u3053\u308c\u3089\u306e\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u304c\u7570\u306a\u308b\u8a00\u8a9e\u30bf\u30b9\u30af\u306b\u3069\u306e\u3088\u3046\u306b\u9069\u7528\u3055\u308c\u308b\u304b\u3092\u898b\u307e\u3057\u305f\u3002</p> <p>\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u306f\u3001Transformer\u30e2\u30c7\u30eb\u306e3\u3064\u306e\u4e3b\u8981\u306a\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u30d0\u30ea\u30a2\u30f3\u30c8\u3092\u3088\u308a\u6df1\u304f\u6398\u308a\u4e0b\u3052\u3001\u305d\u308c\u305e\u308c\u3092\u3044\u3064\u4f7f\u7528\u3059\u308b\u304b\u3092\u7406\u89e3\u3057\u307e\u3059\u3002</p> <p>\u8c46\u77e5\u8b58</p> <p>\u307b\u3068\u3093\u3069\u306eTransformer\u30e2\u30c7\u30eb\u306f3\u3064\u306e\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306e1\u3064\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3092\u899a\u3048\u3066\u304a\u3044\u3066\u304f\u3060\u3055\u3044\uff1a\u30a8\u30f3\u30b3\u30fc\u30c0\u306e\u307f\u3001\u30c7\u30b3\u30fc\u30c0\u306e\u307f\u3001\u307e\u305f\u306f\u30a8\u30f3\u30b3\u30fc\u30c0\u30fb\u30c7\u30b3\u30fc\u30c0\uff08sequence-to-sequence\uff09\u3002\u3053\u308c\u3089\u306e\u9055\u3044\u3092\u7406\u89e3\u3059\u308b\u3053\u3068\u3067\u3001\u7279\u5b9a\u306e\u30bf\u30b9\u30af\u306b\u9069\u3057\u305f\u30e2\u30c7\u30eb\u3092\u9078\u629e\u3059\u308b\u306e\u306b\u5f79\u7acb\u3061\u307e\u3059\u3002</p>","tags":["transformer","nlp","llm","bert","gpt","machine-learning","deep-learning"]},{"location":"LLM/01_transformer_models/#_36","title":"\u30a8\u30f3\u30b3\u30fc\u30c0\u30e2\u30c7\u30eb","text":"<p>\u30a8\u30f3\u30b3\u30fc\u30c0\u30e2\u30c7\u30eb\u306f\u3001Transformer\u30e2\u30c7\u30eb\u306e\u30a8\u30f3\u30b3\u30fc\u30c0\u306e\u307f\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u5404\u6bb5\u968e\u3067\u3001\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u5c64\u306f\u521d\u671f\u6587\u4e2d\u306e\u3059\u3079\u3066\u306e\u5358\u8a9e\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u3089\u306e\u30e2\u30c7\u30eb\u306f\u3057\u3070\u3057\u3070\u300c\u53cc\u65b9\u5411\u300d\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u3092\u6301\u3064\u3068\u7279\u5fb4\u4ed8\u3051\u3089\u308c\u3001\u3057\u3070\u3057\u3070\u81ea\u5df1\u7b26\u53f7\u5316\u30e2\u30c7\u30eb\u3068\u547c\u3070\u308c\u307e\u3059\u3002</p> <p>\u3053\u308c\u3089\u306e\u30e2\u30c7\u30eb\u306e\u4e8b\u524d\u8a13\u7df4\u306f\u901a\u5e38\u3001\u4e0e\u3048\u3089\u308c\u305f\u6587\u3092\u4f55\u3089\u304b\u306e\u65b9\u6cd5\u3067\u7834\u640d\u3055\u305b\uff08\u4f8b\u3048\u3070\u3001\u305d\u306e\u4e2d\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u5358\u8a9e\u3092\u30de\u30b9\u30af\u3059\u308b\u3053\u3068\u3067\uff09\u3001\u30e2\u30c7\u30eb\u306b\u521d\u671f\u6587\u3092\u898b\u3064\u3051\u308b\u304b\u518d\u69cb\u7bc9\u3059\u308b\u30bf\u30b9\u30af\u3092\u4e0e\u3048\u308b\u3053\u3068\u3092\u4e2d\u5fc3\u306b\u5c55\u958b\u3055\u308c\u307e\u3059\u3002</p> <p>\u30a8\u30f3\u30b3\u30fc\u30c0\u30e2\u30c7\u30eb\u306f\u3001\u6587\u5206\u985e\u3001\u56fa\u6709\u8868\u73fe\u8a8d\u8b58\uff08\u3088\u308a\u4e00\u822c\u7684\u306b\u306f\u5358\u8a9e\u5206\u985e\uff09\u3001\u62bd\u51fa\u7684\u8cea\u554f\u5fdc\u7b54\u306a\u3069\u3001\u5b8c\u5168\u306a\u6587\u306e\u7406\u89e3\u3092\u5fc5\u8981\u3068\u3059\u308b\u30bf\u30b9\u30af\u306b\u6700\u9069\u3067\u3059\u3002</p> <p>\u3053\u306e\u30e2\u30c7\u30eb\u30d5\u30a1\u30df\u30ea\u30fc\u306e\u4ee3\u8868\u306b\u306f\u4ee5\u4e0b\u304c\u542b\u307e\u308c\u307e\u3059\uff1a</p> <ul> <li>BERT</li> <li>DistilBERT</li> <li>ModernBERT</li> </ul>","tags":["transformer","nlp","llm","bert","gpt","machine-learning","deep-learning"]},{"location":"LLM/01_transformer_models/#_37","title":"\u30c7\u30b3\u30fc\u30c0\u30e2\u30c7\u30eb","text":"<p>\u30c7\u30b3\u30fc\u30c0\u30e2\u30c7\u30eb\u306f\u3001Transformer\u30e2\u30c7\u30eb\u306e\u30c7\u30b3\u30fc\u30c0\u306e\u307f\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u5404\u6bb5\u968e\u3067\u3001\u4e0e\u3048\u3089\u308c\u305f\u5358\u8a9e\u306b\u3064\u3044\u3066\u3001\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u5c64\u306f\u6587\u4e2d\u3067\u305d\u306e\u524d\u306b\u4f4d\u7f6e\u3059\u308b\u5358\u8a9e\u306e\u307f\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u3089\u306e\u30e2\u30c7\u30eb\u306f\u3057\u3070\u3057\u3070\u81ea\u5df1\u56de\u5e30\u30e2\u30c7\u30eb\u3068\u547c\u3070\u308c\u307e\u3059\u3002</p> <p>\u30c7\u30b3\u30fc\u30c0\u30e2\u30c7\u30eb\u306e\u4e8b\u524d\u8a13\u7df4\u306f\u901a\u5e38\u3001\u6587\u4e2d\u306e\u6b21\u306e\u5358\u8a9e\u3092\u4e88\u6e2c\u3059\u308b\u3053\u3068\u3092\u4e2d\u5fc3\u306b\u5c55\u958b\u3055\u308c\u307e\u3059\u3002</p> <p>\u3053\u308c\u3089\u306e\u30e2\u30c7\u30eb\u306f\u3001\u30c6\u30ad\u30b9\u30c8\u751f\u6210\u3092\u542b\u3080\u30bf\u30b9\u30af\u306b\u6700\u9069\u3067\u3059\u3002</p> <p>\u3053\u306e\u30e2\u30c7\u30eb\u30d5\u30a1\u30df\u30ea\u30fc\u306e\u4ee3\u8868\u306b\u306f\u4ee5\u4e0b\u304c\u542b\u307e\u308c\u307e\u3059\uff1a</p> <ul> <li>Hugging Face SmolLM\u30b7\u30ea\u30fc\u30ba</li> <li>Meta\u306eLlama\u30b7\u30ea\u30fc\u30ba</li> <li>Google\u306eGemma\u30b7\u30ea\u30fc\u30ba</li> <li>DeepSeek\u306eV3</li> </ul>","tags":["transformer","nlp","llm","bert","gpt","machine-learning","deep-learning"]},{"location":"LLM/01_transformer_models/#llm_1","title":"\u73fe\u4ee3\u306e\u5927\u898f\u6a21\u8a00\u8a9e\u30e2\u30c7\u30eb\uff08LLM\uff09","text":"<p>\u307b\u3068\u3093\u3069\u306e\u73fe\u4ee3\u306e\u5927\u898f\u6a21\u8a00\u8a9e\u30e2\u30c7\u30eb\uff08LLM\uff09\u306f\u3001\u30c7\u30b3\u30fc\u30c0\u306e\u307f\u306e\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u3053\u308c\u3089\u306e\u30e2\u30c7\u30eb\u306f\u3001\u904e\u53bb\u6570\u5e74\u9593\u3067\u30b5\u30a4\u30ba\u3068\u80fd\u529b\u304c\u5287\u7684\u306b\u6210\u9577\u3057\u3001\u6700\u5927\u306e\u30e2\u30c7\u30eb\u306e\u4e00\u90e8\u306f\u6570\u5343\u5104\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u542b\u3093\u3067\u3044\u307e\u3059\u3002</p> <p>\u73fe\u4ee3\u306eLLM\u306f\u901a\u5e38\u30012\u3064\u306e\u6bb5\u968e\u3067\u8a13\u7df4\u3055\u308c\u307e\u3059\uff1a 1. \u4e8b\u524d\u8a13\u7df4: \u30e2\u30c7\u30eb\u306f\u81a8\u5927\u306a\u91cf\u306e\u30c6\u30ad\u30b9\u30c8\u30c7\u30fc\u30bf\u3067\u6b21\u306e\u30c8\u30fc\u30af\u30f3\u3092\u4e88\u6e2c\u3059\u308b\u3053\u3068\u3092\u5b66\u7fd2\u3057\u307e\u3059 2. \u6307\u793a\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0: \u30e2\u30c7\u30eb\u306f\u6307\u793a\u306b\u5f93\u3044\u3001\u6709\u7528\u306a\u5fdc\u7b54\u3092\u751f\u6210\u3059\u308b\u3088\u3046\u306b\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3055\u308c\u307e\u3059</p> <p>\u3053\u306e\u30a2\u30d7\u30ed\u30fc\u30c1\u306b\u3088\u308a\u3001\u5e45\u5e83\u3044\u30c8\u30d4\u30c3\u30af\u3068\u30bf\u30b9\u30af\u306b\u308f\u305f\u3063\u3066\u4eba\u9593\u306e\u3088\u3046\u306a\u30c6\u30ad\u30b9\u30c8\u3092\u7406\u89e3\u3057\u751f\u6210\u3067\u304d\u308b\u30e2\u30c7\u30eb\u304c\u751f\u307e\u308c\u307e\u3057\u305f\u3002</p>","tags":["transformer","nlp","llm","bert","gpt","machine-learning","deep-learning"]},{"location":"LLM/01_transformer_models/#llm_2","title":"\u73fe\u4ee3\u306eLLM\u306e\u4e3b\u8981\u80fd\u529b","text":"<p>\u73fe\u4ee3\u306e\u30c7\u30b3\u30fc\u30c0\u30d9\u30fc\u30b9\u306eLLM\u306f\u5370\u8c61\u7684\u306a\u80fd\u529b\u3092\u793a\u3057\u3066\u3044\u307e\u3059\uff1a</p> \u80fd\u529b \u8aac\u660e \u4f8b \u30c6\u30ad\u30b9\u30c8\u751f\u6210 \u4e00\u8cab\u6027\u304c\u3042\u308a\u6587\u8108\u306b\u95a2\u9023\u3059\u308b\u30c6\u30ad\u30b9\u30c8\u306e\u4f5c\u6210 \u30a8\u30c3\u30bb\u30a4\u3001\u30b9\u30c8\u30fc\u30ea\u30fc\u3001\u30e1\u30fc\u30eb\u306e\u57f7\u7b46 \u8981\u7d04 \u9577\u3044\u6587\u66f8\u306e\u3088\u308a\u77ed\u3044\u30d0\u30fc\u30b8\u30e7\u30f3\u306e\u4f5c\u6210 \u30ec\u30dd\u30fc\u30c8\u306e\u30a8\u30b0\u30bc\u30af\u30c6\u30a3\u30d6\u30b5\u30de\u30ea\u30fc\u306e\u4f5c\u6210 \u7ffb\u8a33 \u8a00\u8a9e\u9593\u3067\u306e\u30c6\u30ad\u30b9\u30c8\u306e\u5909\u63db \u82f1\u8a9e\u304b\u3089\u30b9\u30da\u30a4\u30f3\u8a9e\u3078\u306e\u7ffb\u8a33 \u8cea\u554f\u5fdc\u7b54 \u4e8b\u5b9f\u306b\u95a2\u3059\u308b\u8cea\u554f\u3078\u306e\u7b54\u3048\u306e\u63d0\u4f9b \u300c\u30d5\u30e9\u30f3\u30b9\u306e\u9996\u90fd\u306f\u4f55\u3067\u3059\u304b\uff1f\u300d \u30b3\u30fc\u30c9\u751f\u6210 \u30b3\u30fc\u30c9\u30b9\u30cb\u30da\u30c3\u30c8\u306e\u66f8\u304d\u8fbc\u307f\u3084\u5b8c\u6210 \u8aac\u660e\u306b\u57fa\u3065\u3044\u305f\u95a2\u6570\u306e\u4f5c\u6210 \u63a8\u8ad6 \u554f\u984c\u3092\u6bb5\u968e\u7684\u306b\u89e3\u6c7a \u6570\u5b66\u554f\u984c\u3084\u8ad6\u7406\u30d1\u30ba\u30eb\u306e\u89e3\u6c7a \u5c11\u30b7\u30e7\u30c3\u30c8\u5b66\u7fd2 \u30d7\u30ed\u30f3\u30d7\u30c8\u5185\u306e\u5c11\u6570\u306e\u4f8b\u304b\u3089\u306e\u5b66\u7fd2 2-3\u4f8b\u3092\u898b\u305f\u5f8c\u306e\u30c6\u30ad\u30b9\u30c8\u5206\u985e <p>Hub\u306e\u30e2\u30c7\u30eb\u30ea\u30dd\u30b8\u30c8\u30ea\u30da\u30fc\u30b8\u3067\u30c7\u30b3\u30fc\u30c0\u30d9\u30fc\u30b9\u306eLLM\u3092\u76f4\u63a5\u30d6\u30e9\u30a6\u30b6\u3067\u8a66\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u4ee5\u4e0b\u306f\u53e4\u5178\u7684\u306aGPT-2\uff08OpenAI\u306e\u6700\u9ad8\u306e\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u30e2\u30c7\u30eb\uff01\uff09\u306e\u4f8b\u3067\u3059\u3002</p>","tags":["transformer","nlp","llm","bert","gpt","machine-learning","deep-learning"]},{"location":"LLM/01_transformer_models/#sequence-to-sequence","title":"Sequence-to-sequence\u30e2\u30c7\u30eb","text":"<p>\u30a8\u30f3\u30b3\u30fc\u30c0\u30fb\u30c7\u30b3\u30fc\u30c0\u30e2\u30c7\u30eb\uff08sequence-to-sequence\u30e2\u30c7\u30eb\u3068\u3082\u547c\u3070\u308c\u308b\uff09\u306f\u3001Transformer\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306e\u4e21\u65b9\u306e\u90e8\u5206\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u5404\u6bb5\u968e\u3067\u3001\u30a8\u30f3\u30b3\u30fc\u30c0\u306e\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u5c64\u306f\u521d\u671f\u6587\u4e2d\u306e\u3059\u3079\u3066\u306e\u5358\u8a9e\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u306e\u306b\u5bfe\u3057\u3001\u30c7\u30b3\u30fc\u30c0\u306e\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u5c64\u306f\u5165\u529b\u5185\u306e\u4e0e\u3048\u3089\u308c\u305f\u5358\u8a9e\u3088\u308a\u524d\u306b\u4f4d\u7f6e\u3059\u308b\u5358\u8a9e\u306e\u307f\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u307e\u3059\u3002</p> <p>\u3053\u308c\u3089\u306e\u30e2\u30c7\u30eb\u306e\u4e8b\u524d\u8a13\u7df4\u306f\u7570\u306a\u308b\u5f62\u3092\u53d6\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u304c\u3001\u3057\u3070\u3057\u3070\u5165\u529b\u304c\u4f55\u3089\u304b\u306e\u65b9\u6cd5\u3067\u7834\u640d\u3055\u308c\u305f\u6587\u3092\u518d\u69cb\u7bc9\u3059\u308b\u3053\u3068\u3092\u542b\u307f\u307e\u3059\uff08\u4f8b\u3048\u3070\u3001\u30e9\u30f3\u30c0\u30e0\u306a\u5358\u8a9e\u3092\u30de\u30b9\u30af\u3059\u308b\u3053\u3068\u3067\uff09\u3002T5\u30e2\u30c7\u30eb\u306e\u4e8b\u524d\u8a13\u7df4\u306f\u3001\u30e9\u30f3\u30c0\u30e0\u306a\u30c6\u30ad\u30b9\u30c8\u30b9\u30d1\u30f3\uff08\u8907\u6570\u306e\u5358\u8a9e\u3092\u542b\u3080\u3053\u3068\u304c\u3067\u304d\u308b\uff09\u3092\u5358\u4e00\u306e\u30de\u30b9\u30af\u7279\u5225\u30c8\u30fc\u30af\u30f3\u306b\u7f6e\u304d\u63db\u3048\u308b\u3053\u3068\u3067\u69cb\u6210\u3055\u308c\u3001\u30bf\u30b9\u30af\u306f\u3053\u306e\u30de\u30b9\u30af\u30c8\u30fc\u30af\u30f3\u304c\u7f6e\u304d\u63db\u3048\u308b\u30c6\u30ad\u30b9\u30c8\u3092\u4e88\u6e2c\u3059\u308b\u3053\u3068\u3067\u3059\u3002</p> <p>Sequence-to-sequence\u30e2\u30c7\u30eb\u306f\u3001\u8981\u7d04\u3001\u7ffb\u8a33\u3001\u751f\u6210\u7684\u8cea\u554f\u5fdc\u7b54\u306a\u3069\u3001\u4e0e\u3048\u3089\u308c\u305f\u5165\u529b\u306b\u5fdc\u3058\u3066\u65b0\u3057\u3044\u6587\u3092\u751f\u6210\u3059\u308b\u3053\u3068\u3092\u4e2d\u5fc3\u3068\u3059\u308b\u30bf\u30b9\u30af\u306b\u6700\u9069\u3067\u3059\u3002</p>","tags":["transformer","nlp","llm","bert","gpt","machine-learning","deep-learning"]},{"location":"LLM/01_transformer_models/#_38","title":"\u5b9f\u7528\u7684\u306a\u5fdc\u7528","text":"<p>Sequence-to-sequence\u30e2\u30c7\u30eb\u306f\u3001\u610f\u5473\u3092\u4fdd\u6301\u3057\u306a\u304c\u3089\u3042\u308b\u30c6\u30ad\u30b9\u30c8\u5f62\u5f0f\u3092\u5225\u306e\u5f62\u5f0f\u306b\u5909\u63db\u3059\u308b\u30bf\u30b9\u30af\u306b\u512a\u308c\u3066\u3044\u307e\u3059\u3002\u3044\u304f\u3064\u304b\u306e\u5b9f\u7528\u7684\u306a\u5fdc\u7528\u3092\u4ee5\u4e0b\u306b\u793a\u3057\u307e\u3059\uff1a</p> \u5fdc\u7528 \u8aac\u660e \u4f8b\u306e\u30e2\u30c7\u30eb \u6a5f\u68b0\u7ffb\u8a33 \u8a00\u8a9e\u9593\u3067\u306e\u30c6\u30ad\u30b9\u30c8\u306e\u5909\u63db Marian\u3001T5 \u30c6\u30ad\u30b9\u30c8\u8981\u7d04 \u3088\u308a\u9577\u3044\u30c6\u30ad\u30b9\u30c8\u306e\u7c21\u6f54\u306a\u8981\u7d04\u306e\u4f5c\u6210 BART\u3001T5 \u30c7\u30fc\u30bf\u304b\u3089\u30c6\u30ad\u30b9\u30c8\u3078\u306e\u751f\u6210 \u69cb\u9020\u5316\u30c7\u30fc\u30bf\u306e\u81ea\u7136\u8a00\u8a9e\u3078\u306e\u5909\u63db T5 \u6587\u6cd5\u4fee\u6b63 \u30c6\u30ad\u30b9\u30c8\u306e\u6587\u6cd5\u30a8\u30e9\u30fc\u306e\u4fee\u6b63 T5 \u8cea\u554f\u5fdc\u7b54 \u6587\u8108\u306b\u57fa\u3065\u3044\u305f\u7b54\u3048\u306e\u751f\u6210 BART\u3001T5 <p>\u3053\u306e\u30e2\u30c7\u30eb\u30d5\u30a1\u30df\u30ea\u30fc\u306e\u4ee3\u8868\u306b\u306f\u4ee5\u4e0b\u304c\u542b\u307e\u308c\u307e\u3059\uff1a</p> <ul> <li>BART</li> <li>mBART</li> <li>Marian</li> <li>T5</li> </ul>","tags":["transformer","nlp","llm","bert","gpt","machine-learning","deep-learning"]},{"location":"LLM/01_transformer_models/#_39","title":"\u9069\u5207\u306a\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306e\u9078\u629e","text":"<p>\u7279\u5b9a\u306eNLP\u30bf\u30b9\u30af\u3067\u4f5c\u696d\u3059\u308b\u3068\u304d\u3001\u3069\u306e\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3092\u4f7f\u7528\u3059\u308b\u304b\u3092\u3069\u306e\u3088\u3046\u306b\u6c7a\u5b9a\u3057\u307e\u3059\u304b\uff1f\u4ee5\u4e0b\u306f\u7c21\u5358\u306a\u30ac\u30a4\u30c9\u3067\u3059\uff1a</p> \u30bf\u30b9\u30af \u63a8\u5968\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3 \u4f8b \u30c6\u30ad\u30b9\u30c8\u5206\u985e\uff08\u611f\u60c5\u3001\u30c8\u30d4\u30c3\u30af\uff09 \u30a8\u30f3\u30b3\u30fc\u30c0 BERT\u3001RoBERTa \u30c6\u30ad\u30b9\u30c8\u751f\u6210\uff08\u5275\u4f5c\u57f7\u7b46\uff09 \u30c7\u30b3\u30fc\u30c0 GPT\u3001LLaMA \u7ffb\u8a33 \u30a8\u30f3\u30b3\u30fc\u30c0\u30fb\u30c7\u30b3\u30fc\u30c0 T5\u3001BART \u8981\u7d04 \u30a8\u30f3\u30b3\u30fc\u30c0\u30fb\u30c7\u30b3\u30fc\u30c0 BART\u3001T5 \u56fa\u6709\u8868\u73fe\u8a8d\u8b58 \u30a8\u30f3\u30b3\u30fc\u30c0 BERT\u3001RoBERTa \u8cea\u554f\u5fdc\u7b54\uff08\u62bd\u51fa\u7684\uff09 \u30a8\u30f3\u30b3\u30fc\u30c0 BERT\u3001RoBERTa \u8cea\u554f\u5fdc\u7b54\uff08\u751f\u6210\u7684\uff09 \u30a8\u30f3\u30b3\u30fc\u30c0\u30fb\u30c7\u30b3\u30fc\u30c0\u307e\u305f\u306f\u30c7\u30b3\u30fc\u30c0 T5\u3001GPT \u4f1a\u8a71AI \u30c7\u30b3\u30fc\u30c0 GPT\u3001LLaMA <p>\u8c46\u77e5\u8b58</p> <p>\u3069\u306e\u30e2\u30c7\u30eb\u3092\u4f7f\u7528\u3059\u308b\u304b\u8ff7\u3063\u305f\u3068\u304d\u306f\u3001\u4ee5\u4e0b\u3092\u8003\u616e\u3057\u3066\u304f\u3060\u3055\u3044\uff1a</p> <ol> <li>\u3042\u306a\u305f\u306e\u30bf\u30b9\u30af\u306f\u3069\u306e\u3088\u3046\u306a\u7406\u89e3\u3092\u5fc5\u8981\u3068\u3057\u307e\u3059\u304b\uff1f\uff08\u53cc\u65b9\u5411\u304b\u5358\u65b9\u5411\u304b\uff09</li> <li>\u65b0\u3057\u3044\u30c6\u30ad\u30b9\u30c8\u3092\u751f\u6210\u3057\u3066\u3044\u308b\u306e\u304b\u3001\u65e2\u5b58\u306e\u30c6\u30ad\u30b9\u30c8\u3092\u5206\u6790\u3057\u3066\u3044\u308b\u306e\u304b\uff1f</li> <li>\u3042\u308b\u30b7\u30fc\u30b1\u30f3\u30b9\u3092\u5225\u306e\u30b7\u30fc\u30b1\u30f3\u30b9\u306b\u5909\u63db\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u304b\uff1f</li> </ol> <p>\u3053\u308c\u3089\u306e\u8cea\u554f\u3078\u306e\u7b54\u3048\u304c\u3001\u9069\u5207\u306a\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306b\u5c0e\u3044\u3066\u304f\u308c\u307e\u3059\u3002 </p>","tags":["transformer","nlp","llm","bert","gpt","machine-learning","deep-learning"]},{"location":"LLM/01_transformer_models/#_40","title":"\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u30e1\u30ab\u30cb\u30ba\u30e0","text":"<p>\u307b\u3068\u3093\u3069\u306eTransformer\u30e2\u30c7\u30eb\u306f\u3001\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u884c\u5217\u304c\u6b63\u65b9\u5f62\u3067\u3042\u308b\u3068\u3044\u3046\u610f\u5473\u3067\u5b8c\u5168\u306a\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u9577\u3044\u30c6\u30ad\u30b9\u30c8\u304c\u3042\u308b\u3068\u304d\u306b\u306f\u3001\u5927\u304d\u306a\u8a08\u7b97\u30dc\u30c8\u30eb\u30cd\u30c3\u30af\u306b\u306a\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002Longformer\u3084Reformer\u306f\u3001\u3088\u308a\u52b9\u7387\u7684\u306b\u306a\u308a\u3001\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u884c\u5217\u306e\u30b9\u30d1\u30fc\u30b9\u7248\u3092\u4f7f\u7528\u3057\u3066\u8a13\u7df4\u3092\u9ad8\u901f\u5316\u3057\u3088\u3046\u3068\u3059\u308b\u30e2\u30c7\u30eb\u3067\u3059\u3002</p> <p>\u8c46\u77e5\u8b58</p> <p>\u6a19\u6e96\u7684\u306a\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u30e1\u30ab\u30cb\u30ba\u30e0\u306f\u3001\u30b7\u30fc\u30b1\u30f3\u30b9\u9577\u3092n\u3068\u3057\u3066O(n\u00b2)\u306e\u8a08\u7b97\u8907\u96d1\u5ea6\u3092\u6301\u3061\u307e\u3059\u3002\u3053\u308c\u306f\u975e\u5e38\u306b\u9577\u3044\u30b7\u30fc\u30b1\u30f3\u30b9\u3067\u306f\u554f\u984c\u306b\u306a\u308a\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u7279\u6b8a\u306a\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u30e1\u30ab\u30cb\u30ba\u30e0\u306f\u3001\u3053\u306e\u5236\u9650\u306b\u5bfe\u51e6\u3059\u308b\u306e\u306b\u5f79\u7acb\u3061\u307e\u3059\u3002</p>","tags":["transformer","nlp","llm","bert","gpt","machine-learning","deep-learning"]},{"location":"LLM/01_transformer_models/#lsh","title":"LSH\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3","text":"<p>Reformer\u306fLSH\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002softmax(QK^t)\u3067\u306f\u3001\u884c\u5217QK^t\u306e\u6700\u5927\u306e\u8981\u7d20\uff08softmax\u6b21\u5143\u3067\uff09\u306e\u307f\u304c\u6709\u7528\u306a\u8ca2\u732e\u3092\u3057\u307e\u3059\u3002\u3057\u305f\u304c\u3063\u3066\u3001Q\u5185\u306e\u5404\u30af\u30a8\u30eaq\u306b\u3064\u3044\u3066\u3001q\u306b\u8fd1\u3044K\u5185\u306e\u30ad\u30fck\u306e\u307f\u3092\u8003\u616e\u3067\u304d\u307e\u3059\u3002\u30cf\u30c3\u30b7\u30e5\u95a2\u6570\u3092\u4f7f\u7528\u3057\u3066q\u3068k\u304c\u8fd1\u3044\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3057\u307e\u3059\u3002\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u30de\u30b9\u30af\u306f\u73fe\u5728\u306e\u30c8\u30fc\u30af\u30f3\u3092\u30de\u30b9\u30af\u3059\u308b\u3088\u3046\u306b\u4fee\u6b63\u3055\u308c\u307e\u3059\uff08\u6700\u521d\u306e\u4f4d\u7f6e\u3092\u9664\u304f\uff09\u3002\u306a\u305c\u306a\u3089\u3001\u305d\u308c\u306f\u30af\u30a8\u30ea\u3068\u30ad\u30fc\u3092\u7b49\u3057\u304f\u3059\u308b\uff08\u3057\u305f\u304c\u3063\u3066\u975e\u5e38\u306b\u985e\u4f3c\u3059\u308b\uff09\u304b\u3089\u3067\u3059\u3002\u30cf\u30c3\u30b7\u30e5\u306f\u5c11\u3057\u30e9\u30f3\u30c0\u30e0\u306b\u306a\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u305f\u3081\u3001\u5b9f\u969b\u306b\u306f\u8907\u6570\u306e\u30cf\u30c3\u30b7\u30e5\u95a2\u6570\u304c\u4f7f\u7528\u3055\u308c\uff08n_rounds\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u3088\u3063\u3066\u6c7a\u5b9a\uff09\u3001\u6b21\u306b\u5e73\u5747\u5316\u3055\u308c\u307e\u3059\u3002</p>","tags":["transformer","nlp","llm","bert","gpt","machine-learning","deep-learning"]},{"location":"LLM/01_transformer_models/#_41","title":"\u30ed\u30fc\u30ab\u30eb\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3","text":"<p>Longformer\u306f\u30ed\u30fc\u30ab\u30eb\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u3092\u4f7f\u7528\u3057\u307e\u3059\uff1a\u3057\u3070\u3057\u3070\u3001\u30ed\u30fc\u30ab\u30eb\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\uff08\u4f8b\u3048\u3070\u3001\u5de6\u53f3\u306e2\u3064\u306e\u30c8\u30fc\u30af\u30f3\u306f\u4f55\u304b\uff1f\uff09\u306f\u4e0e\u3048\u3089\u308c\u305f\u30c8\u30fc\u30af\u30f3\u306b\u5bfe\u3057\u3066\u30a2\u30af\u30b7\u30e7\u30f3\u3092\u53d6\u308b\u306e\u306b\u5341\u5206\u3067\u3059\u3002\u307e\u305f\u3001\u5c0f\u3055\u306a\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u6301\u3064\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u5c64\u3092\u7a4d\u307f\u91cd\u306d\u308b\u3053\u3068\u3067\u3001\u6700\u5f8c\u306e\u5c64\u306f\u30a6\u30a3\u30f3\u30c9\u30a6\u5185\u306e\u30c8\u30fc\u30af\u30f3\u3060\u3051\u3067\u306a\u304f\u3001\u3088\u308a\u591a\u304f\u306e\u53d7\u5bb9\u91ce\u3092\u6301\u3061\u3001\u5168\u4f53\u306e\u6587\u306e\u8868\u73fe\u3092\u69cb\u7bc9\u3067\u304d\u307e\u3059\u3002</p> <p>\u3044\u304f\u3064\u304b\u306e\u4e8b\u524d\u9078\u629e\u3055\u308c\u305f\u5165\u529b\u30c8\u30fc\u30af\u30f3\u306b\u306f\u30b0\u30ed\u30fc\u30d0\u30eb\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u3082\u4e0e\u3048\u3089\u308c\u307e\u3059\uff1a\u3053\u308c\u3089\u306e\u5c11\u6570\u306e\u30c8\u30fc\u30af\u30f3\u306b\u3064\u3044\u3066\u3001\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u884c\u5217\u306f\u3059\u3079\u3066\u306e\u30c8\u30fc\u30af\u30f3\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u3001\u3053\u306e\u30d7\u30ed\u30bb\u30b9\u306f\u5bfe\u79f0\u7684\u3067\u3059\uff1a\u4ed6\u306e\u3059\u3079\u3066\u306e\u30c8\u30fc\u30af\u30f3\u306f\u3053\u308c\u3089\u306e\u7279\u5b9a\u306e\u30c8\u30fc\u30af\u30f3\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u307e\u3059\uff08\u30ed\u30fc\u30ab\u30eb\u30a6\u30a3\u30f3\u30c9\u30a6\u5185\u306e\u3082\u306e\u306b\u52a0\u3048\u3066\uff09\u3002\u3053\u308c\u306f\u8ad6\u6587\u306e\u56f32d\u306b\u793a\u3055\u308c\u3066\u304a\u308a\u3001\u30b5\u30f3\u30d7\u30eb\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u30de\u30b9\u30af\u306b\u3064\u3044\u3066\u306f\u4ee5\u4e0b\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\uff1a</p> <p></p> <p>\u3088\u308a\u5c11\u306a\u3044\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u3053\u308c\u3089\u306e\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u884c\u5217\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3067\u3001\u30e2\u30c7\u30eb\u306f\u3088\u308a\u5927\u304d\u306a\u30b7\u30fc\u30b1\u30f3\u30b9\u9577\u3092\u6301\u3064\u5165\u529b\u3092\u6301\u3064\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p>","tags":["transformer","nlp","llm","bert","gpt","machine-learning","deep-learning"]},{"location":"LLM/01_transformer_models/#_42","title":"\u8ef8\u4f4d\u7f6e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0","text":"","tags":["transformer","nlp","llm","bert","gpt","machine-learning","deep-learning"]},{"location":"LLM/01_transformer_models/#_43","title":"\u8ef8\u4f4d\u7f6e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0","text":"<p>Reformer\u306f\u8ef8\u4f4d\u7f6e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3092\u4f7f\u7528\u3057\u307e\u3059\uff1a\u5f93\u6765\u306eTransformer\u30e2\u30c7\u30eb\u3067\u306f\u3001\u4f4d\u7f6e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\\(E\\)\u306f\\(l \\times d\\)\u306e\u30b5\u30a4\u30ba\u306e\u884c\u5217\u3067\u3059\u3002\\(l\\)\u306f\u30b7\u30fc\u30b1\u30f3\u30b9\u9577\u3001\\(d\\)\u306f\u96a0\u308c\u72b6\u614b\u306e\u6b21\u5143\u3067\u3059\u3002\u975e\u5e38\u306b\u9577\u3044\u30c6\u30ad\u30b9\u30c8\u304c\u3042\u308b\u5834\u5408\u3001\u3053\u306e\u884c\u5217\u306f\u5de8\u5927\u306b\u306a\u308a\u3001GPU\u4e0a\u3067\u591a\u304f\u306e\u30b9\u30da\u30fc\u30b9\u3092\u5360\u6709\u3059\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002</p> <p>\u3053\u308c\u3092\u8efd\u6e1b\u3059\u308b\u305f\u3081\u306b\u3001\u8ef8\u4f4d\u7f6e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u306f\u3001\u305d\u306e\u5927\u304d\u306a\u884c\u5217\\(E\\)\u30922\u3064\u306e\u3088\u308a\u5c0f\u3055\u306a\u884c\u5217\\(E_1\\)\u3068\\(E_2\\)\u306b\u56e0\u6570\u5206\u89e3\u3059\u308b\u3053\u3068\u3067\u69cb\u6210\u3055\u308c\u307e\u3059\u3002\u6b21\u5143\u306f\\(l_1 \\times d_1\\)\u3068\\(l_2 \\times d_2\\)\u3067\u3001\u4ee5\u4e0b\u306e\u6761\u4ef6\u3092\u6e80\u305f\u3057\u307e\u3059\uff1a</p> <p>\\(l_1 \\times l_2 = l\\) \\(d_1 + d_2 = d\\)</p> <p>\u9577\u3055\u306e\u7a4d\u306b\u3088\u308a\u3001\u3053\u308c\u306f\u306f\u308b\u304b\u306b\u5c0f\u3055\u304f\u306a\u308a\u307e\u3059\u3002\\(E\\)\u5185\u306e\u6642\u9593\u30b9\u30c6\u30c3\u30d7\\(j\\)\u306e\u57cb\u3081\u8fbc\u307f\u306f\u3001\\(E_1\\)\u5185\u306e\u6642\u9593\u30b9\u30c6\u30c3\u30d7\\((j \\bmod l_1)\\)\u3068\\(E_2\\)\u5185\u306e\\((j \\div l_1)\\)\u306e\u57cb\u3081\u8fbc\u307f\u3092\u9023\u7d50\u3059\u308b\u3053\u3068\u3067\u53d6\u5f97\u3055\u308c\u307e\u3059\u3002</p>","tags":["transformer","nlp","llm","bert","gpt","machine-learning","deep-learning"]},{"location":"LLM/01_transformer_models/#_44","title":"\u307e\u3068\u3081","text":"<p>\u672c\u8a18\u4e8b\u3067\u306f\u3001Transformer\u30e2\u30c7\u30eb\u306e\u57fa\u672c\u6982\u5ff5\u304b\u3089\u5b9f\u88c5\u307e\u3067\u5e45\u5e83\u304f\u89e3\u8aac\u3057\u307e\u3057\u305f\u3002\u81ea\u7136\u8a00\u8a9e\u51e6\u7406\u306e\u57fa\u790e\u304b\u3089\u59cb\u307e\u308a\u3001\u5927\u898f\u6a21\u8a00\u8a9e\u30e2\u30c7\u30eb\u306e\u53f0\u982d\u3001\u305d\u3057\u3066\u5177\u4f53\u7684\u306a\u30bf\u30b9\u30af\u3067\u306e\u5fdc\u7528\u307e\u3067\u3001\u73fe\u4ee3\u306eAI\u6280\u8853\u306e\u6838\u5fc3\u3068\u306a\u308b\u6280\u8853\u306b\u3064\u3044\u3066\u7406\u89e3\u3092\u6df1\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\u3002</p>","tags":["transformer","nlp","llm","bert","gpt","machine-learning","deep-learning"]},{"location":"LLM/01_transformer_models/#_45","title":"\u5b66\u7fd2\u306e\u30dd\u30a4\u30f3\u30c8","text":"<ul> <li>NLP\u3068LLM\u306e\u9055\u3044: NLP\u306f\u5e83\u7bc4\u306a\u5206\u91ce\u3067\u3042\u308a\u3001LLM\u306f\u305d\u306e\u4e2d\u306e\u5f37\u529b\u306a\u30b5\u30d6\u30bb\u30c3\u30c8</li> <li>Transformer\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3: \u30a8\u30f3\u30b3\u30fc\u30c0\u3001\u30c7\u30b3\u30fc\u30c0\u3001\u30a8\u30f3\u30b3\u30fc\u30c0\u30fb\u30c7\u30b3\u30fc\u30c0\u306e3\u3064\u306e\u4e3b\u8981\u306a\u69cb\u9020</li> <li>\u5b9f\u8df5\u7684\u5fdc\u7528: \u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u3092\u4f7f\u3063\u305f\u7c21\u5358\u306a\u5b9f\u88c5\u304b\u3089\u3001\u7279\u5b9a\u30bf\u30b9\u30af\u3067\u306e\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u307e\u3067</li> <li>\u30e2\u30c7\u30eb\u9078\u629e: \u30bf\u30b9\u30af\u306e\u6027\u8cea\u306b\u5fdc\u3058\u305f\u9069\u5207\u306a\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306e\u9078\u629e\u65b9\u6cd5</li> <li>\u6700\u65b0\u52d5\u5411: \u73fe\u4ee3\u306eLLM\u306e\u80fd\u529b\u3068\u5236\u9650\u3001\u52b9\u7387\u7684\u306a\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u30e1\u30ab\u30cb\u30ba\u30e0</li> </ul> <p>Transformer\u30e2\u30c7\u30eb\u306f\u6025\u901f\u306b\u767a\u5c55\u3057\u3066\u3044\u308b\u5206\u91ce\u3067\u3059\u3002\u57fa\u672c\u6982\u5ff5\u3092\u7406\u89e3\u3059\u308b\u3053\u3068\u3067\u3001\u65b0\u3057\u3044\u30e2\u30c7\u30eb\u3084\u6280\u8853\u306b\u3082\u5bfe\u5fdc\u3067\u304d\u308b\u57fa\u76e4\u304c\u7bc9\u3051\u308b\u3067\u3057\u3087\u3046\u3002\u5b9f\u969b\u306b\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3057\u3001\u69d8\u3005\u306a\u30bf\u30b9\u30af\u3067\u30e2\u30c7\u30eb\u3092\u8a66\u3059\u3053\u3068\u3067\u3001\u3088\u308a\u6df1\u3044\u7406\u89e3\u304c\u5f97\u3089\u308c\u307e\u3059\u3002</p>","tags":["transformer","nlp","llm","bert","gpt","machine-learning","deep-learning"]},{"location":"LLM/02_using_transformers/","title":"Transformers\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u4f7f\u3044\u65b9","text":"","tags":["transformer","huggingface","nlp","\u6a5f\u68b0\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","python","\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc","pipeline","\u5b9f\u8df5","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb"]},{"location":"LLM/02_using_transformers/#_1","title":"\u6982\u8981","text":"<p>\u672c\u8a18\u4e8b\u3067\u306f\u3001Hugging Face Transformers\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u57fa\u672c\u7684\u306a\u4f7f\u7528\u65b9\u6cd5\u306b\u3064\u3044\u3066\u8a73\u3057\u304f\u89e3\u8aac\u3057\u307e\u3059\u3002Transformer\u30e2\u30c7\u30eb\u306e\u57fa\u672c\u6982\u5ff5\u304b\u3089\u3001\u5b9f\u969b\u306b\u30e2\u30c7\u30eb\u3068\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3092\u4f7f\u7528\u3057\u3066\u30c6\u30ad\u30b9\u30c8\u5206\u985e\u3092\u884c\u3046\u65b9\u6cd5\u307e\u3067\u3001\u5b9f\u8df5\u7684\u306a\u5185\u5bb9\u3092\u5b66\u7fd2\u3067\u304d\u307e\u3059\u3002</p> <p>\u53c2\u8003\u8cc7\u6599</p> <p>\u672c\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306f Hugging Face LLM Course \u3092\u53c2\u8003\u306b\u3001\u65e5\u672c\u8a9e\u3067\u5b66\u7fd2\u5185\u5bb9\u3092\u307e\u3068\u3081\u305f\u500b\u4eba\u7684\u306a\u5b66\u7fd2\u30ce\u30fc\u30c8\u3067\u3059\u3002\u8a73\u7d30\u306a\u5185\u5bb9\u3084\u6700\u65b0\u60c5\u5831\u306b\u3064\u3044\u3066\u306f\u3001\u539f\u6587\u3082\u4f75\u305b\u3066\u3054\u53c2\u7167\u304f\u3060\u3055\u3044\u3002</p> <p>\u5b66\u7fd2\u76ee\u6a19: - Transformers\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9\u3092\u7406\u89e3\u3059\u308b - pipeline\u306e\u4ed5\u7d44\u307f\u3068\u5185\u90e8\u52d5\u4f5c\u3092\u628a\u63e1\u3059\u308b - \u30e2\u30c7\u30eb\u3068\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306e\u64cd\u4f5c\u65b9\u6cd5\u3092\u7fd2\u5f97\u3059\u308b - \u8907\u6570\u306e\u30c6\u30ad\u30b9\u30c8\u30b7\u30fc\u30b1\u30f3\u30b9\u3092\u52b9\u7387\u7684\u306b\u51e6\u7406\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3076</p>","tags":["transformer","huggingface","nlp","\u6a5f\u68b0\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","python","\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc","pipeline","\u5b9f\u8df5","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb"]},{"location":"LLM/02_using_transformers/#_2","title":"\u524d\u63d0\u77e5\u8b58","text":"<ul> <li>Python \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u57fa\u672c\u77e5\u8b58</li> <li>\u6a5f\u68b0\u5b66\u7fd2\u30fb\u6df1\u5c64\u5b66\u7fd2\u306e\u57fa\u790e\u6982\u5ff5</li> <li>PyTorch\u306e\u57fa\u672c\u7684\u306a\u4f7f\u7528\u7d4c\u9a13\uff08\u63a8\u5968\uff09</li> <li>\u81ea\u7136\u8a00\u8a9e\u51e6\u7406\uff08NLP\uff09\u306e\u57fa\u672c\u6982\u5ff5</li> </ul>","tags":["transformer","huggingface","nlp","\u6a5f\u68b0\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","python","\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc","pipeline","\u5b9f\u8df5","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb"]},{"location":"LLM/02_using_transformers/#_3","title":"\u306f\u3058\u3081\u306b","text":"<p>Transformer\u30e2\u30c7\u30eb\u306f\u4e00\u822c\u7684\u306b\u975e\u5e38\u306b\u5927\u304d\u304f\u3001\u6570\u767e\u4e07\u304b\u3089\u6570\u767e\u5104\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6301\u3061\u307e\u3059\u3002\u3053\u308c\u3089\u306e\u30e2\u30c7\u30eb\u306e\u8a13\u7df4\u3068\u5c55\u958b\u306f\u8907\u96d1\u306a\u4f5c\u696d\u3067\u3059\u3002\u3055\u3089\u306b\u3001\u307b\u307c\u6bce\u65e5\u65b0\u3057\u3044\u30e2\u30c7\u30eb\u304c\u30ea\u30ea\u30fc\u30b9\u3055\u308c\u3001\u305d\u308c\u305e\u308c\u304c\u72ec\u81ea\u306e\u5b9f\u88c5\u3092\u6301\u3063\u3066\u3044\u308b\u305f\u3081\u3001\u3059\u3079\u3066\u3092\u8a66\u3059\u306e\u306f\u7c21\u5358\u306a\u4f5c\u696d\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002</p> <p>Transformers\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u3001\u3053\u306e\u554f\u984c\u3092\u89e3\u6c7a\u3059\u308b\u305f\u3081\u306b\u4f5c\u6210\u3055\u308c\u307e\u3057\u305f\u3002\u305d\u306e\u76ee\u6a19\u306f\u3001\u4efb\u610f\u306eTransformer\u30e2\u30c7\u30eb\u3092\u8aad\u307f\u8fbc\u307f\u3001\u8a13\u7df4\u3057\u3001\u4fdd\u5b58\u3067\u304d\u308b\u5358\u4e00\u306eAPI\u3092\u63d0\u4f9b\u3059\u308b\u3053\u3068\u3067\u3059\u3002\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u4e3b\u306a\u7279\u5fb4\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\uff1a</p> <ul> <li>\u4f7f\u3044\u3084\u3059\u3055: \u6700\u5148\u7aef\u306eNLP\u30e2\u30c7\u30eb\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3001\u8aad\u307f\u8fbc\u307f\u3001\u63a8\u8ad6\u306b\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u3001\u308f\u305a\u304b2\u884c\u306e\u30b3\u30fc\u30c9\u3067\u53ef\u80fd</li> <li>\u67d4\u8edf\u6027: \u3059\u3079\u3066\u306e\u30e2\u30c7\u30eb\u306f\u3001\u305d\u306e\u4e2d\u6838\u3067\u30b7\u30f3\u30d7\u30eb\u306aPyTorch\u306e<code>nn.Module</code>\u30af\u30e9\u30b9\u3067\u3042\u308a\u3001\u305d\u308c\u305e\u308c\u306e\u6a5f\u68b0\u5b66\u7fd2\uff08ML\uff09\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3067\u4ed6\u306e\u30e2\u30c7\u30eb\u3068\u540c\u69d8\u306b\u6271\u3046\u3053\u3068\u304c\u53ef\u80fd</li> <li>\u30b7\u30f3\u30d7\u30eb\u3055: \u30e9\u30a4\u30d6\u30e9\u30ea\u5168\u4f53\u3067\u307b\u3068\u3093\u3069\u62bd\u8c61\u5316\u304c\u884c\u308f\u308c\u3066\u3044\u306a\u3044\u3002\u300cAll in one file\u300d\u304c\u4e2d\u6838\u6982\u5ff5\u3067\u3001\u30e2\u30c7\u30eb\u306e\u30d5\u30a9\u30ef\u30fc\u30c9\u30d1\u30b9\u306f\u5358\u4e00\u306e\u30d5\u30a1\u30a4\u30eb\u3067\u5b8c\u5168\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3001\u30b3\u30fc\u30c9\u81ea\u4f53\u304c\u7406\u89e3\u3057\u3084\u3059\u304f\u3001\u5909\u66f4\u3057\u3084\u3059\u3044</li> </ul> <p>\u3053\u306e\u6700\u5f8c\u306e\u7279\u5fb4\u306b\u3088\u308a\u3001Transformers\u306f\u4ed6\u306eML\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u306f\u5927\u304d\u304f\u7570\u306a\u308a\u307e\u3059\u3002\u30e2\u30c7\u30eb\u306f\u8907\u6570\u306e\u30d5\u30a1\u30a4\u30eb\u9593\u3067\u5171\u6709\u3055\u308c\u308b\u30e2\u30b8\u30e5\u30fc\u30eb\u3067\u69cb\u7bc9\u3055\u308c\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u5404\u30e2\u30c7\u30eb\u304c\u72ec\u81ea\u306e\u30ec\u30a4\u30e4\u30fc\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u3002\u30e2\u30c7\u30eb\u3092\u3088\u308a\u89aa\u3057\u307f\u3084\u3059\u304f\u7406\u89e3\u3057\u3084\u3059\u304f\u3059\u308b\u3060\u3051\u3067\u306a\u304f\u3001\u4ed6\u306e\u30e2\u30c7\u30eb\u306b\u5f71\u97ff\u3092\u4e0e\u3048\u308b\u3053\u3068\u306a\u304f1\u3064\u306e\u30e2\u30c7\u30eb\u3067\u7c21\u5358\u306b\u5b9f\u9a13\u3067\u304d\u307e\u3059\u3002</p>","tags":["transformer","huggingface","nlp","\u6a5f\u68b0\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","python","\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc","pipeline","\u5b9f\u8df5","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb"]},{"location":"LLM/02_using_transformers/#pipeline","title":"pipeline\u306e\u4ed5\u7d44\u307f","text":"<p>\u307e\u305a\u3001\u5b8c\u5168\u306a\u4f8b\u304b\u3089\u59cb\u3081\u3066\u3001\u7b2c1\u7ae0\u3067\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3057\u305f\u3068\u304d\u306b\u88cf\u3067\u4f55\u304c\u8d77\u3053\u3063\u305f\u304b\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\uff1a</p> <pre><code>from transformers import pipeline\n\nclassifier = pipeline(\"sentiment-analysis\", model=\"distilbert/distilbert-base-uncased-finetuned-sst-2-english\")\nclassifier(\n    [\n        \"I've been waiting for a HuggingFace course my whole life.\",\n        \"I hate this so much!\",\n    ]\n)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>[{'label': 'POSITIVE', 'score': 0.9598050713539124},\n {'label': 'NEGATIVE', 'score': 0.9994558691978455}]\n</code></pre></p> <p>\u3053\u306epipeline\u306f3\u3064\u306e\u30b9\u30c6\u30c3\u30d7\u3092\u307e\u3068\u3081\u3066\u3044\u307e\u3059\uff1a\u524d\u51e6\u7406\u3001\u30e2\u30c7\u30eb\u3092\u901a\u3058\u305f\u5165\u529b\u306e\u51e6\u7406\u3001\u5f8c\u51e6\u7406\uff1a</p> <p></p>","tags":["transformer","huggingface","nlp","\u6a5f\u68b0\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","python","\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc","pipeline","\u5b9f\u8df5","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb"]},{"location":"LLM/02_using_transformers/#_4","title":"\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306b\u3088\u308b\u524d\u51e6\u7406","text":"<p>\u4ed6\u306e\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3068\u540c\u69d8\u306b\u3001Transformer\u30e2\u30c7\u30eb\u306f\u751f\u306e\u30c6\u30ad\u30b9\u30c8\u3092\u76f4\u63a5\u51e6\u7406\u3067\u304d\u307e\u305b\u3093\u3002\u305d\u306e\u305f\u3081\u3001\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306e\u6700\u521d\u306e\u30b9\u30c6\u30c3\u30d7\u3067\u306f\u3001\u30c6\u30ad\u30b9\u30c8\u5165\u529b\u3092\u30e2\u30c7\u30eb\u304c\u7406\u89e3\u3067\u304d\u308b\u6570\u5024\u306b\u5909\u63db\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002</p> <p>\u3053\u306e\u5909\u63db\u51e6\u7406\u306b\u306f\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306f\u4ee5\u4e0b\u306e\u5f79\u5272\u3092\u62c5\u3044\u307e\u3059\uff1a</p> <ul> <li>\u5165\u529b\u3092\u5358\u8a9e\u3001\u30b5\u30d6\u30ef\u30fc\u30c9\u3001\u307e\u305f\u306f\u8a18\u53f7\uff08\u53e5\u8aad\u70b9\u306a\u3069\uff09\u306b\u5206\u5272\u3057\u3001\u3053\u308c\u3089\u3092\u30c8\u30fc\u30af\u30f3\u3068\u547c\u3076</li> <li>\u5404\u30c8\u30fc\u30af\u30f3\u3092\u6574\u6570\u306b\u30de\u30c3\u30d4\u30f3\u30b0</li> <li>\u30e2\u30c7\u30eb\u306b\u6709\u7528\u306a\u53ef\u80fd\u6027\u306e\u3042\u308b\u8ffd\u52a0\u306e\u5165\u529b\u3092\u8ffd\u52a0</li> </ul> <p>\u3053\u306e\u524d\u51e6\u7406\u306f\u3001\u30e2\u30c7\u30eb\u304c\u4e8b\u524d\u8a13\u7df4\u3055\u308c\u305f\u3068\u304d\u3068\u307e\u3063\u305f\u304f\u540c\u3058\u65b9\u6cd5\u3067\u884c\u308f\u308c\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u305d\u306e\u305f\u3081\u3001\u307e\u305aModel Hub\u304b\u3089\u5fc5\u8981\u306a\u60c5\u5831\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u307e\u3059\u3002</p> <p>\u3053\u306e\u51e6\u7406\u306b\u306f\u3001<code>AutoTokenizer</code>\u30af\u30e9\u30b9\u3068\u305d\u306e<code>from_pretrained()</code>\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u30e2\u30c7\u30eb\u306e\u30c1\u30a7\u30c3\u30af\u30dd\u30a4\u30f3\u30c8\u540d\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u30e2\u30c7\u30eb\u306e\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306b\u95a2\u9023\u3059\u308b\u30c7\u30fc\u30bf\u3092\u81ea\u52d5\u7684\u306b\u53d6\u5f97\u3057\u3001\u30ad\u30e3\u30c3\u30b7\u30e5\u3057\u307e\u3059\uff08\u521d\u56de\u5b9f\u884c\u6642\u306e\u307f\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u304c\u884c\u308f\u308c\u307e\u3059\uff09\u3002</p> <p><code>sentiment-analysis</code> pipeline\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30c1\u30a7\u30c3\u30af\u30dd\u30a4\u30f3\u30c8\u306f<code>distilbert-base-uncased-finetuned-sst-2-english</code>\u306a\u306e\u3067\u3001\u4ee5\u4e0b\u3092\u5b9f\u884c\u3057\u307e\u3059\uff1a</p> <pre><code>from transformers import AutoTokenizer\n\ncheckpoint = \"distilbert-base-uncased-finetuned-sst-2-english\"\ntokenizer = AutoTokenizer.from_pretrained(checkpoint)\n</code></pre> <p>\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3092\u53d6\u5f97\u3057\u305f\u3089\u3001\u6587\u66f8\u3092\u76f4\u63a5\u6e21\u3059\u3053\u3068\u304c\u3067\u304d\u3001\u30e2\u30c7\u30eb\u306b\u4f9b\u7d66\u3059\u308b\u6e96\u5099\u304c\u3067\u304d\u305f\u8f9e\u66f8\u304c\u8fd4\u3055\u308c\u307e\u3059\uff01\u6b8b\u308b\u4f5c\u696d\u306f\u3001\u5165\u529bID\u306e\u30ea\u30b9\u30c8\u3092\u30c6\u30f3\u30bd\u30eb\u306b\u5909\u63db\u3059\u308b\u3053\u3068\u3060\u3051\u3067\u3059\u3002</p> <p>Transformers\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u3001\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\u306eML\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3092\u610f\u8b58\u305b\u305a\u306b\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002\u30e2\u30c7\u30eb\u306b\u3088\u3063\u3066\u306fPyTorch\u3084Flax\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u3069\u3061\u3089\u306e\u5834\u5408\u3067\u3082\u7d71\u4e00\u3055\u308c\u305fAPI\u3067\u64cd\u4f5c\u53ef\u80fd\u3067\u3059\u3002</p> <p>\u305f\u3060\u3057\u3001Transformer\u30e2\u30c7\u30eb\u306f\u5165\u529b\u3068\u3057\u3066\u30c6\u30f3\u30bd\u30eb\u306e\u307f\u3092\u53d7\u3051\u5165\u308c\u308b\u3053\u3068\u306b\u6ce8\u610f\u304c\u5fc5\u8981\u3067\u3059\u3002\u30c6\u30f3\u30bd\u30eb\u306b\u99b4\u67d3\u307f\u304c\u306a\u3044\u5834\u5408\u306f\u3001NumPy\u914d\u5217\u3068\u3057\u3066\u8003\u3048\u308b\u3068\u308f\u304b\u308a\u3084\u3059\u3044\u3067\u3057\u3087\u3046\u3002NumPy\u914d\u5217\u3068\u540c\u69d8\u306b\u3001\u30c6\u30f3\u30bd\u30eb\u3082\u30b9\u30ab\u30e9\u30fc\uff080\u6b21\u5143\uff09\u3001\u30d9\u30af\u30c8\u30eb\uff081\u6b21\u5143\uff09\u3001\u884c\u5217\uff082\u6b21\u5143\uff09\u3001\u307e\u305f\u306f\u3088\u308a\u591a\u304f\u306e\u6b21\u5143\u3092\u6301\u3064\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u5b9f\u969b\u3001\u30c6\u30f3\u30bd\u30eb\u306fNumPy\u914d\u5217\u306e\u6982\u5ff5\u3092\u4e00\u822c\u5316\u3057\u305f\u3082\u306e\u3068\u8003\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p> <p>\u53d6\u5f97\u3057\u305f\u3044\u30c6\u30f3\u30bd\u30eb\u306e\u30bf\u30a4\u30d7\uff08PyTorch\u307e\u305f\u306f\u30d7\u30ec\u30fc\u30f3\u306aNumPy\uff09\u3092\u6307\u5b9a\u3059\u308b\u306b\u306f\u3001<code>return_tensors</code>\u5f15\u6570\u3092\u4f7f\u7528\u3057\u307e\u3059\uff1a</p> <pre><code>from pprint import pprint\n\nraw_inputs = [\n        \"I've been waiting for a HuggingFace course my whole life.\",\n        \"I hate this so much!\",\n]\n\ninputs = tokenizer(raw_inputs, padding=True, truncation=True, return_tensors=\"pt\")\npprint(inputs)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>{'attention_mask': tensor([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n        [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]]),\n 'input_ids': tensor([[  101,  1045,  1005,  2310,  2042,  3403,  2005,  1037, 17662, 12172,\n          2607,  2026,  2878,  2166,  1012,   102],\n        [  101,  1045,  5223,  2023,  2061,  2172,   999,   102,     0,     0,\n             0,     0,     0,     0,     0,     0]])}\n</code></pre></p> <p>\u51fa\u529b\u81ea\u4f53\u306f\u3001<code>input_ids</code>\u3068<code>attention_mask</code>\u306e2\u3064\u306e\u30ad\u30fc\u3092\u542b\u3080\u8f9e\u66f8\u3067\u3059\u3002<code>input_ids</code>\u306b\u306f\u3001\u5404\u6587\u306e\u30c8\u30fc\u30af\u30f3\u306e\u4e00\u610f\u8b58\u5225\u5b50\u3067\u3042\u308b\u6574\u6570\u306e2\u3064\u306e\u884c\uff08\u5404\u6587\u306b1\u3064\u305a\u3064\uff09\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002<code>attention_mask</code>\u306b\u3064\u3044\u3066\u306f\u3001\u3053\u306e\u7ae0\u3067\u5f8c\u307b\u3069\u8aac\u660e\u3057\u307e\u3059\u3002</p>","tags":["transformer","huggingface","nlp","\u6a5f\u68b0\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","python","\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc","pipeline","\u5b9f\u8df5","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb"]},{"location":"LLM/02_using_transformers/#_5","title":"\u30e2\u30c7\u30eb\u3092\u901a\u3058\u305f\u51e6\u7406","text":"<p>\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3068\u540c\u3058\u65b9\u6cd5\u3067\u4e8b\u524d\u8a13\u7df4\u6e08\u307f\u30e2\u30c7\u30eb\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3067\u304d\u307e\u3059\u3002Transformers\u306f\u3001<code>from_pretrained()</code>\u30e1\u30bd\u30c3\u30c9\u3082\u6301\u3064<code>AutoModel</code>\u30af\u30e9\u30b9\u3092\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\uff1a</p> <pre><code>from transformers import AutoModel\n\ncheckpoint = \"distilbert-base-uncased-finetuned-sst-2-english\"\nmodel = AutoModel.from_pretrained(checkpoint)\n</code></pre> <p>\u3053\u306e\u30b3\u30fc\u30c9\u30b9\u30cb\u30da\u30c3\u30c8\u3067\u306f\u3001\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u3067\u4ee5\u524d\u306b\u4f7f\u7528\u3057\u305f\u306e\u3068\u540c\u3058\u30c1\u30a7\u30c3\u30af\u30dd\u30a4\u30f3\u30c8\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\uff08\u5b9f\u969b\u306b\u306f\u3059\u3067\u306b\u30ad\u30e3\u30c3\u30b7\u30e5\u3055\u308c\u3066\u3044\u308b\u306f\u305a\u3067\u3059\uff09\u3001\u305d\u308c\u3067\u30e2\u30c7\u30eb\u3092\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3057\u307e\u3057\u305f\u3002</p> <p>\u3053\u306e\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306b\u306f\u3001\u57fa\u672c\u7684\u306aTransformer\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u307f\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002\u4e00\u90e8\u306e\u5165\u529b\u304c\u4e0e\u3048\u3089\u308c\u308b\u3068\u3001\u96a0\u308c\u72b6\u614b\u3001\u7279\u5fb4\u3068\u3082\u547c\u3070\u308c\u308b\u3082\u306e\u3092\u51fa\u529b\u3057\u307e\u3059\u3002\u5404\u30e2\u30c7\u30eb\u5165\u529b\u306b\u5bfe\u3057\u3066\u3001Transformer\u30e2\u30c7\u30eb\u306b\u3088\u308b\u305d\u306e\u5165\u529b\u306e\u6587\u8108\u7684\u7406\u89e3\u3092\u8868\u3059\u9ad8\u6b21\u5143\u30d9\u30af\u30c8\u30eb\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002</p> <p>\u3053\u308c\u304c\u7406\u89e3\u3067\u304d\u306a\u3044\u5834\u5408\u3067\u3082\u5fc3\u914d\u3057\u306a\u3044\u3067\u304f\u3060\u3055\u3044\u3002\u5f8c\u3067\u3059\u3079\u3066\u8aac\u660e\u3057\u307e\u3059\u3002</p> <p>\u3053\u308c\u3089\u306e\u96a0\u308c\u72b6\u614b\u306f\u5358\u72ec\u3067\u3082\u6709\u7528\u3067\u3059\u304c\u3001\u901a\u5e38\u306f\u30d8\u30c3\u30c9\u3068\u3057\u3066\u77e5\u3089\u308c\u308b\u30e2\u30c7\u30eb\u306e\u5225\u306e\u90e8\u5206\u3078\u306e\u5165\u529b\u3067\u3059\u3002\u7b2c1\u7ae0\u3067\u306f\u3001\u540c\u3058\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3067\u7570\u306a\u308b\u30bf\u30b9\u30af\u3092\u5b9f\u884c\u3067\u304d\u307e\u3057\u305f\u304c\u3001\u3053\u308c\u3089\u306e\u5404\u30bf\u30b9\u30af\u306b\u306f\u7570\u306a\u308b\u30d8\u30c3\u30c9\u304c\u95a2\u9023\u4ed8\u3051\u3089\u308c\u3066\u3044\u307e\u3059\u3002</p>","tags":["transformer","huggingface","nlp","\u6a5f\u68b0\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","python","\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc","pipeline","\u5b9f\u8df5","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb"]},{"location":"LLM/02_using_transformers/#_6","title":"\u9ad8\u6b21\u5143\u30d9\u30af\u30c8\u30eb\uff1f","text":"<p>Transformer\u30e2\u30b8\u30e5\u30fc\u30eb\u306b\u3088\u3063\u3066\u51fa\u529b\u3055\u308c\u308b\u30d9\u30af\u30c8\u30eb\u306f\u901a\u5e38\u5927\u304d\u304f\u306a\u308a\u307e\u3059\u3002\u4e00\u822c\u7684\u306b3\u3064\u306e\u6b21\u5143\u304c\u3042\u308a\u307e\u3059\uff1a</p> <ul> <li>\u30d0\u30c3\u30c1\u30b5\u30a4\u30ba: \u4e00\u5ea6\u306b\u51e6\u7406\u3055\u308c\u308b\u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u6570\uff08\u4f8b\u3067\u306f2\uff09</li> <li>\u30b7\u30fc\u30b1\u30f3\u30b9\u9577: \u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u6570\u5024\u8868\u73fe\u306e\u9577\u3055\uff08\u4f8b\u3067\u306f16\uff09</li> <li>\u96a0\u308c\u30b5\u30a4\u30ba: \u5404\u30e2\u30c7\u30eb\u5165\u529b\u306e\u30d9\u30af\u30c8\u30eb\u6b21\u5143</li> </ul> <p>\u6700\u5f8c\u306e\u5024\u306e\u305f\u3081\u306b\u300c\u9ad8\u6b21\u5143\u300d\u3068\u8a00\u308f\u308c\u307e\u3059\u3002\u96a0\u308c\u30b5\u30a4\u30ba\u306f\u975e\u5e38\u306b\u5927\u304d\u304f\u306a\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\uff08\u5c0f\u3055\u306a\u30e2\u30c7\u30eb\u3067\u306f768\u304c\u4e00\u822c\u7684\u3067\u3001\u5927\u304d\u306a\u30e2\u30c7\u30eb\u3067\u306f3072\u4ee5\u4e0a\u306b\u9054\u3059\u308b\u3053\u3068\u3082\u3042\u308a\u307e\u3059\uff09\u3002</p> <p>\u524d\u51e6\u7406\u3057\u305f\u5165\u529b\u3092\u30e2\u30c7\u30eb\u306b\u4e0e\u3048\u308b\u3068\u3001\u3053\u308c\u3092\u78ba\u8a8d\u3067\u304d\u307e\u3059\uff1a</p> <pre><code>outputs = model(**inputs)\nprint(outputs.last_hidden_state.shape)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>torch.Size([2, 16, 768])\n</code></pre></p> <p>Transformers\u30e2\u30c7\u30eb\u306e\u51fa\u529b\u306f<code>namedtuple</code>\u3084\u8f9e\u66f8\u306e\u3088\u3046\u306b\u52d5\u4f5c\u3059\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u5c5e\u6027\uff08\u79c1\u305f\u3061\u304c\u884c\u3063\u305f\u3088\u3046\u306b\uff09\u3001\u30ad\u30fc\uff08<code>outputs[\"last_hidden_state\"]</code>\uff09\u3001\u307e\u305f\u306f\u63a2\u3057\u3066\u3044\u308b\u3082\u306e\u306e\u6b63\u78ba\u306a\u4f4d\u7f6e\u3092\u77e5\u3063\u3066\u3044\u308b\u5834\u5408\u306f\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\uff08<code>outputs[0]</code>\uff09\u3067\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u307e\u3059\u3002</p>","tags":["transformer","huggingface","nlp","\u6a5f\u68b0\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","python","\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc","pipeline","\u5b9f\u8df5","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb"]},{"location":"LLM/02_using_transformers/#_7","title":"\u30e2\u30c7\u30eb\u30d8\u30c3\u30c9\uff1a\u6570\u5024\u3092\u610f\u5473\u306e\u3042\u308b\u3082\u306e\u306b\u3059\u308b","text":"<p>\u30e2\u30c7\u30eb\u30d8\u30c3\u30c9\u306f\u3001\u96a0\u308c\u72b6\u614b\u306e\u9ad8\u6b21\u5143\u30d9\u30af\u30c8\u30eb\u3092\u5165\u529b\u3068\u3057\u3066\u53d7\u3051\u53d6\u308a\u3001\u305d\u308c\u3089\u3092\u7570\u306a\u308b\u6b21\u5143\u306b\u6295\u5f71\u3057\u307e\u3059\u3002\u901a\u5e38\u30011\u3064\u307e\u305f\u306f\u5c11\u6570\u306e\u7dda\u5f62\u30ec\u30a4\u30e4\u30fc\u3067\u69cb\u6210\u3055\u308c\u3066\u3044\u307e\u3059\uff1a</p> <p></p> <p>Transformer\u30e2\u30c7\u30eb\u306e\u51fa\u529b\u306f\u3001\u51e6\u7406\u3055\u308c\u308b\u305f\u3081\u306b\u30e2\u30c7\u30eb\u30d8\u30c3\u30c9\u306b\u76f4\u63a5\u9001\u3089\u308c\u307e\u3059\u3002</p> <p>\u3053\u306e\u56f3\u3067\u306f\u3001\u30e2\u30c7\u30eb\u306f\u57cb\u3081\u8fbc\u307f\u30ec\u30a4\u30e4\u30fc\u3068\u305d\u308c\u306b\u7d9a\u304f\u30ec\u30a4\u30e4\u30fc\u3067\u8868\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u57cb\u3081\u8fbc\u307f\u30ec\u30a4\u30e4\u30fc\u306f\u3001\u30c8\u30fc\u30af\u30f3\u5316\u3055\u308c\u305f\u5165\u529b\u306e\u5404\u5165\u529bID\u3092\u3001\u95a2\u9023\u3059\u308b\u30c8\u30fc\u30af\u30f3\u3092\u8868\u3059\u30d9\u30af\u30c8\u30eb\u306b\u5909\u63db\u3057\u307e\u3059\u3002\u5f8c\u7d9a\u306e\u30ec\u30a4\u30e4\u30fc\u306f\u3001\u6ce8\u610f\u6a5f\u69cb\u3092\u4f7f\u7528\u3057\u3066\u3053\u308c\u3089\u306e\u30d9\u30af\u30c8\u30eb\u3092\u64cd\u4f5c\u3057\u3001\u6587\u306e\u6700\u7d42\u8868\u73fe\u3092\u751f\u6210\u3057\u307e\u3059\u3002</p> <p>Transformers\u306b\u306f\u591a\u304f\u306e\u7570\u306a\u308b\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u304c\u5229\u7528\u53ef\u80fd\u3067\u3001\u305d\u308c\u305e\u308c\u304c\u7279\u5b9a\u306e\u30bf\u30b9\u30af\u306b\u53d6\u308a\u7d44\u3080\u3088\u3046\u306b\u8a2d\u8a08\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u4ee5\u4e0b\u306f\u7db2\u7f85\u7684\u3067\u306f\u306a\u3044\u30ea\u30b9\u30c8\u3067\u3059\uff1a</p> <ul> <li><code>*Model</code>\uff08\u96a0\u308c\u72b6\u614b\u3092\u53d6\u5f97\uff09</li> <li><code>*ForCausalLM</code></li> <li><code>*ForMaskedLM</code></li> <li><code>*ForMultipleChoice</code></li> <li><code>*ForQuestionAnswering</code></li> <li><code>*ForSequenceClassification</code></li> <li><code>*ForTokenClassification</code></li> <li>\u305d\u306e\u4ed6</li> </ul> <p>\u3053\u306e\u4f8b\u3067\u306f\u3001\u30b7\u30fc\u30b1\u30f3\u30b9\u5206\u985e\u30d8\u30c3\u30c9\u3092\u6301\u3064\u30e2\u30c7\u30eb\u304c\u5fc5\u8981\u3067\u3059\uff08\u6587\u66f8\u3092\u30dd\u30b8\u30c6\u30a3\u30d6\u307e\u305f\u306f\u30cd\u30ac\u30c6\u30a3\u30d6\u3068\u3057\u3066\u5206\u985e\u3067\u304d\u308b\u3088\u3046\u306b\uff09\u3002\u305d\u306e\u305f\u3081\u3001\u5b9f\u969b\u306b\u306f<code>AutoModel</code>\u30af\u30e9\u30b9\u3067\u306f\u306a\u304f\u3001<code>AutoModelForSequenceClassification</code>\u3092\u4f7f\u7528\u3057\u307e\u3059\uff1a</p> <pre><code>from transformers import AutoModelForSequenceClassification\n\ncheckpoint = \"distilbert-base-uncased-finetuned-sst-2-english\"\nmodel = AutoModelForSequenceClassification.from_pretrained(checkpoint)\noutputs = model(**inputs)\n</code></pre> <p>\u51fa\u529b\u306e\u5f62\u72b6\u3092\u898b\u308b\u3068\u3001\u6b21\u5143\u304c\u306f\u308b\u304b\u306b\u4f4e\u304f\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u30e2\u30c7\u30eb\u30d8\u30c3\u30c9\u306f\u3001\u524d\u306b\u898b\u305f\u9ad8\u6b21\u5143\u30d9\u30af\u30c8\u30eb\u3092\u5165\u529b\u3068\u3057\u3066\u53d7\u3051\u53d6\u308a\u30012\u3064\u306e\u5024\uff08\u30e9\u30d9\u30eb\u3054\u3068\u306b1\u3064\uff09\u3092\u542b\u3080\u30d9\u30af\u30c8\u30eb\u3092\u51fa\u529b\u3057\u307e\u3059\uff1a</p> <pre><code>print(outputs)\nprint(outputs.logits.shape)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>SequenceClassifierOutput(loss=None, logits=tensor([[-1.5607,  1.6123],\n        [ 4.1692, -3.3464]], grad_fn=&lt;AddmmBackward0&gt;), hidden_states=None, attentions=None)\ntorch.Size([2, 2])\n</code></pre></p> <p>2\u3064\u306e\u6587\u66f8\u30682\u3064\u306e\u30e9\u30d9\u30eb\u304c\u3042\u308b\u305f\u3081\u3001\u30e2\u30c7\u30eb\u304b\u3089\u5f97\u3089\u308c\u308b\u7d50\u679c\u306f2\u00d72\u306e\u5f62\u72b6\u3067\u3059\u3002</p>","tags":["transformer","huggingface","nlp","\u6a5f\u68b0\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","python","\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc","pipeline","\u5b9f\u8df5","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb"]},{"location":"LLM/02_using_transformers/#_8","title":"\u51fa\u529b\u306e\u5f8c\u51e6\u7406","text":"<p>\u30e2\u30c7\u30eb\u304b\u3089\u51fa\u529b\u3068\u3057\u3066\u5f97\u3089\u308c\u308b\u5024\u306f\u3001\u305d\u308c\u81ea\u4f53\u3067\u306f\u5fc5\u305a\u3057\u3082\u610f\u5473\u3092\u306a\u3057\u307e\u305b\u3093\u3002\u898b\u3066\u307f\u307e\u3057\u3087\u3046\uff1a</p> <pre><code>print(outputs.logits)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>tensor([[-1.5607,  1.6123],\n        [ 4.1692, -3.3464]], grad_fn=&lt;AddmmBackward0&gt;)\n</code></pre></p> <p>\u30e2\u30c7\u30eb\u304c\u6700\u521d\u306e\u6587\u306b\u3064\u3044\u3066<code>[0.0402, 0.9598]</code>\u30012\u756a\u76ee\u306e\u6587\u66f8\u306b\u3064\u3044\u3066<code>[0.9995, 0.0005]</code>\u3092\u4e88\u6e2c\u3057\u305f\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\u3053\u308c\u3089\u306f\u8a8d\u8b58\u53ef\u80fd\u306a\u78ba\u7387\u30b9\u30b3\u30a2\u3067\u3059\u3002</p> <p>\u5404\u4f4d\u7f6e\u306b\u5bfe\u5fdc\u3059\u308b\u30e9\u30d9\u30eb\u3092\u53d6\u5f97\u3059\u308b\u306b\u306f\u3001\u30e2\u30c7\u30eb\u8a2d\u5b9a\u306e<code>id2label</code>\u5c5e\u6027\u3092\u8abf\u3079\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff08\u6b21\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u8a73\u3057\u304f\u8aac\u660e\uff09\uff1a</p> <pre><code>model.config.id2label\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>{0: 'NEGATIVE', 1: 'POSITIVE'}\n</code></pre></p> <p>\u3053\u308c\u3067\u3001\u30e2\u30c7\u30eb\u304c\u4ee5\u4e0b\u3092\u4e88\u6e2c\u3057\u305f\u3068\u7d50\u8ad6\u3067\u304d\u307e\u3059\uff1a</p> <ul> <li>\u6700\u521d\u306e\u6587\uff1aNEGATIVE: 0.0402\u3001POSITIVE: 0.9598</li> <li>2\u756a\u76ee\u306e\u6587\uff1aNEGATIVE: 0.9995\u3001POSITIVE: 0.0005</li> </ul> <p>\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306e3\u3064\u306e\u30b9\u30c6\u30c3\u30d7\uff08\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306b\u3088\u308b\u524d\u51e6\u7406\u3001\u30e2\u30c7\u30eb\u3092\u901a\u3058\u305f\u5165\u529b\u306e\u51e6\u7406\u3001\u5f8c\u51e6\u7406\uff09\u3092\u6b63\u5e38\u306b\u518d\u73fe\u3057\u307e\u3057\u305f\uff01\u305d\u308c\u3067\u306f\u3001\u3053\u308c\u3089\u306e\u5404\u30b9\u30c6\u30c3\u30d7\u3092\u3088\u308a\u6df1\u304f\u6398\u308a\u4e0b\u3052\u3066\u307f\u307e\u3057\u3087\u3046\u3002</p>","tags":["transformer","huggingface","nlp","\u6a5f\u68b0\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","python","\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc","pipeline","\u5b9f\u8df5","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb"]},{"location":"LLM/02_using_transformers/#_9","title":"\u30e2\u30c7\u30eb","text":"<p>\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u306f\u3001\u30e2\u30c7\u30eb\u306e\u4f5c\u6210\u3068\u4f7f\u7528\u306b\u3064\u3044\u3066\u8a73\u3057\u304f\u898b\u3066\u3044\u304d\u307e\u3059\u3002\u30c1\u30a7\u30c3\u30af\u30dd\u30a4\u30f3\u30c8\u304b\u3089\u4efb\u610f\u306e\u30e2\u30c7\u30eb\u3092\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3057\u305f\u3044\u5834\u5408\u306b\u4fbf\u5229\u306a<code>AutoModel</code>\u30af\u30e9\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002</p>","tags":["transformer","huggingface","nlp","\u6a5f\u68b0\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","python","\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc","pipeline","\u5b9f\u8df5","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb"]},{"location":"LLM/02_using_transformers/#transformer","title":"Transformer\u306e\u4f5c\u6210","text":"<p><code>AutoModel</code>\u3092\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3059\u308b\u3068\u304d\u306b\u4f55\u304c\u8d77\u3053\u308b\u304b\u3092\u8abf\u3079\u308b\u3053\u3068\u304b\u3089\u59cb\u3081\u307e\u3057\u3087\u3046\uff1a</p> <pre><code>from transformers import AutoModel\n\nmodel = AutoModel.from_pretrained(\"bert-base-cased\")\n</code></pre> <p>\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3068\u540c\u69d8\u306b\u3001<code>from_pretrained()</code>\u30e1\u30bd\u30c3\u30c9\u306fHugging Face Hub\u304b\u3089\u30e2\u30c7\u30eb\u30c7\u30fc\u30bf\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u30ad\u30e3\u30c3\u30b7\u30e5\u3057\u307e\u3059\u3002\u524d\u8ff0\u306e\u3088\u3046\u306b\u3001\u30c1\u30a7\u30c3\u30af\u30dd\u30a4\u30f3\u30c8\u540d\u306f\u7279\u5b9a\u306e\u30e2\u30c7\u30eb\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3068\u91cd\u307f\u306b\u5bfe\u5fdc\u3057\u3001\u3053\u306e\u5834\u5408\u306f\u57fa\u672c\u7684\u306a\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\uff0812\u30ec\u30a4\u30e4\u30fc\u3001768\u96a0\u308c\u30b5\u30a4\u30ba\u300112\u6ce8\u610f\u30d8\u30c3\u30c9\uff09\u3068\u5927\u6587\u5b57\u30fb\u5c0f\u6587\u5b57\u3092\u533a\u5225\u3059\u308b\u5165\u529b\u3092\u6301\u3064BERT\u30e2\u30c7\u30eb\u3067\u3059\u3002Hub\u306b\u306f\u591a\u304f\u306e\u30c1\u30a7\u30c3\u30af\u30dd\u30a4\u30f3\u30c8\u304c\u5229\u7528\u53ef\u80fd\u3067\u3059\u3002\u3053\u3061\u3089\u3067\u63a2\u7d22\u3067\u304d\u307e\u3059\u3002</p> <p><code>AutoModel</code>\u30af\u30e9\u30b9\u3068\u305d\u306e\u95a2\u9023\u30af\u30e9\u30b9\u306f\u3001\u5b9f\u969b\u306b\u306f\u6307\u5b9a\u3055\u308c\u305f\u30c1\u30a7\u30c3\u30af\u30dd\u30a4\u30f3\u30c8\u306b\u9069\u3057\u305f\u30e2\u30c7\u30eb\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3092\u53d6\u5f97\u3059\u308b\u3088\u3046\u306b\u8a2d\u8a08\u3055\u308c\u305f\u30b7\u30f3\u30d7\u30eb\u306a\u30e9\u30c3\u30d1\u30fc\u3067\u3059\u3002\u3053\u308c\u306f\u300cauto\u300d\u30af\u30e9\u30b9\u3067\u3001\u9069\u5207\u306a\u30e2\u30c7\u30eb\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3092\u63a8\u6e2c\u3057\u3001\u6b63\u3057\u3044\u30e2\u30c7\u30eb\u30af\u30e9\u30b9\u3092\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3057\u307e\u3059\u3002\u305f\u3060\u3057\u3001\u4f7f\u7528\u3057\u305f\u3044\u30e2\u30c7\u30eb\u306e\u30bf\u30a4\u30d7\u304c\u308f\u304b\u3063\u3066\u3044\u308b\u5834\u5408\u306f\u3001\u305d\u306e\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3092\u5b9a\u7fa9\u3059\u308b\u30af\u30e9\u30b9\u3092\u76f4\u63a5\u4f7f\u7528\u3067\u304d\u307e\u3059\uff1a</p> <pre><code>from transformers import BertModel\n\nmodel = BertModel.from_pretrained(\"bert-base-cased\")\n</code></pre>","tags":["transformer","huggingface","nlp","\u6a5f\u68b0\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","python","\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc","pipeline","\u5b9f\u8df5","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb"]},{"location":"LLM/02_using_transformers/#_10","title":"\u8aad\u307f\u8fbc\u307f\u3068\u4fdd\u5b58","text":"<p>\u30e2\u30c7\u30eb\u306e\u4fdd\u5b58\u306f\u3001\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306e\u4fdd\u5b58\u3068\u540c\u3058\u304f\u3089\u3044\u7c21\u5358\u3067\u3059\u3002\u5b9f\u969b\u3001\u30e2\u30c7\u30eb\u306b\u306f\u540c\u3058<code>save_pretrained()</code>\u30e1\u30bd\u30c3\u30c9\u304c\u3042\u308a\u3001\u30e2\u30c7\u30eb\u306e\u91cd\u307f\u3068\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u8a2d\u5b9a\u3092\u4fdd\u5b58\u3057\u307e\u3059\uff1a</p> <pre><code>model.save_pretrained(\"models/\")\n</code></pre> <pre><code># \u3053\u308c\u306b\u3088\u308a\u3001\u30c7\u30a3\u30b9\u30af\u306b2\u3064\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u4fdd\u5b58\u3055\u308c\u307e\u3059\n%ls models\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>config.json \nmodel.safetensors\n</code></pre></p> <p>config.json\u30d5\u30a1\u30a4\u30eb\u3092\u898b\u308b\u3068\u3001\u30e2\u30c7\u30eb\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3092\u69cb\u7bc9\u3059\u308b\u305f\u3081\u306b\u5fc5\u8981\u306a\u3059\u3079\u3066\u306e\u5c5e\u6027\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u306b\u306f\u3001\u30c1\u30a7\u30c3\u30af\u30dd\u30a4\u30f3\u30c8\u304c\u3069\u3053\u304b\u3089\u6765\u305f\u306e\u304b\u3001\u6700\u5f8c\u306b\u30c1\u30a7\u30c3\u30af\u30dd\u30a4\u30f3\u30c8\u3092\u4fdd\u5b58\u3057\u305f\u3068\u304d\u306b\u4f7f\u7528\u3057\u3066\u3044\u305fTransformers\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306a\u3069\u306e\u30e1\u30bf\u30c7\u30fc\u30bf\u3082\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002</p> <p>model.safetensors\u30d5\u30a1\u30a4\u30eb\u306f\u72b6\u614b\u8f9e\u66f8\u3068\u3057\u3066\u77e5\u3089\u308c\u3066\u304a\u308a\u3001\u30e2\u30c7\u30eb\u306e\u3059\u3079\u3066\u306e\u91cd\u307f\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002\u3053\u306e2\u3064\u306e\u30d5\u30a1\u30a4\u30eb\u306f\u9023\u643a\u3057\u3066\u52d5\u4f5c\u3057\u307e\u3059\u3002\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u306f\u30e2\u30c7\u30eb\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306b\u3064\u3044\u3066\u77e5\u308b\u305f\u3081\u306b\u5fc5\u8981\u3067\u3042\u308a\u3001\u30e2\u30c7\u30eb\u306e\u91cd\u307f\u306f\u30e2\u30c7\u30eb\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u3059\u3002</p> <p>\u4fdd\u5b58\u3055\u308c\u305f\u30e2\u30c7\u30eb\u3092\u518d\u5229\u7528\u3059\u308b\u306b\u306f\u3001\u518d\u3073<code>from_pretrained()</code>\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3057\u307e\u3059\uff1a</p> <pre><code>from transformers import AutoModel\nmodel = AutoModel.from_pretrained(\"models\")\n</code></pre>","tags":["transformer","huggingface","nlp","\u6a5f\u68b0\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","python","\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc","pipeline","\u5b9f\u8df5","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb"]},{"location":"LLM/02_using_transformers/#_11","title":"\u30c6\u30ad\u30b9\u30c8\u306e\u30a8\u30f3\u30b3\u30fc\u30c9","text":"<p>Transformer\u30e2\u30c7\u30eb\u306f\u3001\u5165\u529b\u3092\u6570\u5024\u306b\u5909\u63db\u3059\u308b\u3053\u3068\u3067\u30c6\u30ad\u30b9\u30c8\u3092\u51e6\u7406\u3057\u307e\u3059\u3002\u3053\u3053\u3067\u306f\u3001\u30c6\u30ad\u30b9\u30c8\u304c\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306b\u3088\u3063\u3066\u51e6\u7406\u3055\u308c\u308b\u3068\u304d\u306b\u6b63\u78ba\u306b\u4f55\u304c\u8d77\u3053\u308b\u304b\u3092\u898b\u3066\u3044\u304d\u307e\u3059\u3002\u7b2c1\u7ae0\u3067\u3001\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u304c\u30c6\u30ad\u30b9\u30c8\u3092\u30c8\u30fc\u30af\u30f3\u306b\u5206\u5272\u3057\u3001\u3053\u308c\u3089\u306e\u30c8\u30fc\u30af\u30f3\u3092\u6570\u5024\u306b\u5909\u63db\u3059\u308b\u3053\u3068\u3092\u3059\u3067\u306b\u898b\u307e\u3057\u305f\u3002\u7c21\u5358\u306a\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3092\u901a\u3057\u3066\u3053\u306e\u5909\u63db\u3092\u78ba\u8a8d\u3067\u304d\u307e\u3059\uff1a</p> <pre><code>from transformers import AutoTokenizer\nfrom pprint import pprint\n\ntokenizer = AutoTokenizer.from_pretrained(\"bert-base-cased\")\nencoded_input = tokenizer(\"Hello, I'm a single sentence!\")\npprint(encoded_input)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>{'attention_mask': [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n 'input_ids': [101, 8667, 117, 146, 112, 182, 170, 1423, 5650, 1233, 106, 102],\n 'token_type_ids': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}\n</code></pre></p> <p>\u4ee5\u4e0b\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u6301\u3064\u8f9e\u66f8\u3092\u53d6\u5f97\u3057\u307e\u3059\uff1a - input_ids\uff1a\u30c8\u30fc\u30af\u30f3\u306e\u6570\u5024\u8868\u73fe - token_type_ids\uff1a\u5165\u529b\u306e\u3069\u306e\u90e8\u5206\u304c\u6587A\u3067\u3001\u3069\u306e\u90e8\u5206\u304c\u6587B\u304b\u3092\u30e2\u30c7\u30eb\u306b\u4f1d\u3048\u308b\uff08\u6b21\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u3088\u308a\u8a73\u3057\u304f\u8aac\u660e\uff09 - attention_mask\uff1a\u3069\u306e\u30c8\u30fc\u30af\u30f3\u306b\u6ce8\u610f\u3092\u6255\u3046\u3079\u304d\u3067\u3001\u3069\u306e\u30c8\u30fc\u30af\u30f3\u306b\u6ce8\u610f\u3092\u6255\u3046\u3079\u304d\u3067\u306a\u3044\u304b\u3092\u793a\u3059\uff08\u3059\u3050\u306b\u8a73\u3057\u304f\u8aac\u660e\uff09</p> <p>\u5165\u529bID\u3092\u30c7\u30b3\u30fc\u30c9\u3057\u3066\u5143\u306e\u30c6\u30ad\u30b9\u30c8\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\uff1a</p> <pre><code>tokenizer.decode(encoded_input[\"input_ids\"])\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>\"[CLS] Hello, I ' m a single sentence! [SEP]\"\n</code></pre></p> <p>\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u304c\u7279\u5225\u306a\u30c8\u30fc\u30af\u30f3 \u2014 <code>[CLS]</code>\u3068<code>[SEP]</code> \u2014 \u3092\u30e2\u30c7\u30eb\u304c\u5fc5\u8981\u3068\u3059\u308b\u3082\u306e\u3068\u3057\u3066\u8ffd\u52a0\u3057\u305f\u3053\u3068\u306b\u6c17\u3065\u304f\u3067\u3057\u3087\u3046\u3002\u3059\u3079\u3066\u306e\u30e2\u30c7\u30eb\u304c\u7279\u5225\u306a\u30c8\u30fc\u30af\u30f3\u3092\u5fc5\u8981\u3068\u3059\u308b\u308f\u3051\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u3053\u308c\u3089\u306f\u3001\u30e2\u30c7\u30eb\u304c\u305d\u308c\u3089\u3067\u4e8b\u524d\u8a13\u7df4\u3055\u308c\u305f\u5834\u5408\u306b\u5229\u7528\u3055\u308c\u3001\u305d\u306e\u5834\u5408\u3001\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306f\u30e2\u30c7\u30eb\u304c\u3053\u308c\u3089\u306e\u30c8\u30fc\u30af\u30f3\u3092\u671f\u5f85\u3059\u308b\u305f\u3081\u3001\u305d\u308c\u3089\u3092\u8ffd\u52a0\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002</p> <p>\u8907\u6570\u306e\u6587\u3092\u4e00\u5ea6\u306b\u30a8\u30f3\u30b3\u30fc\u30c9\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\u30d0\u30c3\u30c1\u5316\u3057\u3066\u307e\u3068\u3081\u308b\u304b\uff08\u3053\u308c\u306b\u3064\u3044\u3066\u306f\u3059\u3050\u306b\u8aac\u660e\u3057\u307e\u3059\uff09\u3001\u30ea\u30b9\u30c8\u3092\u6e21\u3059\u3053\u3068\u3067\u53ef\u80fd\u3067\u3059\uff1a</p> <pre><code>encoded_input = tokenizer(\"How are you?\", \"I'm fine, thank you!\", return_tensors=\"pt\")\npprint(encoded_input)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>{'attention_mask': tensor([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]),\n 'input_ids': tensor([[ 101, 1731, 1132, 1128,  136,  102,  146,  112,  182, 2503,  117, 6243,\n         1128,  106,  102]]),\n 'token_type_ids': tensor([[0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1]])}\n</code></pre></p> <p>\u3057\u304b\u3057\u3001\u554f\u984c\u304c\u3042\u308a\u307e\u3059\u30022\u3064\u306e\u30ea\u30b9\u30c8\u306e\u9577\u3055\u304c\u540c\u3058\u3067\u306f\u3042\u308a\u307e\u305b\u3093\uff01\u914d\u5217\u3068\u30c6\u30f3\u30bd\u30eb\u306f\u9577\u65b9\u5f62\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308b\u305f\u3081\u3001\u3053\u308c\u3089\u306e\u30ea\u30b9\u30c8\u3092\u5358\u7d14\u306bPyTorch\u30c6\u30f3\u30bd\u30eb\uff08\u307e\u305f\u306fNumPy\u914d\u5217\uff09\u306b\u5909\u63db\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306f\u305d\u306e\u305f\u3081\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\uff08\u30d1\u30c7\u30a3\u30f3\u30b0\uff09\u3092\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\u3002</p>","tags":["transformer","huggingface","nlp","\u6a5f\u68b0\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","python","\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc","pipeline","\u5b9f\u8df5","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb"]},{"location":"LLM/02_using_transformers/#_12","title":"\u5165\u529b\u306e\u30d1\u30c7\u30a3\u30f3\u30b0","text":"<p>\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306b\u5165\u529b\u3092\u30d1\u30c7\u30a3\u30f3\u30b0\u3059\u308b\u3088\u3046\u6c42\u3081\u308b\u3068\u3001\u6700\u3082\u9577\u3044\u3082\u306e\u3088\u308a\u77ed\u3044\u6587\u306b\u7279\u5225\u306a\u30d1\u30c7\u30a3\u30f3\u30b0\u30c8\u30fc\u30af\u30f3\u3092\u8ffd\u52a0\u3059\u308b\u3053\u3068\u3067\u3001\u3059\u3079\u3066\u306e\u6587\u3092\u540c\u3058\u9577\u3055\u306b\u3057\u307e\u3059\uff1a</p> <pre><code>encoded_input = tokenizer([\"How are you?\", \"I'm fine, thank you!\"], padding=True, return_tensors=\"pt\")\npprint(encoded_input)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>{'attention_mask': tensor([[1, 1, 1, 1, 1, 1, 0, 0, 0, 0],\n        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]),\n 'input_ids': tensor([[ 101, 1731, 1132, 1128,  136,  102,    0,    0,    0,    0],\n        [ 101,  146,  112,  182, 2503,  117, 6243, 1128,  106,  102]]),\n 'token_type_ids': tensor([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]])}\n</code></pre></p> <p>\u3053\u308c\u3067\u9577\u65b9\u5f62\u306e\u30c6\u30f3\u30bd\u30eb\u304c\u3067\u304d\u307e\u3057\u305f\uff01\u30d1\u30c7\u30a3\u30f3\u30b0\u30c8\u30fc\u30af\u30f3\u304cID 0\u3067\u5165\u529bID\u306b\u30a8\u30f3\u30b3\u30fc\u30c9\u3055\u308c\u3001attention mask\u306e\u5024\u30820\u306b\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u3053\u308c\u306f\u3001\u3053\u308c\u3089\u306e\u30d1\u30c7\u30a3\u30f3\u30b0\u30c8\u30fc\u30af\u30f3\u304c\u30e2\u30c7\u30eb\u306b\u3088\u3063\u3066\u5206\u6790\u3055\u308c\u308b\u3079\u304d\u3067\u306f\u306a\u3044\u305f\u3081\u3067\u3059\u3002\u5b9f\u969b\u306e\u6587\u306e\u4e00\u90e8\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002</p>","tags":["transformer","huggingface","nlp","\u6a5f\u68b0\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","python","\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc","pipeline","\u5b9f\u8df5","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb"]},{"location":"LLM/02_using_transformers/#_13","title":"\u5165\u529b\u306e\u5207\u308a\u6368\u3066","text":"<p>\u30c6\u30f3\u30bd\u30eb\u304c\u30e2\u30c7\u30eb\u3067\u51e6\u7406\u3059\u308b\u306b\u306f\u5927\u304d\u3059\u304e\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\u305f\u3068\u3048\u3070\u3001BERT\u306f\u6700\u5927512\u30c8\u30fc\u30af\u30f3\u306e\u30b7\u30fc\u30b1\u30f3\u30b9\u3067\u306e\u307f\u4e8b\u524d\u8a13\u7df4\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3001\u3088\u308a\u9577\u3044\u30b7\u30fc\u30b1\u30f3\u30b9\u3092\u51e6\u7406\u3067\u304d\u307e\u305b\u3093\u3002\u30e2\u30c7\u30eb\u304c\u51e6\u7406\u3067\u304d\u308b\u3088\u308a\u3082\u9577\u3044\u30b7\u30fc\u30b1\u30f3\u30b9\u304c\u3042\u308b\u5834\u5408\u306f\u3001<code>truncation</code>\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u5207\u308a\u6368\u3066\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff1a</p> <pre><code>encoded_input = tokenizer(\n    \"This is a very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very long sentence.\",\n    truncation=True,\n)\nprint(encoded_input[\"input_ids\"])\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>[101, 1188, 1110, 170, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1263, 5650, 119, 102]\n</code></pre></p> <p>\u30d1\u30c7\u30a3\u30f3\u30b0\u3068\u5207\u308a\u6368\u3066\u306e\u5f15\u6570\u3092\u7d44\u307f\u5408\u308f\u305b\u308b\u3053\u3068\u3067\u3001\u30c6\u30f3\u30bd\u30eb\u304c\u5fc5\u8981\u306a\u6b63\u78ba\u306a\u30b5\u30a4\u30ba\u306b\u306a\u308b\u3053\u3068\u3092\u78ba\u5b9f\u306b\u3067\u304d\u307e\u3059\uff1a</p> <pre><code>encoded_input = tokenizer(\n    [\"How are you?\", \"I'm fine, thank you!\"],\n    padding=True,\n    truncation=True,\n    max_length=5,\n    return_tensors=\"pt\",\n)\nprint(encoded_input)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>{'input_ids': tensor([[ 101, 1731, 1132, 1128,  102],\n        [ 101,  146,  112,  182,  102]]), 'token_type_ids': tensor([[0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0]]), 'attention_mask': tensor([[1, 1, 1, 1, 1],\n        [1, 1, 1, 1, 1]])}\n</code></pre></p>","tags":["transformer","huggingface","nlp","\u6a5f\u68b0\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","python","\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc","pipeline","\u5b9f\u8df5","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb"]},{"location":"LLM/02_using_transformers/#_14","title":"\u7279\u5225\u306a\u30c8\u30fc\u30af\u30f3\u306e\u8ffd\u52a0","text":"<p>\u7279\u5225\u306a\u30c8\u30fc\u30af\u30f3\uff08\u307e\u305f\u306f\u5c11\u306a\u304f\u3068\u3082\u305d\u306e\u6982\u5ff5\uff09\u306f\u3001BERT\u304a\u3088\u3073\u6d3e\u751f\u30e2\u30c7\u30eb\u306b\u3068\u3063\u3066\u7279\u306b\u91cd\u8981\u3067\u3059\u3002\u3053\u308c\u3089\u306e\u30c8\u30fc\u30af\u30f3\u306f\u3001\u6587\u306e\u5883\u754c\u3092\u3088\u308a\u826f\u304f\u8868\u73fe\u3059\u308b\u305f\u3081\u306b\u8ffd\u52a0\u3055\u308c\u307e\u3059\u3002\u305f\u3068\u3048\u3070\u3001\u6587\u306e\u59cb\u307e\u308a\uff08<code>[CLS]</code>\uff09\u3084\u6587\u306e\u9593\u306e\u533a\u5207\u308a\uff08<code>[SEP]</code>\uff09\u306a\u3069\u3067\u3059\u3002\u7c21\u5358\u306a\u4f8b\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\uff1a</p> <pre><code>encoded_input = tokenizer(\"How are you?\")\npprint(encoded_input[\"input_ids\"])\ntokenizer.decode(encoded_input[\"input_ids\"])\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>[101, 1731, 1132, 1128, 136, 102]\n'[CLS] How are you? [SEP]'\n</code></pre></p> <p>\u3053\u308c\u3089\u306e\u7279\u5225\u306a\u30c8\u30fc\u30af\u30f3\u306f\u3001\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306b\u3088\u3063\u3066\u81ea\u52d5\u7684\u306b\u8ffd\u52a0\u3055\u308c\u307e\u3059\u3002\u3059\u3079\u3066\u306e\u30e2\u30c7\u30eb\u304c\u7279\u5225\u306a\u30c8\u30fc\u30af\u30f3\u3092\u5fc5\u8981\u3068\u3059\u308b\u308f\u3051\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u3053\u308c\u3089\u306f\u4e3b\u306b\u3001\u30e2\u30c7\u30eb\u304c\u305d\u308c\u3089\u3067\u4e8b\u524d\u8a13\u7df4\u3055\u308c\u305f\u5834\u5408\u306b\u4f7f\u7528\u3055\u308c\u3001\u305d\u306e\u5834\u5408\u3001\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306f\u30e2\u30c7\u30eb\u304c\u3053\u308c\u3089\u306e\u30c8\u30fc\u30af\u30f3\u3092\u671f\u5f85\u3059\u308b\u305f\u3081\u3001\u305d\u308c\u3089\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002</p>","tags":["transformer","huggingface","nlp","\u6a5f\u68b0\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","python","\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc","pipeline","\u5b9f\u8df5","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb"]},{"location":"LLM/02_using_transformers/#_15","title":"\u306a\u305c\u3053\u308c\u3089\u3059\u3079\u3066\u304c\u5fc5\u8981\u306a\u306e\u304b\uff1f","text":"<p>\u5177\u4f53\u7684\u306a\u4f8b\u3092\u8003\u3048\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u3053\u308c\u3089\u306e\u30a8\u30f3\u30b3\u30fc\u30c9\u3055\u308c\u305f\u30b7\u30fc\u30b1\u30f3\u30b9\u3092\u8003\u3048\u3066\u307f\u307e\u3059\u3002 \u30c8\u30fc\u30af\u30f3\u5316\u3055\u308c\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff1a</p> <pre><code>sequences = [\n    \"I've been waiting for a HuggingFace course my whole life.\",\n    \"I hate this so much!\",\n]\ninput_ids = tokenizer(sequences, padding=True)[\"input_ids\"]\npprint(input_ids, compact=True)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>[[101, 146, 112, 1396, 1151, 2613, 1111, 170, 20164, 10932, 2271, 7954, 1736,\n  1139, 2006, 1297, 119, 102],\n [101, 146, 4819, 1142, 1177, 1277, 106, 102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]\n</code></pre></p> <p>\u3053\u308c\u306f\u30a8\u30f3\u30b3\u30fc\u30c9\u3055\u308c\u305f\u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u30ea\u30b9\u30c8\u3067\u3059\uff1a\u30ea\u30b9\u30c8\u306e\u30ea\u30b9\u30c8\u3067\u3059\u3002\u30c6\u30f3\u30bd\u30eb\u306f\u9577\u65b9\u5f62\u306e\u5f62\u72b6\u306e\u307f\u3092\u53d7\u3051\u5165\u308c\u307e\u3059\uff08\u884c\u5217\u3092\u8003\u3048\u3066\u304f\u3060\u3055\u3044\uff09\u3002\u3053\u306e\u300c\u914d\u5217\u300d\u306f\u3059\u3067\u306b\u9577\u65b9\u5f62\u306e\u5f62\u72b6\u306a\u306e\u3067\u3001\u30c6\u30f3\u30bd\u30eb\u306b\u5909\u63db\u3059\u308b\u306e\u306f\u7c21\u5358\u3067\u3059\uff1a</p> <pre><code>import torch\nmodel_inputs = torch.tensor(input_ids)\n</code></pre>","tags":["transformer","huggingface","nlp","\u6a5f\u68b0\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","python","\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc","pipeline","\u5b9f\u8df5","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb"]},{"location":"LLM/02_using_transformers/#_16","title":"\u30e2\u30c7\u30eb\u3078\u306e\u5165\u529b\u3068\u3057\u3066\u30c6\u30f3\u30bd\u30eb\u3092\u4f7f\u7528\u3059\u308b","text":"<p>\u30e2\u30c7\u30eb\u3067\u30c6\u30f3\u30bd\u30eb\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u306f\u975e\u5e38\u306b\u7c21\u5358\u3067\u3059 \u2014 \u5165\u529b\u3067\u30e2\u30c7\u30eb\u3092\u547c\u3073\u51fa\u3059\u3060\u3051\u3067\u3059\uff1a</p> <pre><code>output = model(model_inputs)\n</code></pre> <p>\u30e2\u30c7\u30eb\u306f\u591a\u304f\u306e\u7570\u306a\u308b\u5f15\u6570\u3092\u53d7\u3051\u5165\u308c\u307e\u3059\u304c\u3001\u5165\u529bID\u306e\u307f\u304c\u5fc5\u8981\u3067\u3059\u3002\u4ed6\u306e\u5f15\u6570\u304c\u4f55\u3092\u3059\u308b\u306e\u304b\u3001\u3044\u3064\u5fc5\u8981\u306a\u306e\u304b\u306b\u3064\u3044\u3066\u306f\u5f8c\u3067\u8aac\u660e\u3057\u307e\u3059\u304c\u3001\u307e\u305a\u3001Transformer\u30e2\u30c7\u30eb\u304c\u7406\u89e3\u3067\u304d\u308b\u5165\u529b\u3092\u69cb\u7bc9\u3059\u308b\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306b\u3064\u3044\u3066\u8a73\u3057\u304f\u898b\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002</p>","tags":["transformer","huggingface","nlp","\u6a5f\u68b0\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","python","\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc","pipeline","\u5b9f\u8df5","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb"]},{"location":"LLM/02_using_transformers/#_17","title":"\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc","text":"<p>\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306f\u3001NLP\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306e\u30b3\u30a2\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306e1\u3064\u3067\u3059\u30021\u3064\u306e\u76ee\u7684\u3092\u679c\u305f\u3057\u307e\u3059\uff1a\u30c6\u30ad\u30b9\u30c8\u3092\u30e2\u30c7\u30eb\u304c\u51e6\u7406\u3067\u304d\u308b\u30c7\u30fc\u30bf\u306b\u5909\u63db\u3059\u308b\u3053\u3068\u3067\u3059\u3002\u30e2\u30c7\u30eb\u306f\u6570\u5024\u306e\u307f\u3092\u51e6\u7406\u3067\u304d\u308b\u305f\u3081\u3001\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306f\u30c6\u30ad\u30b9\u30c8\u5165\u529b\u3092\u6570\u5024\u30c7\u30fc\u30bf\u306b\u5909\u63db\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u306f\u3001\u30c8\u30fc\u30af\u30f3\u5316\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u3067\u6b63\u78ba\u306b\u4f55\u304c\u8d77\u3053\u308b\u304b\u3092\u63a2\u308a\u307e\u3059\u3002</p> <p>NLP\u30bf\u30b9\u30af\u3067\u306f\u3001\u4e00\u822c\u7684\u306b\u51e6\u7406\u3055\u308c\u308b\u30c7\u30fc\u30bf\u306f\u751f\u306e\u30c6\u30ad\u30b9\u30c8\u3067\u3059\u3002</p> <p>\u3057\u304b\u3057\u3001\u30e2\u30c7\u30eb\u306f\u6570\u5024\u306e\u307f\u3092\u51e6\u7406\u3067\u304d\u308b\u305f\u3081\u3001\u751f\u306e\u30c6\u30ad\u30b9\u30c8\u3092\u6570\u5024\u306b\u5909\u63db\u3059\u308b\u65b9\u6cd5\u3092\u898b\u3064\u3051\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u305d\u308c\u304c\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306e\u5f79\u5272\u3067\u3042\u308a\u3001\u3053\u308c\u3092\u884c\u3046\u65b9\u6cd5\u306f\u305f\u304f\u3055\u3093\u3042\u308a\u307e\u3059\u3002\u76ee\u6a19\u306f\u3001\u6700\u3082\u610f\u5473\u306e\u3042\u308b\u8868\u73fe \u2014 \u3064\u307e\u308a\u3001\u30e2\u30c7\u30eb\u306b\u3068\u3063\u3066\u6700\u3082\u7406\u306b\u304b\u306a\u3063\u305f\u8868\u73fe\u3092\u898b\u3064\u3051\u3001\u53ef\u80fd\u3067\u3042\u308c\u3070\u6700\u5c0f\u306e\u8868\u73fe\u3092\u898b\u3064\u3051\u308b\u3053\u3068\u3067\u3059\u3002</p> <p>\u30c8\u30fc\u30af\u30f3\u5316\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u4f8b\u3092\u3044\u304f\u3064\u304b\u898b\u3066\u3001\u30c8\u30fc\u30af\u30f3\u5316\u306b\u3064\u3044\u3066\u6301\u3064\u304b\u3082\u3057\u308c\u306a\u3044\u7591\u554f\u306e\u3044\u304f\u3064\u304b\u306b\u7b54\u3048\u3066\u307f\u307e\u3057\u3087\u3046\u3002</p>","tags":["transformer","huggingface","nlp","\u6a5f\u68b0\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","python","\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc","pipeline","\u5b9f\u8df5","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb"]},{"location":"LLM/02_using_transformers/#_18","title":"\u5358\u8a9e\u30d9\u30fc\u30b9","text":"<p>\u601d\u3044\u6d6e\u304b\u3076\u6700\u521d\u306e\u30bf\u30a4\u30d7\u306e\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306f_\u5358\u8a9e\u30d9\u30fc\u30b9_\u3067\u3059\u3002\u4e00\u822c\u7684\u306b\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u3068\u4f7f\u7528\u304c\u975e\u5e38\u306b\u7c21\u5358\u3067\u3001\u3044\u304f\u3064\u304b\u306e\u30eb\u30fc\u30eb\u3060\u3051\u3067\u3001\u3057\u3070\u3057\u3070\u826f\u597d\u306a\u7d50\u679c\u3092\u3082\u305f\u3089\u3057\u307e\u3059\u3002\u305f\u3068\u3048\u3070\u3001\u4ee5\u4e0b\u306e\u753b\u50cf\u3067\u306f\u3001\u76ee\u6a19\u306f\u751f\u306e\u30c6\u30ad\u30b9\u30c8\u3092\u5358\u8a9e\u306b\u5206\u5272\u3057\u3001\u305d\u308c\u305e\u308c\u306e\u6570\u5024\u8868\u73fe\u3092\u898b\u3064\u3051\u308b\u3053\u3068\u3067\u3059\uff1a</p> <p></p> <p>\u30c6\u30ad\u30b9\u30c8\u3092\u5206\u5272\u3059\u308b\u65b9\u6cd5\u306f\u3055\u307e\u3056\u307e\u3067\u3059\u3002\u305f\u3068\u3048\u3070\u3001Python\u306e<code>split()</code>\u95a2\u6570\u3092\u9069\u7528\u3057\u3066\u3001\u7a7a\u767d\u3092\u4f7f\u7528\u3057\u3066\u30c6\u30ad\u30b9\u30c8\u3092\u5358\u8a9e\u306b\u30c8\u30fc\u30af\u30f3\u5316\u3067\u304d\u307e\u3059\uff1a</p> <pre><code>tokenized_text = \"Hello, how are you!\".split()\npprint(tokenized_text)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>['Hello,', 'how', 'are', 'you!']\n</code></pre></p> <p>\u53e5\u8aad\u70b9\u306b\u5bfe\u3059\u308b\u8ffd\u52a0\u306e\u30eb\u30fc\u30eb\u3092\u6301\u3064\u5358\u8a9e\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306e\u5909\u7a2e\u3082\u3042\u308a\u307e\u3059\u3002\u3053\u306e\u7a2e\u306e\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3067\u306f\u3001\u304b\u306a\u308a\u5927\u304d\u306a\u300c\u8a9e\u5f59\u300d\u3092\u5f97\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u8a9e\u5f59\u306f\u3001\u30b3\u30fc\u30d1\u30b9\u5185\u306e\u72ec\u7acb\u3057\u305f\u30c8\u30fc\u30af\u30f3\u306e\u7dcf\u6570\u306b\u3088\u3063\u3066\u5b9a\u7fa9\u3055\u308c\u307e\u3059\u3002</p> <p>\u5404\u5358\u8a9e\u306b\u306f0\u304b\u3089\u8a9e\u5f59\u306e\u30b5\u30a4\u30ba\u307e\u3067\u306eID\u304c\u5272\u308a\u5f53\u3066\u3089\u308c\u307e\u3059\u3002\u30e2\u30c7\u30eb\u306f\u3053\u308c\u3089\u306eID\u3092\u4f7f\u7528\u3057\u3066\u5404\u5358\u8a9e\u3092\u8b58\u5225\u3057\u307e\u3059\u3002</p> <p>\u5358\u8a9e\u30d9\u30fc\u30b9\u306e\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3067\u8a00\u8a9e\u3092\u5b8c\u5168\u306b\u30ab\u30d0\u30fc\u3057\u305f\u3044\u5834\u5408\u3001\u8a00\u8a9e\u5185\u306e\u5404\u5358\u8a9e\u306e\u8b58\u5225\u5b50\u304c\u5fc5\u8981\u306b\u306a\u308a\u3001\u81a8\u5927\u306a\u6570\u306e\u30c8\u30fc\u30af\u30f3\u304c\u751f\u6210\u3055\u308c\u307e\u3059\u3002\u305f\u3068\u3048\u3070\u3001\u82f1\u8a9e\u306b\u306f50\u4e07\u3092\u8d85\u3048\u308b\u5358\u8a9e\u304c\u3042\u308b\u305f\u3081\u3001\u5404\u5358\u8a9e\u304b\u3089\u5165\u529bID\u3078\u306e\u30de\u30c3\u30d7\u3092\u69cb\u7bc9\u3059\u308b\u306b\u306f\u3001\u305d\u306e\u305f\u304f\u3055\u3093\u306eID\u3092\u8ffd\u8de1\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3055\u3089\u306b\u3001\u300cdog\u300d\u306e\u3088\u3046\u306a\u5358\u8a9e\u306f\u300cdogs\u300d\u306e\u3088\u3046\u306a\u5358\u8a9e\u3068\u306f\u7570\u306a\u3063\u3066\u8868\u73fe\u3055\u308c\u3001\u30e2\u30c7\u30eb\u306f\u6700\u521d\u300cdog\u300d\u3068\u300cdogs\u300d\u304c\u4f3c\u3066\u3044\u308b\u3053\u3068\u3092\u77e5\u308b\u65b9\u6cd5\u304c\u3042\u308a\u307e\u305b\u3093\u3002\u3053\u308c\u3089\u306e2\u3064\u306e\u5358\u8a9e\u3092\u7121\u95a2\u4fc2\u3068\u3057\u3066\u8b58\u5225\u3057\u307e\u3059\u3002\u300crun\u300d\u3068\u300crunning\u300d\u306a\u3069\u306e\u4ed6\u306e\u4f3c\u305f\u3088\u3046\u306a\u5358\u8a9e\u306b\u3082\u540c\u3058\u3053\u3068\u304c\u5f53\u3066\u306f\u307e\u308a\u3001\u30e2\u30c7\u30eb\u306f\u6700\u521d\u305d\u308c\u3089\u304c\u4f3c\u3066\u3044\u308b\u3053\u3068\u3092\u898b\u307e\u305b\u3093\u3002</p> <p>\u6700\u5f8c\u306b\u3001\u8a9e\u5f59\u306b\u306a\u3044\u5358\u8a9e\u3092\u8868\u3059\u30ab\u30b9\u30bf\u30e0\u30c8\u30fc\u30af\u30f3\u304c\u5fc5\u8981\u3067\u3059\u3002\u3053\u308c\u306f\u300c\u672a\u77e5\u300d\u30c8\u30fc\u30af\u30f3\u3068\u3057\u3066\u77e5\u3089\u308c\u3001\u3057\u3070\u3057\u3070\u300c[UNK]\u300d\u3084\u300c&lt;unk&gt;\u300d\u3068\u3057\u3066\u8868\u3055\u308c\u307e\u3059\u3002\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u304c\u3053\u308c\u3089\u306e\u30c8\u30fc\u30af\u30f3\u3092\u591a\u304f\u751f\u6210\u3057\u3066\u3044\u308b\u5834\u5408\u3001\u4e00\u822c\u7684\u306b\u305d\u308c\u306f\u60aa\u3044\u5146\u5019\u3067\u3059\u3002\u5358\u8a9e\u306e\u5408\u7406\u7684\u306a\u8868\u73fe\u3092\u53d6\u5f97\u3067\u304d\u305a\u3001\u9014\u4e2d\u3067\u60c5\u5831\u3092\u5931\u3063\u3066\u3044\u308b\u304b\u3089\u3067\u3059\u3002\u8a9e\u5f59\u3092\u4f5c\u6210\u3059\u308b\u969b\u306e\u76ee\u6a19\u306f\u3001\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u304c\u3067\u304d\u308b\u3060\u3051\u5c11\u306a\u3044\u5358\u8a9e\u3092\u672a\u77e5\u30c8\u30fc\u30af\u30f3\u306b\u30c8\u30fc\u30af\u30f3\u5316\u3059\u308b\u3088\u3046\u306b\u884c\u3046\u3053\u3068\u3067\u3059\u3002</p> <p>\u672a\u77e5\u30c8\u30fc\u30af\u30f3\u306e\u91cf\u3092\u6e1b\u3089\u30591\u3064\u306e\u65b9\u6cd5\u306f\u3001\u3088\u308a\u6df1\u3044\u30ec\u30d9\u30eb\u306b\u884c\u304f\u3053\u3068\u3067\u3001_\u6587\u5b57\u30d9\u30fc\u30b9_\u306e\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3067\u3059\u3002</p>","tags":["transformer","huggingface","nlp","\u6a5f\u68b0\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","python","\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc","pipeline","\u5b9f\u8df5","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb"]},{"location":"LLM/02_using_transformers/#_19","title":"\u6587\u5b57\u30d9\u30fc\u30b9","text":"<p>\u6587\u5b57\u30d9\u30fc\u30b9\u306e\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306f\u3001\u5358\u8a9e\u3067\u306f\u306a\u304f\u6587\u5b57\u306b\u30c6\u30ad\u30b9\u30c8\u3092\u5206\u5272\u3057\u307e\u3059\u3002\u3053\u308c\u306b\u306f2\u3064\u306e\u4e3b\u306a\u5229\u70b9\u304c\u3042\u308a\u307e\u3059\uff1a</p> <ul> <li>\u8a9e\u5f59\u304c\u306f\u308b\u304b\u306b\u5c0f\u3055\u3044</li> <li>\u8a9e\u5f59\u5916\uff08\u672a\u77e5\uff09\u30c8\u30fc\u30af\u30f3\u304c\u306f\u308b\u304b\u306b\u5c11\u306a\u3044\u3002\u3059\u3079\u3066\u306e\u5358\u8a9e\u304c\u6587\u5b57\u304b\u3089\u69cb\u7bc9\u3067\u304d\u308b\u305f\u3081</li> </ul> <p>\u3057\u304b\u3057\u3001\u3053\u3053\u3067\u3082\u7a7a\u767d\u3068\u53e5\u8aad\u70b9\u306b\u95a2\u3059\u308b\u7591\u554f\u304c\u751f\u3058\u307e\u3059\uff1a</p> <p></p> <p>\u3053\u306e\u30a2\u30d7\u30ed\u30fc\u30c1\u3082\u5b8c\u74a7\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u8868\u73fe\u304c\u5358\u8a9e\u3067\u306f\u306a\u304f\u6587\u5b57\u306b\u57fa\u3065\u3044\u3066\u3044\u308b\u305f\u3081\u3001\u76f4\u611f\u7684\u306b\u306f\u3042\u307e\u308a\u610f\u5473\u304c\u306a\u3044\u3068\u4e3b\u5f35\u3067\u304d\u307e\u3059\u3002\u5404\u6587\u5b57\u306f\u5358\u72ec\u3067\u306f\u591a\u304f\u3092\u610f\u5473\u3057\u307e\u305b\u3093\u304c\u3001\u5358\u8a9e\u306e\u5834\u5408\u306f\u305d\u3046\u3067\u3059\u3002\u3057\u304b\u3057\u3001\u3053\u308c\u3082\u8a00\u8a9e\u306b\u3088\u3063\u3066\u7570\u306a\u308a\u307e\u3059\u3002\u305f\u3068\u3048\u3070\u4e2d\u56fd\u8a9e\u3067\u306f\u3001\u5404\u6587\u5b57\u306f\u30e9\u30c6\u30f3\u8a9e\u306e\u6587\u5b57\u3088\u308a\u3082\u591a\u304f\u306e\u60c5\u5831\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u3002</p> <p>\u8003\u616e\u3059\u3079\u304d\u3082\u30461\u3064\u306e\u3053\u3068\u306f\u3001\u30e2\u30c7\u30eb\u306b\u3088\u3063\u3066\u51e6\u7406\u3055\u308c\u308b\u975e\u5e38\u306b\u5927\u91cf\u306e\u30c8\u30fc\u30af\u30f3\u306b\u306a\u308b\u3053\u3068\u3067\u3059\u3002\u5358\u8a9e\u30d9\u30fc\u30b9\u306e\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3067\u306f\u5358\u8a9e\u304c\u5358\u4e00\u306e\u30c8\u30fc\u30af\u30f3\u306b\u306a\u308b\u306e\u306b\u5bfe\u3057\u3001\u6587\u5b57\u306b\u5909\u63db\u3059\u308b\u3068\u7c21\u5358\u306b10\u4ee5\u4e0a\u306e\u30c8\u30fc\u30af\u30f3\u306b\u306a\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002</p> <p>\u4e21\u65b9\u306e\u4e16\u754c\u306e\u6700\u826f\u3092\u5f97\u308b\u305f\u3081\u306b\u30012\u3064\u306e\u30a2\u30d7\u30ed\u30fc\u30c1\u3092\u7d44\u307f\u5408\u308f\u305b\u305f\u7b2c3\u306e\u6280\u8853\u3092\u4f7f\u7528\u3067\u304d\u307e\u3059\uff1a\u30b5\u30d6\u30ef\u30fc\u30c9\u30c8\u30fc\u30af\u30f3\u5316\u3002</p>","tags":["transformer","huggingface","nlp","\u6a5f\u68b0\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","python","\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc","pipeline","\u5b9f\u8df5","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb"]},{"location":"LLM/02_using_transformers/#_20","title":"\u30b5\u30d6\u30ef\u30fc\u30c9\u30c8\u30fc\u30af\u30f3\u5316","text":"<p>\u30b5\u30d6\u30ef\u30fc\u30c9\u30c8\u30fc\u30af\u30f3\u5316\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u3001\u983b\u7e41\u306b\u4f7f\u7528\u3055\u308c\u308b\u5358\u8a9e\u306f\u3088\u308a\u5c0f\u3055\u306a\u30b5\u30d6\u30ef\u30fc\u30c9\u306b\u5206\u5272\u3055\u308c\u308b\u3079\u304d\u3067\u306f\u306a\u3044\u304c\u3001\u7a00\u306a\u5358\u8a9e\u306f\u610f\u5473\u306e\u3042\u308b\u30b5\u30d6\u30ef\u30fc\u30c9\u306b\u5206\u89e3\u3055\u308c\u308b\u3079\u304d\u3067\u3042\u308b\u3068\u3044\u3046\u539f\u5247\u306b\u4f9d\u5b58\u3057\u3066\u3044\u307e\u3059\u3002</p> <p>\u305f\u3068\u3048\u3070\u3001\u300cannoyingly\u300d\u306f\u7a00\u306a\u5358\u8a9e\u3068\u898b\u306a\u3055\u308c\u3001\u300cannoying\u300d\u3068\u300cly\u300d\u306b\u5206\u89e3\u3055\u308c\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u3089\u306f\u4e21\u65b9\u3068\u3082\u3001\u3088\u308a\u983b\u7e41\u306b\u72ec\u7acb\u3057\u305f\u30b5\u30d6\u30ef\u30fc\u30c9\u3068\u3057\u3066\u73fe\u308c\u308b\u53ef\u80fd\u6027\u304c\u9ad8\u304f\u3001\u540c\u6642\u306b\u300cannoying\u300d\u3068\u300cly\u300d\u306e\u8907\u5408\u7684\u306a\u610f\u5473\u306b\u3088\u3063\u3066\u300cannoyingly\u300d\u306e\u610f\u5473\u304c\u4fdd\u6301\u3055\u308c\u307e\u3059\u3002</p> <p>\u30b5\u30d6\u30ef\u30fc\u30c9\u30c8\u30fc\u30af\u30f3\u5316\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u304c\u30b7\u30fc\u30b1\u30f3\u30b9\u300cLet's do tokenization!\u300d\u3092\u30c8\u30fc\u30af\u30f3\u5316\u3059\u308b\u65b9\u6cd5\u3092\u793a\u3059\u4f8b\u3067\u3059\uff1a</p> <p></p> <p>\u3053\u308c\u3089\u306e\u30b5\u30d6\u30ef\u30fc\u30c9\u306f\u591a\u304f\u306e\u610f\u5473\u7684\u610f\u5473\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002\u305f\u3068\u3048\u3070\u3001\u4e0a\u8a18\u306e\u4f8b\u3067\u306f\u300ctokenization\u300d\u304c\u300ctoken\u300d\u3068\u300cization\u300d\u306b\u5206\u5272\u3055\u308c\u3001\u30b9\u30da\u30fc\u30b9\u52b9\u7387\u304c\u826f\u3044\uff08\u9577\u3044\u5358\u8a9e\u3092\u8868\u3059\u306e\u306b2\u3064\u306e\u30c8\u30fc\u30af\u30f3\u306e\u307f\u304c\u5fc5\u8981\uff09\u306a\u304c\u3089\u610f\u5473\u7684\u610f\u5473\u3092\u6301\u30642\u3064\u306e\u30c8\u30fc\u30af\u30f3\u306b\u306a\u308a\u307e\u3057\u305f\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u5c0f\u3055\u306a\u8a9e\u5f59\u3067\u6bd4\u8f03\u7684\u826f\u597d\u306a\u30ab\u30d0\u30ec\u30c3\u30b8\u3092\u6301\u3061\u3001\u672a\u77e5\u30c8\u30fc\u30af\u30f3\u304c\u307b\u3068\u3093\u3069\u306a\u3044\u72b6\u614b\u3092\u5b9f\u73fe\u3067\u304d\u307e\u3059\u3002</p> <p>\u3053\u306e\u30a2\u30d7\u30ed\u30fc\u30c1\u306f\u3001\u30b5\u30d6\u30ef\u30fc\u30c9\u3092\u9023\u7d50\u3057\u3066\uff08\u307b\u307c\uff09\u4efb\u610f\u306b\u9577\u3044\u8907\u96d1\u306a\u5358\u8a9e\u3092\u5f62\u6210\u3067\u304d\u308b\u30c8\u30eb\u30b3\u8a9e\u306a\u3069\u306e\u81a0\u7740\u8a9e\u3067\u306f\u7279\u306b\u6709\u7528\u3067\u3059\u3002</p> <p>\u5f53\u7136\u306e\u3053\u3068\u306a\u304c\u3089\u3001\u4ed6\u306b\u3082\u591a\u304f\u306e\u6280\u8853\u304c\u3042\u308a\u307e\u3059\u3002\u3044\u304f\u3064\u304b\u6319\u3052\u308b\u3068\uff1a</p> <ul> <li>GPT-2\u3067\u4f7f\u7528\u3055\u308c\u308bByte-level BPE</li> <li>BERT\u3067\u4f7f\u7528\u3055\u308c\u308bWordPiece</li> <li>\u3044\u304f\u3064\u304b\u306e\u591a\u8a00\u8a9e\u30e2\u30c7\u30eb\u3067\u4f7f\u7528\u3055\u308c\u308bSentencePiece\u307e\u305f\u306fUnigram</li> </ul> <p>\u3053\u308c\u3067\u3001API\u3092\u958b\u59cb\u3059\u308b\u306e\u306b\u5341\u5206\u306a\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306e\u52d5\u4f5c\u306b\u95a2\u3059\u308b\u77e5\u8b58\u304c\u3042\u308b\u306f\u305a\u3067\u3059\u3002</p>","tags":["transformer","huggingface","nlp","\u6a5f\u68b0\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","python","\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc","pipeline","\u5b9f\u8df5","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb"]},{"location":"LLM/02_using_transformers/#_21","title":"\u8aad\u307f\u8fbc\u307f\u3068\u4fdd\u5b58","text":"<p>\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306e\u8aad\u307f\u8fbc\u307f\u3068\u4fdd\u5b58\u306f\u3001\u30e2\u30c7\u30eb\u3068\u540c\u3058\u304f\u3089\u3044\u7c21\u5358\u3067\u3059\u3002\u5b9f\u969b\u3001\u540c\u30582\u3064\u306e\u30e1\u30bd\u30c3\u30c9\uff08<code>from_pretrained()</code>\u3068<code>save_pretrained()</code>\uff09\u306b\u57fa\u3065\u3044\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u3089\u306e\u30e1\u30bd\u30c3\u30c9\u306f\u3001\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u304c\u4f7f\u7528\u3059\u308b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\uff08\u30e2\u30c7\u30eb\u306e\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306e\u3088\u3046\u306a\u3082\u306e\uff09\u3068\u305d\u306e\u8a9e\u5f59\uff08\u30e2\u30c7\u30eb\u306e\u91cd\u307f\u306e\u3088\u3046\u306a\u3082\u306e\uff09\u3092\u8aad\u307f\u8fbc\u307f\u307e\u305f\u306f\u4fdd\u5b58\u3057\u307e\u3059\u3002</p> <p>BERT\u3068\u540c\u3058\u30c1\u30a7\u30c3\u30af\u30dd\u30a4\u30f3\u30c8\u3067\u8a13\u7df4\u3055\u308c\u305fBERT\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306e\u8aad\u307f\u8fbc\u307f\u306f\u3001\u30e2\u30c7\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u3068\u540c\u3058\u65b9\u6cd5\u3067\u884c\u308f\u308c\u307e\u3059\u304c\u3001<code>BertTokenizer</code>\u30af\u30e9\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3059\uff1a</p> <pre><code>from transformers import BertTokenizer\n\ntokenizer = BertTokenizer.from_pretrained(\"bert-base-cased\")\n</code></pre> <p><code>AutoModel</code>\u3068\u540c\u69d8\u306b\u3001<code>AutoTokenizer</code>\u30af\u30e9\u30b9\u306f\u3001\u30c1\u30a7\u30c3\u30af\u30dd\u30a4\u30f3\u30c8\u540d\u306b\u57fa\u3065\u3044\u3066\u30e9\u30a4\u30d6\u30e9\u30ea\u5185\u306e\u9069\u5207\u306a\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u30af\u30e9\u30b9\u3092\u53d6\u5f97\u3057\u3001\u4efb\u610f\u306e\u30c1\u30a7\u30c3\u30af\u30dd\u30a4\u30f3\u30c8\u3067\u76f4\u63a5\u4f7f\u7528\u3067\u304d\u307e\u3059\uff1a</p> <pre><code>from transformers import AutoTokenizer\n\ntokenizer = AutoTokenizer.from_pretrained(\"bert-base-cased\")\n</code></pre> <p>\u524d\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u793a\u3057\u305f\u3088\u3046\u306b\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3092\u4f7f\u7528\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\uff1a</p> <pre><code>pprint(tokenizer(\"Using a Transformer network is simple\"))\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>{'attention_mask': [1, 1, 1, 1, 1, 1, 1, 1, 1],\n 'input_ids': [101, 7993, 170, 13809, 23763, 2443, 1110, 3014, 102],\n 'token_type_ids': [0, 0, 0, 0, 0, 0, 0, 0, 0]}\n</code></pre></p> <p>\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306e\u4fdd\u5b58\u306f\u3001\u30e2\u30c7\u30eb\u306e\u4fdd\u5b58\u3068\u540c\u3058\u3067\u3059\uff1a</p> <pre><code>tokenizer.save_pretrained(\"models\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>('models/tokenizer_config.json',\n 'models/special_tokens_map.json',\n 'models/vocab.txt',\n 'models/added_tokens.json',\n 'models/tokenizer.json')\n</code></pre></p> <p>\u307e\u305a\u3001<code>input_ids</code>\u304c\u3069\u306e\u3088\u3046\u306b\u751f\u6210\u3055\u308c\u308b\u304b\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u3053\u308c\u3092\u884c\u3046\u306b\u306f\u3001\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306e\u4e2d\u9593\u30e1\u30bd\u30c3\u30c9\u3092\u898b\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002</p>","tags":["transformer","huggingface","nlp","\u6a5f\u68b0\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","python","\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc","pipeline","\u5b9f\u8df5","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb"]},{"location":"LLM/02_using_transformers/#_22","title":"\u30a8\u30f3\u30b3\u30fc\u30c9","text":"<p>\u30c6\u30ad\u30b9\u30c8\u3092\u6570\u5024\u306b\u5909\u63db\u3059\u308b\u3053\u3068\u306f_\u30a8\u30f3\u30b3\u30fc\u30c9_\u3068\u3057\u3066\u77e5\u3089\u308c\u3066\u3044\u307e\u3059\u3002\u30a8\u30f3\u30b3\u30fc\u30c9\u306f2\u6bb5\u968e\u306e\u30d7\u30ed\u30bb\u30b9\u3067\u884c\u308f\u308c\u307e\u3059\uff1a\u30c8\u30fc\u30af\u30f3\u5316\u3001\u305d\u306e\u5f8c\u306e\u5165\u529bID\u3078\u306e\u5909\u63db\u3002</p> <p>\u898b\u3066\u304d\u305f\u3088\u3046\u306b\u3001\u6700\u521d\u306e\u30b9\u30c6\u30c3\u30d7\u306f\u30c6\u30ad\u30b9\u30c8\u3092\u5358\u8a9e\uff08\u307e\u305f\u306f\u5358\u8a9e\u306e\u4e00\u90e8\u3001\u53e5\u8aad\u70b9\u8a18\u53f7\u306a\u3069\uff09\u306b\u5206\u5272\u3059\u308b\u3053\u3068\u3067\u3001\u901a\u5e38\u30c8\u30fc\u30af\u30f3\u3068\u547c\u3070\u308c\u307e\u3059\u3002\u3053\u306e\u30d7\u30ed\u30bb\u30b9\u3092\u7ba1\u7406\u3067\u304d\u308b\u8907\u6570\u306e\u30eb\u30fc\u30eb\u304c\u3042\u308a\u3001\u305d\u306e\u305f\u3081\u30e2\u30c7\u30eb\u304c\u4e8b\u524d\u8a13\u7df4\u3055\u308c\u305f\u3068\u304d\u306b\u4f7f\u7528\u3055\u308c\u305f\u306e\u3068\u540c\u3058\u30eb\u30fc\u30eb\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308b\u305f\u3081\u306b\u3001\u30e2\u30c7\u30eb\u306e\u540d\u524d\u3092\u4f7f\u7528\u3057\u3066\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3092\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002</p> <p>2\u756a\u76ee\u306e\u30b9\u30c6\u30c3\u30d7\u306f\u3001\u3053\u308c\u3089\u306e\u30c8\u30fc\u30af\u30f3\u3092\u6570\u5024\u306b\u5909\u63db\u3059\u308b\u3053\u3068\u3067\u3001\u30c6\u30f3\u30bd\u30eb\u3092\u69cb\u7bc9\u3057\u3066\u30e2\u30c7\u30eb\u306b\u4f9b\u7d66\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u3092\u884c\u3046\u305f\u3081\u306b\u3001\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306b\u306f\u8a9e\u5f59\u304c\u3042\u308a\u3001\u3053\u308c\u306f<code>from_pretrained()</code>\u30e1\u30bd\u30c3\u30c9\u3067\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3059\u308b\u3068\u304d\u306b\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u90e8\u5206\u3067\u3059\u3002\u7e70\u308a\u8fd4\u3057\u307e\u3059\u304c\u3001\u30e2\u30c7\u30eb\u304c\u4e8b\u524d\u8a13\u7df4\u3055\u308c\u305f\u3068\u304d\u306b\u4f7f\u7528\u3055\u308c\u305f\u306e\u3068\u540c\u3058\u8a9e\u5f59\u3092\u4f7f\u7528\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002</p> <p>2\u3064\u306e\u30b9\u30c6\u30c3\u30d7\u3092\u3088\u308a\u826f\u304f\u7406\u89e3\u3059\u308b\u305f\u3081\u306b\u3001\u305d\u308c\u3089\u3092\u5225\u3005\u306b\u63a2\u7d22\u3057\u307e\u3059\u3002\u5b9f\u969b\u306b\u306f\u3001\u30c8\u30fc\u30af\u30f3\u306e\u5165\u529b\u3092\u76f4\u63a5\u547c\u3073\u51fa\u3059\u3079\u304d\u3067\u3059\u304c\u3001\u30c8\u30fc\u30af\u30f3\u5316\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306e\u4e00\u90e8\u3092\u500b\u5225\u306b\u5b9f\u884c\u3059\u308b\u3044\u304f\u3064\u304b\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3057\u3066\u3001\u3053\u308c\u3089\u306e\u30b9\u30c6\u30c3\u30d7\u306e\u4e2d\u9593\u7d50\u679c\u3092\u793a\u3057\u307e\u3059\u3002</p>","tags":["transformer","huggingface","nlp","\u6a5f\u68b0\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","python","\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc","pipeline","\u5b9f\u8df5","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb"]},{"location":"LLM/02_using_transformers/#_23","title":"\u30c8\u30fc\u30af\u30f3\u5316","text":"<p>\u30c8\u30fc\u30af\u30f3\u5316\u30d7\u30ed\u30bb\u30b9\u306f\u3001\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306e<code>tokenize()</code>\u30e1\u30bd\u30c3\u30c9\u306b\u3088\u3063\u3066\u884c\u308f\u308c\u307e\u3059\uff1a</p> <pre><code>from transformers import AutoTokenizer\n\ntokenizer = AutoTokenizer.from_pretrained(\"bert-base-cased\")\n\nsequence = \"Using a Transformer network is simple\"\n\ntokens = tokenizer.tokenize(sequence)\npprint(tokens)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>['Using', 'a', 'Trans', '##former', 'network', 'is', 'simple']\n</code></pre></p> <p>\u3053\u306e\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306f\u30b5\u30d6\u30ef\u30fc\u30c9\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3067\u3059\uff1a\u8a9e\u5f59\u3067\u8868\u73fe\u3067\u304d\u308b\u30c8\u30fc\u30af\u30f3\u3092\u53d6\u5f97\u3059\u308b\u307e\u3067\u5358\u8a9e\u3092\u5206\u5272\u3057\u307e\u3059\u3002\u3053\u3053\u3067\u306f<code>transformer</code>\u306e\u5834\u5408\u304c\u305d\u3046\u3067\u30012\u3064\u306e\u30c8\u30fc\u30af\u30f3\uff08<code>Trans</code>\u3068<code>##former</code>\uff09\u306b\u5206\u5272\u3055\u308c\u3066\u3044\u307e\u3059\u3002</p>","tags":["transformer","huggingface","nlp","\u6a5f\u68b0\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","python","\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc","pipeline","\u5b9f\u8df5","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb"]},{"location":"LLM/02_using_transformers/#id","title":"\u30c8\u30fc\u30af\u30f3\u304b\u3089\u5165\u529bID\u3078","text":"<p>\u5165\u529bID\u3078\u306e\u5909\u63db\u306f\u3001\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306e<code>convert_tokens_to_ids()</code>\u30e1\u30bd\u30c3\u30c9\u306b\u3088\u3063\u3066\u51e6\u7406\u3055\u308c\u307e\u3059\uff1a</p> <pre><code>ids = tokenizer.convert_tokens_to_ids(tokens)\npprint(ids)\n\ntokens = tokenizer.convert_ids_to_tokens(ids)\npprint(tokens)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>[7993, 170, 13809, 23763, 2443, 1110, 3014]\n['Using', 'a', 'Trans', '##former', 'network', 'is', 'simple']\n</code></pre></p>","tags":["transformer","huggingface","nlp","\u6a5f\u68b0\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","python","\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc","pipeline","\u5b9f\u8df5","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb"]},{"location":"LLM/02_using_transformers/#_24","title":"\u30c7\u30b3\u30fc\u30c9","text":"<p>\u30c7\u30b3\u30fc\u30c9\u306f\u9006\u65b9\u5411\u306b\u884c\u304d\u307e\u3059\uff1a\u8a9e\u5f59\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304b\u3089\u6587\u5b57\u5217\u3092\u53d6\u5f97\u3057\u305f\u3044\u306e\u3067\u3059\u3002\u3053\u308c\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b<code>decode()</code>\u30e1\u30bd\u30c3\u30c9\u3067\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a</p> <pre><code>decoded_string = tokenizer.decode(ids)\npprint(decoded_string)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>'Using a Transformer network is simple'\n</code></pre></p> <p><code>decode</code>\u30e1\u30bd\u30c3\u30c9\u306f\u3001\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u30c8\u30fc\u30af\u30f3\u306b\u623b\u3059\u3060\u3051\u3067\u306a\u304f\u3001\u540c\u3058\u5358\u8a9e\u306e\u4e00\u90e8\u3060\u3063\u305f\u30c8\u30fc\u30af\u30f3\u3092\u30b0\u30eb\u30fc\u30d7\u5316\u3057\u3066\u8aad\u307f\u3084\u3059\u3044\u6587\u3092\u751f\u6210\u3059\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u3053\u306e\u52d5\u4f5c\u306f\u3001\u65b0\u3057\u3044\u30c6\u30ad\u30b9\u30c8\u3092\u4e88\u6e2c\u3059\u308b\u30e2\u30c7\u30eb\uff08\u30d7\u30ed\u30f3\u30d7\u30c8\u304b\u3089\u751f\u6210\u3055\u308c\u305f\u30c6\u30ad\u30b9\u30c8\u3001\u307e\u305f\u306f\u7ffb\u8a33\u3084\u8981\u7d04\u306a\u3069\u306e\u30b7\u30fc\u30b1\u30f3\u30b9\u9593\u306e\u554f\u984c\uff09\u3092\u4f7f\u7528\u3059\u308b\u3068\u304d\u306b\u975e\u5e38\u306b\u6709\u7528\u3067\u3059\u3002</p> <p>\u3053\u308c\u3067\u3001\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u304c\u51e6\u7406\u3067\u304d\u308b\u539f\u5b50\u64cd\u4f5c\uff08\u30c8\u30fc\u30af\u30f3\u5316\u3001ID\u3078\u306e\u5909\u63db\u3001ID\u304b\u3089\u6587\u5b57\u5217\u3078\u306e\u5909\u63db\uff09\u3092\u7406\u89e3\u3067\u304d\u305f\u306f\u305a\u3067\u3059\u3002\u3057\u304b\u3057\u3001\u6c37\u5c71\u306e\u4e00\u89d2\u3092\u304b\u3058\u3063\u305f\u3060\u3051\u3067\u3059\u3002\u6b21\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u306f\u3001\u30a2\u30d7\u30ed\u30fc\u30c1\u3092\u9650\u754c\u307e\u3067\u6301\u3063\u3066\u3044\u304d\u3001\u305d\u308c\u3089\u3092\u514b\u670d\u3059\u308b\u65b9\u6cd5\u3092\u898b\u3066\u3044\u304d\u307e\u3059\u3002</p>","tags":["transformer","huggingface","nlp","\u6a5f\u68b0\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","python","\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc","pipeline","\u5b9f\u8df5","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb"]},{"location":"LLM/02_using_transformers/#_25","title":"\u8907\u6570\u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u51e6\u7406","text":"<p>\u524d\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u306f\u3001\u6700\u3082\u30b7\u30f3\u30d7\u30eb\u306a\u4f7f\u7528\u4f8b\uff08\u5c0f\u3055\u306a\u9577\u3055\u306e\u5358\u4e00\u30b7\u30fc\u30b1\u30f3\u30b9\u3067\u63a8\u8ad6\u3092\u884c\u3046\uff09\u3092\u63a2\u7d22\u3057\u307e\u3057\u305f\u3002\u3057\u304b\u3057\u3001\u3059\u3067\u306b\u3044\u304f\u3064\u304b\u306e\u7591\u554f\u304c\u6d6e\u304b\u3093\u3067\u3044\u307e\u3059\uff1a</p> <ul> <li>\u8907\u6570\u306e\u30b7\u30fc\u30b1\u30f3\u30b9\u3092\u3069\u306e\u3088\u3046\u306b\u51e6\u7406\u3059\u308b\u304b\uff1f</li> <li>\u7570\u306a\u308b\u9577\u3055\u306e\u8907\u6570\u306e\u30b7\u30fc\u30b1\u30f3\u30b9\u3092\u3069\u306e\u3088\u3046\u306b\u51e6\u7406\u3059\u308b\u304b\uff1f</li> <li>\u8a9e\u5f59\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306f\u30e2\u30c7\u30eb\u304c\u3046\u307e\u304f\u52d5\u4f5c\u3067\u304d\u308b\u552f\u4e00\u306e\u5165\u529b\u304b\uff1f</li> <li>\u9577\u3059\u304e\u308b\u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u3088\u3046\u306a\u3082\u306e\u306f\u3042\u308b\u304b\uff1f</li> </ul> <p>\u3053\u308c\u3089\u306e\u7591\u554f\u304c\u3069\u306e\u3088\u3046\u306a\u554f\u984c\u3092\u5f15\u304d\u8d77\u3053\u3059\u304b\u3092\u898b\u3066\u3001Transformers API\u3092\u4f7f\u7528\u3057\u3066\u305d\u308c\u3089\u3092\u3069\u306e\u3088\u3046\u306b\u89e3\u6c7a\u3067\u304d\u308b\u304b\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002</p>","tags":["transformer","huggingface","nlp","\u6a5f\u68b0\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","python","\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc","pipeline","\u5b9f\u8df5","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb"]},{"location":"LLM/02_using_transformers/#_26","title":"\u30e2\u30c7\u30eb\u306f\u5165\u529b\u306e\u30d0\u30c3\u30c1\u3092\u671f\u5f85\u3059\u308b","text":"<p>\u524d\u306e\u6f14\u7fd2\u3067\u306f\u3001\u30b7\u30fc\u30b1\u30f3\u30b9\u304c\u6570\u5024\u306e\u30ea\u30b9\u30c8\u306b\u3069\u306e\u3088\u3046\u306b\u5909\u63db\u3055\u308c\u308b\u304b\u3092\u898b\u307e\u3057\u305f\u3002\u3053\u306e\u6570\u5024\u306e\u30ea\u30b9\u30c8\u3092\u30c6\u30f3\u30bd\u30eb\u306b\u5909\u63db\u3057\u3066\u3001\u30e2\u30c7\u30eb\u306b\u9001\u4fe1\u3057\u307e\u3057\u3087\u3046\uff1a</p> <pre><code>import torch\n\nfrom transformers import AutoTokenizer, AutoModelForSequenceClassification\n\ncheckpoint = \"distilbert-base-uncased-finetuned-sst-2-english\"\ntokenizer = AutoTokenizer.from_pretrained(checkpoint)\nmodel = AutoModelForSequenceClassification.from_pretrained(checkpoint)\n\nsequence = \"I've been waiting for a Huggingface course my whole life.\"\n\ntokens = tokenizer.tokenize(sequence)\nids = tokenizer.convert_tokens_to_ids(tokens)\ninput_ids = torch.tensor(ids)\n\n# \u3053\u306e\u884c\u306f\u5931\u6557\u3057\u307e\u3059\nmodel(input_ids)\n</code></pre> <p>\u554f\u984c\u306f\u3001\u30e2\u30c7\u30eb\u306b\u5358\u4e00\u306e\u30b7\u30fc\u30b1\u30f3\u30b9\u3092\u9001\u4fe1\u3057\u305f\u3053\u3068\u3067\u3059\u304c\u3001Transformers\u30e2\u30c7\u30eb\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u8907\u6570\u306e\u6587\u3092\u671f\u5f85\u3059\u308b\u3053\u3068\u3067\u3059\u3002\u3053\u3053\u3067\u3001\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3092<code>sequence</code>\u306b\u9069\u7528\u3057\u305f\u3068\u304d\u306b\u88cf\u3067\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u304c\u884c\u3063\u305f\u3059\u3079\u3066\u3092\u5b9f\u884c\u3057\u3088\u3046\u3068\u3057\u307e\u3057\u305f\u3002\u3057\u304b\u3057\u3001\u3088\u304f\u898b\u308b\u3068\u3001\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306f\u5165\u529bID\u306e\u30ea\u30b9\u30c8\u3092\u30c6\u30f3\u30bd\u30eb\u306b\u5909\u63db\u3057\u305f\u3060\u3051\u3067\u306a\u304f\u3001\u305d\u306e\u4e0a\u306b\u6b21\u5143\u3092\u8ffd\u52a0\u3057\u305f\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\uff1a</p> <pre><code>tokenized_inputs = tokenizer(sequence, return_tensors=\"pt\")\nprint(tokenized_inputs[\"input_ids\"])\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>tensor([[  101,  1045,  1005,  2310,  2042,  3403,  2005,  1037, 17662, 12172,\n          2607,  2026,  2878,  2166,  1012,   102]])\n</code></pre></p> <p>\u518d\u8a66\u884c\u3057\u3066\u3001\u65b0\u3057\u3044\u6b21\u5143\u3092\u8ffd\u52a0\u3057\u307e\u3057\u3087\u3046\uff1a</p> <pre><code>import torch\nfrom transformers import AutoTokenizer, AutoModelForSequenceClassification\n\ncheckpoint = \"distilbert-base-uncased-finetuned-sst-2-english\"\ntokenizer = AutoTokenizer.from_pretrained(checkpoint)\nmodel = AutoModelForSequenceClassification.from_pretrained(checkpoint)\n\nsequence = \"I've been waiting for a HuggingFace course my whole life.\"\n\ntokens = tokenizer.tokenize(sequence)\nids = tokenizer.convert_tokens_to_ids(tokens)\n\ninput_ids = torch.tensor([ids])\nprint(\"Input IDs:\", input_ids)\n\noutput = model(input_ids)\nprint(\"Logits:\", output.logits)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>Input IDs: tensor([[ 1045,  1005,  2310,  2042,  3403,  2005,  1037, 17662, 12172,  2607,\n          2026,  2878,  2166,  1012]])\nLogits: tensor([[-2.7276,  2.8789]], grad_fn=&lt;AddmmBackward0&gt;)\n</code></pre></p> <p>\u30d0\u30c3\u30c1\u30f3\u30b0\u306f\u3001\u8907\u6570\u306e\u6587\u3092\u4e00\u5ea6\u306b\u30e2\u30c7\u30eb\u306b\u9001\u4fe1\u3059\u308b\u884c\u70ba\u3067\u3059\u3002\u6587\u304c1\u3064\u3057\u304b\u306a\u3044\u5834\u5408\u306f\u3001\u5358\u4e00\u306e\u30b7\u30fc\u30b1\u30f3\u30b9\u3067\u30d0\u30c3\u30c1\u3092\u69cb\u7bc9\u3059\u308b\u3060\u3051\u3067\u3059\uff1a</p> <pre><code>batched_ids = [ids, ids]\nbatched_input_ids = torch.tensor(batched_ids)\noutput = model(batched_input_ids)\nprint(\"Logits:\", output.logits)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>Logits: tensor([[-2.7276,  2.8789],\n        [-2.7276,  2.8789]], grad_fn=&lt;AddmmBackward0&gt;)\n</code></pre></p> <p>\u30d0\u30c3\u30c1\u30f3\u30b0\u306b\u3088\u308a\u3001\u8907\u6570\u306e\u6587\u66f8\u3092\u30e2\u30c7\u30eb\u306b\u4f9b\u7d66\u3059\u308b\u3068\u304d\u306b\u30e2\u30c7\u30eb\u304c\u6a5f\u80fd\u3057\u307e\u3059\u3002\u8907\u6570\u306e\u30b7\u30fc\u30b1\u30f3\u30b9\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u306f\u3001\u5358\u4e00\u306e\u30b7\u30fc\u30b1\u30f3\u30b9\u3067\u30d0\u30c3\u30c1\u3092\u69cb\u7bc9\u3059\u308b\u306e\u3068\u540c\u3058\u304f\u3089\u3044\u7c21\u5358\u3067\u3059\u3002\u3057\u304b\u3057\u30012\u756a\u76ee\u306e\u554f\u984c\u304c\u3042\u308a\u307e\u3059\u30022\u3064\uff08\u307e\u305f\u306f\u305d\u308c\u4ee5\u4e0a\uff09\u306e\u6587\u66f8\u3092\u4e00\u7dd2\u306b\u30d0\u30c3\u30c1\u5316\u3057\u3088\u3046\u3068\u3059\u308b\u3068\u304d\u3001\u305d\u308c\u3089\u306f\u7570\u306a\u308b\u9577\u3055\u306e\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002\u4ee5\u524d\u306b\u30c6\u30f3\u30bd\u30eb\u3092\u6271\u3063\u305f\u3053\u3068\u304c\u3042\u308b\u5834\u5408\u3001\u30c6\u30f3\u30bd\u30eb\u306f\u9577\u65b9\u5f62\u306e\u5f62\u72b6\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308b\u3053\u3068\u3092\u77e5\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u5165\u529bID\u306e\u30ea\u30b9\u30c8\u3092\u76f4\u63a5\u30c6\u30f3\u30bd\u30eb\u306b\u5909\u63db\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002\u3053\u306e\u554f\u984c\u3092\u56de\u907f\u3059\u308b\u305f\u3081\u306b\u3001\u901a\u5e38\u5165\u529b\u3092\u30d1\u30c3\u30c9\u3057\u307e\u3059\u3002</p>","tags":["transformer","huggingface","nlp","\u6a5f\u68b0\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","python","\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc","pipeline","\u5b9f\u8df5","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb"]},{"location":"LLM/02_using_transformers/#_27","title":"\u5165\u529b\u306e\u30d1\u30c7\u30a3\u30f3\u30b0","text":"<p>\u4ee5\u4e0b\u306e\u30ea\u30b9\u30c8\u306e\u30ea\u30b9\u30c8\u306f\u30c6\u30f3\u30bd\u30eb\u306b\u5909\u63db\u3067\u304d\u307e\u305b\u3093\uff1a</p> <pre><code>batched_ids = [\n    [200, 200, 200],\n    [200, 200]\n]\n</code></pre> <p>\u3053\u308c\u3092\u56de\u907f\u3059\u308b\u305f\u3081\u306b\u3001\u30d1\u30c7\u30a3\u30f3\u30b0\u3092\u4f7f\u7528\u3057\u3066\u30c6\u30f3\u30bd\u30eb\u3092\u9577\u65b9\u5f62\u306b\u3057\u307e\u3059\u3002\u30d1\u30c7\u30a3\u30f3\u30b0\u306f\u3001\u5024\u304c\u5c11\u306a\u3044\u6587\u306b\u30d1\u30c7\u30a3\u30f3\u30b0\u30c8\u30fc\u30af\u30f3\u3068\u547c\u3070\u308c\u308b\u7279\u5225\u306a\u5358\u8a9e\u3092\u8ffd\u52a0\u3059\u308b\u3053\u3068\u3067\u3001\u3059\u3079\u3066\u306e\u6587\u304c\u540c\u3058\u9577\u3055\u306b\u306a\u308b\u3053\u3068\u3092\u78ba\u5b9f\u306b\u3057\u307e\u3059\u3002\u305f\u3068\u3048\u3070\u300110\u8a9e\u306e10\u6587\u306820\u8a9e\u306e1\u6587\u304c\u3042\u308b\u5834\u5408\u3001\u30d1\u30c7\u30a3\u30f3\u30b0\u306b\u3088\u308a\u3001\u3059\u3079\u3066\u306e\u6587\u304c20\u8a9e\u306b\u306a\u308a\u307e\u3059\u3002\u79c1\u305f\u3061\u306e\u4f8b\u3067\u306f\u3001\u7d50\u679c\u306e\u30c6\u30f3\u30bd\u30eb\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff1a</p> <pre><code>padding_id = 100\n\nbatched_ids = [\n    [200, 200, 200],\n    [200, 200, padding_id],\n]\n</code></pre> <p>\u30d1\u30c7\u30a3\u30f3\u30b0\u30c8\u30fc\u30af\u30f3ID\u306f<code>tokenizer.pad_token_id</code>\u3067\u898b\u3064\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u305d\u308c\u3092\u4f7f\u7528\u3057\u3066\u30012\u3064\u306e\u6587\u3092\u500b\u5225\u306b\u30e2\u30c7\u30eb\u306b\u9001\u4fe1\u3057\u3001\u4e00\u7dd2\u306b\u30d0\u30c3\u30c1\u5316\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff1a</p> <pre><code>model = AutoModelForSequenceClassification.from_pretrained(checkpoint)\n\nsequence1_ids = [[200,200,200]]\nsequence2_ids = [[200,200]]\nbatched_ids = [\n    [200, 200, 200],\n    [200, 200, tokenizer.pad_token_id],\n]\n\nprint(model(torch.tensor(sequence1_ids)).logits)\nprint(model(torch.tensor(sequence2_ids)).logits)\nprint(model(torch.tensor(batched_ids)).logits)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>tensor([[ 1.5694, -1.3895]], grad_fn=&lt;AddmmBackward0&gt;)\ntensor([[ 0.5803, -0.4125]], grad_fn=&lt;AddmmBackward0&gt;)\ntensor([[ 1.5694, -1.3895],\n        [ 1.3374, -1.2163]], grad_fn=&lt;AddmmBackward0&gt;)\n</code></pre></p> <p>\u30d0\u30c3\u30c1\u4e88\u6e2c\u306elogits\u306b\u4f55\u304b\u554f\u984c\u304c\u3042\u308a\u307e\u3059\uff1a2\u884c\u76ee\u306f2\u756a\u76ee\u306e\u6587\u306elogits\u3068\u540c\u3058\u3067\u3042\u308b\u3079\u304d\u3067\u3059\u304c\u3001\u5b8c\u5168\u306b\u7570\u306a\u308b\u5024\u3092\u5f97\u3066\u3044\u307e\u3059\uff01</p> <p>\u3053\u308c\u306f\u3001Transformer\u30e2\u30c7\u30eb\u306e\u4e3b\u8981\u306a\u7279\u5fb4\u304c\u3001\u5404\u30c8\u30fc\u30af\u30f3\u3092\u6587\u8108\u5316\u3059\u308b\u6ce8\u610f\u30ec\u30a4\u30e4\u30fc\u3067\u3042\u308b\u305f\u3081\u3067\u3059\u3002\u3053\u308c\u3089\u306f\u3001\u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u3059\u3079\u3066\u306e\u30c8\u30fc\u30af\u30f3\u306b\u6ce8\u610f\u3092\u6255\u3046\u305f\u3081\u3001\u30d1\u30c7\u30a3\u30f3\u30b0\u30c8\u30fc\u30af\u30f3\u3092\u8003\u616e\u306b\u5165\u308c\u307e\u3059\u3002\u7570\u306a\u308b\u9577\u3055\u306e\u500b\u5225\u306e\u6587\u3092\u30e2\u30c7\u30eb\u306b\u901a\u3059\u3068\u304d\u3084\u3001\u540c\u3058\u6587\u3068\u30d1\u30c7\u30a3\u30f3\u30b0\u304c\u9069\u7528\u3055\u308c\u305f\u30d0\u30c3\u30c1\u3092\u901a\u3059\u3068\u304d\u306b\u540c\u3058\u7d50\u679c\u3092\u5f97\u308b\u306b\u306f\u3001\u3053\u308c\u3089\u306e\u6ce8\u610f\u30ec\u30a4\u30e4\u30fc\u306b\u30d1\u30c7\u30a3\u30f3\u30b0\u30c8\u30fc\u30af\u30f3\u3092\u7121\u8996\u3059\u308b\u3088\u3046\u4f1d\u3048\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u306f<code>attention mask</code>\u3092\u4f7f\u7528\u3057\u3066\u884c\u308f\u308c\u307e\u3059\u3002</p>","tags":["transformer","huggingface","nlp","\u6a5f\u68b0\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","python","\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc","pipeline","\u5b9f\u8df5","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb"]},{"location":"LLM/02_using_transformers/#attention-mask","title":"<code>attention mask</code>","text":"<p><code>attention mask</code>\u306f\u3001\u5165\u529bID\u30c6\u30f3\u30bd\u30eb\u3068\u307e\u3063\u305f\u304f\u540c\u3058\u5f62\u72b6\u306e\u30c6\u30f3\u30bd\u30eb\u3067\u30010\u30681\u3067\u57cb\u3081\u3089\u308c\u3066\u3044\u307e\u3059\uff1a1\u306f\u5bfe\u5fdc\u3059\u308b\u30c8\u30fc\u30af\u30f3\u306b\u6ce8\u610f\u3092\u6255\u3046\u3079\u304d\u3067\u3042\u308b\u3053\u3068\u3092\u793a\u3057\u30010\u306f\u5bfe\u5fdc\u3059\u308b\u30c8\u30fc\u30af\u30f3\u306b\u6ce8\u610f\u3092\u6255\u3046\u3079\u304d\u3067\u306a\u3044\uff08\u3064\u307e\u308a\u3001\u30e2\u30c7\u30eb\u306e\u6ce8\u610f\u30ec\u30a4\u30e4\u30fc\u306b\u3088\u3063\u3066\u7121\u8996\u3055\u308c\u308b\u3079\u304d\uff09\u3053\u3068\u3092\u793a\u3057\u307e\u3059\u3002</p> <p><code>attention mask</code>\u3067\u524d\u306e\u4f8b\u3092\u5b8c\u6210\u3055\u305b\u307e\u3057\u3087\u3046\uff1a</p> <pre><code>batched_ids = [\n    [200, 200, 200],\n    [200, 200, tokenizer.pad_token_id],\n]\n\nattention_mask = [\n    [1, 1, 1],\n    [1, 1, 0],\n]\n\noutputs = model(torch.tensor(batched_ids), attention_mask=torch.tensor(attention_mask))\nprint(outputs.logits)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>tensor([[ 1.5694, -1.3895],\n        [ 0.5803, -0.4125]], grad_fn=&lt;AddmmBackward0&gt;)\n</code></pre></p> <p>\u3053\u308c\u3067\u3001\u30d0\u30c3\u30c1\u306e2\u756a\u76ee\u306e\u6587\u306b\u5bfe\u3057\u3066\u540c\u3058logits\u3092\u5f97\u307e\u3057\u305f\u3002</p> <p>2\u756a\u76ee\u306e\u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u6700\u5f8c\u306e\u5024\u304c\u30d1\u30c7\u30a3\u30f3\u30b0ID\u3067\u3042\u308a\u3001<code>attention mask</code>\u3067\u306f0\u5024\u3067\u3042\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <p>\u8a66\u3057\u3066\u307f\u3088\u3046\uff01</p> <p>\u30bb\u30af\u30b7\u30e7\u30f32\u3067\u4f7f\u7528\u3057\u305f2\u3064\u306e\u6587\uff08\u300cI've been waiting for a HuggingFace course my whole life.\u300d\u3068\u300cI hate this so much!\u300d\uff09\u306b\u30c8\u30fc\u30af\u30f3\u5316\u3092\u624b\u52d5\u3067\u9069\u7528\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u305d\u308c\u3089\u3092\u30e2\u30c7\u30eb\u306b\u901a\u3057\u3001\u30bb\u30af\u30b7\u30e7\u30f32\u3068\u540c\u3058logits\u3092\u5f97\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u6b21\u306b\u3001\u30d1\u30c7\u30a3\u30f3\u30b0\u30c8\u30fc\u30af\u30f3\u3092\u4f7f\u7528\u3057\u3066\u305d\u308c\u3089\u3092\u4e00\u7dd2\u306b\u30d0\u30c3\u30c1\u5316\u3057\u3001\u9069\u5207\u306a<code>attention mask</code>\u3092\u4f5c\u6210\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u30e2\u30c7\u30eb\u3092\u901a\u3059\u3068\u304d\u306b\u540c\u3058\u7d50\u679c\u3092\u5f97\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044\uff01</p> <pre><code>import torch\nfrom transformers import AutoTokenizer, AutoModelForSequenceClassification\n\ncheckpoint = \"distilbert-base-uncased-finetuned-sst-2-english\"\ntokenizer = AutoTokenizer.from_pretrained(checkpoint)\nmodel = AutoModelForSequenceClassification.from_pretrained(checkpoint)\n\nsequence1 = \"I've been waiting for a HuggingFace course my whole life.\"\nsequence2 = \"I hate this so much!\"\n\ntokens1 = tokenizer.tokenize(sequence1)\nids1 = tokenizer.convert_tokens_to_ids(tokens1)\n\ntokens2 = tokenizer.tokenize(sequence2)\nids2 = tokenizer.convert_tokens_to_ids(tokens2)\n\nmax_len = len(ids1)\npad_id = tokenizer.pad_token_id\n\nids2 = ids2 + [pad_id] * (max_len - len(ids2))\n\n# `attention mask`\nmask1 = [1] * len(ids1)\nmask2 = [1] * len(tokens2) + [0] * (max_len - len(tokens2))\nattention_mask = torch.tensor([mask1, mask2])\ninput_ids = torch.tensor([ids1, ids2])\n\nprint(model(torch.tensor([ids1])).logits)\nprint(model(torch.tensor([ids2[:len(tokens2)]])).logits)\n\noutput = model(input_ids, attention_mask=attention_mask)\nprint(\"Logits:\", output.logits)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>tensor([[-2.7276,  2.8789]], grad_fn=&lt;AddmmBackward0&gt;)\ntensor([[ 2.5423, -2.1265]], grad_fn=&lt;AddmmBackward0&gt;)\nLogits: tensor([[-2.7276,  2.8789],\n        [ 2.5423, -2.1265]], grad_fn=&lt;AddmmBackward0&gt;)\n</code></pre></p>","tags":["transformer","huggingface","nlp","\u6a5f\u68b0\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","python","\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc","pipeline","\u5b9f\u8df5","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb"]},{"location":"LLM/02_using_transformers/#_28","title":"\u3088\u308a\u9577\u3044\u30b7\u30fc\u30b1\u30f3\u30b9","text":"<p>Transformer\u30e2\u30c7\u30eb\u3067\u306f\u3001\u30e2\u30c7\u30eb\u306b\u6e21\u3059\u3053\u3068\u304c\u3067\u304d\u308b\u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u9577\u3055\u306b\u5236\u9650\u304c\u3042\u308a\u307e\u3059\u3002\u307b\u3068\u3093\u3069\u306e\u30e2\u30c7\u30eb\u306f\u6700\u5927512\u307e\u305f\u306f1024\u30c8\u30fc\u30af\u30f3\u306e\u30b7\u30fc\u30b1\u30f3\u30b9\u3092\u51e6\u7406\u3057\u3001\u3088\u308a\u9577\u3044\u30b7\u30fc\u30b1\u30f3\u30b9\u3092\u51e6\u7406\u3059\u308b\u3088\u3046\u6c42\u3081\u3089\u308c\u308b\u3068\u30af\u30e9\u30c3\u30b7\u30e5\u3057\u307e\u3059\u3002\u3053\u306e\u554f\u984c\u306b\u306f2\u3064\u306e\u89e3\u6c7a\u7b56\u304c\u3042\u308a\u307e\u3059\uff1a</p> <ul> <li>\u3088\u308a\u9577\u3044\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u308b\u30b7\u30fc\u30b1\u30f3\u30b9\u9577\u3092\u6301\u3064\u30e2\u30c7\u30eb\u3092\u4f7f\u7528\u3059\u308b</li> <li>\u30b7\u30fc\u30b1\u30f3\u30b9\u3092\u5207\u308a\u6368\u3066\u308b</li> </ul> <p>\u30e2\u30c7\u30eb\u306b\u306f\u7570\u306a\u308b\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u308b\u30b7\u30fc\u30b1\u30f3\u30b9\u9577\u304c\u3042\u308a\u3001\u4e00\u90e8\u306f\u975e\u5e38\u306b\u9577\u3044\u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u51e6\u7406\u306b\u7279\u5316\u3057\u3066\u3044\u307e\u3059\u3002Longformer\u306f\u4e00\u4f8b\u3067\u3001\u3082\u3046\u4e00\u3064\u306fLED\u3067\u3059\u3002\u975e\u5e38\u306b\u9577\u3044\u30b7\u30fc\u30b1\u30f3\u30b9\u3092\u5fc5\u8981\u3068\u3059\u308b\u30bf\u30b9\u30af\u306b\u53d6\u308a\u7d44\u3093\u3067\u3044\u308b\u5834\u5408\u306f\u3001\u3053\u308c\u3089\u306e\u30e2\u30c7\u30eb\u3092\u8abf\u3079\u308b\u3053\u3068\u3092\u304a\u52e7\u3081\u3057\u307e\u3059\u3002</p> <p>\u305d\u308c\u4ee5\u5916\u306e\u5834\u5408\u306f\u3001<code>max_sequence_length</code>\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6307\u5b9a\u3057\u3066\u30b7\u30fc\u30b1\u30f3\u30b9\u3092\u5207\u308a\u6368\u3066\u308b\u3053\u3068\u3092\u304a\u52e7\u3081\u3057\u307e\u3059\uff1a</p> <pre><code>sequence = sequence[:max_sequence_length]\n</code></pre>","tags":["transformer","huggingface","nlp","\u6a5f\u68b0\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","python","\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc","pipeline","\u5b9f\u8df5","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb"]},{"location":"LLM/02_using_transformers/#_29","title":"\u3059\u3079\u3066\u3092\u307e\u3068\u3081\u308b","text":"<p>\u6700\u5f8c\u306e\u3044\u304f\u3064\u304b\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u306f\u3001\u624b\u4f5c\u696d\u3067\u307b\u3068\u3093\u3069\u306e\u4f5c\u696d\u3092\u884c\u3046\u3088\u3046\u6700\u5584\u3092\u5c3d\u304f\u3057\u3066\u304d\u307e\u3057\u305f\u3002\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u304c\u3069\u306e\u3088\u3046\u306b\u52d5\u4f5c\u3059\u308b\u304b\u3092\u63a2\u7d22\u3057\u3001\u30c8\u30fc\u30af\u30f3\u5316\u3001\u5165\u529bID\u3078\u306e\u5909\u63db\u3001\u30d1\u30c7\u30a3\u30f3\u30b0\u3001\u5207\u308a\u6368\u3066\u3001<code>attention mask</code>\u306b\u3064\u3044\u3066\u898b\u3066\u304d\u307e\u3057\u305f\u3002</p> <p>\u3057\u304b\u3057\u3001\u30bb\u30af\u30b7\u30e7\u30f32\u3067\u898b\u305f\u3088\u3046\u306b\u3001Transformers API\u306f\u3001\u3053\u3053\u3067\u8a73\u3057\u304f\u898b\u3066\u3044\u304f\u9ad8\u30ec\u30d9\u30eb\u95a2\u6570\u3067\u3059\u3079\u3066\u3092\u51e6\u7406\u3067\u304d\u307e\u3059\u3002\u6587\u306b\u5bfe\u3057\u3066<code>tokenizer</code>\u3092\u76f4\u63a5\u547c\u3073\u51fa\u3059\u3068\u3001\u30e2\u30c7\u30eb\u306b\u6e21\u3059\u6e96\u5099\u304c\u3067\u304d\u305f\u5165\u529b\u304c\u8fd4\u3055\u308c\u307e\u3059\uff1a</p> <pre><code>from transformers import AutoTokenizer\n\ncheckpoint = \"distilbert-base-uncased-finetuned-sst-2-english\"\ntokenizer = AutoTokenizer.from_pretrained(checkpoint)\n\nsequence = \"I've been waiting for a HuggingFace course my whole life.\"\n\nmodel_inputs = tokenizer(sequence)\n</code></pre> <p>\u3053\u3053\u3067\u3001<code>model_inputs</code>\u5909\u6570\u306b\u306f\u3001\u30e2\u30c7\u30eb\u304c\u9069\u5207\u306b\u52d5\u4f5c\u3059\u308b\u305f\u3081\u306b\u5fc5\u8981\u306a\u3059\u3079\u3066\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002DistilBERT\u306e\u5834\u5408\u3001\u5165\u529bID\u3068<code>attention mask</code>\u304c\u542b\u307e\u308c\u307e\u3059\u3002\u8ffd\u52a0\u306e\u5165\u529b\u3092\u53d7\u3051\u5165\u308c\u308b\u4ed6\u306e\u30e2\u30c7\u30eb\u3067\u306f\u3001<code>tokenizer</code>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u3088\u3063\u3066\u305d\u308c\u3089\u3082\u51fa\u529b\u3055\u308c\u307e\u3059\u3002</p> <p>\u4ee5\u4e0b\u306e\u3044\u304f\u3064\u304b\u306e\u4f8b\u3067\u898b\u308b\u3088\u3046\u306b\u3001\u3053\u306e\u65b9\u6cd5\u306f\u975e\u5e38\u306b\u5f37\u529b\u3067\u3059\u3002\u307e\u305a\u3001\u5358\u4e00\u306e\u30b7\u30fc\u30b1\u30f3\u30b9\u3092\u30c8\u30fc\u30af\u30f3\u5316\u3067\u304d\u307e\u3059\uff1a</p> <pre><code>sequence = \"I've been waiting for a HuggingFace course my whole life.\"\n\nmodel_inputs = tokenizer(sequence)\n\npprint(model_inputs, compact=True)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>{'attention_mask': [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n 'input_ids': [101, 1045, 1005, 2310, 2042, 3403, 2005, 1037, 17662, 12172,\n               2607, 2026, 2878, 2166, 1012, 102]}\n</code></pre></p> <p>API\u306b\u5909\u66f4\u306a\u3057\u3067\u3001\u4e00\u5ea6\u306b\u8907\u6570\u306e\u30b7\u30fc\u30b1\u30f3\u30b9\u3082\u51e6\u7406\u3057\u307e\u3059\uff1a</p> <pre><code>sequences = [\"I've been waiting for a HuggingFace course my whole life.\", \"So have I!\"]\n\nmodel_inputs = tokenizer(sequences)\n\npprint(model_inputs, compact=True)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>{'attention_mask': [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n                    [1, 1, 1, 1, 1, 1]],\n 'input_ids': [[101, 1045, 1005, 2310, 2042, 3403, 2005, 1037, 17662, 12172,\n                2607, 2026, 2878, 2166, 1012, 102],\n               [101, 2061, 2031, 1045, 999, 102]]}\n</code></pre></p> <p>\u3044\u304f\u3064\u304b\u306e\u76ee\u7684\u306b\u5fdc\u3058\u3066\u30d1\u30c7\u30a3\u30f3\u30b0\u3067\u304d\u307e\u3059\uff1a</p> <pre><code># \u6700\u5927\u30b7\u30fc\u30b1\u30f3\u30b9\u9577\u307e\u3067\u30b7\u30fc\u30b1\u30f3\u30b9\u3092\u30d1\u30c7\u30a3\u30f3\u30b0\nmodel_inputs = tokenizer(sequences, padding=\"longest\")\npprint(model_inputs, compact=True)\n\n# \u30e2\u30c7\u30eb\u306e\u6700\u5927\u9577\u307e\u3067\u30b7\u30fc\u30b1\u30f3\u30b9\u3092\u30d1\u30c7\u30a3\u30f3\u30b0\n# \uff08BERT\u307e\u305f\u306fDistilBERT\u306e\u5834\u5408\u306f512\uff09\nmodel_inputs = tokenizer(sequences, padding=\"max_length\")\n# pprint(model_inputs, compact=True)\n\n# \u6307\u5b9a\u3055\u308c\u305f\u6700\u5927\u9577\u307e\u3067\u30b7\u30fc\u30b1\u30f3\u30b9\u3092\u30d1\u30c7\u30a3\u30f3\u30b0\nmodel_inputs = tokenizer(sequences, padding=\"max_length\", max_length=8)\npprint(model_inputs, compact=True)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>{'attention_mask': [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n                    [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],\n 'input_ids': [[101, 1045, 1005, 2310, 2042, 3403, 2005, 1037, 17662, 12172,\n                2607, 2026, 2878, 2166, 1012, 102],\n               [101, 2061, 2031, 1045, 999, 102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}\n{'attention_mask': [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n                    [1, 1, 1, 1, 1, 1, 0, 0]],\n 'input_ids': [[101, 1045, 1005, 2310, 2042, 3403, 2005, 1037, 17662, 12172,\n                2607, 2026, 2878, 2166, 1012, 102],\n               [101, 2061, 2031, 1045, 999, 102, 0, 0]]}\n</code></pre></p> <p>\u30b7\u30fc\u30b1\u30f3\u30b9\u3092\u5207\u308a\u6368\u3066\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\uff1a</p> <pre><code>sequences = [\"I've been waiting for a HuggingFace course my whole life.\", \"So have I!\"]\n\n# \u30e2\u30c7\u30eb\u306e\u6700\u5927\u9577\u3088\u308a\u9577\u3044\u30b7\u30fc\u30b1\u30f3\u30b9\u3092\u5207\u308a\u6368\u3066\n# \uff08BERT\u307e\u305f\u306fDistilBERT\u306e\u5834\u5408\u306f512\uff09\nmodel_inputs = tokenizer(sequences, truncation=True)\npprint(model_inputs, compact=True)\n\n# \u6307\u5b9a\u3055\u308c\u305f\u6700\u5927\u9577\u3088\u308a\u9577\u3044\u30b7\u30fc\u30b1\u30f3\u30b9\u3092\u5207\u308a\u6368\u3066\nmodel_inputs = tokenizer(sequences, max_length=8, truncation=True)\npprint(model_inputs, compact=True)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>{'attention_mask': [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n                    [1, 1, 1, 1, 1, 1]],\n 'input_ids': [[101, 1045, 1005, 2310, 2042, 3403, 2005, 1037, 17662, 12172,\n                2607, 2026, 2878, 2166, 1012, 102],\n               [101, 2061, 2031, 1045, 999, 102]]}\n{'attention_mask': [[1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1]],\n 'input_ids': [[101, 1045, 1005, 2310, 2042, 3403, 2005, 102],\n               [101, 2061, 2031, 1045, 999, 102]]}\n</code></pre></p> <p><code>tokenizer</code>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u3001\u7279\u5b9a\u306e\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u30c6\u30f3\u30bd\u30eb\u3078\u306e\u5909\u63db\u3092\u51e6\u7406\u3067\u304d\u3001\u305d\u306e\u5f8c\u30e2\u30c7\u30eb\u306b\u76f4\u63a5\u9001\u4fe1\u3067\u304d\u307e\u3059\u3002\u305f\u3068\u3048\u3070\u3001\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u3001\u7570\u306a\u308b\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u304b\u3089\u30c6\u30f3\u30bd\u30eb\u3092\u8fd4\u3059\u3088\u3046\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306b\u4fc3\u3057\u3066\u3044\u307e\u3059 \u2014 <code>\"pt\"</code>\u306fPyTorch\u30c6\u30f3\u30bd\u30eb\u3092\u8fd4\u3057\u3001<code>\"np\"</code>\u306fNumPy\u914d\u5217\u3092\u8fd4\u3057\u307e\u3059\uff1a</p> <pre><code>sequences = [\"I've been waiting for a HuggingFace course my whole life.\", \"So have I!\"]\n\n# PyTorch\u30c6\u30f3\u30bd\u30eb\u3092\u8fd4\u3059\nmodel_inputs = tokenizer(sequences, padding=True, return_tensors=\"pt\")\npprint(model_inputs, compact=True)\n\n# NumPy\u914d\u5217\u3092\u8fd4\u3059\nmodel_inputs = tokenizer(sequences, padding=True, return_tensors=\"np\")\npprint(model_inputs, compact=True)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>{'attention_mask': tensor([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n        [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]),\n 'input_ids': tensor([[  101,  1045,  1005,  2310,  2042,  3403,  2005,  1037, 17662, 12172,\n          2607,  2026,  2878,  2166,  1012,   102],\n        [  101,  2061,  2031,  1045,   999,   102,     0,     0,     0,     0,\n             0,     0,     0,     0,     0,     0]])}\n{'attention_mask': array([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n       [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]),\n 'input_ids': array([[  101,  1045,  1005,  2310,  2042,  3403,  2005,  1037, 17662,\n        12172,  2607,  2026,  2878,  2166,  1012,   102],\n       [  101,  2061,  2031,  1045,   999,   102,     0,     0,     0,\n            0,     0,     0,     0,     0,     0,     0]])}\n</code></pre></p>","tags":["transformer","huggingface","nlp","\u6a5f\u68b0\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","python","\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc","pipeline","\u5b9f\u8df5","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb"]},{"location":"LLM/02_using_transformers/#_30","title":"\u7279\u5225\u306a\u30c8\u30fc\u30af\u30f3","text":"<p>\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306b\u3088\u3063\u3066\u8fd4\u3055\u308c\u308b\u5165\u529bID\u3092\u898b\u308b\u3068\u3001\u4ee5\u524d\u306e\u3082\u306e\u3068\u306f\u5c11\u3057\u7570\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\uff1a</p> <pre><code>sequence = \"I've been waiting for a HuggingFace course my whole life.\"\n\nmodel_inputs = tokenizer(sequence)\nprint(model_inputs[\"input_ids\"])\n\ntokens = tokenizer.tokenize(sequence)\nids = tokenizer.convert_tokens_to_ids(tokens)\nprint(ids)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>[101, 1045, 1005, 2310, 2042, 3403, 2005, 1037, 17662, 12172, 2607, 2026, 2878, 2166, 1012, 102]\n[1045, 1005, 2310, 2042, 3403, 2005, 1037, 17662, 12172, 2607, 2026, 2878, 2166, 1012]\n</code></pre></p> <p>1\u3064\u306e\u30c8\u30fc\u30af\u30f3ID\u304c\u6700\u521d\u306b\u8ffd\u52a0\u3055\u308c\u30011\u3064\u304c\u6700\u5f8c\u306b\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002\u4e0a\u8a18\u306e2\u3064\u306eID\u30b7\u30fc\u30b1\u30f3\u30b9\u3092\u30c7\u30b3\u30fc\u30c9\u3057\u3066\u3001\u3053\u308c\u304c\u4f55\u306b\u3064\u3044\u3066\u304b\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\uff1a</p> <pre><code>print(tokenizer.decode(model_inputs[\"input_ids\"]))\nprint(tokenizer.decode(ids))\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>[CLS] i've been waiting for a huggingface course my whole life. [SEP]\ni've been waiting for a huggingface course my whole life.\n</code></pre></p> <p>\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306f\u3001\u6700\u521d\u306b\u7279\u5225\u306a\u5358\u8a9e<code>[CLS]</code>\u3092\u3001\u6700\u5f8c\u306b\u7279\u5225\u306a\u5358\u8a9e<code>[SEP]</code>\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f\u3002\u3053\u308c\u306f\u3001\u30e2\u30c7\u30eb\u304c\u305d\u308c\u3089\u3067\u4e8b\u524d\u8a13\u7df4\u3055\u308c\u305f\u305f\u3081\u3067\u3001\u63a8\u8ad6\u3067\u540c\u3058\u7d50\u679c\u3092\u5f97\u308b\u305f\u3081\u306b\u305d\u308c\u3089\u3082\u8ffd\u52a0\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u4e00\u90e8\u306e\u30e2\u30c7\u30eb\u306f\u7279\u5225\u306a\u5358\u8a9e\u3092\u8ffd\u52a0\u3057\u306a\u3044\u304b\u3001\u7570\u306a\u308b\u3082\u306e\u3092\u8ffd\u52a0\u3059\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u30e2\u30c7\u30eb\u306f\u6700\u521d\u306e\u307f\u3001\u307e\u305f\u306f\u6700\u5f8c\u306e\u307f\u306b\u3053\u308c\u3089\u306e\u7279\u5225\u306a\u5358\u8a9e\u3092\u8ffd\u52a0\u3059\u308b\u5834\u5408\u3082\u3042\u308a\u307e\u3059\u3002\u3044\u305a\u308c\u306e\u5834\u5408\u3082\u3001\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306f\u3069\u308c\u304c\u671f\u5f85\u3055\u308c\u3066\u3044\u308b\u304b\u3092\u77e5\u3063\u3066\u304a\u308a\u3001\u3053\u308c\u3092\u51e6\u7406\u3057\u3066\u304f\u308c\u307e\u3059\u3002</p>","tags":["transformer","huggingface","nlp","\u6a5f\u68b0\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","python","\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc","pipeline","\u5b9f\u8df5","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb"]},{"location":"LLM/02_using_transformers/#_31","title":"\u307e\u3068\u3081\uff1a\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u304b\u3089\u30e2\u30c7\u30eb\u307e\u3067","text":"<p>\u30c6\u30ad\u30b9\u30c8\u306b\u9069\u7528\u3055\u308c\u305f\u3068\u304d\u306b<code>tokenizer</code>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u4f7f\u7528\u3059\u308b\u3059\u3079\u3066\u306e\u500b\u5225\u30b9\u30c6\u30c3\u30d7\u3092\u898b\u3066\u304d\u305f\u306e\u3067\u3001\u8907\u6570\u306e\u30b7\u30fc\u30b1\u30f3\u30b9\uff08\u30d1\u30c7\u30a3\u30f3\u30b0\uff01\uff09\u3001\u975e\u5e38\u306b\u9577\u3044\u30b7\u30fc\u30b1\u30f3\u30b9\uff08\u5207\u308a\u6368\u3066\uff01\uff09\u3001\u304a\u3088\u3073\u8907\u6570\u306e\u30bf\u30a4\u30d7\u306e\u30c6\u30f3\u30bd\u30eb\u3092\u305d\u306e\u30e1\u30a4\u30f3API\u3067\u51e6\u7406\u3067\u304d\u308b\u65b9\u6cd5\u3092\u6700\u5f8c\u306b\u3082\u3046\u4e00\u5ea6\u898b\u3066\u307f\u307e\u3057\u3087\u3046\uff1a</p> <pre><code>import torch\nfrom transformers import AutoTokenizer, AutoModelForSequenceClassification\n\ncheckpoint = \"distilbert-base-uncased-finetuned-sst-2-english\"\ntokenizer = AutoTokenizer.from_pretrained(checkpoint)\nmodel = AutoModelForSequenceClassification.from_pretrained(checkpoint)\nsequences = [\"I've been waiting for a HuggingFace course my whole life.\", \"So have I!\"]\n\ntokens = tokenizer(sequences, padding=True, truncation=True, return_tensors=\"pt\")\npprint(tokens, compact=True)\n\noutput = model(**tokens)\npprint(output.logits)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>{'attention_mask': tensor([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n        [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]),\n 'input_ids': tensor([[  101,  1045,  1005,  2310,  2042,  3403,  2005,  1037, 17662, 12172,\n          2607,  2026,  2878,  2166,  1012,   102],\n        [  101,  2061,  2031,  1045,   999,   102,     0,     0,     0,     0,\n             0,     0,     0,     0,     0,     0]])}\ntensor([[-1.5607,  1.6123],\n        [-3.6183,  3.9137]], grad_fn=&lt;AddmmBackward0&gt;)\n</code></pre></p>","tags":["transformer","huggingface","nlp","\u6a5f\u68b0\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","python","\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc","pipeline","\u5b9f\u8df5","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb"]},{"location":"LLM/02_using_transformers/#_32","title":"\u307e\u3068\u3081","text":"<p>\u3053\u306e\u8a18\u4e8b\u3067\u306f\u3001Hugging Face Transformers\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u57fa\u672c\u7684\u306a\u4f7f\u7528\u65b9\u6cd5\u306b\u3064\u3044\u3066\u8a73\u3057\u304f\u5b66\u7fd2\u3057\u307e\u3057\u305f\u3002\u4e3b\u306a\u5b66\u7fd2\u30dd\u30a4\u30f3\u30c8\u3092\u632f\u308a\u8fd4\u3063\u3066\u307f\u307e\u3057\u3087\u3046\uff1a</p>","tags":["transformer","huggingface","nlp","\u6a5f\u68b0\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","python","\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc","pipeline","\u5b9f\u8df5","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb"]},{"location":"LLM/02_using_transformers/#_33","title":"\u5b66\u7fd2\u3057\u305f\u30dd\u30a4\u30f3\u30c8","text":"<ol> <li>pipeline\u306e\u4ed5\u7d44\u307f: \u524d\u51e6\u7406\uff08\u30c8\u30fc\u30af\u30f3\u5316\uff09\u2192 \u30e2\u30c7\u30eb\u51e6\u7406 \u2192 \u5f8c\u51e6\u7406\u306e3\u6bb5\u968e\u69cb\u6210</li> <li>\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306e\u5f79\u5272: \u30c6\u30ad\u30b9\u30c8\u3092\u6570\u5024\u306b\u5909\u63db\u3057\u3001\u30d1\u30c7\u30a3\u30f3\u30b0\u3084\u5207\u308a\u6368\u3066\u3092\u51e6\u7406</li> <li>\u30e2\u30c7\u30eb\u306e\u64cd\u4f5c: \u4e8b\u524d\u8a13\u7df4\u6e08\u307f\u30e2\u30c7\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u3001\u4fdd\u5b58\u3001\u63a8\u8ad6\u306e\u5b9f\u884c</li> <li>\u30d0\u30c3\u30c1\u51e6\u7406: \u8907\u6570\u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u52b9\u7387\u7684\u306a\u51e6\u7406\u3068<code>attention mask</code>\u306e\u91cd\u8981\u6027</li> <li>\u7d71\u4e00API: <code>tokenizer()</code>\u95a2\u6570\u306b\u3088\u308b\u9ad8\u30ec\u30d9\u30eb\u306a\u64cd\u4f5c\u306e\u7c21\u7565\u5316</li> </ol>","tags":["transformer","huggingface","nlp","\u6a5f\u68b0\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","python","\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc","pipeline","\u5b9f\u8df5","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb"]},{"location":"LLM/02_using_transformers/#_34","title":"\u53c2\u8003\u8cc7\u6599","text":"<ul> <li>Hugging Face Transformers \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8</li> <li>Model Hub - \u4e8b\u524d\u8a13\u7df4\u6e08\u307f\u30e2\u30c7\u30eb\u306e\u63a2\u7d22</li> <li>Datasets \u30e9\u30a4\u30d6\u30e9\u30ea - \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u51e6\u7406</li> <li>Tokenizers \u30e9\u30a4\u30d6\u30e9\u30ea - \u9ad8\u901f\u30c8\u30fc\u30af\u30f3\u5316</li> </ul>","tags":["transformer","huggingface","nlp","\u6a5f\u68b0\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","python","\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc","pipeline","\u5b9f\u8df5","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb"]},{"location":"LLM/03_fine_tuning_a_pretrained_model/","title":"\u4e8b\u524d\u8a13\u7df4\u6e08\u307f\u30e2\u30c7\u30eb\u306e\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","text":"","tags":["\u6a5f\u68b0\u5b66\u7fd2","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","Transformers","PyTorch","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406"]},{"location":"LLM/03_fine_tuning_a_pretrained_model/#_2","title":"\u6982\u8981","text":"<p>\u3053\u306e\u8a18\u4e8b\u3067\u306f\u3001Hugging Face Transformers\u30a8\u30b3\u30b7\u30b9\u30c6\u30e0\u3092\u4f7f\u7528\u3057\u3066\u4e8b\u524d\u8a13\u7df4\u6e08\u307f\u30e2\u30c7\u30eb\u3092\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u7fd2\u3057\u307e\u3059\u3002\u30e2\u30c0\u30f3\u306a\u6a5f\u68b0\u5b66\u7fd2\u306e\u6700\u826f\u5b9f\u8df5\u3092\u9069\u7528\u3057\u306a\u304c\u3089\u3001\u9ad8\u30ec\u30d9\u30eb\u306aTrainer API\u304b\u3089\u4f4e\u30ec\u30d9\u30eb\u306a\u30ab\u30b9\u30bf\u30e0\u8a13\u7df4\u30eb\u30fc\u30d7\u307e\u3067\u3092\u5305\u62ec\u7684\u306b\u89e3\u8aac\u3057\u307e\u3059\u3002</p> <p>\u53c2\u8003\u8cc7\u6599</p> <p>\u672c\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306f Hugging Face LLM Course \u3092\u53c2\u8003\u306b\u3001\u65e5\u672c\u8a9e\u3067\u5b66\u7fd2\u5185\u5bb9\u3092\u307e\u3068\u3081\u305f\u500b\u4eba\u7684\u306a\u5b66\u7fd2\u30ce\u30fc\u30c8\u3067\u3059\u3002\u8a73\u7d30\u306a\u5185\u5bb9\u3084\u6700\u65b0\u60c5\u5831\u306b\u3064\u3044\u3066\u306f\u3001\u539f\u6587\u3082\u4f75\u305b\u3066\u3054\u53c2\u7167\u304f\u3060\u3055\u3044\u3002</p>","tags":["\u6a5f\u68b0\u5b66\u7fd2","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","Transformers","PyTorch","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406"]},{"location":"LLM/03_fine_tuning_a_pretrained_model/#_3","title":"\u5b66\u7fd2\u76ee\u6a19","text":"<p>\u3053\u306e\u8a18\u4e8b\u3092\u901a\u3058\u3066\u3001\u4ee5\u4e0b\u306e\u30b9\u30ad\u30eb\u3092\u7fd2\u5f97\u3067\u304d\u307e\u3059\uff1a</p> <ul> <li>Hugging Face Hub\u304b\u3089\u306e\u5927\u898f\u6a21\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u6e96\u5099\u3068\u51e6\u7406</li> <li>\u9ad8\u30ec\u30d9\u30eb\u306a<code>Trainer</code> API\u3092\u4f7f\u7528\u3057\u305f\u30e2\u30c0\u30f3\u306a\u30d9\u30b9\u30c8\u30d7\u30e9\u30af\u30c6\u30a3\u30b9\u3067\u306e\u30e2\u30c7\u30eb\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0</li> <li>\u6700\u9069\u5316\u30c6\u30af\u30cb\u30c3\u30af\u3092\u542b\u3080\u30ab\u30b9\u30bf\u30e0\u8a13\u7df4\u30eb\u30fc\u30d7\u306e\u5b9f\u88c5</li> <li>Accelerate\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u6d3b\u7528\u3057\u305f\u5206\u6563\u8a13\u7df4\u306e\u5b9f\u884c</li> <li>\u6700\u5927\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306e\u305f\u3081\u306e\u6700\u65b0\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u6280\u8853\u306e\u9069\u7528</li> </ul>","tags":["\u6a5f\u68b0\u5b66\u7fd2","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","Transformers","PyTorch","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406"]},{"location":"LLM/03_fine_tuning_a_pretrained_model/#_4","title":"\u524d\u63d0\u77e5\u8b58","text":"<ul> <li>Python\u57fa\u790e\u77e5\u8b58</li> <li>PyTorch\u306e\u57fa\u672c\u7684\u306a\u7406\u89e3</li> <li>\u6a5f\u68b0\u5b66\u7fd2\u306e\u57fa\u672c\u6982\u5ff5\uff08\u640d\u5931\u95a2\u6570\u3001\u6700\u9069\u5316\u3001\u8a55\u4fa1\u6307\u6a19\uff09</li> <li>Transformers\u30e2\u30c7\u30eb\u306e\u57fa\u672c\u7406\u89e3</li> </ul> <p>\u8c46\u77e5\u8b58</p> <p>\u958b\u59cb\u524d\u306b\u3001\u30c7\u30fc\u30bf\u51e6\u7406\u306b\u3064\u3044\u3066Datasets\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u78ba\u8a8d\u3059\u308b\u3053\u3068\u3092\u304a\u52e7\u3081\u3057\u307e\u3059\u3002</p> <p>\u3053\u306e\u8a18\u4e8b\u3067\u306f\u3001Transformers\u30e9\u30a4\u30d6\u30e9\u30ea\u4ee5\u5916\u306eHugging Face\u30e9\u30a4\u30d6\u30e9\u30ea\u3082\u7d39\u4ecb\u3057\u307e\u3059\u3002Datasets\u3001Tokenizers\u3001Accelerate\u3001Evaluate\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u3069\u306e\u3088\u3046\u306b\u30e2\u30c7\u30eb\u8a13\u7df4\u3092\u3088\u308a\u52b9\u7387\u7684\u304b\u3064\u52b9\u679c\u7684\u306b\u3059\u308b\u304b\u3092\u5b66\u3073\u307e\u3059\u3002</p> <p>\u5404\u4e3b\u8981\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u306f\u7570\u306a\u308b\u5185\u5bb9\u3092\u5b66\u7fd2\u3057\u307e\u3059\uff1a</p> <ul> <li>\u30bb\u30af\u30b7\u30e7\u30f32: \u30e2\u30c0\u30f3\u306a\u30c7\u30fc\u30bf\u524d\u51e6\u7406\u6280\u8853\u3068\u52b9\u7387\u7684\u306a\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u51e6\u7406</li> <li>\u30bb\u30af\u30b7\u30e7\u30f33: \u6700\u65b0\u6a5f\u80fd\u3092\u542b\u3080\u5f37\u529b\u306aTrainer API\u306e\u7fd2\u5f97</li> <li>\u30bb\u30af\u30b7\u30e7\u30f34: \u4e00\u304b\u3089\u8a13\u7df4\u30eb\u30fc\u30d7\u3092\u5b9f\u88c5\u3057\u3001Accelerate\u3092\u4f7f\u7528\u3057\u305f\u5206\u6563\u8a13\u7df4\u306e\u7406\u89e3</li> </ul> <p>\u3053\u306e\u8a18\u4e8b\u3092\u5b8c\u4e86\u3059\u308b\u3068\u3001\u9ad8\u30ec\u30d9\u30ebAPI\u3068\u30ab\u30b9\u30bf\u30e0\u8a13\u7df4\u30eb\u30fc\u30d7\u306e\u4e21\u65b9\u3092\u4f7f\u7528\u3057\u3066\u3001\u72ec\u81ea\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3067\u30e2\u30c7\u30eb\u3092\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u3001\u3053\u306e\u5206\u91ce\u306e\u6700\u65b0\u30d9\u30b9\u30c8\u30d7\u30e9\u30af\u30c6\u30a3\u30b9\u3092\u9069\u7528\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002</p> <p>\u3053\u306e\u8a18\u4e8b\u3067\u306fPyTorch\u306b\u7279\u5316\u3057\u3066\u8aac\u660e\u3057\u307e\u3059\u3002PyTorch\u306f\u30e2\u30c0\u30f3\u306a\u6df1\u5c64\u5b66\u7fd2\u7814\u7a76\u3068\u672c\u756a\u74b0\u5883\u306e\u6a19\u6e96\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3068\u306a\u3063\u3066\u3044\u308b\u305f\u3081\u3067\u3059\u3002Hugging Face\u30a8\u30b3\u30b7\u30b9\u30c6\u30e0\u306e\u6700\u65b0API\u3068\u30d9\u30b9\u30c8\u30d7\u30e9\u30af\u30c6\u30a3\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002</p>","tags":["\u6a5f\u68b0\u5b66\u7fd2","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","Transformers","PyTorch","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406"]},{"location":"LLM/03_fine_tuning_a_pretrained_model/#_5","title":"\u30c7\u30fc\u30bf\u306e\u51e6\u7406","text":"<p>\u524d\u7ae0\u306e\u4f8b\u3092\u7d9a\u3051\u3066\u30011\u3064\u306e\u30d0\u30c3\u30c1\u3067\u30b7\u30fc\u30b1\u30f3\u30b9\u5206\u985e\u5668\u3092\u8a13\u7df4\u3059\u308b\u65b9\u6cd5\u3092\u793a\u3057\u307e\u3059\uff1a</p> <pre><code>import torch\nfrom torch.optim import AdamW\nfrom transformers import AutoTokenizer, AutoModelForSequenceClassification\n\ncheckpoint = \"bert-base-uncased\"\ntokenizer = AutoTokenizer.from_pretrained(checkpoint)\nmodel = AutoModelForSequenceClassification.from_pretrained(checkpoint)\nsequence = [\n    \"I've been waiting for a HuggingFace course my whole life.\",\n    \"This course is amazing!\",\n]\n\nbatch = tokenizer(sequence, padding=True, truncation=True, return_tensors=\"pt\")\n\nbatch[\"labels\"] = torch.tensor([1, 1])\n\noptimizer = AdamW(model.parameters())\nloss = model(**batch).loss\nloss.backward()\noptimizer.step()\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>Some weights of BertForSequenceClassification were not initialized from the model checkpoint at bert-base-uncased and are newly initialized: ['classifier.bias', 'classifier.weight']\nYou should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n</code></pre></p> <p>\u5f53\u7136\u306a\u304c\u3089\u30012\u3064\u306e\u6587\u3060\u3051\u3067\u30e2\u30c7\u30eb\u3092\u8a13\u7df4\u3057\u3066\u3082\u826f\u3044\u7d50\u679c\u306f\u5f97\u3089\u308c\u307e\u305b\u3093\u3002\u3088\u308a\u826f\u3044\u7d50\u679c\u3092\u5f97\u308b\u305f\u3081\u306b\u306f\u3001\u3088\u308a\u5927\u304d\u306a\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u6e96\u5099\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002</p> <p>\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u306f\u3001William B. Dolan\u3068Chris Brockett\u306b\u3088\u308b\u8ad6\u6587\u3067\u7d39\u4ecb\u3055\u308c\u305fMRPC\uff08Microsoft Research Paraphrase Corpus\uff09\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u4f8b\u3068\u3057\u3066\u4f7f\u7528\u3057\u307e\u3059\u3002\u3053\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306f5,801\u7d44\u306e\u6587\u30da\u30a2\u3067\u69cb\u6210\u3055\u308c\u3001\u305d\u308c\u3089\u304c\u8a00\u3044\u63db\u3048\uff08\u30d1\u30e9\u30d5\u30ec\u30fc\u30ba\uff09\u304b\u3069\u3046\u304b\uff08\u3064\u307e\u308a\u3001\u4e21\u65b9\u306e\u6587\u304c\u540c\u3058\u610f\u5473\u304b\u3069\u3046\u304b\uff09\u3092\u793a\u3059\u30e9\u30d9\u30eb\u304c\u4ed8\u3044\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u7ae0\u3067\u306f\u5c0f\u3055\u306a\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3067\u3042\u308b\u305f\u3081\u3001\u8a13\u7df4\u5b9f\u9a13\u304c\u5bb9\u6613\u3060\u3068\u3044\u3046\u7406\u7531\u3067\u9078\u629e\u3057\u307e\u3057\u305f\u3002</p>","tags":["\u6a5f\u68b0\u5b66\u7fd2","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","Transformers","PyTorch","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406"]},{"location":"LLM/03_fine_tuning_a_pretrained_model/#hub","title":"Hub\u304b\u3089\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u8aad\u307f\u8fbc\u307f","text":"<p>Hub\u306b\u306f\u30e2\u30c7\u30eb\u3060\u3051\u3067\u306a\u304f\u3001\u3055\u307e\u3056\u307e\u306a\u8a00\u8a9e\u306e\u8907\u6570\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3082\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306f\u3053\u3061\u3089\u3067\u95b2\u89a7\u3067\u304d\u3001\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3092\u5b8c\u4e86\u3057\u305f\u5f8c\u306b\u65b0\u3057\u3044\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u8aad\u307f\u8fbc\u307f\u3068\u51e6\u7406\u3092\u8a66\u3059\u3053\u3068\u3092\u304a\u52e7\u3081\u3057\u307e\u3059\uff08\u4e00\u822c\u7684\u306a\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306f\u3053\u3061\u3089\uff09\u3002\u4eca\u306fMRPC\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u7126\u70b9\u3092\u5f53\u3066\u307e\u3057\u3087\u3046\uff01\u3053\u308c\u306fGLUE\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u3092\u69cb\u6210\u3059\u308b10\u500b\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e1\u3064\u3067\u300110\u306e\u7570\u306a\u308b\u30c6\u30ad\u30b9\u30c8\u5206\u985e\u30bf\u30b9\u30af\u3067ML\u30e2\u30c7\u30eb\u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3092\u6e2c\u5b9a\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3055\u308c\u308b\u5b66\u8853\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u3067\u3059\u3002</p> <p>Hugging Face Datasets\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u3001Hub\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u30ad\u30e3\u30c3\u30b7\u30e5\u3059\u308b\u975e\u5e38\u306b\u30b7\u30f3\u30d7\u30eb\u306a\u30b3\u30de\u30f3\u30c9\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002MRPC\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306f\u6b21\u306e\u3088\u3046\u306b\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3067\u304d\u307e\u3059\uff1a</p> <pre><code>from datasets import load_dataset\n\nraw_datasets = load_dataset(\"glue\", \"mrpc\")\nraw_datasets\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>DatasetDict({\n    train: Dataset({\n        features: ['sentence1', 'sentence2', 'label', 'idx'],\n        num_rows: 3668\n    })\n    validation: Dataset({\n        features: ['sentence1', 'sentence2', 'label', 'idx'],\n        num_rows: 408\n    })\n    test: Dataset({\n        features: ['sentence1', 'sentence2', 'label', 'idx'],\n        num_rows: 1725\n    })\n})\n</code></pre></p> <p>\u3054\u89a7\u306e\u3068\u304a\u308a\u3001\u8a13\u7df4\u30bb\u30c3\u30c8\u3001\u691c\u8a3c\u30bb\u30c3\u30c8\u3001\u30c6\u30b9\u30c8\u30bb\u30c3\u30c8\u3092\u542b\u3080<code>DatasetDict</code>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u5f97\u3089\u308c\u307e\u3059\u3002\u305d\u308c\u305e\u308c\u306b\u306f\u8907\u6570\u306e\u5217\uff08<code>sentence1</code>\u3001<code>sentence2</code>\u3001<code>label</code>\u3001<code>idx</code>\uff09\u3068\u53ef\u5909\u6570\u306e\u884c\u304c\u3042\u308a\u3001\u3053\u308c\u306f\u5404\u30bb\u30c3\u30c8\u306e\u8981\u7d20\u6570\u3067\u3059\uff08\u3064\u307e\u308a\u3001\u8a13\u7df4\u30bb\u30c3\u30c8\u306b\u306f3,668\u7d44\u306e\u6587\u30da\u30a2\u3001\u691c\u8a3c\u30bb\u30c3\u30c8\u306b\u306f408\u7d44\u3001\u30c6\u30b9\u30c8\u30bb\u30c3\u30c8\u306b\u306f1,725\u7d44\u304c\u3042\u308a\u307e\u3059\uff09\u3002</p> <p>\u8c46\u77e5\u8b58</p> <p>\u3053\u306e\u30b3\u30de\u30f3\u30c9\u306f\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u30ad\u30e3\u30c3\u30b7\u30e5\u3057\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f~/.cache/huggingface/datasets\u306b\u4fdd\u5b58\u3055\u308c\u307e\u3059\u3002\u7b2c2\u7ae0\u3067\u5b66\u3093\u3060\u3088\u3046\u306b\u3001<code>HF_HOME</code>\u74b0\u5883\u5909\u6570\u3092\u8a2d\u5b9a\u3057\u3066\u30ad\u30e3\u30c3\u30b7\u30e5\u30d5\u30a9\u30eb\u30c0\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3067\u304d\u307e\u3059\u3002</p> <p>\u8f9e\u66f8\u306e\u3088\u3046\u306b\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u4f7f\u7528\u3057\u3066\u3001<code>raw_datasets</code>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u5404\u6587\u30da\u30a2\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u307e\u3059\uff1a</p> <pre><code>raw_train_dataset = raw_datasets[\"train\"]\nraw_train_dataset[0]\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>{'sentence1': 'Amrozi accused his brother , whom he called \" the witness \" , of deliberately distorting his evidence .',\n 'sentence2': 'Referring to him as only \" the witness \" , Amrozi accused his brother of deliberately distorting his evidence .',\n 'label': 1,\n 'idx': 0}\n</code></pre></p> <p>\u30e9\u30d9\u30eb\u306f\u3059\u3067\u306b\u6574\u6570\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u524d\u51e6\u7406\u306f\u4e0d\u8981\u3067\u3059\u3002\u3069\u306e\u6574\u6570\u304c\u3069\u306e\u30e9\u30d9\u30eb\u306b\u5bfe\u5fdc\u3059\u308b\u304b\u3092\u77e5\u308b\u306b\u306f\u3001<code>raw_train_dataset</code>\u306e<code>features</code>\u3092\u8abf\u3079\u307e\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u5404\u5217\u306e\u30bf\u30a4\u30d7\u304c\u308f\u304b\u308a\u307e\u3059\uff1a</p> <pre><code>raw_train_dataset.features\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>{'sentence1': Value('string'),\n 'sentence2': Value('string'),\n 'label': ClassLabel(names=['not_equivalent', 'equivalent']),\n 'idx': Value('int32')}\n</code></pre></p> <p>\u5185\u90e8\u7684\u306b\u3001<code>label</code>\u306f<code>ClassLabel</code>\u30bf\u30a4\u30d7\u3067\u3001\u6574\u6570\u3068\u30e9\u30d9\u30eb\u540d\u306e\u30de\u30c3\u30d4\u30f3\u30b0\u306fnames\u30d5\u30a9\u30eb\u30c0\u306b\u4fdd\u5b58\u3055\u308c\u3066\u3044\u307e\u3059\u3002<code>0</code>\u306f<code>not_equivalent</code>\u306b\u5bfe\u5fdc\u3057\u3001<code>1</code>\u306f<code>equivalent</code>\u306b\u5bfe\u5fdc\u3057\u307e\u3059\u3002</p> <p>\u8a66\u3057\u3066\u307f\u3088\u3046\uff01</p> <p>\u8a13\u7df4\u30bb\u30c3\u30c8\u306e15\u756a\u76ee\u306e\u8981\u7d20\u3068\u691c\u8a3c\u30bb\u30c3\u30c8\u306e87\u756a\u76ee\u306e\u8981\u7d20\u3092\u898b\u3066\u304f\u3060\u3055\u3044\u3002\u305d\u308c\u3089\u306e\u30e9\u30d9\u30eb\u306f\u4f55\u3067\u3059\u304b\uff1f</p> <pre><code># \u8a13\u7df4\u30bb\u30c3\u30c8\u306e15\u756a\u76ee\u306e\u8981\u7d20\ntrain_label_15th = raw_train_dataset[14][\"label\"]\nclass_label = raw_train_dataset.features[\"label\"]\nprint(class_label.int2str(train_label_15th))\n\n# \u691c\u8a3c\u30bb\u30c3\u30c8\u306e87\u756a\u76ee\u306e\u8981\u7d20\nraw_test_dataset = raw_datasets[\"test\"]\ntest_label_87th = raw_test_dataset[86][\"label\"]\nclass_label = raw_test_dataset.features[\"label\"]\nprint(class_label.int2str(test_label_87th))\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>not_equivalent\nequivalent\n</code></pre></p>","tags":["\u6a5f\u68b0\u5b66\u7fd2","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","Transformers","PyTorch","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406"]},{"location":"LLM/03_fine_tuning_a_pretrained_model/#_6","title":"\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u524d\u51e6\u7406","text":"<p>\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u524d\u51e6\u7406\u3059\u308b\u305f\u3081\u306b\u306f\u3001\u30c6\u30ad\u30b9\u30c8\u3092\u30e2\u30c7\u30eb\u304c\u7406\u89e3\u3067\u304d\u308b\u6570\u5024\u306b\u5909\u63db\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u524d\u7ae0\u3067\u5b66\u3093\u3060\u3088\u3046\u306b\u3001\u3053\u306e\u51e6\u7406\u306f\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3067\u884c\u3044\u307e\u3059\u3002</p> <p>\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306b\u306f1\u3064\u306e\u6587\u307e\u305f\u306f\u6587\u306e\u30ea\u30b9\u30c8\u3092\u6e21\u3059\u3053\u3068\u304c\u3067\u304d\u308b\u305f\u3081\u3001\u5404\u30da\u30a2\u306e\u3059\u3079\u3066\u306e\u7b2c1\u6587\u3068\u3059\u3079\u3066\u306e\u7b2c2\u6587\u3092\u76f4\u63a5\u30c8\u30fc\u30af\u30f3\u5316\u3067\u304d\u307e\u3059\uff1a</p> <pre><code>from transformers import AutoTokenizer\n\ncheckpoint = \"bert-base-uncased\"\ntokenizer = AutoTokenizer.from_pretrained(checkpoint)\ntokenized_sentences_1 = tokenizer(list(raw_datasets[\"train\"][\"sentence1\"]))\ntokenized_sentences_2 = tokenizer(list(raw_datasets[\"train\"][\"sentence2\"]))\n</code></pre> <p>\u3057\u304b\u3057\u30012\u3064\u306e\u30b7\u30fc\u30b1\u30f3\u30b9\u3092\u30e2\u30c7\u30eb\u306b\u6e21\u3057\u3066\u3001\u6587\u304c\u8a00\u3044\u63db\u3048\u304b\u3069\u3046\u304b\u306e\u4e88\u6e2c\u3092\u5f97\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u30022\u3064\u306e\u30b7\u30fc\u30b1\u30f3\u30b9\u3092\u30da\u30a2\u3068\u3057\u3066\u51e6\u7406\u3057\u3001\u9069\u5207\u306a\u524d\u51e6\u7406\u3092\u9069\u7528\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002</p> <p>\u5e78\u3044\u3001\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306f\u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u30da\u30a2\u3082\u53d7\u3051\u53d6\u308b\u3053\u3068\u304c\u3067\u304d\u3001BERT\u30e2\u30c7\u30eb\u304c\u671f\u5f85\u3059\u308b\u5f62\u5f0f\u3067\u6e96\u5099\u3067\u304d\u307e\u3059\uff1a</p> <pre><code>from pprint import pprint\ninputs = tokenizer(\"This is the first sentence.\", \"This is the second one.\")\npprint(inputs, compact=True)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>{'attention_mask': [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n 'input_ids': [101, 2023, 2003, 1996, 2034, 6251, 1012, 102, 2023, 2003, 1996,\n               2117, 2028, 1012, 102],\n 'token_type_ids': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1]}\n</code></pre></p> <p>\u7b2c2\u7ae0\u3067<code>input_ids</code>\u3068<code>attention_mask</code>\u30ad\u30fc\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3057\u305f\u304c\u3001<code>token_type_ids</code>\u306b\u3064\u3044\u3066\u306f\u5f8c\u56de\u3057\u306b\u3057\u3066\u3044\u307e\u3057\u305f\u3002\u3053\u306e\u4f8b\u3067\u306f\u3001\u3053\u308c\u304c\u30e2\u30c7\u30eb\u306b\u5165\u529b\u306e\u3069\u306e\u90e8\u5206\u304c\u7b2c1\u6587\u3067\u3069\u306e\u90e8\u5206\u304c\u7b2c2\u6587\u304b\u3092\u4f1d\u3048\u308b\u3082\u306e\u3067\u3059\u3002</p> <p>\u8a66\u3057\u3066\u307f\u3088\u3046\uff01</p> <p>\u8a13\u7df4\u30bb\u30c3\u30c8\u306e15\u756a\u76ee\u306e\u8981\u7d20\u3092\u53d6\u308a\u30012\u3064\u306e\u6587\u3092\u5225\u3005\u306b\u30c8\u30fc\u30af\u30f3\u5316\u3057\u3001\u30da\u30a2\u3068\u3057\u3066\u3082\u30c8\u30fc\u30af\u30f3\u5316\u3057\u3066\u304f\u3060\u3055\u3044\u30022\u3064\u306e\u7d50\u679c\u306e\u9055\u3044\u306f\u4f55\u3067\u3059\u304b\uff1f</p> <pre><code># \u8a13\u7df4\u30bb\u30c3\u30c8\u306e15\u756a\u76ee\u306e\u8981\u7d20\nraw_train_dataset_15th = raw_datasets[\"train\"][14]\nsentence1 = raw_train_dataset_15th[\"sentence1\"]\nsentence2 = raw_train_dataset_15th[\"sentence2\"]\n\ntokens_s1 = tokenizer(sentence1)\ntokens_s2 = tokenizer(sentence2)\n\ntokens_pair = tokenizer(sentence1, sentence2)\n\nprint(\"sentence1:\")\npprint(tokens_s1, compact=True)\nprint(\"sentence2:\")\npprint(tokens_s2, compact=True)\nprint(\"pair:\")\npprint(tokens_pair, compact=True)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>sentence1:\n{'attention_mask': [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n                    1, 1, 1, 1],\n 'input_ids': [101, 1043, 7677, 22637, 2002, 10993, 3917, 1010, 2132, 1997,\n               1996, 2334, 7071, 3131, 1010, 2056, 1996, 2873, 2001, 4755, 4229,\n               5467, 1012, 102],\n 'token_type_ids': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                    0, 0, 0, 0]}\nsentence2:\n{'attention_mask': [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n                    1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n 'input_ids': [101, 1996, 2132, 1997, 1996, 2334, 7071, 3131, 1010, 1043, 7677,\n               22637, 2002, 10993, 3917, 1010, 2056, 1996, 2873, 4062, 2018,\n               3478, 2000, 18235, 2094, 2417, 2644, 4597, 1012, 102],\n 'token_type_ids': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}\npair:\n{'attention_mask': [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n                    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n                    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n 'input_ids': [101, 1043, 7677, 22637, 2002, 10993, 3917, 1010, 2132, 1997,\n               1996, 2334, 7071, 3131, 1010, 2056, 1996, 2873, 2001, 4755, 4229,\n               5467, 1012, 102, 1996, 2132, 1997, 1996, 2334, 7071, 3131, 1010,\n               1043, 7677, 22637, 2002, 10993, 3917, 1010, 2056, 1996, 2873,\n               4062, 2018, 3478, 2000, 18235, 2094, 2417, 2644, 4597, 1012,\n               102],\n 'token_type_ids': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                    0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n                    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}\n</code></pre></p> <p><code>input_ids</code>\u5185\u306eID\u3092\u5358\u8a9e\u306b\u30c7\u30b3\u30fc\u30c9\u3059\u308b\u3068\uff1a</p> <pre><code>tokens = tokenizer.convert_ids_to_tokens(inputs[\"input_ids\"])\nprint(tokens)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>['[CLS]', 'this', 'is', 'the', 'first', 'sentence', '.', '[SEP]', 'this', 'is', 'the', 'second', 'one', '.', '[SEP]']\n</code></pre></p> <p>\u3054\u89a7\u306e\u3068\u304a\u308a\u3001<code>[CLS] sentence1 [SEP]</code>\u306b\u5bfe\u5fdc\u3059\u308b\u5165\u529b\u306e\u90e8\u5206\u306f\u3059\u3079\u3066\u30c8\u30fc\u30af\u30f3\u30bf\u30a4\u30d7ID <code>0</code>\u3092\u6301\u3061\u3001\u4ed6\u306e\u90e8\u5206\uff08<code>sentence2 [SEP]</code>\u306b\u5bfe\u5fdc\uff09\u306f\u3059\u3079\u3066\u30c8\u30fc\u30af\u30f3\u30bf\u30a4\u30d7ID <code>1</code>\u3092\u6301\u3061\u307e\u3059\u3002</p> <p>\u7570\u306a\u308b\u30c1\u30a7\u30c3\u30af\u30dd\u30a4\u30f3\u30c8\u3092\u9078\u629e\u3057\u305f\u5834\u5408\u3001\u30c8\u30fc\u30af\u30f3\u5316\u3055\u308c\u305f\u5165\u529b\u306b<code>token_type_ids</code>\u304c\u5fc5\u305a\u3057\u3082\u542b\u307e\u308c\u308b\u3068\u306f\u9650\u3089\u306a\u3044\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\uff08\u4f8b\u3048\u3070\u3001DistilBERT\u30e2\u30c7\u30eb\u3092\u4f7f\u7528\u3057\u305f\u5834\u5408\u306f\u8fd4\u3055\u308c\u307e\u305b\u3093\uff09\u3002\u3053\u308c\u3089\u306f\u3001\u30e2\u30c7\u30eb\u304c\u4e8b\u524d\u8a13\u7df4\u4e2d\u306b\u305d\u308c\u3089\u3092\u898b\u3066\u3044\u308b\u305f\u3081\u3001\u305d\u308c\u3089\u3092\u3069\u3046\u51e6\u7406\u3059\u308b\u304b\u3092\u77e5\u3063\u3066\u3044\u308b\u5834\u5408\u306b\u306e\u307f\u8fd4\u3055\u308c\u307e\u3059\u3002</p> <p>\u3053\u3053\u3067\u3001BERT\u306f\u30c8\u30fc\u30af\u30f3\u30bf\u30a4\u30d7ID\u3067\u4e8b\u524d\u8a13\u7df4\u3055\u308c\u3066\u304a\u308a\u3001\u7b2c1\u7ae0\u3067\u8aac\u660e\u3057\u305f\u30de\u30b9\u30af\u8a00\u8a9e\u30e2\u30c7\u30ea\u30f3\u30b0\u76ee\u7684\u306b\u52a0\u3048\u3066\u3001_\u6b21\u6587\u4e88\u6e2c_\u3068\u547c\u3070\u308c\u308b\u8ffd\u52a0\u306e\u76ee\u7684\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u306e\u30bf\u30b9\u30af\u306e\u76ee\u6a19\u306f\u3001\u6587\u30da\u30a2\u9593\u306e\u95a2\u4fc2\u3092\u30e2\u30c7\u30ea\u30f3\u30b0\u3059\u308b\u3053\u3068\u3067\u3059\u3002</p> <p>\u6b21\u6587\u4e88\u6e2c\u3067\u306f\u3001\u30e2\u30c7\u30eb\u306b\u6587\u306e\u30da\u30a2\uff08\u30e9\u30f3\u30c0\u30e0\u306b\u30de\u30b9\u30af\u3055\u308c\u305f\u30c8\u30fc\u30af\u30f3\u3092\u542b\u3080\uff09\u304c\u63d0\u4f9b\u3055\u308c\u3001\u7b2c2\u6587\u304c\u7b2c1\u6587\u306b\u7d9a\u304f\u304b\u3069\u3046\u304b\u3092\u4e88\u6e2c\u3059\u308b\u3088\u3046\u6c42\u3081\u3089\u308c\u307e\u3059\u3002\u30bf\u30b9\u30af\u3092\u81ea\u660e\u3067\u306a\u304f\u3059\u308b\u305f\u3081\u3001\u534a\u5206\u306e\u6642\u9593\u3067\u306f\u6587\u306f\u5143\u306e\u6587\u66f8\u3067\u4e92\u3044\u306b\u7d9a\u3044\u3066\u304a\u308a\u3001\u6b8b\u308a\u306e\u534a\u5206\u3067\u306f2\u3064\u306e\u6587\u306f2\u3064\u306e\u7570\u306a\u308b\u6587\u66f8\u304b\u3089\u6765\u3066\u3044\u307e\u3059\u3002</p> <p>\u4e00\u822c\u7684\u306b\u3001\u30c8\u30fc\u30af\u30f3\u5316\u3055\u308c\u305f\u5165\u529b\u306b<code>token_type_ids</code>\u304c\u3042\u308b\u304b\u3069\u3046\u304b\u5fc3\u914d\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3068\u30e2\u30c7\u30eb\u306b\u540c\u3058\u30c1\u30a7\u30c3\u30af\u30dd\u30a4\u30f3\u30c8\u3092\u4f7f\u7528\u3059\u308b\u9650\u308a\u3001\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u304c\u81ea\u5206\u306e\u30e2\u30c7\u30eb\u306b\u4f55\u3092\u63d0\u4f9b\u3059\u3079\u304d\u304b\u3092\u77e5\u3063\u3066\u3044\u308b\u305f\u3081\u3001\u3059\u3079\u3066\u554f\u984c\u3042\u308a\u307e\u305b\u3093\u3002</p> <p>\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u304c1\u7d44\u306e\u6587\u3092\u3069\u3046\u51e6\u7406\u3067\u304d\u308b\u304b\u3092\u898b\u305f\u306e\u3067\u3001\u305d\u308c\u3092\u4f7f\u7528\u3057\u3066\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u5168\u4f53\u3092\u30c8\u30fc\u30af\u30f3\u5316\u3067\u304d\u307e\u3059\u3002\u7b2c2\u7ae0\u306e\u3088\u3046\u306b\u3001\u7b2c1\u6587\u306e\u30ea\u30b9\u30c8\u3001\u6b21\u306b\u7b2c2\u6587\u306e\u30ea\u30b9\u30c8\u3092\u6e21\u3059\u3053\u3068\u3067\u3001\u6587\u30da\u30a2\u306e\u30ea\u30b9\u30c8\u3092\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306b\u6e21\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u306f\u7b2c2\u7ae0\u3067\u898b\u305f\u30d1\u30c7\u30a3\u30f3\u30b0\u3068\u5207\u308a\u8a70\u3081\u30aa\u30d7\u30b7\u30e7\u30f3\u3068\u3082\u4e92\u63db\u6027\u304c\u3042\u308a\u307e\u3059\u3002\u3057\u305f\u304c\u3063\u3066\u3001\u8a13\u7df4\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u524d\u51e6\u7406\u3059\u308b1\u3064\u306e\u65b9\u6cd5\u306f\uff1a</p> <pre><code>tokenized_dataset = tokenizer(\n    list(raw_datasets[\"train\"][\"sentence1\"]),\n    list(raw_datasets[\"train\"][\"sentence2\"]),\n    padding=True,\n    truncation=True\n)\nfor k, v in tokenized_dataset.items():\n    print(k, v[:2])  # 2\u30b5\u30f3\u30d7\u30eb\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>input_ids [[101, 2572, 3217, 5831, 5496, 2010, 2567, 1010, 3183, 2002, 2170, 1000, 1996, 7409, 1000, 1010, 1997, 9969, 4487, 23809, 3436, 2010, 3350, 1012, 102, 7727, 2000, 2032, 2004, 2069, 1000, 1996, 7409, 1000, 1010, 2572, 3217, 5831, 5496, 2010, 2567, 1997, 9969, 4487, 23809, 3436, 2010, 3350, 1012, 102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [101, 9805, 3540, 11514, 2050, 3079, 11282, 2243, 1005, 1055, 2077, 4855, 1996, 4677, 2000, 3647, 4576, 1999, 2687, 2005, 1002, 1016, 1012, 1019, 4551, 1012, 102, 9805, 3540, 11514, 2050, 4149, 11282, 2243, 1005, 1055, 1999, 2786, 2005, 1002, 6353, 2509, 2454, 1998, 2853, 2009, 2000, 3647, 4576, 2005, 1002, 1015, 1012, 1022, 4551, 1999, 2687, 1012, 102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]\ntoken_type_ids [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]\nattention_mask [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]\n</code></pre></p> <p>\u3053\u308c\u306f\u826f\u3044\u65b9\u6cd5\u3067\u3059\u304c\u3001\u8f9e\u66f8\u3092\u8fd4\u3059\uff08<code>input_ids</code>\u3001<code>attention_mask</code>\u3001<code>token_type_ids</code>\u3068\u3044\u3046\u30ad\u30fc\u3068\u3001\u30ea\u30b9\u30c8\u306e\u30ea\u30b9\u30c8\u3067\u3042\u308b\u5024\u3092\u6301\u3064\uff09\u3068\u3044\u3046\u6b20\u70b9\u304c\u3042\u308a\u307e\u3059\u3002\u307e\u305f\u3001\u30c8\u30fc\u30af\u30f3\u5316\u4e2d\u306b\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u5168\u4f53\u3092\u30e1\u30e2\u30ea\u306b\u4fdd\u5b58\u3059\u308b\u306e\u306b\u5341\u5206\u306aRAM\u304c\u3042\u308b\u5834\u5408\u306b\u306e\u307f\u6a5f\u80fd\u3057\u307e\u3059\uff08Hugging Face Datasets\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306fApache Arrow\u30d5\u30a1\u30a4\u30eb\u3068\u3057\u3066\u30c7\u30a3\u30b9\u30af\u306b\u4fdd\u5b58\u3055\u308c\u308b\u305f\u3081\u3001\u8981\u6c42\u3057\u305f\u30b5\u30f3\u30d7\u30eb\u306e\u307f\u304c\u30e1\u30e2\u30ea\u306b\u8aad\u307f\u8fbc\u307e\u308c\u307e\u3059\uff09\u3002</p> <p>\u30c7\u30fc\u30bf\u3092\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3068\u3057\u3066\u4fdd\u6301\u3059\u308b\u306b\u306f\u3001<code>Dataset.map()</code>\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u30c8\u30fc\u30af\u30f3\u5316\u4ee5\u4e0a\u306e\u524d\u51e6\u7406\u304c\u5fc5\u8981\u306a\u5834\u5408\u306b\u8ffd\u52a0\u306e\u67d4\u8edf\u6027\u3082\u5f97\u3089\u308c\u307e\u3059\u3002<code>map()</code>\u30e1\u30bd\u30c3\u30c9\u306f\u3001\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u5404\u8981\u7d20\u306b\u95a2\u6570\u3092\u9069\u7528\u3059\u308b\u3053\u3068\u3067\u6a5f\u80fd\u3059\u308b\u305f\u3081\u3001\u5165\u529b\u3092\u30c8\u30fc\u30af\u30f3\u5316\u3059\u308b\u95a2\u6570\u3092\u5b9a\u7fa9\u3057\u307e\u3057\u3087\u3046\uff1a</p> <pre><code>def tokenize_function(example):\n    return tokenizer(example[\"sentence1\"], example[\"sentence2\"], truncation=True)\n</code></pre> <p>\u3053\u306e\u95a2\u6570\u306f\u8f9e\u66f8\uff08\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u9805\u76ee\u306e\u3088\u3046\u306a\uff09\u3092\u53d7\u3051\u53d6\u308a\u3001<code>input_ids</code>\u3001<code>attention_mask</code>\u3001<code>token_type_ids</code>\u30ad\u30fc\u3092\u6301\u3064\u65b0\u3057\u3044\u8f9e\u66f8\u3092\u8fd4\u3057\u307e\u3059\u3002<code>example</code>\u8f9e\u66f8\u306b\u8907\u6570\u306e\u30b5\u30f3\u30d7\u30eb\uff08\u5404\u30ad\u30fc\u304c\u6587\u306e\u30ea\u30b9\u30c8\uff09\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u5834\u5408\u3067\u3082\u6a5f\u80fd\u3059\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u3053\u308c\u306f\u3001\u524d\u306b\u898b\u305f\u3088\u3046\u306b\u3001<code>tokenizer</code>\u304c\u6587\u30da\u30a2\u306e\u30ea\u30b9\u30c8\u3067\u52d5\u4f5c\u3059\u308b\u305f\u3081\u3067\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u3001<code>map()</code>\u306e\u547c\u3073\u51fa\u3057\u3067<code>batched=True</code>\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u4f7f\u7528\u3067\u304d\u3001\u30c8\u30fc\u30af\u30f3\u5316\u304c\u5927\u5e45\u306b\u9ad8\u901f\u5316\u3055\u308c\u307e\u3059\u3002<code>tokenizer</code>\u306fHugging Face Tokenizers\u30e9\u30a4\u30d6\u30e9\u30ea\u306eRust\u3067\u66f8\u304b\u308c\u305f\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306b\u3088\u3063\u3066\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306f\u975e\u5e38\u306b\u9ad8\u901f\u3067\u3059\u304c\u3001\u4e00\u5ea6\u306b\u591a\u304f\u306e\u5165\u529b\u3092\u4e0e\u3048\u305f\u5834\u5408\u306b\u306e\u307f\u305d\u306e\u52b9\u679c\u3092\u767a\u63ee\u3057\u307e\u3059\u3002</p> <p>\u4eca\u306e\u3068\u3053\u308d\u3001\u30c8\u30fc\u30af\u30f3\u5316\u95a2\u6570\u3067<code>padding</code>\u5f15\u6570\u3092\u7701\u7565\u3057\u3066\u3044\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u3053\u308c\u306f\u3001\u3059\u3079\u3066\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u6700\u5927\u9577\u306b\u30d1\u30c7\u30a3\u30f3\u30b0\u3059\u308b\u306e\u306f\u52b9\u7387\u7684\u3067\u306f\u306a\u3044\u305f\u3081\u3067\u3059\u3002\u30d0\u30c3\u30c1\u3092\u69cb\u7bc9\u3059\u308b\u969b\u306b\u30b5\u30f3\u30d7\u30eb\u3092\u30d1\u30c7\u30a3\u30f3\u30b0\u3059\u308b\u65b9\u304c\u826f\u304f\u3001\u305d\u306e\u5834\u5408\u306f\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u5168\u4f53\u306e\u6700\u5927\u9577\u3067\u306f\u306a\u304f\u3001\u305d\u306e\u30d0\u30c3\u30c1\u5185\u306e\u6700\u5927\u9577\u306b\u306e\u307f\u30d1\u30c7\u30a3\u30f3\u30b0\u3059\u308c\u3070\u6e08\u307f\u307e\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u5165\u529b\u306e\u9577\u3055\u304c\u975e\u5e38\u306b\u5909\u52d5\u3059\u308b\u5834\u5408\u306b\u591a\u304f\u306e\u6642\u9593\u3068\u51e6\u7406\u80fd\u529b\u3092\u7bc0\u7d04\u3067\u304d\u307e\u3059\uff01</p> <p>\u4ee5\u4e0b\u306f\u3001\u3059\u3079\u3066\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u4e00\u5ea6\u306b\u30c8\u30fc\u30af\u30f3\u5316\u95a2\u6570\u3092\u9069\u7528\u3059\u308b\u65b9\u6cd5\u3067\u3059\u3002<code>map</code>\u306e\u547c\u3073\u51fa\u3057\u3067<code>batched=True</code>\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u305f\u3081\u3001\u95a2\u6570\u306f\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u5404\u8981\u7d20\u306b\u500b\u5225\u3067\u306f\u306a\u304f\u3001\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u8907\u6570\u8981\u7d20\u306b\u4e00\u5ea6\u306b\u9069\u7528\u3055\u308c\u307e\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u3088\u308a\u9ad8\u901f\u306a\u524d\u51e6\u7406\u304c\u53ef\u80fd\u306b\u306a\u308a\u307e\u3059\u3002</p> <pre><code>tokenized_datasets = raw_datasets.map(tokenize_function, batched=True)\nprint(tokenized_datasets)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>Map:   0%|          | 0/1725 [00:00&lt;?, ? examples/s]\nMap: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1725/1725 [00:00&lt;00:00, 35443.43 examples/s]\n\nDatasetDict({\n    train: Dataset({\n        features: ['sentence1', 'sentence2', 'label', 'idx', 'input_ids', 'token_type_ids', 'attention_mask'],\n        num_rows: 3668\n    })\n    validation: Dataset({\n        features: ['sentence1', 'sentence2', 'label', 'idx', 'input_ids', 'token_type_ids', 'attention_mask'],\n        num_rows: 408\n    })\n    test: Dataset({\n        features: ['sentence1', 'sentence2', 'label', 'idx', 'input_ids', 'token_type_ids', 'attention_mask'],\n        num_rows: 1725\n    })\n})\n</code></pre></p> <p>Datasets\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u3053\u306e\u51e6\u7406\u3092\u9069\u7528\u3059\u308b\u65b9\u6cd5\u306f\u3001\u524d\u51e6\u7406\u95a2\u6570\u306b\u3088\u3063\u3066\u8fd4\u3055\u308c\u308b\u8f9e\u66f8\u306e\u5404\u30ad\u30fc\u306b\u5bfe\u3057\u3066\u3001\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u65b0\u3057\u3044\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u8ffd\u52a0\u3059\u308b\u3053\u3068\u3067\u3059\u3002</p> <p><code>tokenize_function</code>\u306f<code>input_ids</code>\u3001<code>attention_mask</code>\u3001<code>token_type_ids</code>\u30ad\u30fc\u3092\u6301\u3064\u8f9e\u66f8\u3092\u8fd4\u3059\u305f\u3081\u3001\u3053\u308c\u30893\u3064\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u304c\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u3059\u3079\u3066\u306e\u5206\u5272\u306b\u8ffd\u52a0\u3055\u308c\u307e\u3059\u3002\u524d\u51e6\u7406\u95a2\u6570\u304c<code>map()</code>\u3092\u9069\u7528\u3057\u305f\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u5185\u306e\u65e2\u5b58\u306e\u30ad\u30fc\u306b\u5bfe\u3057\u3066\u65b0\u3057\u3044\u5024\u3092\u8fd4\u3057\u305f\u5834\u5408\u3001\u65e2\u5b58\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u3082\u5909\u66f4\u3067\u304d\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <p>\u6700\u5f8c\u306b\u884c\u3046\u5fc5\u8981\u304c\u3042\u308b\u306e\u306f\u3001\u8981\u7d20\u3092\u30d0\u30c3\u30c1\u306b\u307e\u3068\u3081\u308b\u969b\u306b\u3001\u6700\u3082\u9577\u3044\u8981\u7d20\u306e\u9577\u3055\u307e\u3067\u3059\u3079\u3066\u306e\u4f8b\u3092\u30d1\u30c7\u30a3\u30f3\u30b0\u3059\u308b\u3053\u3068\u3067\u3059 \u2014 \u3053\u308c\u3092\u52d5\u7684\u30d1\u30c7\u30a3\u30f3\u30b0\u3068\u547c\u3073\u307e\u3059\u3002</p>","tags":["\u6a5f\u68b0\u5b66\u7fd2","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","Transformers","PyTorch","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406"]},{"location":"LLM/03_fine_tuning_a_pretrained_model/#_7","title":"\u52d5\u7684\u30d1\u30c7\u30a3\u30f3\u30b0","text":"<p>\u30d0\u30c3\u30c1\u5185\u3067\u30b5\u30f3\u30d7\u30eb\u3092\u307e\u3068\u3081\u308b\u5f79\u5272\u3092\u679c\u305f\u3059\u95a2\u6570\u306fcollate\u95a2\u6570\u3068\u547c\u3070\u308c\u307e\u3059\u3002\u3053\u308c\u306f<code>DataLoader</code>\u3092\u69cb\u7bc9\u3059\u308b\u969b\u306b\u6e21\u3059\u3053\u3068\u304c\u3067\u304d\u308b\u5f15\u6570\u3067\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u306f\u30b5\u30f3\u30d7\u30eb\u3092PyTorch\u30c6\u30f3\u30bd\u30eb\u306b\u5909\u63db\u3057\u3066\u9023\u7d50\u3059\u308b\u95a2\u6570\u3067\u3059\uff08\u8981\u7d20\u304c\u30ea\u30b9\u30c8\u3001\u30bf\u30d7\u30eb\u3001\u307e\u305f\u306f\u8f9e\u66f8\u306e\u5834\u5408\u306f\u518d\u5e30\u7684\u306b\uff09\u3002\u79c1\u305f\u3061\u306e\u30b1\u30fc\u30b9\u3067\u306f\u3001\u3059\u3079\u3066\u306e\u5165\u529b\u304c\u540c\u3058\u30b5\u30a4\u30ba\u3067\u306f\u306a\u3044\u305f\u3081\u3001\u3053\u308c\u306f\u4e0d\u53ef\u80fd\u3067\u3059\u3002\u610f\u56f3\u7684\u306b\u30d1\u30c7\u30a3\u30f3\u30b0\u3092\u9045\u3089\u305b\u3001\u5404\u30d0\u30c3\u30c1\u3067\u5fc5\u8981\u306a\u5206\u3060\u3051\u9069\u7528\u3057\u3001\u904e\u5ea6\u306b\u9577\u3044\u5165\u529b\u3068\u5927\u91cf\u306e\u30d1\u30c7\u30a3\u30f3\u30b0\u3092\u907f\u3051\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u8a13\u7df4\u304c\u304b\u306a\u308a\u9ad8\u901f\u5316\u3055\u308c\u307e\u3059\u304c\u3001TPU\u3067\u8a13\u7df4\u3057\u3066\u3044\u308b\u5834\u5408\u306f\u554f\u984c\u3092\u5f15\u304d\u8d77\u3053\u3059\u53ef\u80fd\u6027\u304c\u3042\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044 \u2014 TPU\u306f\u8ffd\u52a0\u306e\u30d1\u30c7\u30a3\u30f3\u30b0\u304c\u5fc5\u8981\u3067\u3082\u56fa\u5b9a\u3055\u308c\u305f\u5f62\u72b6\u3092\u597d\u307f\u307e\u3059\u3002</p> <p>\u5b9f\u969b\u306b\u3053\u308c\u3092\u884c\u3046\u306b\u306f\u3001\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u9805\u76ee\u3092\u30d0\u30c3\u30c1\u306b\u307e\u3068\u3081\u305f\u3044\u5834\u5408\u306b\u3001\u9069\u5207\u306a\u91cf\u306e\u30d1\u30c7\u30a3\u30f3\u30b0\u3092\u9069\u7528\u3059\u308bcollate\u95a2\u6570\u3092\u5b9a\u7fa9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u5e78\u3044\u3001Transformers\u30e9\u30a4\u30d6\u30e9\u30ea\u306f<code>DataCollatorWithPadding</code>\u3092\u901a\u3058\u3066\u305d\u306e\u3088\u3046\u306a\u95a2\u6570\u3092\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\u3002\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u6642\u306b\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3092\u53d7\u3051\u53d6\u308a\uff08\u4f7f\u7528\u3059\u308b\u30d1\u30c7\u30a3\u30f3\u30b0\u30c8\u30fc\u30af\u30f3\u3084\u3001\u30e2\u30c7\u30eb\u304c\u30d1\u30c7\u30a3\u30f3\u30b0\u3092\u5165\u529b\u306e\u5de6\u5074\u307e\u305f\u306f\u53f3\u5074\u306b\u671f\u5f85\u3059\u308b\u304b\u3092\u77e5\u308b\u305f\u3081\uff09\u3001\u5fc5\u8981\u306a\u3059\u3079\u3066\u306e\u51e6\u7406\u3092\u884c\u3044\u307e\u3059\uff1a</p> <pre><code>from transformers import DataCollatorWithPadding\n\ndata_collator = DataCollatorWithPadding(tokenizer=tokenizer)\n</code></pre> <p>\u3053\u306e\u65b0\u3057\u3044\u30c4\u30fc\u30eb\u3092\u30c6\u30b9\u30c8\u3059\u308b\u305f\u3081\u3001\u30d0\u30c3\u30c1\u306b\u307e\u3068\u3081\u305f\u3044\u8a13\u7df4\u30bb\u30c3\u30c8\u304b\u3089\u3044\u304f\u3064\u304b\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u53d6\u5f97\u3057\u307e\u3057\u3087\u3046\u3002\u3053\u3053\u3067\u306f\u3001\u6587\u5b57\u5217\u3092\u542b\u307f\u3001\u30c6\u30f3\u30bd\u30eb\u3092\u4f5c\u6210\u3067\u304d\u306a\u3044\uff08\u6587\u5b57\u5217\u3067\u30c6\u30f3\u30bd\u30eb\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u306a\u3044\uff09<code>idx</code>\u3001<code>sentence1</code>\u3001<code>sentence2</code>\u5217\u3092\u524a\u9664\u3057\u3001\u30d0\u30c3\u30c1\u5185\u306e\u5404\u30a8\u30f3\u30c8\u30ea\u306e\u9577\u3055\u3092\u898b\u3066\u307f\u307e\u3059\uff1a</p> <pre><code>samples = tokenized_datasets[\"train\"][:8]\nsamples = {k: v for k, v in samples.items() if k not in [\"idx\", \"sentence1\", \"sentence2\"]}\n[len(x) for x in samples[\"input_ids\"]]\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>[50, 59, 47, 67, 59, 50, 62, 32]\n</code></pre></p> <p>\u9a5a\u304f\u3053\u3068\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u304c\u300132\u304b\u308967\u307e\u3067\u306e\u69d8\u3005\u306a\u9577\u3055\u306e\u30b5\u30f3\u30d7\u30eb\u304c\u5f97\u3089\u308c\u307e\u3059\u3002\u52d5\u7684\u30d1\u30c7\u30a3\u30f3\u30b0\u3068\u306f\u3001\u3053\u306e\u30d0\u30c3\u30c1\u5185\u306e\u30b5\u30f3\u30d7\u30eb\u306f\u3059\u3079\u3066\u3001\u30d0\u30c3\u30c1\u5185\u306e\u6700\u5927\u9577\u3067\u3042\u308b67\u307e\u3067\u30d1\u30c7\u30a3\u30f3\u30b0\u3055\u308c\u308b\u3079\u304d\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002\u52d5\u7684\u30d1\u30c7\u30a3\u30f3\u30b0\u306a\u3057\u3067\u306f\u3001\u3059\u3079\u3066\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u5168\u4f53\u306e\u6700\u5927\u9577\u3001\u307e\u305f\u306f\u30e2\u30c7\u30eb\u304c\u53d7\u3051\u5165\u308c\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u6700\u5927\u9577\u307e\u3067\u30d1\u30c7\u30a3\u30f3\u30b0\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002<code>data_collator</code>\u304c\u30d0\u30c3\u30c1\u3092\u9069\u5207\u306b\u52d5\u7684\u30d1\u30c7\u30a3\u30f3\u30b0\u3057\u3066\u3044\u308b\u304b\u30c0\u30d6\u30eb\u30c1\u30a7\u30c3\u30af\u3057\u307e\u3057\u3087\u3046\uff1a</p> <pre><code>batch = data_collator(samples)\n{k: v.shape for k, v in batch.items()}\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>{'input_ids': torch.Size([8, 67]),\n 'token_type_ids': torch.Size([8, 67]),\n 'attention_mask': torch.Size([8, 67]),\n 'labels': torch.Size([8])}\n</code></pre></p>","tags":["\u6a5f\u68b0\u5b66\u7fd2","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","Transformers","PyTorch","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406"]},{"location":"LLM/03_fine_tuning_a_pretrained_model/#trainer-api","title":"Trainer API\u3092\u4f7f\u7528\u3057\u305f\u30e2\u30c7\u30eb\u306e\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","text":"<p>\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u4f8b\u306f\u3001\u524d\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306e\u4f8b\u3092\u3059\u3067\u306b\u5b9f\u884c\u3057\u3066\u3044\u308b\u3053\u3068\u3092\u524d\u63d0\u3068\u3057\u3066\u3044\u307e\u3059\u3002\u5fc5\u8981\u306a\u3082\u306e\u306e\u30b7\u30e7\u30fc\u30c8\u8981\u7d04\u3092\u4ee5\u4e0b\u306b\u793a\u3057\u307e\u3059\uff1a</p> <pre><code>from datasets import load_dataset\nfrom transformers import AutoTokenizer, DataCollatorWithPadding\n\nraw_datasets = load_dataset(\"glue\", \"mrpc\")\ncheckpoint = \"bert-base-uncased\"\ntokenizer = AutoTokenizer.from_pretrained(checkpoint)\n\ndef tokenize_function(example):\n    return tokenizer(example[\"sentence1\"],example[\"sentence2\"], truncation=True)\n\ntokenized_datasets = raw_datasets.map(tokenize_function, batched=True)\ndata_collator = DataCollatorWithPadding(tokenizer=tokenizer)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>Map: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1725/1725 [00:00&lt;00:00, 31091.75 examples/s]\n</code></pre></p>","tags":["\u6a5f\u68b0\u5b66\u7fd2","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","Transformers","PyTorch","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406"]},{"location":"LLM/03_fine_tuning_a_pretrained_model/#_8","title":"\u8a13\u7df4","text":"<p><code>Trainer</code>\u3092\u5b9a\u7fa9\u3059\u308b\u524d\u306e\u6700\u521d\u306e\u30b9\u30c6\u30c3\u30d7\u306f\u3001<code>Trainer</code>\u304c\u8a13\u7df4\u3068\u8a55\u4fa1\u306b\u4f7f\u7528\u3059\u308b\u3059\u3079\u3066\u306e\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u542b\u3080<code>TrainingArguments</code>\u30af\u30e9\u30b9\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u3067\u3059\u3002\u63d0\u4f9b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u552f\u4e00\u306e\u5f15\u6570\u306f\u3001\u8a13\u7df4\u3055\u308c\u305f\u30e2\u30c7\u30eb\u304c\u4fdd\u5b58\u3055\u308c\u308b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3068\u3001\u9014\u4e2d\u306e\u30c1\u30a7\u30c3\u30af\u30dd\u30a4\u30f3\u30c8\u3067\u3059\u3002\u6b8b\u308a\u306f\u3059\u3079\u3066\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u307e\u307e\u306b\u3067\u304d\u3001\u57fa\u672c\u7684\u306a\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u306b\u306f\u304b\u306a\u308a\u826f\u304f\u6a5f\u80fd\u3059\u308b\u306f\u305a\u3067\u3059\u3002</p> <pre><code>from transformers import TrainingArguments\n\ntraining_args = TrainingArguments(\"test-trainer\")\n</code></pre> <p>\u9ad8\u5ea6\u306a\u8a2d\u5b9a</p> <p>\u5229\u7528\u53ef\u80fd\u306a\u3059\u3079\u3066\u306e\u8a13\u7df4\u5f15\u6570\u3068\u6700\u9069\u5316\u6226\u7565\u306e\u8a73\u7d30\u306b\u3064\u3044\u3066\u306f\u3001TrainingArguments\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3068\u8a13\u7df4\u8a2d\u5b9a\u30af\u30c3\u30af\u30d6\u30c3\u30af\u3092\u3054\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002</p> <p>2\u756a\u76ee\u306e\u30b9\u30c6\u30c3\u30d7\u306f\u30e2\u30c7\u30eb\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u3067\u3059\u3002</p> <pre><code>from transformers import AutoModelForSequenceClassification\n\nmodel = AutoModelForSequenceClassification.from_pretrained(checkpoint, num_labels=2)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>Some weights of BertForSequenceClassification were not initialized from the model checkpoint at bert-base-uncased and are newly initialized: ['classifier.bias', 'classifier.weight']\nYou should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n</code></pre></p> <p>\u3053\u306e\u4e8b\u524d\u8a13\u7df4\u3055\u308c\u305f\u30e2\u30c7\u30eb\u3092\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3057\u305f\u5f8c\u306b\u8b66\u544a\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002\u3053\u308c\u306f\u3001BERT\u304c\u6587\u30da\u30a2\u306e\u5206\u985e\u3067\u4e8b\u524d\u8a13\u7df4\u3055\u308c\u3066\u3044\u306a\u3044\u305f\u3081\u3001\u4e8b\u524d\u8a13\u7df4\u3055\u308c\u305f\u30e2\u30c7\u30eb\u306e\u30d8\u30c3\u30c9\u304c\u7834\u68c4\u3055\u308c\u3001\u30b7\u30fc\u30b1\u30f3\u30b9\u5206\u985e\u306b\u9069\u3057\u305f\u65b0\u3057\u3044\u30d8\u30c3\u30c9\u304c\u4ee3\u308f\u308a\u306b\u8ffd\u52a0\u3055\u308c\u305f\u305f\u3081\u3067\u3059\u3002\u8b66\u544a\u306f\u3001\u4e00\u90e8\u306e\u91cd\u307f\u304c\u4f7f\u7528\u3055\u308c\u306a\u304b\u3063\u305f\uff08\u7834\u68c4\u3055\u308c\u305f\u4e8b\u524d\u8a13\u7df4\u30d8\u30c3\u30c9\u306b\u5bfe\u5fdc\uff09\u3053\u3068\u3001\u304a\u3088\u3073\u4ed6\u306e\u91cd\u307f\u304c\u30e9\u30f3\u30c0\u30e0\u306b\u521d\u671f\u5316\u3055\u308c\u305f\uff08\u65b0\u3057\u3044\u30d8\u30c3\u30c9\u7528\uff09\u3053\u3068\u3092\u793a\u3057\u3066\u3044\u307e\u3059\u3002\u30e2\u30c7\u30eb\u3092\u8a13\u7df4\u3059\u308b\u3053\u3068\u3092\u63a8\u5968\u3057\u3066\u7d42\u308f\u308a\u3001\u305d\u308c\u304c\u307e\u3055\u306b\u4eca\u304b\u3089\u884c\u3046\u3053\u3068\u3067\u3059\u3002</p> <p>\u30e2\u30c7\u30eb\u304c\u3067\u304d\u305f\u3089\u3001\u3053\u308c\u307e\u3067\u306b\u69cb\u7bc9\u3057\u305f\u3059\u3079\u3066\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\uff08<code>model</code>\u3001<code>training_args</code>\u3001\u8a13\u7df4\u3068\u691c\u8a3c\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3001<code>data_collator</code>\u3001<code>processing_class</code>\uff09\u3092\u6e21\u3057\u3066<code>Trainer</code>\u3092\u5b9a\u7fa9\u3067\u304d\u307e\u3059\u3002<code>processing_class</code>\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u3001Trainer\u306b\u51e6\u7406\u306b\u4f7f\u7528\u3059\u308b\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3092\u4f1d\u3048\u308b\u65b0\u3057\u3044\u8ffd\u52a0\u6a5f\u80fd\u3067\u3059\uff1a</p> <pre><code>from transformers import Trainer\n\ntrainer = Trainer(\n    model,\n    training_args,\n    train_dataset=tokenized_datasets[\"train\"],\n    eval_dataset=tokenized_datasets[\"validation\"],\n    data_collator=data_collator,\n    processing_class=tokenizer,\n)\n</code></pre> <p><code>processing_class</code>\u3068\u3057\u3066\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3092\u6e21\u3059\u3068\u3001<code>Trainer</code>\u306b\u3088\u3063\u3066\u4f7f\u7528\u3055\u308c\u308b\u30c7\u30d5\u30a9\u30eb\u30c8\u306e<code>data_collator</code>\u306f<code>DataCollatorWithPadding</code>\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u306e\u5834\u5408\u3001<code>data_collator=data_collator</code>\u884c\u3092\u30b9\u30ad\u30c3\u30d7\u3067\u304d\u307e\u3059\u304c\u3001\u51e6\u7406\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306e\u3053\u306e\u91cd\u8981\u306a\u90e8\u5206\u3092\u793a\u3059\u305f\u3081\u306b\u3053\u3053\u306b\u542b\u3081\u307e\u3057\u305f\u3002</p> <p>\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3067\u30e2\u30c7\u30eb\u3092\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3059\u308b\u306b\u306f\u3001<code>Trainer</code>\u306e<code>train()</code>\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3059\u3060\u3051\u3067\u3059\uff1a</p> <pre><code>trainer.train()\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c:</p> Step Training Loss 500 0.576900 1000 0.369200 <p>\u3053\u308c\u306b\u3088\u308a\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u304c\u958b\u59cb\u3055\u308c\u307e\u3059\uff08GPU\u3067\u6570\u5206\u7a0b\u5ea6\u304b\u304b\u308a\u307e\u3059\uff09\u3002500\u30b9\u30c6\u30c3\u30d7\u3054\u3068\u306b\u8a13\u7df4\u640d\u5931\u304c\u5831\u544a\u3055\u308c\u307e\u3059\u3002\u305f\u3060\u3057\u3001\u30e2\u30c7\u30eb\u304c\u3069\u306e\u7a0b\u5ea6\u826f\u304f\uff08\u307e\u305f\u306f\u60aa\u304f\uff09\u5b9f\u884c\u3055\u308c\u3066\u3044\u308b\u304b\u306f\u6559\u3048\u3066\u304f\u308c\u307e\u305b\u3093\u3002\u3053\u308c\u306f\u4ee5\u4e0b\u306e\u7406\u7531\u306b\u3088\u308a\u307e\u3059\uff1a</p> <ol> <li><code>TrainingArguments</code>\u3067<code>eval_strategy</code>\u3092<code>\"steps\"</code>\uff08<code>eval_steps</code>\u3054\u3068\u306b\u8a55\u4fa1\uff09\u307e\u305f\u306f<code>\"epoch\"</code>\uff08\u5404\u30a8\u30dd\u30c3\u30af\u306e\u7d42\u308f\u308a\u306b\u8a55\u4fa1\uff09\u306b\u8a2d\u5b9a\u3057\u3066\u3001\u8a13\u7df4\u4e2d\u306b\u8a55\u4fa1\u3059\u308b\u3088\u3046<code>Trainer</code>\u306b\u6307\u793a\u3057\u307e\u305b\u3093\u3067\u3057\u305f\u3002</li> <li>\u305d\u306e\u8a55\u4fa1\u4e2d\u306b\u30e1\u30c8\u30ea\u30c3\u30af\u3092\u8a08\u7b97\u3059\u308b\u305f\u3081\u306e<code>compute_metrics()</code>\u95a2\u6570\u3092<code>Trainer</code>\u306b\u63d0\u4f9b\u3057\u307e\u305b\u3093\u3067\u3057\u305f\uff08\u305d\u3046\u3067\u306a\u3051\u308c\u3070\u8a55\u4fa1\u306f\u640d\u5931\u306e\u307f\u3092\u51fa\u529b\u3057\u3001\u3053\u308c\u306f\u3042\u307e\u308a\u76f4\u611f\u7684\u306a\u6570\u5024\u3067\u306f\u3042\u308a\u307e\u305b\u3093\uff09\u3002</li> </ol>","tags":["\u6a5f\u68b0\u5b66\u7fd2","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","Transformers","PyTorch","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406"]},{"location":"LLM/03_fine_tuning_a_pretrained_model/#_9","title":"\u8a55\u4fa1","text":"<p>\u6709\u7528\u306a<code>compute_metrics()</code>\u95a2\u6570\u3092\u69cb\u7bc9\u3057\u3001\u6b21\u56de\u306e\u8a13\u7df4\u6642\u306b\u4f7f\u7528\u3059\u308b\u65b9\u6cd5\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u3053\u306e\u95a2\u6570\u306f<code>EvalPrediction</code>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\uff08<code>predictions</code>\u30d5\u30a3\u30fc\u30eb\u30c9\u3068<code>label_ids</code>\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u6301\u3064\u540d\u524d\u4ed8\u304d\u30bf\u30d7\u30eb\uff09\u3092\u53d7\u3051\u53d6\u308a\u3001\u6587\u5b57\u5217\u304b\u3089\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u3078\u306e\u30de\u30c3\u30d4\u30f3\u30b0\u3067\u3042\u308b\u8f9e\u66f8\u3092\u8fd4\u3059\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff08\u6587\u5b57\u5217\u306f\u8fd4\u3055\u308c\u308b\u30e1\u30c8\u30ea\u30c3\u30af\u306e\u540d\u524d\u3001\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u306f\u305d\u306e\u5024\uff09\u3002\u30e2\u30c7\u30eb\u304b\u3089\u3044\u304f\u3064\u304b\u306e\u4e88\u6e2c\u3092\u5f97\u308b\u306b\u306f\u3001<code>Trainer.predict()</code>\u30b3\u30de\u30f3\u30c9\u3092\u4f7f\u7528\u3067\u304d\u307e\u3059\uff1a</p> <pre><code>predictions = trainer.predict(tokenized_datasets[\"validation\"])\nprint(predictions.predictions.shape, predictions.label_ids.shape)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>(408, 2) (408,)\n</code></pre></p> <p><code>predict()</code>\u30e1\u30bd\u30c3\u30c9\u306e\u51fa\u529b\u306f\u30013\u3064\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u6301\u3064\u5225\u306e\u540d\u524d\u4ed8\u304d\u30bf\u30d7\u30eb\u3067\u3059\uff1a<code>predictions</code>\u3001<code>label_ids</code>\u3001<code>metrics</code>\u3002<code>metrics</code>\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u306f\u3001\u6e21\u3055\u308c\u305f\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3067\u306e\u640d\u5931\u3068\u3001\u3044\u304f\u3064\u304b\u306e\u6642\u9593\u30e1\u30c8\u30ea\u30c3\u30af\uff08\u4e88\u6e2c\u306b\u304b\u304b\u3063\u305f\u6642\u9593\u306e\u5408\u8a08\u3068\u5e73\u5747\uff09\u304c\u542b\u307e\u308c\u307e\u3059\u3002<code>compute_metrics()</code>\u95a2\u6570\u3092\u5b8c\u6210\u3055\u305b\u3066<code>Trainer</code>\u306b\u6e21\u3059\u3068\u3001\u305d\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u306f<code>compute_metrics()</code>\u306b\u3088\u3063\u3066\u8fd4\u3055\u308c\u308b\u30e1\u30c8\u30ea\u30c3\u30af\u3082\u542b\u307e\u308c\u307e\u3059\u3002</p> <p>\u3054\u89a7\u306e\u3068\u304a\u308a\u3001<code>predictions</code>\u306f408 x 2\u306e\u5f62\u72b6\u3092\u6301\u30642\u6b21\u5143\u914d\u5217\u3067\u3059\uff08408\u306f\u4f7f\u7528\u3057\u305f\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u8981\u7d20\u6570\uff09\u3002\u3053\u308c\u3089\u306f<code>predict()</code>\u306b\u6e21\u3057\u305f\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u5404\u8981\u7d20\u306e\u30ed\u30b8\u30c3\u30c8\u3067\u3059\uff08\u524d\u7ae0\u3067\u898b\u305f\u3088\u3046\u306b\u3001\u3059\u3079\u3066\u306eTransformer\u30e2\u30c7\u30eb\u306f\u30ed\u30b8\u30c3\u30c8\u3092\u8fd4\u3057\u307e\u3059\uff09\u3002\u305d\u308c\u3089\u3092\u30e9\u30d9\u30eb\u3068\u6bd4\u8f03\u3067\u304d\u308b\u4e88\u6e2c\u306b\u5909\u63db\u3059\u308b\u306b\u306f\u30012\u756a\u76ee\u306e\u8ef8\u3067\u6700\u5927\u5024\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u53d6\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff1a</p> <pre><code>import numpy as np\n\npreds = np.argmax(predictions.predictions, axis=-1)\n</code></pre> <p>\u3053\u308c\u3067\u3001\u3053\u308c\u3089\u306e<code>preds</code>\u3092\u30e9\u30d9\u30eb\u3068\u6bd4\u8f03\u3067\u304d\u307e\u3059\u3002<code>compute_metric()</code>\u95a2\u6570\u3092\u69cb\u7bc9\u3059\u308b\u305f\u3081\u306b\u3001Evaluate\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30e1\u30c8\u30ea\u30c3\u30af\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u8aad\u307f\u8fbc\u3093\u3060\u306e\u3068\u540c\u3058\u3088\u3046\u306b\u7c21\u5358\u306b\u3001MRPC\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u95a2\u9023\u3059\u308b\u30e1\u30c8\u30ea\u30c3\u30af\u3092\u8aad\u307f\u8fbc\u3080\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u4eca\u56de\u306f<code>evaluate.load()</code>\u95a2\u6570\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u8fd4\u3055\u308c\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u306f\u3001\u30e1\u30c8\u30ea\u30c3\u30af\u8a08\u7b97\u306b\u4f7f\u7528\u3067\u304d\u308b<code>compute()</code>\u30e1\u30bd\u30c3\u30c9\u304c\u3042\u308a\u307e\u3059\uff1a</p> <pre><code>import evaluate\nmetric = evaluate.load(\"glue\", \"mrpc\")\nmetric.compute(predictions=preds, references=predictions.label_ids)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>{'accuracy': 0.8651960784313726, 'f1': 0.9063032367972743}\n</code></pre></p> <p>\u5f97\u3089\u308c\u308b\u6b63\u78ba\u306a\u7d50\u679c\u306f\u7570\u306a\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u30e2\u30c7\u30eb\u30d8\u30c3\u30c9\u306e\u30e9\u30f3\u30c0\u30e0\u521d\u671f\u5316\u306b\u3088\u3063\u3066\u5230\u9054\u3057\u305f\u30e1\u30c8\u30ea\u30c3\u30af\u304c\u5909\u308f\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u305f\u3081\u3067\u3059\u3002\u3053\u3053\u3067\u306f\u3001\u30e2\u30c7\u30eb\u304c\u691c\u8a3c\u30bb\u30c3\u30c8\u306786.52%\u306e\u7cbe\u5ea6\u306890.63%\u306eF1\u30b9\u30b3\u30a2\u3092\u6301\u3064\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\u3053\u308c\u3089\u306f\u3001GLUE\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u306eMRPC\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3067\u7d50\u679c\u3092\u8a55\u4fa1\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3055\u308c\u308b2\u3064\u306e\u30e1\u30c8\u30ea\u30c3\u30af\u3067\u3059\u3002BERT\u30da\u30fc\u30d1\u30fc\u306e\u8868\u3067\u306f\u3001\u30d9\u30fc\u30b9\u30e2\u30c7\u30eb\u306788.9\u306eF1\u30b9\u30b3\u30a2\u304c\u5831\u544a\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u305d\u308c\u306f<code>uncased</code>\u30e2\u30c7\u30eb\u3067\u3057\u305f\u304c\u3001\u73fe\u5728<code>cased</code>\u30e2\u30c7\u30eb\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u305f\u3081\u3001\u3088\u308a\u826f\u3044\u7d50\u679c\u304c\u8aac\u660e\u3067\u304d\u307e\u3059\u3002</p> <p>\u3059\u3079\u3066\u3092\u307e\u3068\u3081\u308b\u3068\u3001<code>compute_metrics()</code>\u95a2\u6570\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff1a</p> <pre><code>def compute_metrics(eval_preds):\n    metric = evaluate.load(\"glue\", \"mrpc\")\n    logits, labels = eval_preds\n    predictions = np.argmax(logits, axis=-1)\n    return metric.compute(predictions=predictions, references=labels)\n</code></pre> <p>\u5404\u30a8\u30dd\u30c3\u30af\u306e\u7d42\u308f\u308a\u306b\u30e1\u30c8\u30ea\u30c3\u30af\u3092\u5831\u544a\u3059\u308b\u305f\u3081\u306b\u5b9f\u969b\u306b\u4f7f\u7528\u3055\u308c\u3066\u3044\u308b\u306e\u3092\u898b\u308b\u305f\u3081\u306b\u3001\u3053\u306e<code>compute_metrics()</code>\u95a2\u6570\u3067\u65b0\u3057\u3044<code>Trainer</code>\u3092\u5b9a\u7fa9\u3059\u308b\u65b9\u6cd5\u3092\u793a\u3057\u307e\u3059\uff1a</p> <pre><code>training_args = TrainingArguments(\"test-trainer\", eval_strategy=\"epoch\")\nmodel = AutoModelForSequenceClassification.from_pretrained(checkpoint, num_labels=2)\n\ntrainer = Trainer(\n    model,\n    training_args,\n    train_dataset=tokenized_datasets[\"train\"],\n    eval_dataset=tokenized_datasets[\"validation\"],\n    data_collator=data_collator,\n    processing_class=tokenizer,\n    compute_metrics=compute_metrics,\n)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>Some weights of BertForSequenceClassification were not initialized from the model checkpoint at bert-base-uncased and are newly initialized: ['classifier.bias', 'classifier.weight']\nYou should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n</code></pre></p> <p><code>eval_strategy</code>\u3092<code>\"epoch\"</code>\u306b\u8a2d\u5b9a\u3057\u305f\u65b0\u3057\u3044<code>TrainingArguments</code>\u3068\u65b0\u3057\u3044\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u305d\u3046\u3067\u306a\u3051\u308c\u3070\u3001\u3059\u3067\u306b\u8a13\u7df4\u3057\u305f\u30e2\u30c7\u30eb\u306e\u8a13\u7df4\u3092\u7d9a\u3051\u308b\u3060\u3051\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\u65b0\u3057\u3044\u8a13\u7df4\u5b9f\u884c\u3092\u958b\u59cb\u3059\u308b\u306b\u306f\u3001\u4ee5\u4e0b\u3092\u5b9f\u884c\u3057\u307e\u3059\uff1a</p> <pre><code>trainer.train()\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>|Epoch  |Training Loss  |Validation Loss    |Accuracy   |F1|\n|-|-|-|-|-|\n|1| No log| 0.381103|   0.845588    |0.890815|\n|2| 0.519900|   0.458264|   0.852941    |0.897611|\n|3| 0.292800    |0.665536   |0.857843   |0.900685|\n</code></pre></p> <p>\u4eca\u56de\u306f\u3001\u8a13\u7df4\u640d\u5931\u306b\u52a0\u3048\u3066\u3001\u5404\u30a8\u30dd\u30c3\u30af\u306e\u7d42\u308f\u308a\u306b\u691c\u8a3c\u640d\u5931\u3068\u30e1\u30c8\u30ea\u30c3\u30af\u304c\u5831\u544a\u3055\u308c\u307e\u3059\u3002\u518d\u3073\u3001\u30e2\u30c7\u30eb\u306e\u30e9\u30f3\u30c0\u30e0\u30d8\u30c3\u30c9\u521d\u671f\u5316\u306e\u305f\u3081\u3001\u5230\u9054\u3059\u308b\u6b63\u78ba\u306a\u7cbe\u5ea6/F1\u30b9\u30b3\u30a2\u306f\u79c1\u305f\u3061\u304c\u898b\u3064\u3051\u305f\u3082\u306e\u3068\u306f\u5c11\u3057\u7570\u306a\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u540c\u3058\u3088\u3046\u306a\u7bc4\u56f2\u306b\u3042\u308b\u306f\u305a\u3067\u3059\u3002</p>","tags":["\u6a5f\u68b0\u5b66\u7fd2","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","Transformers","PyTorch","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406"]},{"location":"LLM/03_fine_tuning_a_pretrained_model/#_10","title":"\u9ad8\u5ea6\u306a\u8a13\u7df4\u6a5f\u80fd","text":"<p><code>Trainer</code>\u306b\u306f\u3001\u30e2\u30c0\u30f3\u306a\u6df1\u5c64\u5b66\u7fd2\u306e\u30d9\u30b9\u30c8\u30d7\u30e9\u30af\u30c6\u30a3\u30b9\u3092\u30a2\u30af\u30bb\u30b9\u3057\u3084\u3059\u304f\u3059\u308b\u591a\u304f\u306e\u7d44\u307f\u8fbc\u307f\u6a5f\u80fd\u304c\u3042\u308a\u307e\u3059\uff1a</p> <p>\u6df7\u5408\u7cbe\u5ea6\u8a13\u7df4: GPU\u30e1\u30e2\u30ea\u3092\u7bc0\u7d04\u3057\u3001\u8a13\u7df4\u3092\u9ad8\u901f\u5316\uff1a</p> <pre><code>training_args = TrainingArguments(\n    \"test-training\",\n    eval_strategy=\"epoch\",\n    fp16=True  # \u6df7\u5408\u7cbe\u5ea6\u3092\u6709\u52b9\u5316\n)\n</code></pre> <p>\u52fe\u914d\u7d2f\u7a4d: GPU\u30e1\u30e2\u30ea\u304c\u9650\u3089\u308c\u3066\u3044\u308b\u5834\u5408\u306e\u52b9\u679c\u7684\u306a\u5927\u304d\u306a\u30d0\u30c3\u30c1\u30b5\u30a4\u30ba\uff1a</p> <pre><code>training_args = TrainingArguments(\n    \"test-trainer\",\n    eval_strategy=\"epoch\",\n    per_device_train_batch_size=4,\n    gradient_accumulation_steps=4,  # \u52b9\u679c\u7684\u306a\u30d0\u30c3\u30c1\u30b5\u30a4\u30ba = 4 * 4 = 16\n)\n</code></pre> <p>\u5b66\u7fd2\u7387\u30b9\u30b1\u30b8\u30e5\u30fc\u30ea\u30f3\u30b0: Trainer\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u7dda\u5f62\u6e1b\u8870\u3092\u4f7f\u7528\u3057\u307e\u3059\u304c\u3001\u3053\u308c\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3067\u304d\u307e\u3059\uff1a</p> <pre><code>training_args = TrainingArguments(\n    \"test-trainer\",\n    eval_strategy=\"epoch\",\n    learning_rate=2e-5,\n    lr_scheduler_type=\"cosine\",  # \u7570\u306a\u308b\u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u30fc\u3092\u8a66\u3059\n)\n</code></pre>","tags":["\u6a5f\u68b0\u5b66\u7fd2","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","Transformers","PyTorch","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406"]},{"location":"LLM/03_fine_tuning_a_pretrained_model/#_11","title":"\u5b8c\u5168\u306a\u8a13\u7df4\u30eb\u30fc\u30d7","text":"<p>\u6700\u5f8c\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u884c\u3063\u305f\u306e\u3068\u540c\u3058\u7d50\u679c\u3092\u3001<code>Trainer</code>\u30af\u30e9\u30b9\u3092\u4f7f\u7528\u305b\u305a\u306b\u3001\u30e2\u30c0\u30f3\u306aPyTorch\u30d9\u30b9\u30c8\u30d7\u30e9\u30af\u30c6\u30a3\u30b9\u3067\u30b9\u30af\u30e9\u30c3\u30c1\u304b\u3089\u8a13\u7df4\u30eb\u30fc\u30d7\u3092\u5b9f\u88c5\u3057\u3066\u9054\u6210\u3059\u308b\u65b9\u6cd5\u3092\u898b\u3066\u3044\u304d\u307e\u3059\u3002\u518d\u3073\u3001\u30bb\u30af\u30b7\u30e7\u30f32\u3067\u30c7\u30fc\u30bf\u51e6\u7406\u3092\u884c\u3063\u305f\u3068\u4eee\u5b9a\u3057\u307e\u3059\u3002\u5fc5\u8981\u306a\u3059\u3079\u3066\u3092\u30ab\u30d0\u30fc\u3059\u308b\u77ed\u3044\u8981\u7d04\u3092\u4ee5\u4e0b\u306b\u793a\u3057\u307e\u3059\uff1a</p> <pre><code>from datasets import load_dataset\nfrom transformers import AutoTokenizer, DataCollatorWithPadding\n\nraw_datasets = load_dataset(\"glue\", \"mrpc\")\ncheckpoint = \"bert-base-uncased\"\ntokenizer = AutoTokenizer.from_pretrained(checkpoint)\n\n\ndef tokenize_function(example):\n    return tokenizer(example[\"sentence1\"], example[\"sentence2\"], truncation=True)\n\n\ntokenized_datasets = raw_datasets.map(tokenize_function, batched=True)\ndata_collator = DataCollatorWithPadding(tokenizer=tokenizer)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>Map: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3668/3668 [00:00&lt;00:00, 33587.91 examples/s]\n</code></pre></p>","tags":["\u6a5f\u68b0\u5b66\u7fd2","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","Transformers","PyTorch","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406"]},{"location":"LLM/03_fine_tuning_a_pretrained_model/#_12","title":"\u8a13\u7df4\u306e\u6e96\u5099","text":"<p>\u5b9f\u969b\u306b\u8a13\u7df4\u30eb\u30fc\u30d7\u3092\u66f8\u304f\u524d\u306b\u3001\u3044\u304f\u3064\u304b\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u5b9a\u7fa9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u6700\u521d\u306e\u3082\u306e\u306f\u3001\u30d0\u30c3\u30c1\u3092\u53cd\u5fa9\u51e6\u7406\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3059\u308b\u30c7\u30fc\u30bf\u30ed\u30fc\u30c0\u30fc\u3067\u3059\u3002\u3057\u304b\u3057\u3001\u3053\u308c\u3089\u306e\u30c7\u30fc\u30bf\u30ed\u30fc\u30c0\u30fc\u3092\u5b9a\u7fa9\u3059\u308b\u524d\u306b\u3001<code>tokenized_datasets</code>\u306b\u5c11\u3057\u5f8c\u51e6\u7406\u3092\u9069\u7528\u3057\u3001<code>Trainer</code>\u304c\u81ea\u52d5\u7684\u306b\u884c\u3063\u305f\u3044\u304f\u3064\u304b\u306e\u3053\u3068\u3092\u51e6\u7406\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u5177\u4f53\u7684\u306b\u306f\u3001\u4ee5\u4e0b\u304c\u5fc5\u8981\u3067\u3059\uff1a</p> <ul> <li>\u30e2\u30c7\u30eb\u304c\u671f\u5f85\u3057\u306a\u3044\u5024\u306b\u5bfe\u5fdc\u3059\u308b\u5217\u3092\u524a\u9664\u3059\u308b\uff08<code>sentence1</code>\u3084<code>sentence2</code>\u5217\u306a\u3069\uff09</li> <li>\u5217<code>label</code>\u3092<code>labels</code>\u306b\u540d\u524d\u5909\u66f4\u3059\u308b\uff08\u30e2\u30c7\u30eb\u306f\u5f15\u6570\u304c<code>labels</code>\u3068\u3044\u3046\u540d\u524d\u3067\u3042\u308b\u3053\u3068\u3092\u671f\u5f85\u3059\u308b\u305f\u3081\uff09</li> <li>\u30ea\u30b9\u30c8\u3067\u306f\u306a\u304fPyTorch\u30c6\u30f3\u30bd\u30eb\u3092\u8fd4\u3059\u3088\u3046\u306b\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u5f62\u5f0f\u3092\u8a2d\u5b9a\u3059\u308b</li> </ul> <p><code>tokenized_datasets</code>\u306b\u306f\u3001\u3053\u308c\u3089\u306e\u5404\u30b9\u30c6\u30c3\u30d7\u306b\u5bfe\u5fdc\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u304c\u3042\u308a\u307e\u3059\uff1a</p> <pre><code>tokenized_datasets = tokenized_datasets.remove_columns([\"sentence1\", \"sentence2\", \"idx\"])\ntokenized_datasets = tokenized_datasets.rename_column(\"label\", \"labels\")\ntokenized_datasets.set_format(\"torch\")\n</code></pre> <pre><code>tokenized_datasets[\"train\"].column_names\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>['labels', 'input_ids', 'token_type_ids', 'attention_mask']\n</code></pre></p> <p>\u3053\u308c\u3067\u5b8c\u4e86\u3057\u305f\u306e\u3067\u3001\u30c7\u30fc\u30bf\u30ed\u30fc\u30c0\u30fc\u3092\u7c21\u5358\u306b\u5b9a\u7fa9\u3067\u304d\u307e\u3059\uff1a</p> <pre><code>from torch.utils.data import DataLoader\n\ntrain_dataloader = DataLoader(\n    tokenized_datasets[\"train\"], shuffle=True, batch_size=8, collate_fn=data_collator\n)\n\neval_dataloader = DataLoader(\n    tokenized_datasets[\"validation\"], batch_size=8, collate_fn=data_collator\n)\n</code></pre> <p>\u30c7\u30fc\u30bf\u51e6\u7406\u306b\u9593\u9055\u3044\u304c\u306a\u3044\u3053\u3068\u3092\u7d20\u65e9\u304f\u78ba\u8a8d\u3059\u308b\u305f\u3081\u306b\u3001\u3053\u306e\u3088\u3046\u306b\u30d0\u30c3\u30c1\u3092\u691c\u67fb\u3067\u304d\u307e\u3059\uff1a</p> <pre><code>for batch in train_dataloader:\n    break\n{k: v.shape for k, v in batch.items()}\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>{'labels': torch.Size([8]),\n 'input_ids': torch.Size([8, 70]),\n 'token_type_ids': torch.Size([8, 70]),\n 'attention_mask': torch.Size([8, 70])}\n</code></pre></p> <p>\u8a13\u7df4\u30c7\u30fc\u30bf\u30ed\u30fc\u30c0\u30fc\u306b<code>shuffle=True</code>\u3092\u8a2d\u5b9a\u3057\u3001\u30d0\u30c3\u30c1\u5185\u306e\u6700\u5927\u9577\u306b\u30d1\u30c7\u30a3\u30f3\u30b0\u3057\u3066\u3044\u308b\u305f\u3081\u3001\u5b9f\u969b\u306e\u5f62\u72b6\u306f\u304a\u305d\u3089\u304f\u5c11\u3057\u7570\u306a\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <p>\u30c7\u30fc\u30bf\u524d\u51e6\u7406\u304c\u5b8c\u5168\u306b\u7d42\u4e86\u3057\u305f\u306e\u3067\uff08\u3042\u3089\u3086\u308bML\u5b9f\u8df5\u8005\u306b\u3068\u3063\u3066\u6e80\u8db3\u306e\u3044\u304f\u3001\u3057\u304b\u3057\u6349\u3048\u3069\u3053\u308d\u306e\u306a\u3044\u76ee\u6a19\uff09\u3001\u30e2\u30c7\u30eb\u306b\u76ee\u3092\u5411\u3051\u307e\u3057\u3087\u3046\u3002\u524d\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3068\u5168\u304f\u540c\u3058\u3088\u3046\u306b\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3057\u307e\u3059\uff1a</p> <pre><code>from transformers import AutoModelForSequenceClassification\n\nmodel = AutoModelForSequenceClassification.from_pretrained(checkpoint, num_labels=2)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>Some weights of BertForSequenceClassification were not initialized from the model checkpoint at bert-base-uncased and are newly initialized: ['classifier.bias', 'classifier.weight']\nYou should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n</code></pre></p> <p>\u640d\u5931\u3068\u30ed\u30b8\u30c3\u30c8\u306e\u4e21\u65b9\u3092\u53d6\u5f97\u3057\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308b\u305f\u3081\u306b\u3001\u5b9f\u969b\u306b\u3053\u306e\u30e2\u30c7\u30eb\u30921\u3064\u306e\u30d0\u30c3\u30c1\u3067\u901a\u3057\u307e\u3059\uff1a</p> <pre><code>batch = batch.to(\"mps\")\noutputs = model(**batch)\nprint(outputs.loss, outputs.logits.shape)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>tensor(0.0035, device='mps:0', grad_fn=&lt;NllLossBackward0&gt;) torch.Size([8, 2])\n</code></pre></p> <p>\u3059\u3079\u3066\u306eHugging Face Transformers\u30e2\u30c7\u30eb\u306f\u3001<code>labels</code>\u304c\u63d0\u4f9b\u3055\u308c\u308b\u3068\u640d\u5931\u3092\u8fd4\u3057\u3001\u30ed\u30b8\u30c3\u30c8\u3082\u53d6\u5f97\u3067\u304d\u307e\u3059\uff08\u30d0\u30c3\u30c1\u5185\u306e\u5404\u5165\u529b\u306b\u5bfe\u3057\u30662\u3064\u3001\u3064\u307e\u308a8 x 2\u306e\u30b5\u30a4\u30ba\u306e\u30c6\u30f3\u30bd\u30eb\uff09\u3002</p> <p>\u8a13\u7df4\u30eb\u30fc\u30d7\u3092\u66f8\u304f\u6e96\u5099\u304c\u307b\u307c\u6574\u3044\u307e\u3057\u305f\uff01\u3042\u30682\u3064\u3060\u3051\u5fc5\u8981\u306a\u3082\u306e\u304c\u3042\u308a\u307e\u3059\uff1a\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u30fc\u3068\u5b66\u7fd2\u7387\u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u30fc\u3067\u3059\u3002<code>Trainer</code>\u304c\u624b\u52d5\u3067\u884c\u3063\u3066\u3044\u305f\u3053\u3068\u3092\u518d\u73fe\u3057\u3088\u3046\u3068\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u540c\u3058\u30c7\u30d5\u30a9\u30eb\u30c8\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002<code>Trainer</code>\u304c\u4f7f\u7528\u3059\u308b\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u30fc\u306f<code>AdamW</code>\u3067\u3001\u3053\u308c\u306fAdam\u3068\u540c\u3058\u3067\u3059\u304c\u3001\u91cd\u307f\u6e1b\u8870\u6b63\u5247\u5316\u306e\u3072\u306d\u308a\u304c\u3042\u308a\u307e\u3059\uff08Ilya Loshchilov\u3068Frank Hutter\u306b\u3088\u308b\"Decoupled Weight Decay Regularization\"\u3092\u53c2\u7167\uff09\uff1a</p> <pre><code>from torch.optim import AdamW\n\noptimizer = AdamW(model.parameters(), lr=5e-5)\n</code></pre> <p>\u30e2\u30c0\u30f3\u6700\u9069\u5316\u306e\u30b3\u30c4</p> <p>\u3055\u3089\u306b\u826f\u3044\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306e\u305f\u3081\u306b\u3001\u4ee5\u4e0b\u3092\u8a66\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a</p> <ul> <li>\u91cd\u307f\u6e1b\u8870\u4ed8\u304dAdamW: <code>AdamW(model.parameters(), lr=5e-5, weight_decay=0.01)</code></li> <li>8\u30d3\u30c3\u30c8Adam: \u30e1\u30e2\u30ea\u52b9\u7387\u7684\u306a\u6700\u9069\u5316\u306e\u305f\u3081\u306b<code>bitsandbytes</code>\u3092\u4f7f\u7528</li> <li>\u7570\u306a\u308b\u5b66\u7fd2\u7387: \u5927\u304d\u306a\u30e2\u30c7\u30eb\u306b\u306f\u4f4e\u3044\u5b66\u7fd2\u7387\uff081e-5\u304b\u30893e-5\uff09\u304c\u3057\u3070\u3057\u3070\u826f\u304f\u6a5f\u80fd\u3057\u307e\u3059</li> </ul> <p>\u6700\u5f8c\u306b\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u4f7f\u7528\u3055\u308c\u308b\u5b66\u7fd2\u7387\u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u30fc\u306f\u3001\u6700\u5927\u5024\uff085e-5\uff09\u304b\u30890\u3078\u306e\u5358\u7d14\u306a\u7dda\u5f62\u6e1b\u8870\u3067\u3059\u3002\u9069\u5207\u306b\u5b9a\u7fa9\u3059\u308b\u306b\u306f\u3001\u5b9f\u884c\u3059\u308b\u8a13\u7df4\u30b9\u30c6\u30c3\u30d7\u6570\u3092\u77e5\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u5b9f\u884c\u3057\u305f\u3044\u30a8\u30dd\u30c3\u30af\u6570\u306b\u8a13\u7df4\u30d0\u30c3\u30c1\u6570\uff08\u8a13\u7df4\u30c7\u30fc\u30bf\u30ed\u30fc\u30c0\u30fc\u306e\u9577\u3055\uff09\u3092\u639b\u3051\u305f\u3082\u306e\u3067\u3059\u3002<code>Trainer</code>\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u30673\u30a8\u30dd\u30c3\u30af\u3092\u4f7f\u7528\u3059\u308b\u306e\u3067\u3001\u305d\u308c\u306b\u5f93\u3044\u307e\u3059\uff1a</p> <pre><code>from transformers import get_scheduler\nnum_epochs = 3\nnum_training_steps = num_epochs * len(train_dataloader)\n\nlr_scheduler = get_scheduler(\n    \"linear\",\n    optimizer=optimizer,\n    num_warmup_steps=0,\n    num_training_steps=num_training_steps\n)\n\nprint(num_training_steps)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>1377\n</code></pre></p>","tags":["\u6a5f\u68b0\u5b66\u7fd2","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","Transformers","PyTorch","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406"]},{"location":"LLM/03_fine_tuning_a_pretrained_model/#_13","title":"\u8a13\u7df4\u30eb\u30fc\u30d7","text":"<p>\u6700\u5f8c\u306e1\u3064\uff1aGPU\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u5834\u5408\u306f\u305d\u308c\u3092\u4f7f\u7528\u3057\u305f\u3044\u3067\u3059\uff08CPU\u3067\u306f\u3001\u8a13\u7df4\u306b\u6570\u5206\u3067\u306f\u306a\u304f\u6570\u6642\u9593\u304b\u304b\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\uff09\u3002\u3053\u308c\u3092\u884c\u3046\u305f\u3081\u306b\u3001\u30e2\u30c7\u30eb\u3068\u30d0\u30c3\u30c1\u3092\u914d\u7f6e\u3059\u308b<code>device</code>\u3092\u5b9a\u7fa9\u3057\u307e\u3059\uff1a</p> <pre><code>import torch\n\n# CUDA\u7528\n# device = torch.device(\"cuda\") if torch.cuda.is_available() else torch.device(\"cpu\")\ndevice = torch.device(\"mps\") if torch.mps.is_available() else torch.device(\"cpu\")\nmodel.to(device)\ndevice\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>device(type='mps')\n</code></pre></p> <p>\u3053\u308c\u3067\u8a13\u7df4\u306e\u6e96\u5099\u304c\u6574\u3044\u307e\u3057\u305f\uff01\u8a13\u7df4\u304c\u3044\u3064\u7d42\u4e86\u3059\u308b\u304b\u306e\u611f\u899a\u3092\u5f97\u308b\u305f\u3081\u306b\u3001<code>tqdm</code>\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u7528\u3057\u3066\u8a13\u7df4\u30b9\u30c6\u30c3\u30d7\u6570\u306b\u30d7\u30ed\u30b0\u30ec\u30b9\u30d0\u30fc\u3092\u8ffd\u52a0\u3057\u307e\u3059\uff1a</p> <pre><code>from tqdm import tqdm\n\nprogress_bar = tqdm(range(num_training_steps))\n\nmodel.train()\nfor epoch in range(num_epochs):\n    for batch in train_dataloader:\n        batch = {k: v.to(device) for k, v in batch.items()}\n        outputs = model(**batch)\n        loss = outputs.loss\n        loss.backward()\n\n        optimizer.step()\n        lr_scheduler.step()\n        optimizer.zero_grad()\n        progress_bar.update(1)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1377/1377 [01:17&lt;00:00, 14.10it/s]\n</code></pre></p> <p>\u30e2\u30c0\u30f3\u8a13\u7df4\u6700\u9069\u5316</p> <p>\u8a13\u7df4\u30eb\u30fc\u30d7\u3092\u3055\u3089\u306b\u52b9\u7387\u7684\u306b\u3059\u308b\u305f\u3081\u306b\u3001\u4ee5\u4e0b\u3092\u691c\u8a0e\u3057\u3066\u304f\u3060\u3055\u3044\uff1a</p> <ul> <li>\u52fe\u914d\u30af\u30ea\u30c3\u30d4\u30f3\u30b0: <code>optimizer.step()</code>\u306e\u524d\u306b<code>torch.nn.utils.clip_grad_norm_(model.parameters(), max_norm=1.0)</code>\u3092\u8ffd\u52a0</li> <li>\u6df7\u5408\u7cbe\u5ea6: \u3088\u308a\u9ad8\u901f\u306a\u8a13\u7df4\u306e\u305f\u3081\u306b<code>torch.cuda.amp.autocast()</code>\u3068<code>GradScaler</code>\u3092\u4f7f\u7528</li> <li>\u52fe\u914d\u7d2f\u7a4d: \u3088\u308a\u5927\u304d\u306a\u30d0\u30c3\u30c1\u30b5\u30a4\u30ba\u3092\u30b7\u30df\u30e5\u30ec\u30fc\u30c8\u3059\u308b\u305f\u3081\u306b\u8907\u6570\u306e\u30d0\u30c3\u30c1\u3067\u52fe\u914d\u3092\u7d2f\u7a4d</li> <li>\u30c1\u30a7\u30c3\u30af\u30dd\u30a4\u30f3\u30c8: \u8a13\u7df4\u304c\u4e2d\u65ad\u3055\u308c\u305f\u5834\u5408\u306b\u518d\u958b\u3067\u304d\u308b\u3088\u3046\u5b9a\u671f\u7684\u306b\u30e2\u30c7\u30eb\u30c1\u30a7\u30c3\u30af\u30dd\u30a4\u30f3\u30c8\u3092\u4fdd\u5b58</li> </ul> <p>\u3054\u89a7\u306e\u3068\u304a\u308a\u3001\u8a13\u7df4\u30eb\u30fc\u30d7\u306e\u6838\u5fc3\u90e8\u5206\u306f\u5c0e\u5165\u90e8\u306e\u3082\u306e\u3068\u3088\u304f\u4f3c\u3066\u3044\u307e\u3059\u3002\u30ec\u30dd\u30fc\u30c8\u3092\u6c42\u3081\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u3053\u306e\u8a13\u7df4\u30eb\u30fc\u30d7\u306f\u30e2\u30c7\u30eb\u306e\u8abf\u5b50\u306b\u3064\u3044\u3066\u4f55\u3082\u6559\u3048\u3066\u304f\u308c\u307e\u305b\u3093\u3002\u305d\u306e\u305f\u3081\u306b\u306f\u8a55\u4fa1\u30eb\u30fc\u30d7\u3092\u8ffd\u52a0\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002</p>","tags":["\u6a5f\u68b0\u5b66\u7fd2","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","Transformers","PyTorch","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406"]},{"location":"LLM/03_fine_tuning_a_pretrained_model/#_14","title":"\u8a55\u4fa1\u30eb\u30fc\u30d7","text":"<p>\u524d\u306b\u884c\u3063\u305f\u3088\u3046\u306b\u3001Hugging Face Evaluate\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u63d0\u4f9b\u3059\u308b\u30e1\u30c8\u30ea\u30c3\u30af\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u3059\u3067\u306b<code>metric.compute()</code>\u30e1\u30bd\u30c3\u30c9\u3092\u898b\u307e\u3057\u305f\u304c\u3001\u30e1\u30c8\u30ea\u30c3\u30af\u306f\u5b9f\u969b\u306b\u4e88\u6e2c\u30eb\u30fc\u30d7\u3092\u9032\u3081\u308b\u969b\u306b<code>add_batch()</code>\u30e1\u30bd\u30c3\u30c9\u3067\u30d0\u30c3\u30c1\u3092\u7d2f\u7a4d\u3067\u304d\u307e\u3059\u3002\u3059\u3079\u3066\u306e\u30d0\u30c3\u30c1\u3092\u7d2f\u7a4d\u3057\u305f\u3089\u3001<code>metric.compute()</code>\u3067\u6700\u7d42\u7d50\u679c\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\u8a55\u4fa1\u30eb\u30fc\u30d7\u3067\u3053\u306e\u3059\u3079\u3066\u3092\u5b9f\u88c5\u3059\u308b\u65b9\u6cd5\u306f\u6b21\u306e\u3068\u304a\u308a\u3067\u3059\uff1a</p> <pre><code>import evaluate\n\nmetric = evaluate.load(\"glue\", \"mrpc\")\nmodel.eval()\nfor batch in eval_dataloader:\n    batch = {k: v.to(device) for k, v in batch.items()}\n    with torch.no_grad():\n        outputs = model(**batch)\n    logits = outputs.logits\n    predictions = torch.argmax(logits, dim=-1)\n    metric.add_batch(predictions=predictions, references=batch[\"labels\"])\n\nmetric.compute()\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>{'accuracy': 0.8578431372549019, 'f1': 0.9006849315068494}\n</code></pre></p>","tags":["\u6a5f\u68b0\u5b66\u7fd2","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","Transformers","PyTorch","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406"]},{"location":"LLM/03_fine_tuning_a_pretrained_model/#hugging-face-accelerate","title":"Hugging Face Accelerate\u3067\u8a13\u7df4\u30eb\u30fc\u30d7\u3092\u5f37\u5316","text":"<p>\u524d\u306b\u5b9a\u7fa9\u3057\u305f\u8a13\u7df4\u30eb\u30fc\u30d7\u306f\u3001\u5358\u4e00\u306eCPU\u307e\u305f\u306fGPU\u3067\u6b63\u5e38\u306b\u6a5f\u80fd\u3057\u307e\u3059\u3002\u3057\u304b\u3057\u3001Hugging Face Accelerate\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u7528\u3059\u308b\u3068\u3001\u308f\u305a\u304b\u306a\u8abf\u6574\u3067\u8907\u6570\u306eGPU\u307e\u305f\u306fTPU\u3067\u306e\u5206\u6563\u8a13\u7df4\u3092\u6709\u52b9\u306b\u3067\u304d\u307e\u3059\u3002Hugging Face Accelerate\u306f\u3001\u5206\u6563\u8a13\u7df4\u3001\u6df7\u5408\u7cbe\u5ea6\u3001\u304a\u3088\u3073\u30c7\u30d0\u30a4\u30b9\u914d\u7f6e\u306e\u8907\u96d1\u3055\u3092\u81ea\u52d5\u7684\u306b\u51e6\u7406\u3057\u307e\u3059\u3002\u8a13\u7df4\u3068\u691c\u8a3c\u30c7\u30fc\u30bf\u30ed\u30fc\u30c0\u30fc\u306e\u4f5c\u6210\u304b\u3089\u59cb\u3081\u3066\u3001\u624b\u52d5\u8a13\u7df4\u30eb\u30fc\u30d7\u304c\u3069\u306e\u3088\u3046\u306b\u306a\u308b\u304b\u3092\u4ee5\u4e0b\u306b\u793a\u3057\u307e\u3059\uff1a</p> <pre><code>from accelerate import Accelerator\nfrom torch.optim import AdamW\nfrom transformers import AutoModelForSequenceClassification, get_scheduler\n\naccelerator = Accelerator()\n\nmodel = AutoModelForSequenceClassification.from_pretrained(checkpoint, num_labels=2)\noptimizer = AdamW(model.parameters(), lr=3e-5)\n\ntrain_dl, eval_dl, model, optimizer = accelerator.prepare(\n    train_dataloader, eval_dataloader, model, optimizer\n)\n\nnum_epochs = 3\nnum_training_steps = num_epochs * len(train_dl)\nlr_scheduler = get_scheduler(\n    \"linear\",\n    optimizer=optimizer,\n    num_warmup_steps=0,\n    num_training_steps=num_training_steps,\n)\n\nprogress_bar = tqdm(range(num_training_steps))\n\nmodel.train()\nfor epoch in range(num_epochs):\n    for batch in train_dl:\n        outputs = model(**batch)\n        loss = outputs.loss\n        accelerator.backward(loss)\n\n        optimizer.step()\n        lr_scheduler.step()\n        optimizer.zero_grad()\n        progress_bar.update(1)\n</code></pre> <p>\u8ffd\u52a0\u3059\u308b\u6700\u521d\u306e\u884c\u306f\u30a4\u30f3\u30dd\u30fc\u30c8\u884c\u3067\u3059\u30022\u756a\u76ee\u306e\u884c\u306f\u74b0\u5883\u3092\u8abf\u3079\u3066\u9069\u5207\u306a\u5206\u6563\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u3092\u521d\u671f\u5316\u3059\u308b<code>Accelerator</code>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3057\u307e\u3059\u3002Hugging Face Accelerate\u304c\u30c7\u30d0\u30a4\u30b9\u914d\u7f6e\u3092\u51e6\u7406\u3059\u308b\u305f\u3081\u3001\u30e2\u30c7\u30eb\u3092\u30c7\u30d0\u30a4\u30b9\u306b\u914d\u7f6e\u3059\u308b\u884c\u3092\u524a\u9664\u3067\u304d\u307e\u3059\uff08\u307e\u305f\u306f\u3001\u597d\u3080\u5834\u5408\u306f<code>device</code>\u306e\u4ee3\u308f\u308a\u306b<code>accelerator.device</code>\u3092\u4f7f\u7528\u3059\u308b\u3088\u3046\u306b\u5909\u66f4\u3067\u304d\u307e\u3059\uff09\u3002</p> <p>\u305d\u306e\u5f8c\u3001\u4e3b\u306a\u4f5c\u696d\u306f\u3001\u30c7\u30fc\u30bf\u30ed\u30fc\u30c0\u30fc\u3001\u30e2\u30c7\u30eb\u3001\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u30fc\u3092<code>accelerator.prepare()</code>\u306b\u9001\u308b\u884c\u3067\u884c\u308f\u308c\u307e\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u5206\u6563\u8a13\u7df4\u304c\u610f\u56f3\u3057\u305f\u3068\u304a\u308a\u306b\u6a5f\u80fd\u3059\u308b\u3088\u3046\u306b\u3001\u3053\u308c\u3089\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u9069\u5207\u306a\u30b3\u30f3\u30c6\u30ca\u30fc\u306b\u30e9\u30c3\u30d7\u3055\u308c\u307e\u3059\u3002\u6b8b\u308a\u306e\u5909\u66f4\u306f\u3001\u30d0\u30c3\u30c1\u3092<code>device</code>\u306b\u914d\u7f6e\u3059\u308b\u884c\u3092\u524a\u9664\u3059\u308b\u3053\u3068\uff08\u518d\u3073\u3001\u3053\u308c\u3092\u4fdd\u6301\u3057\u305f\u3044\u5834\u5408\u306f<code>accelerator.device</code>\u3092\u4f7f\u7528\u3059\u308b\u3088\u3046\u306b\u5909\u66f4\u3059\u308b\u3060\u3051\u3067\u3059\uff09\u3068\u3001<code>loss.backward()</code>\u3092<code>accelerator.backward(loss)</code>\u306b\u7f6e\u304d\u63db\u3048\u308b\u3053\u3068\u3067\u3059\u3002</p> <p>\u3053\u308c\u3092<code>train.py</code>\u30b9\u30af\u30ea\u30d7\u30c8\u306b\u7f6e\u304f\u3068\u3001\u3042\u3089\u3086\u308b\u7a2e\u985e\u306e\u5206\u6563\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u3067\u5b9f\u884c\u53ef\u80fd\u306a\u30b9\u30af\u30ea\u30d7\u30c8\u306b\u306a\u308a\u307e\u3059\u3002\u5206\u6563\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u3067\u8a66\u3059\u306b\u306f\u3001\u6b21\u306e\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u307e\u3059\uff1a</p> <pre><code>accelerate config\n</code></pre> <p>\u3053\u308c\u306b\u3088\u308a\u3001\u3044\u304f\u3064\u304b\u306e\u8cea\u554f\u306b\u7b54\u3048\u308b\u3088\u3046\u6c42\u3081\u3089\u308c\u3001\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3067\u4f7f\u7528\u3055\u308c\u308b\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u306b\u56de\u7b54\u304c\u30c0\u30f3\u30d7\u3055\u308c\u307e\u3059\uff1a</p> <pre><code>accelerate launch train.py\n</code></pre>","tags":["\u6a5f\u68b0\u5b66\u7fd2","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","Transformers","PyTorch","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406"]},{"location":"LLM/03_fine_tuning_a_pretrained_model/#_15","title":"\u6b21\u306e\u30b9\u30c6\u30c3\u30d7\u3068\u30d9\u30b9\u30c8\u30d7\u30e9\u30af\u30c6\u30a3\u30b9","text":"<p>\u3053\u308c\u3067\u4e00\u304b\u3089\u8a13\u7df4\u3092\u5b9f\u88c5\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3093\u3060\u306e\u3067\u3001\u672c\u756a\u4f7f\u7528\u306e\u305f\u3081\u306e\u8ffd\u52a0\u306e\u8003\u616e\u4e8b\u9805\u3092\u3044\u304f\u3064\u304b\u793a\u3057\u307e\u3059\uff1a</p> <p>\u30e2\u30c7\u30eb\u8a55\u4fa1: \u7cbe\u5ea6\u3060\u3051\u3067\u306a\u304f\u3001\u8907\u6570\u306e\u30e1\u30c8\u30ea\u30c3\u30af\u3067\u30e2\u30c7\u30eb\u3092\u5e38\u306b\u8a55\u4fa1\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u5305\u62ec\u7684\u306a\u8a55\u4fa1\u306b\u306fHugging Face Evaluate\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u7528\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <p>\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0: \u4f53\u7cfb\u7684\u306a\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u6700\u9069\u5316\u306b\u306fOptuna\u3084Ray Tune\u306a\u3069\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u4f7f\u7528\u3092\u691c\u8a0e\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <p>\u30e2\u30c7\u30eb\u76e3\u8996: \u8a13\u7df4\u4e2d\u306f\u8a13\u7df4\u30e1\u30c8\u30ea\u30c3\u30af\u3001\u5b66\u7fd2\u66f2\u7dda\u3001\u691c\u8a3c\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3092\u8ffd\u8de1\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <p>\u30e2\u30c7\u30eb\u5171\u6709: \u8a13\u7df4\u304c\u5b8c\u4e86\u3057\u305f\u3089\u3001\u30b3\u30df\u30e5\u30cb\u30c6\u30a3\u3067\u5229\u7528\u3067\u304d\u308b\u3088\u3046\u306bHugging Face Hub\u3067\u30e2\u30c7\u30eb\u3092\u5171\u6709\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <p>\u52b9\u7387\u6027: \u5927\u304d\u306a\u30e2\u30c7\u30eb\u306b\u3064\u3044\u3066\u306f\u3001\u52fe\u914d\u30c1\u30a7\u30c3\u30af\u30dd\u30a4\u30f3\u30c8\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u52b9\u7387\u7684\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\uff08LoRA\u3001AdaLoRA\uff09\u3001\u307e\u305f\u306f\u91cf\u5b50\u5316\u624b\u6cd5\u306a\u3069\u306e\u6280\u8853\u3092\u691c\u8a0e\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <p>\u3053\u308c\u3067\u30ab\u30b9\u30bf\u30e0\u8a13\u7df4\u30eb\u30fc\u30d7\u3092\u4f7f\u7528\u3057\u305f\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u306e\u8a73\u7d30\u306a\u89e3\u8aac\u3092\u7d42\u4e86\u3057\u307e\u3059\u3002\u3053\u3053\u3067\u5b66\u3093\u3060\u30b9\u30ad\u30eb\u306f\u3001\u8a13\u7df4\u30d7\u30ed\u30bb\u30b9\u3092\u5b8c\u5168\u306b\u5236\u5fa1\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u5834\u5408\u3084\u3001<code>Trainer</code> API\u304c\u63d0\u4f9b\u3059\u308b\u3082\u306e\u3092\u8d85\u3048\u305f\u30ab\u30b9\u30bf\u30e0\u8a13\u7df4\u30ed\u30b8\u30c3\u30af\u3092\u5b9f\u88c5\u3057\u305f\u3044\u5834\u5408\u306b\u5f79\u7acb\u3061\u307e\u3059\u3002</p>","tags":["\u6a5f\u68b0\u5b66\u7fd2","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","Transformers","PyTorch","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406"]},{"location":"LLM/03_fine_tuning_a_pretrained_model/#_16","title":"\u5b66\u7fd2\u66f2\u7dda\u306e\u7406\u89e3","text":"<p><code>Trainer</code> API\u3068\u30ab\u30b9\u30bf\u30e0\u8a13\u7df4\u30eb\u30fc\u30d7\u306e\u4e21\u65b9\u3092\u4f7f\u7528\u3057\u3066\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3092\u5b9f\u88c5\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3093\u3060\u306e\u3067\u3001\u7d50\u679c\u3092\u3069\u3046\u89e3\u91c8\u3059\u308b\u304b\u3092\u7406\u89e3\u3059\u308b\u3053\u3068\u304c\u91cd\u8981\u3067\u3059\u3002\u5b66\u7fd2\u66f2\u7dda\u306f\u3001\u8a13\u7df4\u4e2d\u306e\u30e2\u30c7\u30eb\u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3092\u8a55\u4fa1\u3057\u3001\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3092\u4f4e\u4e0b\u3055\u305b\u308b\u524d\u306b\u6f5c\u5728\u7684\u306a\u554f\u984c\u3092\u7279\u5b9a\u3059\u308b\u306e\u306b\u975e\u5e38\u306b\u6709\u7528\u306a\u30c4\u30fc\u30eb\u3067\u3059\u3002</p> <p>\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u306f\u3001\u7cbe\u5ea6\u3068\u640d\u5931\u66f2\u7dda\u306e\u8aad\u307f\u65b9\u3068\u89e3\u91c8\u65b9\u6cd5\u3001\u7570\u306a\u308b\u66f2\u7dda\u306e\u5f62\u72b6\u304c\u30e2\u30c7\u30eb\u306e\u52d5\u4f5c\u306b\u3064\u3044\u3066\u4f55\u3092\u6559\u3048\u3066\u304f\u308c\u308b\u304b\u3001\u4e00\u822c\u7684\u306a\u8a13\u7df4\u554f\u984c\u306b\u3069\u3046\u5bfe\u51e6\u3059\u308b\u304b\u3092\u63a2\u308a\u307e\u3059\u3002</p>","tags":["\u6a5f\u68b0\u5b66\u7fd2","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","Transformers","PyTorch","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406"]},{"location":"LLM/03_fine_tuning_a_pretrained_model/#_17","title":"\u5b66\u7fd2\u66f2\u7dda\u3068\u306f\u4f55\u304b\uff1f","text":"<p>\u5b66\u7fd2\u66f2\u7dda\u306f\u3001\u8a13\u7df4\u4e2d\u306e\u6642\u9593\u7d4c\u904e\u306b\u3088\u308b\u30e2\u30c7\u30eb\u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u30e1\u30c8\u30ea\u30c3\u30af\u306e\u8996\u899a\u7684\u8868\u73fe\u3067\u3059\u3002\u76e3\u8996\u3059\u3079\u304d\u6700\u3082\u91cd\u8981\u306a2\u3064\u306e\u66f2\u7dda\u306f\uff1a</p> <ul> <li>\u640d\u5931\u66f2\u7dda: \u8a13\u7df4\u30b9\u30c6\u30c3\u30d7\u3084\u30a8\u30dd\u30c3\u30af\u306b\u308f\u305f\u3063\u3066\u30e2\u30c7\u30eb\u306e\u8aa4\u5dee\uff08\u640d\u5931\uff09\u304c\u3069\u3046\u5909\u5316\u3059\u308b\u304b\u3092\u793a\u3059</li> <li>\u7cbe\u5ea6\u66f2\u7dda: \u8a13\u7df4\u30b9\u30c6\u30c3\u30d7\u3084\u30a8\u30dd\u30c3\u30af\u306b\u308f\u305f\u308b\u6b63\u89e3\u4e88\u6e2c\u306e\u5272\u5408\u3092\u793a\u3059</li> </ul> <p>\u3053\u308c\u3089\u306e\u66f2\u7dda\u306f\u3001\u30e2\u30c7\u30eb\u304c\u52b9\u679c\u7684\u306b\u5b66\u7fd2\u3057\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u7406\u89e3\u3059\u308b\u306e\u306b\u5f79\u7acb\u3061\u3001\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3092\u5411\u4e0a\u3055\u305b\u308b\u305f\u3081\u306e\u8abf\u6574\u3092\u884c\u3046\u6307\u91dd\u3068\u306a\u308a\u307e\u3059\u3002Transformers\u3067\u306f\u3001\u3053\u308c\u3089\u306e\u30e1\u30c8\u30ea\u30c3\u30af\u306f\u5404\u30d0\u30c3\u30c1\u3067\u500b\u5225\u306b\u8a08\u7b97\u3055\u308c\u3001\u30c7\u30a3\u30b9\u30af\u306b\u30ed\u30b0\u3055\u308c\u307e\u3059\u3002\u305d\u306e\u5f8c\u3001Weights &amp; Biases\u306a\u3069\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u7528\u3057\u3066\u3053\u308c\u3089\u306e\u66f2\u7dda\u3092\u8996\u899a\u5316\u3057\u3001\u6642\u9593\u7d4c\u904e\u306b\u3088\u308b\u30e2\u30c7\u30eb\u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3092\u8ffd\u8de1\u3067\u304d\u307e\u3059\u3002</p>","tags":["\u6a5f\u68b0\u5b66\u7fd2","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","Transformers","PyTorch","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406"]},{"location":"LLM/03_fine_tuning_a_pretrained_model/#_18","title":"\u640d\u5931\u66f2\u7dda","text":"<p>\u640d\u5931\u66f2\u7dda\u306f\u3001\u6642\u9593\u7d4c\u904e\u306b\u3088\u308b\u30e2\u30c7\u30eb\u306e\u8aa4\u5dee\u306e\u6e1b\u5c11\u3092\u793a\u3057\u307e\u3059\u3002\u5178\u578b\u7684\u306a\u6210\u529f\u3057\u305f\u8a13\u7df4\u5b9f\u884c\u3067\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u66f2\u7dda\u304c\u898b\u3089\u308c\u307e\u3059\uff1a</p> <p></p> <ul> <li>\u9ad8\u3044\u521d\u671f\u640d\u5931: \u30e2\u30c7\u30eb\u306f\u6700\u9069\u5316\u306a\u3057\u3067\u958b\u59cb\u3059\u308b\u305f\u3081\u3001\u6700\u521d\u306f\u4e88\u6e2c\u304c\u60aa\u3044</li> <li>\u640d\u5931\u306e\u6e1b\u5c11: \u8a13\u7df4\u304c\u9032\u3080\u306b\u3064\u308c\u3066\u3001\u640d\u5931\u306f\u4e00\u822c\u7684\u306b\u6e1b\u5c11\u3059\u308b\u306f\u305a</li> <li>\u53ce\u675f: \u6700\u7d42\u7684\u306b\u3001\u640d\u5931\u306f\u4f4e\u3044\u5024\u3067\u5b89\u5b9a\u3057\u3001\u30e2\u30c7\u30eb\u304c\u30c7\u30fc\u30bf\u306e\u30d1\u30bf\u30fc\u30f3\u3092\u5b66\u7fd2\u3057\u305f\u3053\u3068\u3092\u793a\u3059</li> </ul> <p>\u524d\u306e\u7ae0\u3068\u540c\u69d8\u306b\u3001<code>Trainer</code> API\u3092\u4f7f\u7528\u3057\u3066\u3053\u308c\u3089\u306e\u30e1\u30c8\u30ea\u30c3\u30af\u3092\u8ffd\u8de1\u3057\u3001\u30c0\u30c3\u30b7\u30e5\u30dc\u30fc\u30c9\u3067\u8996\u899a\u5316\u3067\u304d\u307e\u3059\u3002\u4ee5\u4e0b\u306f\u3001Weights &amp; Biases\u3067\u3053\u308c\u3092\u884c\u3046\u65b9\u6cd5\u306e\u4f8b\u3067\u3059\u3002</p>","tags":["\u6a5f\u68b0\u5b66\u7fd2","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","Transformers","PyTorch","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406"]},{"location":"LLM/03_fine_tuning_a_pretrained_model/#_19","title":"\u7cbe\u5ea6\u66f2\u7dda","text":"<p>\u7cbe\u5ea6\u66f2\u7dda\u306f\u3001\u6642\u9593\u7d4c\u904e\u306b\u3088\u308b\u6b63\u89e3\u4e88\u6e2c\u306e\u5272\u5408\u3092\u793a\u3057\u307e\u3059\u3002\u640d\u5931\u66f2\u7dda\u3068\u306f\u7570\u306a\u308a\u3001\u7cbe\u5ea6\u66f2\u7dda\u306f\u4e00\u822c\u7684\u306b\u30e2\u30c7\u30eb\u304c\u5b66\u7fd2\u3059\u308b\u306b\u3064\u308c\u3066\u5897\u52a0\u3057\u3001\u640d\u5931\u66f2\u7dda\u3088\u308a\u3082\u591a\u304f\u306e\u30b9\u30c6\u30c3\u30d7\u3092\u542b\u3080\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p> <p></p> <ul> <li>\u4f4e\u3044\u30b9\u30bf\u30fc\u30c8: \u30e2\u30c7\u30eb\u304c\u307e\u3060\u30c7\u30fc\u30bf\u306e\u30d1\u30bf\u30fc\u30f3\u3092\u5b66\u7fd2\u3057\u3066\u3044\u306a\u3044\u305f\u3081\u3001\u521d\u671f\u7cbe\u5ea6\u306f\u4f4e\u3044\u306f\u305a</li> <li>\u8a13\u7df4\u3068\u3068\u3082\u306b\u5897\u52a0: \u30e2\u30c7\u30eb\u304c\u30d1\u30bf\u30fc\u30f3\u3092\u5b66\u7fd2\u3067\u304d\u308b\u5834\u5408\u3001\u7cbe\u5ea6\u306f\u4e00\u822c\u7684\u306b\u5411\u4e0a\u3059\u308b\u306f\u305a</li> <li>\u30d7\u30e9\u30c8\u30fc\u3092\u793a\u3059\u3053\u3068\u304c\u3042\u308b: \u7cbe\u5ea6\u306f\u6ed1\u3089\u304b\u306b\u5897\u52a0\u3059\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u3057\u3070\u3057\u3070\u96e2\u6563\u7684\u306a\u30b8\u30e3\u30f3\u30d7\u3067\u5897\u52a0\u3059\u308b</li> </ul> <p>\u7cbe\u5ea6\u66f2\u7dda\u304c\u300c\u6bb5\u968e\u7684\u300d\u306a\u7406\u7531</p> <p>\u640d\u5931\u306f\u9023\u7d9a\u7684\u3067\u3059\u304c\u3001\u7cbe\u5ea6\u306f\u96e2\u6563\u7684\u306a\u4e88\u6e2c\u3068\u771f\u306e\u30e9\u30d9\u30eb\u3092\u6bd4\u8f03\u3059\u308b\u3053\u3068\u3067\u8a08\u7b97\u3055\u308c\u307e\u3059\u3002\u30e2\u30c7\u30eb\u306e\u4fe1\u983c\u5ea6\u306e\u308f\u305a\u304b\u306a\u6539\u5584\u306f\u6700\u7d42\u4e88\u6e2c\u3092\u5909\u66f4\u3057\u306a\u3044\u53ef\u80fd\u6027\u304c\u3042\u308a\u3001\u95be\u5024\u3092\u8d8a\u3048\u308b\u307e\u3067\u7cbe\u5ea6\u306f\u5e73\u5766\u306a\u307e\u307e\u306b\u306a\u308a\u307e\u3059\u3002</p>","tags":["\u6a5f\u68b0\u5b66\u7fd2","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","Transformers","PyTorch","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406"]},{"location":"LLM/03_fine_tuning_a_pretrained_model/#_20","title":"\u53ce\u675f","text":"<p>\u53ce\u675f\u306f\u3001\u30e2\u30c7\u30eb\u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u304c\u5b89\u5b9a\u3057\u3001\u640d\u5931\u3068\u7cbe\u5ea6\u66f2\u7dda\u304c\u5e73\u5766\u306b\u306a\u3063\u305f\u3068\u304d\u306b\u767a\u751f\u3057\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u30e2\u30c7\u30eb\u304c\u30c7\u30fc\u30bf\u306e\u30d1\u30bf\u30fc\u30f3\u3092\u5b66\u7fd2\u3057\u3001\u4f7f\u7528\u6e96\u5099\u304c\u3067\u304d\u305f\u3068\u3044\u3046\u5146\u5019\u3067\u3059\u3002\u7c21\u5358\u306b\u8a00\u3048\u3070\u3001\u8a13\u7df4\u3059\u308b\u305f\u3073\u306b\u30e2\u30c7\u30eb\u304c\u5b89\u5b9a\u3057\u305f\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306b\u53ce\u675f\u3059\u308b\u3053\u3068\u3092\u76ee\u6307\u3057\u3066\u3044\u307e\u3059\u3002</p> <p></p> <p>\u30e2\u30c7\u30eb\u304c\u53ce\u675f\u3057\u305f\u3089\u3001\u65b0\u3057\u3044\u30c7\u30fc\u30bf\u3067\u4e88\u6e2c\u3092\u884c\u3046\u305f\u3081\u306b\u4f7f\u7528\u3057\u3001\u8a55\u4fa1\u30e1\u30c8\u30ea\u30c3\u30af\u3092\u53c2\u7167\u3057\u3066\u30e2\u30c7\u30eb\u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3092\u7406\u89e3\u3067\u304d\u307e\u3059\u3002</p>","tags":["\u6a5f\u68b0\u5b66\u7fd2","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","Transformers","PyTorch","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406"]},{"location":"LLM/03_fine_tuning_a_pretrained_model/#_21","title":"\u5b66\u7fd2\u66f2\u7dda\u30d1\u30bf\u30fc\u30f3\u306e\u89e3\u91c8","text":"<p>\u7570\u306a\u308b\u66f2\u7dda\u306e\u5f62\u72b6\u306f\u3001\u30e2\u30c7\u30eb\u306e\u8a13\u7df4\u306e\u7570\u306a\u308b\u5074\u9762\u3092\u660e\u3089\u304b\u306b\u3057\u307e\u3059\u3002\u6700\u3082\u4e00\u822c\u7684\u306a\u30d1\u30bf\u30fc\u30f3\u3068\u305d\u306e\u610f\u5473\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002</p>","tags":["\u6a5f\u68b0\u5b66\u7fd2","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","Transformers","PyTorch","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406"]},{"location":"LLM/03_fine_tuning_a_pretrained_model/#_22","title":"\u5065\u5168\u306a\u5b66\u7fd2\u66f2\u7dda","text":"<p>\u9069\u5207\u306b\u52d5\u4f5c\u3057\u3066\u3044\u308b\u8a13\u7df4\u5b9f\u884c\u306f\u3001\u901a\u5e38\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u66f2\u7dda\u306e\u5f62\u72b6\u3092\u793a\u3057\u307e\u3059\uff1a</p> <p></p> <p>\u4e0a\u306e\u56f3\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u640d\u5931\u66f2\u7dda\uff08\u5de6\uff09\u3068\u5bfe\u5fdc\u3059\u308b\u7cbe\u5ea6\u66f2\u7dda\uff08\u53f3\uff09\u306e\u4e21\u65b9\u304c\u8868\u793a\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u3089\u306e\u66f2\u7dda\u306b\u306f\u660e\u78ba\u306a\u7279\u5fb4\u304c\u3042\u308a\u307e\u3059\u3002</p> <p>\u640d\u5931\u66f2\u7dda\u306f\u3001\u6642\u9593\u7d4c\u904e\u306b\u3088\u308b\u30e2\u30c7\u30eb\u306e\u640d\u5931\u5024\u3092\u793a\u3057\u3066\u3044\u307e\u3059\u3002\u6700\u521d\u306f\u640d\u5931\u304c\u9ad8\u304f\u3001\u305d\u306e\u5f8c\u5f90\u3005\u306b\u6e1b\u5c11\u3057\u3001\u30e2\u30c7\u30eb\u304c\u6539\u5584\u3057\u3066\u3044\u308b\u3053\u3068\u3092\u793a\u3057\u307e\u3059\u3002\u640d\u5931\u5024\u306e\u6e1b\u5c11\u306f\u3001\u4e88\u6e2c\u3055\u308c\u305f\u51fa\u529b\u3068\u771f\u306e\u51fa\u529b\u306e\u9593\u306e\u8aa4\u5dee\u3092\u8868\u3059\u305f\u3081\u3001\u30e2\u30c7\u30eb\u304c\u3088\u308a\u826f\u3044\u4e88\u6e2c\u3092\u884c\u3063\u3066\u3044\u308b\u3053\u3068\u3092\u793a\u5506\u3057\u307e\u3059\u3002</p> <p>\u6b21\u306b\u7cbe\u5ea6\u66f2\u7dda\u306b\u6ce8\u76ee\u3057\u307e\u3057\u3087\u3046\u3002\u3053\u308c\u306f\u6642\u9593\u7d4c\u904e\u306b\u3088\u308b\u30e2\u30c7\u30eb\u306e\u7cbe\u5ea6\u3092\u8868\u3057\u3066\u3044\u307e\u3059\u3002\u7cbe\u5ea6\u66f2\u7dda\u306f\u4f4e\u3044\u5024\u304b\u3089\u59cb\u307e\u308a\u3001\u8a13\u7df4\u304c\u9032\u3080\u306b\u3064\u308c\u3066\u5897\u52a0\u3057\u307e\u3059\u3002\u7cbe\u5ea6\u306f\u6b63\u3057\u304f\u5206\u985e\u3055\u308c\u305f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u5272\u5408\u3092\u6e2c\u5b9a\u3057\u307e\u3059\u3002\u3057\u305f\u304c\u3063\u3066\u3001\u7cbe\u5ea6\u66f2\u7dda\u304c\u4e0a\u6607\u3059\u308b\u306b\u3064\u308c\u3066\u3001\u30e2\u30c7\u30eb\u304c\u3088\u308a\u591a\u304f\u306e\u6b63\u3057\u3044\u4e88\u6e2c\u3092\u884c\u3063\u3066\u3044\u308b\u3053\u3068\u3092\u8868\u3057\u307e\u3059\u3002</p> <p>\u66f2\u7dda\u306e\u6ed1\u3089\u304b\u3055\u3068\u7cbe\u5ea6\u66f2\u7dda\u306e\u300c\u30d7\u30e9\u30c8\u30fc\u300d\u306e\u5b58\u5728\u306f1\u3064\u306e\u6ce8\u76ee\u3059\u3079\u304d\u9055\u3044\u3067\u3059\u3002\u640d\u5931\u306f\u6ed1\u3089\u304b\u306b\u6e1b\u5c11\u3059\u308b\u4e00\u65b9\u3001\u7cbe\u5ea6\u66f2\u7dda\u306e\u30d7\u30e9\u30c8\u30fc\u306f\u9023\u7d9a\u7684\u306a\u5897\u52a0\u3067\u306f\u306a\u304f\u96e2\u6563\u7684\u306a\u30b8\u30e3\u30f3\u30d7\u3092\u793a\u3057\u307e\u3059\u3002\u3053\u306e\u52d5\u4f5c\u306f\u7cbe\u5ea6\u306e\u6e2c\u5b9a\u65b9\u6cd5\u306b\u3088\u308b\u3082\u306e\u3067\u3059\u3002\u30e2\u30c7\u30eb\u306e\u51fa\u529b\u304c\u30bf\u30fc\u30b2\u30c3\u30c8\u306b\u8fd1\u3065\u304f\u3068\u640d\u5931\u306f\u6539\u5584\u3067\u304d\u307e\u3059\u304c\u3001\u6700\u7d42\u4e88\u6e2c\u304c\u307e\u3060\u6b63\u3057\u304f\u306a\u3044\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\u3057\u304b\u3057\u3001\u7cbe\u5ea6\u306f\u4e88\u6e2c\u304c\u6b63\u3057\u304f\u306a\u308b\u95be\u5024\u3092\u8d8a\u3048\u305f\u5834\u5408\u306b\u306e\u307f\u6539\u5584\u3057\u3001\u30d7\u30e9\u30c8\u30fc\u3092\u4f5c\u308a\u307e\u3059\u3002</p> <p>\u4f8b\u3048\u3070\u3001\u732b\uff080\uff09\u3068\u72ac\uff081\uff09\u3092\u533a\u5225\u3059\u308b\u30d0\u30a4\u30ca\u30ea\u5206\u985e\u5668\u3067\u3001\u30e2\u30c7\u30eb\u304c\u72ac\u306e\u753b\u50cf\uff08\u771f\u50241\uff09\u306b\u5bfe\u3057\u30660.3\u3092\u4e88\u6e2c\u3057\u305f\u5834\u5408\u3001\u3053\u308c\u306f0\u306b\u4e38\u3081\u3089\u308c\u3001\u6b63\u3057\u304f\u306a\u3044\u5206\u985e\u306b\u306a\u308a\u307e\u3059\u3002\u6b21\u306e\u30b9\u30c6\u30c3\u30d7\u30670.4\u3092\u4e88\u6e2c\u3057\u305f\u5834\u5408\u3001\u307e\u3060\u6b63\u3057\u304f\u3042\u308a\u307e\u305b\u3093\u30020.4\u306f0.3\u3088\u308a\u30821\u306b\u8fd1\u3044\u305f\u3081\u640d\u5931\u306f\u6e1b\u5c11\u3057\u307e\u3059\u304c\u3001\u7cbe\u5ea6\u306f\u5909\u308f\u3089\u305a\u3001\u30d7\u30e9\u30c8\u30fc\u3092\u4f5c\u308a\u307e\u3059\u3002\u7cbe\u5ea6\u306f\u3001\u30e2\u30c7\u30eb\u304c1\u306b\u4e38\u3081\u3089\u308c\u308b0.5\u3088\u308a\u5927\u304d\u306a\u5024\u3092\u4e88\u6e2c\u3057\u305f\u5834\u5408\u306b\u306e\u307f\u30b8\u30e3\u30f3\u30d7\u3057\u307e\u3059\u3002</p> <p>\u5065\u5168\u306a\u66f2\u7dda\u306e\u7279\u5fb4</p> <ul> <li>\u640d\u5931\u306e\u6ed1\u3089\u304b\u306a\u6e1b\u5c11: \u8a13\u7df4\u3068\u691c\u8a3c\u306e\u4e21\u65b9\u306e\u640d\u5931\u304c\u7740\u5b9f\u306b\u6e1b\u5c11</li> <li>\u8a13\u7df4/\u691c\u8a3c\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306e\u8fd1\u63a5: \u8a13\u7df4\u3068\u691c\u8a3c\u30e1\u30c8\u30ea\u30c3\u30af\u9593\u306e\u5c0f\u3055\u306a\u30ae\u30e3\u30c3\u30d7</li> <li>\u53ce\u675f: \u66f2\u7dda\u304c\u5e73\u5766\u306b\u306a\u308a\u3001\u30e2\u30c7\u30eb\u304c\u30d1\u30bf\u30fc\u30f3\u3092\u5b66\u7fd2\u3057\u305f\u3053\u3068\u3092\u793a\u3059</li> </ul>","tags":["\u6a5f\u68b0\u5b66\u7fd2","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","Transformers","PyTorch","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406"]},{"location":"LLM/03_fine_tuning_a_pretrained_model/#_23","title":"\u5b9f\u8df5\u4f8b","text":"<p>\u5b66\u7fd2\u66f2\u7dda\u306e\u5b9f\u8df5\u4f8b\u3092\u3044\u304f\u3064\u304b\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u307e\u305a\u3001\u8a13\u7df4\u4e2d\u306b\u5b66\u7fd2\u66f2\u7dda\u3092\u76e3\u8996\u3059\u308b\u30a2\u30d7\u30ed\u30fc\u30c1\u3092\u3044\u304f\u3064\u304b\u53d6\u308a\u4e0a\u3052\u307e\u3059\u3002\u4ee5\u4e0b\u3067\u306f\u3001\u5b66\u7fd2\u66f2\u7dda\u3067\u89b3\u5bdf\u3067\u304d\u308b\u7570\u306a\u308b\u30d1\u30bf\u30fc\u30f3\u3092\u5206\u6790\u3057\u307e\u3059\u3002</p>","tags":["\u6a5f\u68b0\u5b66\u7fd2","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","Transformers","PyTorch","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406"]},{"location":"LLM/03_fine_tuning_a_pretrained_model/#_24","title":"\u8a13\u7df4\u4e2d","text":"<p>\u8a13\u7df4\u30d7\u30ed\u30bb\u30b9\u4e2d\uff08<code>trainer.train()</code>\u3092\u5b9f\u884c\u3057\u305f\u5f8c\uff09\u3001\u3053\u308c\u3089\u306e\u4e3b\u8981\u6307\u6a19\u3092\u76e3\u8996\u3067\u304d\u307e\u3059\uff1a</p> <ol> <li>\u640d\u5931\u53ce\u675f: \u640d\u5931\u304c\u307e\u3060\u6e1b\u5c11\u3057\u3066\u3044\u308b\u304b\u3001\u30d7\u30e9\u30c8\u30fc\u306b\u9054\u3057\u305f\u304b\uff1f</li> <li>\u904e\u5b66\u7fd2\u306e\u5146\u5019: \u8a13\u7df4\u640d\u5931\u304c\u6e1b\u5c11\u3057\u3066\u3044\u308b\u9593\u306b\u691c\u8a3c\u640d\u5931\u304c\u5897\u52a0\u3057\u59cb\u3081\u3066\u3044\u308b\u304b\uff1f</li> <li>\u5b66\u7fd2\u7387: \u66f2\u7dda\u304c\u904e\u5ea6\u306b\u4e0d\u5b89\u5b9a\uff08LR\u304c\u9ad8\u3059\u304e\u308b\uff09\u307e\u305f\u306f\u5e73\u5766\u3059\u304e\u308b\uff08LR\u304c\u4f4e\u3059\u304e\u308b\uff09\u304b\uff1f</li> <li>\u5b89\u5b9a\u6027: \u554f\u984c\u3092\u793a\u3059\u7a81\u7136\u306e\u30b9\u30d1\u30a4\u30af\u3084\u4e0b\u964d\u304c\u3042\u308b\u304b\uff1f</li> </ol>","tags":["\u6a5f\u68b0\u5b66\u7fd2","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","Transformers","PyTorch","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406"]},{"location":"LLM/03_fine_tuning_a_pretrained_model/#_25","title":"\u8a13\u7df4\u5f8c","text":"<p>\u8a13\u7df4\u30d7\u30ed\u30bb\u30b9\u304c\u5b8c\u4e86\u3057\u305f\u5f8c\u3001\u5b8c\u5168\u306a\u66f2\u7dda\u3092\u5206\u6790\u3057\u3066\u30e2\u30c7\u30eb\u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3092\u7406\u89e3\u3067\u304d\u307e\u3059\u3002</p> <ol> <li>\u6700\u7d42\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9: \u30e2\u30c7\u30eb\u306f\u8a31\u5bb9\u53ef\u80fd\u306a\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u30ec\u30d9\u30eb\u306b\u9054\u3057\u305f\u304b\uff1f</li> <li>\u52b9\u7387\u6027: \u3088\u308a\u5c11\u306a\u3044\u30a8\u30dd\u30c3\u30af\u3067\u540c\u3058\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3092\u9054\u6210\u3067\u304d\u305f\u304b\uff1f</li> <li>\u6c4e\u5316: \u8a13\u7df4\u3068\u691c\u8a3c\u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306f\u3069\u306e\u7a0b\u5ea6\u8fd1\u3044\u304b\uff1f</li> <li>\u50be\u5411: \u8ffd\u52a0\u306e\u8a13\u7df4\u304c\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3092\u6539\u5584\u3059\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u304b\uff1f</li> </ol> <p>W&amp;B\u30c0\u30c3\u30b7\u30e5\u30dc\u30fc\u30c9\u6a5f\u80fd</p> <p>Weights &amp; Biases\u306f\u5b66\u7fd2\u66f2\u7dda\u306e\u7f8e\u3057\u3044\u30a4\u30f3\u30bf\u30e9\u30af\u30c6\u30a3\u30d6\u306a\u30d7\u30ed\u30c3\u30c8\u3092\u81ea\u52d5\u7684\u306b\u4f5c\u6210\u3057\u307e\u3059\u3002\u4ee5\u4e0b\u304c\u3067\u304d\u307e\u3059\uff1a</p> <ul> <li>\u8907\u6570\u306e\u5b9f\u884c\u3092\u4e26\u3079\u3066\u6bd4\u8f03</li> <li>\u30ab\u30b9\u30bf\u30e0\u30e1\u30c8\u30ea\u30c3\u30af\u3068\u8996\u899a\u5316\u3092\u8ffd\u52a0</li> <li>\u7570\u5e38\u306a\u52d5\u4f5c\u306e\u30a2\u30e9\u30fc\u30c8\u3092\u8a2d\u5b9a</li> <li>\u30c1\u30fc\u30e0\u3068\u7d50\u679c\u3092\u5171\u6709</li> </ul>","tags":["\u6a5f\u68b0\u5b66\u7fd2","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","Transformers","PyTorch","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406"]},{"location":"LLM/03_fine_tuning_a_pretrained_model/#_26","title":"\u904e\u5b66\u7fd2","text":"<p>\u904e\u5b66\u7fd2\u306f\u3001\u30e2\u30c7\u30eb\u304c\u8a13\u7df4\u30c7\u30fc\u30bf\u304b\u3089\u904e\u5ea6\u306b\u5b66\u7fd2\u3057\u3001\u7570\u306a\u308b\u30c7\u30fc\u30bf\uff08\u691c\u8a3c\u30bb\u30c3\u30c8\u3067\u8868\u3055\u308c\u308b\uff09\u306b\u6c4e\u5316\u3067\u304d\u306a\u3044\u5834\u5408\u306b\u767a\u751f\u3057\u307e\u3059\u3002</p> <p></p> <p>\u75c7\u72b6:</p> <ul> <li>\u691c\u8a3c\u640d\u5931\u304c\u5897\u52a0\u307e\u305f\u306f\u30d7\u30e9\u30c8\u30fc\u3057\u3066\u3044\u308b\u9593\u306b\u8a13\u7df4\u640d\u5931\u304c\u6e1b\u5c11\u3057\u7d9a\u3051\u308b</li> <li>\u8a13\u7df4\u3068\u691c\u8a3c\u7cbe\u5ea6\u306e\u5927\u304d\u306a\u30ae\u30e3\u30c3\u30d7</li> <li>\u691c\u8a3c\u7cbe\u5ea6\u3088\u308a\u3082\u306f\u308b\u304b\u306b\u9ad8\u3044\u8a13\u7df4\u7cbe\u5ea6</li> </ul> <p>\u904e\u5b66\u7fd2\u306e\u89e3\u6c7a\u7b56:</p> <ul> <li>\u6b63\u5247\u5316: \u30c9\u30ed\u30c3\u30d7\u30a2\u30a6\u30c8\u3001\u91cd\u307f\u6e1b\u8870\u3001\u307e\u305f\u306f\u305d\u306e\u4ed6\u306e\u6b63\u5247\u5316\u6280\u8853\u3092\u8ffd\u52a0</li> <li>\u65e9\u671f\u505c\u6b62: \u691c\u8a3c\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306e\u6539\u5584\u304c\u6b62\u307e\u3063\u305f\u3068\u304d\u306b\u8a13\u7df4\u3092\u505c\u6b62</li> <li>\u30c7\u30fc\u30bf\u62e1\u5f35: \u8a13\u7df4\u30c7\u30fc\u30bf\u306e\u591a\u69d8\u6027\u3092\u5897\u52a0</li> <li>\u30e2\u30c7\u30eb\u8907\u96d1\u5ea6\u306e\u524a\u6e1b: \u3088\u308a\u5c0f\u3055\u306a\u30e2\u30c7\u30eb\u307e\u305f\u306f\u3088\u308a\u5c11\u306a\u3044\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u4f7f\u7528</li> </ul> <p>\u4ee5\u4e0b\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u3001\u904e\u5b66\u7fd2\u3092\u9632\u3050\u305f\u3081\u306b\u65e9\u671f\u505c\u6b62\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002<code>early_stopping_patience</code>\u30923\u306b\u8a2d\u5b9a\u3057\u3001\u691c\u8a3c\u640d\u5931\u304c3\u56de\u9023\u7d9a\u3057\u3066\u6539\u5584\u3057\u306a\u3044\u5834\u5408\u3001\u8a13\u7df4\u304c\u505c\u6b62\u3055\u308c\u307e\u3059\u3002</p> <pre><code># \u65e9\u671f\u505c\u6b62\u3067\u904e\u5b66\u7fd2\u3092\u691c\u51fa\u3059\u308b\u4f8b\nfrom transformers import EarlyStoppingCallback\n\ntraining_args = TrainingArguments(\n    output_dir=\"./results\",\n    eval_strategy=\"steps\",\n    eval_steps=100,\n    save_strategy=\"steps\",\n    save_steps=100,\n    load_best_model_at_end=True,\n    metric_for_best_model=\"eval_loss\",\n    greater_is_better=False,\n    num_train_epochs=10,  # \u9ad8\u304f\u8a2d\u5b9a\u3059\u308b\u304c\u3001\u65e9\u671f\u306b\u505c\u6b62\n)\n\n# \u904e\u5b66\u7fd2\u3092\u9632\u3050\u305f\u3081\u306b\u65e9\u671f\u505c\u6b62\u3092\u8ffd\u52a0\ntrainer = Trainer(\n    model=model,\n    args=training_args,\n    train_dataset=tokenized_datasets[\"train\"],\n    eval_dataset=tokenized_datasets[\"validation\"],\n    data_collator=data_collator,\n    processing_class=tokenizer,\n    compute_metrics=compute_metrics,\n    callbacks=[EarlyStoppingCallback(early_stopping_patience=3)],\n)\n</code></pre>","tags":["\u6a5f\u68b0\u5b66\u7fd2","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","Transformers","PyTorch","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406"]},{"location":"LLM/03_fine_tuning_a_pretrained_model/#_27","title":"\u5b66\u7fd2\u4e0d\u8db3","text":"<p>\u5b66\u7fd2\u4e0d\u8db3\u306f\u3001\u30e2\u30c7\u30eb\u304c\u30c7\u30fc\u30bf\u306e\u57fa\u790e\u30d1\u30bf\u30fc\u30f3\u3092\u6349\u3048\u308b\u306b\u306f\u5358\u7d14\u3059\u304e\u308b\u5834\u5408\u306b\u767a\u751f\u3057\u307e\u3059\u3002\u3053\u308c\u306f\u3044\u304f\u3064\u304b\u306e\u7406\u7531\u3067\u8d77\u3053\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\uff1a</p> <ul> <li>\u30e2\u30c7\u30eb\u304c\u5c0f\u3055\u3059\u304e\u308b\u304b\u3001\u30d1\u30bf\u30fc\u30f3\u3092\u5b66\u7fd2\u3059\u308b\u80fd\u529b\u304c\u4e0d\u8db3\u3057\u3066\u3044\u308b</li> <li>\u5b66\u7fd2\u7387\u304c\u4f4e\u3059\u304e\u3066\u3001\u5b66\u7fd2\u304c\u9045\u3044</li> <li>\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304c\u5c0f\u3055\u3059\u304e\u308b\u304b\u3001\u554f\u984c\u3092\u4ee3\u8868\u3057\u3066\u3044\u306a\u3044</li> <li>\u30e2\u30c7\u30eb\u304c\u9069\u5207\u306b\u6b63\u5247\u5316\u3055\u308c\u3066\u3044\u306a\u3044</li> </ul> <p></p> <p>\u75c7\u72b6:</p> <ul> <li>\u8a13\u7df4\u3068\u691c\u8a3c\u306e\u4e21\u65b9\u306e\u640d\u5931\u304c\u9ad8\u3044\u307e\u307e</li> <li>\u30e2\u30c7\u30eb\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u304c\u8a13\u7df4\u306e\u65e9\u671f\u306b\u30d7\u30e9\u30c8\u30fc\u306b\u9054\u3059\u308b</li> <li>\u671f\u5f85\u3088\u308a\u3082\u4f4e\u3044\u8a13\u7df4\u7cbe\u5ea6</li> </ul> <p>\u5b66\u7fd2\u4e0d\u8db3\u306e\u89e3\u6c7a\u7b56:</p> <ul> <li>\u30e2\u30c7\u30eb\u5bb9\u91cf\u306e\u5897\u52a0: \u3088\u308a\u5927\u304d\u306a\u30e2\u30c7\u30eb\u307e\u305f\u306f\u3088\u308a\u591a\u304f\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u4f7f\u7528</li> <li>\u3088\u308a\u9577\u3044\u8a13\u7df4: \u30a8\u30dd\u30c3\u30af\u6570\u3092\u5897\u52a0</li> <li>\u5b66\u7fd2\u7387\u306e\u8abf\u6574: \u7570\u306a\u308b\u5b66\u7fd2\u7387\u3092\u8a66\u3059</li> <li>\u30c7\u30fc\u30bf\u54c1\u8cea\u306e\u78ba\u8a8d: \u30c7\u30fc\u30bf\u304c\u9069\u5207\u306b\u524d\u51e6\u7406\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d</li> </ul>","tags":["\u6a5f\u68b0\u5b66\u7fd2","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","Transformers","PyTorch","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406"]},{"location":"LLM/03_fine_tuning_a_pretrained_model/#_28","title":"\u4e0d\u5b89\u5b9a\u306a\u5b66\u7fd2\u66f2\u7dda","text":"<p>\u4e0d\u5b89\u5b9a\u306a\u5b66\u7fd2\u66f2\u7dda\u306f\u3001\u30e2\u30c7\u30eb\u304c\u52b9\u679c\u7684\u306b\u5b66\u7fd2\u3057\u3066\u3044\u306a\u3044\u5834\u5408\u306b\u767a\u751f\u3057\u307e\u3059\u3002\u3053\u308c\u306f\u3044\u304f\u3064\u304b\u306e\u7406\u7531\u3067\u8d77\u3053\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\uff1a</p> <ul> <li>\u5b66\u7fd2\u7387\u304c\u9ad8\u3059\u304e\u3066\u3001\u30e2\u30c7\u30eb\u304c\u6700\u9069\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u98db\u3073\u8d8a\u3048\u3066\u3057\u307e\u3046</li> <li>\u30d0\u30c3\u30c1\u30b5\u30a4\u30ba\u304c\u5c0f\u3055\u3059\u304e\u3066\u3001\u30e2\u30c7\u30eb\u306e\u5b66\u7fd2\u304c\u9045\u3044</li> <li>\u30e2\u30c7\u30eb\u304c\u9069\u5207\u306b\u6b63\u5247\u5316\u3055\u308c\u3066\u304a\u3089\u305a\u3001\u8a13\u7df4\u30c7\u30fc\u30bf\u306b\u904e\u5b66\u7fd2\u3057\u3066\u3057\u307e\u3046</li> <li>\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304c\u9069\u5207\u306b\u524d\u51e6\u7406\u3055\u308c\u3066\u304a\u3089\u305a\u3001\u30e2\u30c7\u30eb\u304c\u30ce\u30a4\u30ba\u304b\u3089\u5b66\u7fd2\u3057\u3066\u3057\u307e\u3046</li> </ul> <p></p> <p>\u75c7\u72b6: - \u640d\u5931\u3084\u7cbe\u5ea6\u306e\u983b\u7e41\u306a\u5909\u52d5 - \u66f2\u7dda\u304c\u9ad8\u3044\u5206\u6563\u3084\u4e0d\u5b89\u5b9a\u6027\u3092\u793a\u3059 - \u660e\u78ba\u306a\u50be\u5411\u306e\u306a\u3044\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306e\u632f\u52d5</p> <p>\u8a13\u7df4\u3068\u691c\u8a3c\u306e\u4e21\u65b9\u306e\u66f2\u7dda\u304c\u4e0d\u5b89\u5b9a\u306a\u52d5\u4f5c\u3092\u793a\u3057\u307e\u3059\u3002</p> <p></p> <p>\u4e0d\u5b89\u5b9a\u306a\u66f2\u7dda\u306e\u89e3\u6c7a\u7b56:</p> <ul> <li>\u5b66\u7fd2\u7387\u306e\u4f4e\u4e0b: \u3088\u308a\u5b89\u5b9a\u3057\u305f\u8a13\u7df4\u306e\u305f\u3081\u306b\u30b9\u30c6\u30c3\u30d7\u30b5\u30a4\u30ba\u3092\u6e1b\u5c11</li> <li>\u30d0\u30c3\u30c1\u30b5\u30a4\u30ba\u306e\u5897\u52a0: \u3088\u308a\u5927\u304d\u306a\u30d0\u30c3\u30c1\u306f\u3088\u308a\u5b89\u5b9a\u3057\u305f\u52fe\u914d\u3092\u63d0\u4f9b</li> <li>\u52fe\u914d\u30af\u30ea\u30c3\u30d4\u30f3\u30b0: \u52fe\u914d\u7206\u767a\u3092\u9632\u3050</li> <li>\u3088\u308a\u826f\u3044\u30c7\u30fc\u30bf\u524d\u51e6\u7406: \u4e00\u8cab\u3057\u305f\u30c7\u30fc\u30bf\u54c1\u8cea\u3092\u78ba\u4fdd</li> </ul>","tags":["\u6a5f\u68b0\u5b66\u7fd2","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","Transformers","PyTorch","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406"]},{"location":"LLM/03_fine_tuning_a_pretrained_model/#_29","title":"\u91cd\u8981\u306a\u30dd\u30a4\u30f3\u30c8","text":"<p>\u5b66\u7fd2\u66f2\u7dda\u306e\u7406\u89e3\u306f\u3001\u52b9\u679c\u7684\u306a\u6a5f\u68b0\u5b66\u7fd2\u5b9f\u8df5\u8005\u306b\u306a\u308b\u305f\u3081\u306b\u91cd\u8981\u3067\u3059\u3002\u3053\u308c\u3089\u306e\u8996\u899a\u7684\u30c4\u30fc\u30eb\u306f\u3001\u30e2\u30c7\u30eb\u306e\u8a13\u7df4\u9032\u6357\u306b\u95a2\u3059\u308b\u5373\u5ea7\u306e\u30d5\u30a3\u30fc\u30c9\u30d0\u30c3\u30af\u3092\u63d0\u4f9b\u3057\u3001\u8a13\u7df4\u3092\u3044\u3064\u505c\u6b62\u3059\u308b\u304b\u3001\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8abf\u6574\u3059\u308b\u304b\u3001\u7570\u306a\u308b\u30a2\u30d7\u30ed\u30fc\u30c1\u3092\u8a66\u3059\u304b\u306b\u3064\u3044\u3066\u60c5\u5831\u306b\u57fa\u3065\u3044\u305f\u6c7a\u5b9a\u3092\u4e0b\u3059\u306e\u306b\u5f79\u7acb\u3061\u307e\u3059\u3002\u7df4\u7fd2\u306b\u3088\u308a\u3001\u5065\u5168\u306a\u5b66\u7fd2\u66f2\u7dda\u304c\u3069\u306e\u3088\u3046\u306b\u898b\u3048\u308b\u304b\u3001\u554f\u984c\u304c\u751f\u3058\u305f\u3068\u304d\u306b\u305d\u308c\u3089\u306b\u3069\u3046\u5bfe\u51e6\u3059\u308b\u304b\u306b\u3064\u3044\u3066\u76f4\u611f\u7684\u306a\u7406\u89e3\u3092\u6df1\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p> <p>\u91cd\u8981\u306a\u30dd\u30a4\u30f3\u30c8</p> <ul> <li>\u5b66\u7fd2\u66f2\u7dda\u306f\u30e2\u30c7\u30eb\u8a13\u7df4\u9032\u6357\u3092\u7406\u89e3\u3059\u308b\u305f\u3081\u306e\u5fc5\u9808\u30c4\u30fc\u30eb\u3067\u3059</li> <li>\u640d\u5931\u3068\u7cbe\u5ea6\u66f2\u7dda\u306e\u4e21\u65b9\u3092\u76e3\u8996\u3057\u307e\u3059\u304c\u3001\u305d\u308c\u3089\u306b\u306f\u7570\u306a\u308b\u7279\u5fb4\u304c\u3042\u308b\u3053\u3068\u3092\u899a\u3048\u3066\u304a\u3044\u3066\u304f\u3060\u3055\u3044</li> <li>\u904e\u5b66\u7fd2\u306f\u8a13\u7df4/\u691c\u8a3c\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306e\u4e56\u96e2\u3068\u3057\u3066\u73fe\u308c\u307e\u3059</li> <li>\u5b66\u7fd2\u4e0d\u8db3\u306f\u8a13\u7df4\u3068\u691c\u8a3c\u30c7\u30fc\u30bf\u306e\u4e21\u65b9\u3067\u4f4e\u3044\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3068\u3057\u3066\u73fe\u308c\u307e\u3059</li> <li>Weights &amp; Biases\u306e\u3088\u3046\u306a\u30c4\u30fc\u30eb\u306f\u5b66\u7fd2\u66f2\u7dda\u306e\u8ffd\u8de1\u3068\u5206\u6790\u3092\u5bb9\u6613\u306b\u3057\u307e\u3059</li> <li>\u65e9\u671f\u505c\u6b62\u3068\u9069\u5207\u306a\u6b63\u5247\u5316\u306f\u307b\u3068\u3093\u3069\u306e\u4e00\u822c\u7684\u306a\u8a13\u7df4\u554f\u984c\u306b\u5bfe\u51e6\u3067\u304d\u307e\u3059</li> </ul> <p>\ud83d\udd2c \u6b21\u306e\u30b9\u30c6\u30c3\u30d7: \u72ec\u81ea\u306e\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u5b9f\u9a13\u3067\u5b66\u7fd2\u66f2\u7dda\u306e\u5206\u6790\u3092\u7df4\u7fd2\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u7570\u306a\u308b\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8a66\u3057\u3001\u305d\u308c\u3089\u304c\u66f2\u7dda\u306e\u5f62\u72b6\u306b\u3069\u3046\u5f71\u97ff\u3059\u308b\u304b\u3092\u89b3\u5bdf\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u3053\u306e\u5b9f\u8df5\u7d4c\u9a13\u306f\u3001\u8a13\u7df4\u9032\u6357\u3092\u8aad\u3080\u76f4\u611f\u3092\u990a\u3046\u6700\u826f\u306e\u65b9\u6cd5\u3067\u3059\u3002</p>","tags":["\u6a5f\u68b0\u5b66\u7fd2","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","Transformers","PyTorch","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406"]},{"location":"LLM/03_fine_tuning_a_pretrained_model/#_30","title":"\u307e\u3068\u3081","text":"<p>\u3053\u306e\u8a18\u4e8b\u3067\u306f\u3001Hugging Face Transformers\u30a8\u30b3\u30b7\u30b9\u30c6\u30e0\u3092\u4f7f\u7528\u3057\u305f\u4e8b\u524d\u8a13\u7df4\u6e08\u307f\u30e2\u30c7\u30eb\u306e\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u306b\u3064\u3044\u3066\u5305\u62ec\u7684\u306b\u5b66\u7fd2\u3057\u307e\u3057\u305f\u3002\u30c7\u30fc\u30bf\u51e6\u7406\u304b\u3089\u9ad8\u30ec\u30d9\u30eb\u306aTrainer API\u306e\u4f7f\u7528\u3001\u30ab\u30b9\u30bf\u30e0\u8a13\u7df4\u30eb\u30fc\u30d7\u306e\u5b9f\u88c5\u3001\u5b66\u7fd2\u66f2\u7dda\u306e\u89e3\u91c8\u307e\u3067\u3001\u73fe\u4ee3\u306e\u6a5f\u68b0\u5b66\u7fd2\u3067\u5fc5\u8981\u306a\u30b9\u30ad\u30eb\u3092\u7fd2\u5f97\u3057\u307e\u3057\u305f\u3002</p> <p>\u5b66\u7fd2\u3057\u305f\u30dd\u30a4\u30f3\u30c8\u3092\u632f\u308a\u8fd4\u308b\u3068\u3001\u52b9\u7387\u7684\u306a\u30c7\u30fc\u30bf\u51e6\u7406\u6280\u8853\u3001\u52d5\u7684\u30d1\u30c7\u30a3\u30f3\u30b0\u306e\u91cd\u8981\u6027\u3001Trainer API\u306e\u5f37\u529b\u306a\u6a5f\u80fd\u3001\u5206\u6563\u8a13\u7df4\u306e\u305f\u3081\u306eAccelerate\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u6d3b\u7528\u65b9\u6cd5\u3092\u7406\u89e3\u3057\u307e\u3057\u305f\u3002\u307e\u305f\u3001\u8a13\u7df4\u904e\u7a0b\u3092\u76e3\u8996\u3057\u3001\u904e\u5b66\u7fd2\u3084\u5b66\u7fd2\u4e0d\u8db3\u306a\u3069\u306e\u4e00\u822c\u7684\u306a\u554f\u984c\u3092\u7279\u5b9a\u30fb\u89e3\u6c7a\u3059\u308b\u65b9\u6cd5\u3082\u5b66\u3073\u307e\u3057\u305f\u3002</p>","tags":["\u6a5f\u68b0\u5b66\u7fd2","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","Transformers","PyTorch","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406"]},{"location":"LLM/03_fine_tuning_a_pretrained_model/#_31","title":"\u53c2\u8003\u8cc7\u6599","text":"<ul> <li>Hugging Face Transformers Documentation</li> <li>Datasets Library Documentation</li> <li>Accelerate Library Documentation</li> <li>GLUE Benchmark</li> <li>Weights &amp; Biases</li> <li>BERT Paper</li> </ul>","tags":["\u6a5f\u68b0\u5b66\u7fd2","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","Transformers","PyTorch","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406"]},{"location":"LLM/04_the_huggingface_tokenizers_library/","title":"HuggingFace Tokenizers\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u5b8c\u5168\u30ac\u30a4\u30c9","text":"","tags":["NLP","Transformers","Tokenizer","Hugging Face","\u6a5f\u68b0\u5b66\u7fd2","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","BPE","WordPiece"]},{"location":"LLM/04_the_huggingface_tokenizers_library/#_1","title":"\u6982\u8981","text":"<p>\u3053\u306e\u8a18\u4e8b\u3067\u306f\u3001\u81ea\u7136\u8a00\u8a9e\u51e6\u7406\u306b\u304a\u3044\u3066\u91cd\u8981\u306a\u5f79\u5272\u3092\u679c\u305f\u3059\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306b\u3064\u3044\u3066\u3001\u7279\u306bHugging Face Tokenizers\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4e2d\u5fc3\u306b\u8a73\u3057\u304f\u89e3\u8aac\u3057\u307e\u3059\u3002\u65b0\u3057\u3044\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3092\u4e00\u304b\u3089\u8a13\u7df4\u3059\u308b\u65b9\u6cd5\u3001\u9ad8\u901f\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306e\u7279\u5225\u306a\u6a5f\u80fd\u3001\u305d\u3057\u3066\u4e3b\u8981\u306a\u30b5\u30d6\u30ef\u30fc\u30c9\u30fb\u30c8\u30fc\u30af\u30f3\u5316\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u9055\u3044\u306b\u3064\u3044\u3066\u5b66\u7fd2\u3057\u307e\u3059\u3002</p> <p>\u5b9f\u969b\u306e\u30b3\u30fc\u30c9\u4f8b\u3092\u901a\u3058\u3066\u3001BPE\uff08Byte-Pair Encoding\uff09\u3001WordPiece\u3001Unigram\u306e3\u3064\u306e\u4e3b\u8981\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u4ed5\u7d44\u307f\u3092\u7406\u89e3\u3057\u3001\u72ec\u81ea\u306e\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3092\u69cb\u7bc9\u3059\u308b\u65b9\u6cd5\u3092\u7fd2\u5f97\u3067\u304d\u307e\u3059\u3002</p> <p>\u53c2\u8003\u8cc7\u6599</p> <p>\u672c\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306f Hugging Face LLM Course \u3092\u53c2\u8003\u306b\u3001\u65e5\u672c\u8a9e\u3067\u5b66\u7fd2\u5185\u5bb9\u3092\u307e\u3068\u3081\u305f\u500b\u4eba\u7684\u306a\u5b66\u7fd2\u30ce\u30fc\u30c8\u3067\u3059\u3002\u8a73\u7d30\u306a\u5185\u5bb9\u3084\u6700\u65b0\u60c5\u5831\u306b\u3064\u3044\u3066\u306f\u3001\u539f\u6587\u3082\u4f75\u305b\u3066\u3054\u53c2\u7167\u304f\u3060\u3055\u3044\u3002</p>","tags":["NLP","Transformers","Tokenizer","Hugging Face","\u6a5f\u68b0\u5b66\u7fd2","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","BPE","WordPiece"]},{"location":"LLM/04_the_huggingface_tokenizers_library/#_2","title":"\u524d\u63d0\u77e5\u8b58","text":"<p>\u3053\u306e\u8a18\u4e8b\u3092\u7406\u89e3\u3059\u308b\u305f\u3081\u306b\u3001\u4ee5\u4e0b\u306e\u77e5\u8b58\u304c\u3042\u308b\u3053\u3068\u3092\u63a8\u5968\u3057\u307e\u3059\uff1a</p> <ul> <li>Python\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u57fa\u790e\u77e5\u8b58</li> <li>Transformers\u30e2\u30c7\u30eb\u306e\u57fa\u672c\u7684\u306a\u7406\u89e3</li> <li>\u6a5f\u68b0\u5b66\u7fd2\u3068\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0\u306e\u6982\u5ff5</li> <li>pandas\u3001numpy\u7b49\u306e\u30c7\u30fc\u30bf\u51e6\u7406\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u4f7f\u7528\u7d4c\u9a13</li> </ul>","tags":["NLP","Transformers","Tokenizer","Hugging Face","\u6a5f\u68b0\u5b66\u7fd2","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","BPE","WordPiece"]},{"location":"LLM/04_the_huggingface_tokenizers_library/#_3","title":"\u306f\u3058\u3081\u306b","text":"<p>\u7b2c3\u7ae0\u3067\u306f\u3001\u7279\u5b9a\u306e\u30bf\u30b9\u30af\u3067\u30e2\u30c7\u30eb\u3092\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3057\u305f\u3002\u305d\u306e\u969b\u3001\u30e2\u30c7\u30eb\u304c\u4e8b\u524d\u5b66\u7fd2\u3067\u4f7f\u7528\u3057\u305f\u306e\u3068\u540c\u3058\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3092\u4f7f\u7528\u3057\u307e\u3057\u305f\u3002\u3057\u304b\u3057\u3001\u30e2\u30c7\u30eb\u3092\u4e00\u304b\u3089\u8a13\u7df4\u3057\u305f\u3044\u5834\u5408\u306f\u3069\u3046\u3067\u3057\u3087\u3046\u304b\uff1f\u3053\u306e\u3088\u3046\u306a\u5834\u5408\u3001\u5225\u306e\u30c9\u30e1\u30a4\u30f3\u3084\u8a00\u8a9e\u306e\u30b3\u30fc\u30d1\u30b9\u3067\u4e8b\u524d\u5b66\u7fd2\u3055\u308c\u305f\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3092\u4f7f\u7528\u3059\u308b\u306e\u306f\u901a\u5e38\u6700\u9069\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u4f8b\u3048\u3070\u3001\u82f1\u8a9e\u306e\u30b3\u30fc\u30d1\u30b9\u3067\u8a13\u7df4\u3055\u308c\u305f\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306f\u3001\u65e5\u672c\u8a9e\u306e\u30c6\u30ad\u30b9\u30c8\u306e\u30b3\u30fc\u30d1\u30b9\u3067\u306f\u9069\u5207\u306b\u52d5\u4f5c\u3057\u307e\u305b\u3093\u3002\u3053\u308c\u306f\u3001\u4e21\u8a00\u8a9e\u3067\u306e\u30b9\u30da\u30fc\u30b9\u3084\u53e5\u8aad\u70b9\u306e\u4f7f\u7528\u65b9\u6cd5\u304c\u5927\u304d\u304f\u7570\u306a\u308b\u305f\u3081\u3067\u3059\u3002</p> <p>\u3053\u306e\u7ae0\u3067\u306f\u3001\u30c6\u30ad\u30b9\u30c8\u306e\u30b3\u30fc\u30d1\u30b9\u3067\u5168\u304f\u65b0\u3057\u3044\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3092\u8a13\u7df4\u3057\u3001\u305d\u308c\u3092\u8a00\u8a9e\u30e2\u30c7\u30eb\u306e\u4e8b\u524d\u5b66\u7fd2\u306b\u4f7f\u7528\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u7fd2\u3057\u307e\u3059\u3002\u3053\u308c\u306f\u3059\u3079\u3066Hugging Face Tokenizers\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u652f\u63f4\u3092\u53d7\u3051\u3066\u884c\u308f\u308c\u307e\u3059\u3002\u3053\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306fHugging Face Transformers\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u300c\u9ad8\u901f\u300d\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3092\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u63d0\u4f9b\u3059\u308b\u6a5f\u80fd\u306b\u3064\u3044\u3066\u8a73\u3057\u304f\u898b\u3066\u3001\u9ad8\u901f\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u304c\u300c\u4f4e\u901f\u300d\u30d0\u30fc\u30b8\u30e7\u30f3\u3068\u3069\u306e\u3088\u3046\u306b\u7570\u306a\u308b\u304b\u3092\u63a2\u308a\u307e\u3059\u3002</p> <p>\u6271\u3046\u30c8\u30d4\u30c3\u30af\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\uff1a</p> <ul> <li>\u65b0\u3057\u3044\u30c6\u30ad\u30b9\u30c8\u30b3\u30fc\u30d1\u30b9\u3067\u3001\u7279\u5b9a\u306e\u30c1\u30a7\u30c3\u30af\u30dd\u30a4\u30f3\u30c8\u3067\u4f7f\u7528\u3055\u308c\u3066\u3044\u308b\u3082\u306e\u3068\u985e\u4f3c\u3057\u305f\u65b0\u3057\u3044\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3092\u8a13\u7df4\u3059\u308b\u65b9\u6cd5</li> <li>\u9ad8\u901f\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306e\u7279\u5225\u306a\u6a5f\u80fd</li> <li>\u73fe\u5728NLP\u3067\u4f7f\u7528\u3055\u308c\u3066\u3044\u308b3\u3064\u306e\u4e3b\u8981\u306a\u30b5\u30d6\u30ef\u30fc\u30c9\u30fb\u30c8\u30fc\u30af\u30f3\u5316\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u9055\u3044</li> <li>Hugging Face Tokenizers\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u7528\u3057\u3066\u3001\u4e00\u304b\u3089\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3092\u69cb\u7bc9\u3057\u3001\u30c7\u30fc\u30bf\u3067\u8a13\u7df4\u3059\u308b\u65b9\u6cd5</li> </ul>","tags":["NLP","Transformers","Tokenizer","Hugging Face","\u6a5f\u68b0\u5b66\u7fd2","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","BPE","WordPiece"]},{"location":"LLM/04_the_huggingface_tokenizers_library/#_4","title":"\u65e2\u5b58\u306e\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u304b\u3089\u65b0\u3057\u3044\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3092\u8a13\u7df4\u3059\u308b","text":"<p>\u5bfe\u8c61\u8a00\u8a9e\u306e\u8a00\u8a9e\u30e2\u30c7\u30eb\u304c\u5229\u7528\u3067\u304d\u306a\u3044\u5834\u5408\u3084\u3001\u81ea\u5206\u306e\u30b3\u30fc\u30d1\u30b9\u304c\u30e2\u30c7\u30eb\u306e\u8a13\u7df4\u30c7\u30fc\u30bf\u3068\u5927\u304d\u304f\u7570\u306a\u308b\u5834\u5408\u3001\u30c7\u30fc\u30bf\u306b\u9069\u5fdc\u3057\u305f\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3092\u4f7f\u7528\u3057\u3066\u30e2\u30c7\u30eb\u3092\u4e00\u304b\u3089\u518d\u8a13\u7df4\u3059\u308b\u3053\u3068\u304c\u671b\u307e\u3057\u3044\u3067\u3057\u3087\u3046\u3002\u3053\u308c\u306b\u306f\u3001\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u4e0a\u3067\u65b0\u3057\u3044\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3092\u8a13\u7df4\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3057\u304b\u3057\u3001\u3053\u308c\u306f\u5177\u4f53\u7684\u306b\u306f\u3069\u3046\u3044\u3046\u610f\u5473\u306a\u306e\u3067\u3057\u3087\u3046\u304b\uff1f</p> <p>\u7b2c2\u7ae0\u3067\u6700\u521d\u306b\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3092\u898b\u305f\u6642\u3001\u307b\u3068\u3093\u3069\u306eTransformer\u30e2\u30c7\u30eb\u304c\u30b5\u30d6\u30ef\u30fc\u30c9\u30fb\u30c8\u30fc\u30af\u30f3\u5316\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u307e\u3057\u305f\u3002\u3069\u306e\u30b5\u30d6\u30ef\u30fc\u30c9\u304c\u95a2\u5fc3\u304c\u3042\u308a\u3001\u624b\u5143\u306e\u30b3\u30fc\u30d1\u30b9\u3067\u6700\u3082\u983b\u7e41\u306b\u51fa\u73fe\u3059\u308b\u304b\u3092\u7279\u5b9a\u3059\u308b\u305f\u3081\u306b\u3001\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306f\u3001\u30b3\u30fc\u30d1\u30b9\u5185\u306e\u3059\u3079\u3066\u306e\u30c6\u30ad\u30b9\u30c8\u3092\u8a73\u7d30\u306b\u8abf\u3079\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u306e\u30d7\u30ed\u30bb\u30b9\u3092\u8a13\u7df4\u3068\u547c\u3073\u307e\u3059\u3002\u3053\u306e\u8a13\u7df4\u3092\u652f\u914d\u3059\u308b\u6b63\u78ba\u306a\u30eb\u30fc\u30eb\u306f\u3001\u4f7f\u7528\u3055\u308c\u308b\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306e\u7a2e\u985e\u306b\u3088\u3063\u3066\u7570\u306a\u308a\u3001\u3053\u306e\u7ae0\u306e\u5f8c\u534a\u30673\u3064\u306e\u4e3b\u8981\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002</p> <p>\u91cd\u8981\u306a\u9055\u3044</p> <p>\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306e\u8a13\u7df4\u306f\u30e2\u30c7\u30eb\u306e\u8a13\u7df4\u3068\u306f\u7570\u306a\u308a\u307e\u3059\uff01\u30e2\u30c7\u30eb\u306e\u8a13\u7df4\u3067\u306f\u78ba\u7387\u7684\u52fe\u914d\u964d\u4e0b\u6cd5\u3092\u4f7f\u7528\u3057\u3066\u3001\u5404\u30d0\u30c3\u30c1\u3067\u640d\u5931\u3092\u5c11\u3057\u305a\u3064\u5c0f\u3055\u304f\u3057\u307e\u3059\u3002\u3053\u308c\u306f\u672c\u8cea\u7684\u306b\u30e9\u30f3\u30c0\u30e0\u3067\u3059\uff08\u540c\u3058\u8a13\u7df4\u30922\u56de\u884c\u3063\u305f\u5834\u5408\u306b\u540c\u3058\u7d50\u679c\u3092\u5f97\u308b\u306b\u306f\u3001\u30b7\u30fc\u30c9\u3092\u8a2d\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff09\u3002\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306e\u8a13\u7df4\u306f\u7d71\u8a08\u7684\u30d7\u30ed\u30bb\u30b9\u3067\u3001\u7279\u5b9a\u306e\u30b3\u30fc\u30d1\u30b9\u306b\u5bfe\u3057\u3066\u3069\u306e\u30b5\u30d6\u30ef\u30fc\u30c9\u304c\u6700\u9069\u304b\u3092\u7279\u5b9a\u3057\u3088\u3046\u3068\u3057\u3001\u9078\u629e\u306b\u4f7f\u7528\u3055\u308c\u308b\u6b63\u78ba\u306a\u30eb\u30fc\u30eb\u306f\u30c8\u30fc\u30af\u30f3\u5316\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u3088\u3063\u3066\u7570\u306a\u308a\u307e\u3059\u3002\u3053\u308c\u306f\u6c7a\u5b9a\u8ad6\u7684\u3067\u3001\u540c\u3058\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u540c\u3058\u30b3\u30fc\u30d1\u30b9\u3067\u8a13\u7df4\u3059\u308b\u3068\u5e38\u306b\u540c\u3058\u7d50\u679c\u304c\u5f97\u3089\u308c\u307e\u3059\u3002</p>","tags":["NLP","Transformers","Tokenizer","Hugging Face","\u6a5f\u68b0\u5b66\u7fd2","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","BPE","WordPiece"]},{"location":"LLM/04_the_huggingface_tokenizers_library/#_5","title":"\u30b3\u30fc\u30d1\u30b9\u306e\u69cb\u7bc9","text":"<p>Hugging Face Transformers\u306b\u306f\u3001\u65e2\u5b58\u306e\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3068\u540c\u3058\u7279\u6027\u3092\u6301\u3064\u65b0\u3057\u3044\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3092\u8a13\u7df4\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3067\u304d\u308b\u975e\u5e38\u306b\u30b7\u30f3\u30d7\u30eb\u306aAPI\u304c\u3042\u308a\u307e\u3059\uff1a<code>AutoTokenizer.train_new_from_iterator()</code>\u3002\u5b9f\u969b\u306e\u52d5\u4f5c\u3092\u78ba\u8a8d\u3059\u308b\u305f\u3081\u306b\u3001GPT-2\u3092\u82f1\u8a9e\u4ee5\u5916\u306e\u8a00\u8a9e\u3067\u4e00\u304b\u3089\u8a13\u7df4\u3057\u305f\u3044\u3068\u3057\u307e\u3059\u3002\u6700\u521d\u306e\u30bf\u30b9\u30af\u306f\u3001\u305d\u306e\u8a00\u8a9e\u3067\u8a13\u7df4\u30b3\u30fc\u30d1\u30b9\u5185\u306b\u5927\u91cf\u306e\u30c7\u30fc\u30bf\u3092\u53ce\u96c6\u3059\u308b\u3053\u3068\u3067\u3059\u3002\u308f\u304b\u308a\u3084\u3059\u3044\u4f8b\u3068\u3057\u3066\u3001\u3053\u3053\u3067\u306f\u30ed\u30b7\u30a2\u8a9e\u3084\u4e2d\u56fd\u8a9e\u306e\u3088\u3046\u306a\u8a00\u8a9e\u3067\u306f\u306a\u304f\u3001\u7279\u6b8a\u306a\u82f1\u8a9e\u8a00\u8a9e\u3067\u3042\u308bPython\u30b3\u30fc\u30c9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002</p> <p>Hugging Face Datasets\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u3001Python\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306e\u30b3\u30fc\u30d1\u30b9\u3092\u69cb\u7bc9\u3059\u308b\u306e\u306b\u5f79\u7acb\u3061\u307e\u3059\u3002\u901a\u5e38\u306e<code>load_dataset()</code>\u95a2\u6570\u3092\u4f7f\u7528\u3057\u3066\u3001CodeSearchNet\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u30ad\u30e3\u30c3\u30b7\u30e5\u3057\u307e\u3059\u3002\u3053\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306fCodeSearchNet challenge\u7528\u306b\u4f5c\u6210\u3055\u308c\u3001\u8907\u6570\u306e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u3067GitHub\u4e0a\u306e\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u30e9\u30a4\u30d6\u30e9\u30ea\u304b\u3089\u6570\u767e\u4e07\u306e\u95a2\u6570\u3092\u542b\u3093\u3067\u3044\u307e\u3059\u3002\u3053\u3053\u3067\u306f\u3001\u3053\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306ePython\u90e8\u5206\u3092\u8aad\u307f\u8fbc\u307f\u307e\u3059\uff1a</p> <pre><code>from datasets import load_dataset\n\n# \u8aad\u307f\u8fbc\u307f\u306b\u6570\u5206\u304b\u304b\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u306e\u3067\u3001\u30b3\u30fc\u30d2\u30fc\u3084\u304a\u8336\u3092\u7528\u610f\u3057\u3066\u304a\u5f85\u3061\u304f\u3060\u3055\u3044\uff01\nraw_datasets = load_dataset(\"claudios/code_search_net\", \"python\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>Generating train split: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 412178/412178 [00:00&lt;00:00, 954840.50 examples/s]\nGenerating test split: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 22176/22176 [00:00&lt;00:00, 1246554.16 examples/s]\nGenerating validation split: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 23107/23107 [00:00&lt;00:00, 1231765.62 examples/s]\n</code></pre></p> <p>\u8a13\u7df4\u5206\u5272\u3092\u898b\u3066\u3001\u30a2\u30af\u30bb\u30b9\u53ef\u80fd\u306a\u5217\u3092\u78ba\u8a8d\u3067\u304d\u307e\u3059\uff1a</p> <pre><code>raw_datasets[\"train\"]\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>Dataset({\n    features: ['repository_name', 'func_path_in_repository', 'func_name', 'whole_func_string', 'language', 'func_code_string', 'func_documentation_string', 'func_code_url'],\n    num_rows: 412178\n})\n</code></pre></p> <p>\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304cdocstrings\u3068\u30b3\u30fc\u30c9\u3092\u5206\u96e2\u3057\u3001\u4e21\u65b9\u306e\u30c8\u30fc\u30af\u30f3\u5316\u3092\u63d0\u6848\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\u3053\u3053\u3067\u306f\u3001\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3092\u8a13\u7df4\u3059\u308b\u305f\u3081\u306b<code>whole_func_string</code>\u5217\u306e\u307f\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002<code>train</code>\u5206\u5272\u306b\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u4ed8\u3051\u308b\u3053\u3068\u3067\u3001\u3053\u308c\u3089\u306e\u95a2\u6570\u306e\u4f8b\u3092\u78ba\u8a8d\u3067\u304d\u307e\u3059\uff1a</p> <pre><code>print(raw_datasets[\"train\"][111111][\"whole_func_string\"])\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>def progress_task(name=None, t=INFO, max_value=100, *args, **kwargs):\n    \"\"\"\n    This decorator extends the basic @task decorator by allowing users to\n    display some form of progress on the console. The module can receive\n    an increment in the progress through \"tick_progress\".\n    \"\"\"\n    return task(name=name, t=t, init_progress=True, max_value=max_value,\n                *args, **kwargs)\n</code></pre></p> <p>\u6700\u521d\u306b\u884c\u3046\u5fc5\u8981\u304c\u3042\u308b\u3053\u3068\u306f\u3001\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u30c6\u30ad\u30b9\u30c8\u30ea\u30b9\u30c8\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u306b\u5909\u63db\u3059\u308b\u3053\u3068\u3067\u3059\u3002\u4f8b\u3048\u3070\u3001\u30ea\u30b9\u30c8\u306e\u30ea\u30b9\u30c8\u3067\u3059\u3002\u30ea\u30b9\u30c8\u306e\u30c6\u30ad\u30b9\u30c8\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3067\u3001\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306f\uff08\u500b\u5225\u306e\u30c6\u30ad\u30b9\u30c8\u3092\u4e00\u3064\u305a\u3064\u51e6\u7406\u3059\u308b\u4ee3\u308f\u308a\u306b\uff09\u30c6\u30ad\u30b9\u30c8\u306e\u30d0\u30c3\u30c1\u3067\u8a13\u7df4\u3059\u308b\u3053\u3068\u3067\u9ad8\u901f\u5316\u3067\u304d\u307e\u3059\u3002\u307e\u305f\u3001\u3059\u3079\u3066\u3092\u30e1\u30e2\u30ea\u306b\u4e00\u5ea6\u306b\u4fdd\u5b58\u3057\u305f\u304f\u306a\u3044\u5834\u5408\u306f\u3001\u30a4\u30c6\u30ec\u30fc\u30bf\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u30b3\u30fc\u30d1\u30b9\u304c\u5de8\u5927\u306a\u5834\u5408\u3001Hugging Face Datasets\u304c\u3059\u3079\u3066\u3092RAM\u306b\u8aad\u307f\u8fbc\u307e\u305a\u3001\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u8981\u7d20\u3092\u30c7\u30a3\u30b9\u30af\u4e0a\u306b\u683c\u7d0d\u3059\u308b\u3068\u3044\u3046\u4e8b\u5b9f\u3092\u6d3b\u7528\u3057\u305f\u3044\u3067\u3057\u3087\u3046\u3002</p> <p>\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3059\u308b\u3068\u3001\u305d\u308c\u305e\u308c1,000\u30c6\u30ad\u30b9\u30c8\u306e\u30ea\u30b9\u30c8\u306e\u30ea\u30b9\u30c8\u304c\u4f5c\u6210\u3055\u308c\u307e\u3059\u304c\u3001\u3059\u3079\u3066\u304c\u30e1\u30e2\u30ea\u306b\u8aad\u307f\u8fbc\u307e\u308c\u307e\u3059\uff1a</p> <pre><code># \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304c\u5c0f\u3055\u304f\u306a\u3044\u9650\u308a\u3001\u6b21\u306e\u884c\u3092\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u3057\u306a\u3044\u3067\u304f\u3060\u3055\u3044\uff01\n# training_corpus = [raw_datasets[\"train\"][i: i + 1000][\"whole_func_string\"] for i in range(0, len(raw_datasets[\"train\"]), 1000)]\n</code></pre> <p>Python\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u3092\u4f7f\u7528\u3059\u308b\u3068\u3001\u5b9f\u969b\u306b\u5fc5\u8981\u306b\u306a\u308b\u307e\u3067Python\u304c\u4f55\u3082\u30e1\u30e2\u30ea\u306b\u8aad\u307f\u8fbc\u307e\u306a\u3044\u3088\u3046\u306b\u3067\u304d\u307e\u3059\u3002\u3053\u306e\u3088\u3046\u306a\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u3092\u4f5c\u6210\u3059\u308b\u306b\u306f\u3001\u30d6\u30e9\u30b1\u30c3\u30c8\u3092\u62ec\u5f27\u306b\u7f6e\u304d\u63db\u3048\u308b\u3060\u3051\u3067\u3059\uff1a</p> <pre><code>training_corpus = (\n    raw_datasets[\"train\"][i : i + 1000][\"whole_func_string\"]\n    for i in range(0, len(raw_datasets[\"train\"]), 1000)\n)\n</code></pre> <p>\u3053\u306e\u30b3\u30fc\u30c9\u884c\u306f\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u8981\u7d20\u3092\u53d6\u5f97\u3057\u307e\u305b\u3093\u3002Python <code>for</code>\u30eb\u30fc\u30d7\u3067\u4f7f\u7528\u3067\u304d\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b\u3060\u3051\u3067\u3059\u3002\u30c6\u30ad\u30b9\u30c8\u306f\u5fc5\u8981\u306a\u6642\uff08\u3064\u307e\u308a\u3001\u305d\u308c\u3089\u3092\u5fc5\u8981\u3068\u3059\u308b<code>for</code>\u30eb\u30fc\u30d7\u306e\u30b9\u30c6\u30c3\u30d7\u306b\u3044\u308b\u6642\uff09\u306b\u306e\u307f\u8aad\u307f\u8fbc\u307e\u308c\u3001\u4e00\u5ea6\u306b1,000\u30c6\u30ad\u30b9\u30c8\u306e\u307f\u304c\u30e1\u30e2\u30ea\u306b\u8aad\u307f\u8fbc\u307e\u308c\u307e\u3059\u3002\u3053\u306e\u3088\u3046\u306b\u3001\u5de8\u5927\u306a\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u51e6\u7406\u3057\u3066\u3044\u3066\u3082\u3001\u3059\u3079\u3066\u306e\u30e1\u30e2\u30ea\u3092\u4f7f\u3044\u679c\u305f\u3059\u3053\u3068\u306f\u3042\u308a\u307e\u305b\u3093\u3002</p> <p>\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u554f\u984c\u306f\u3001\u4e00\u5ea6\u3057\u304b\u4f7f\u7528\u3067\u304d\u306a\u3044\u3053\u3068\u3067\u3059\u3002\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u6700\u521d\u306e10\u6841\u306e\u30ea\u30b9\u30c8\u30922\u56de\u53d6\u5f97\u3059\u308b\u4ee3\u308f\u308a\u306b\uff1a</p> <pre><code>gen = (i for i in range(10))\nprint(list(gen))\nprint(list(gen))\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n[]\n</code></pre></p> <p>\u4e00\u56de\u53d6\u5f97\u3057\u3001\u305d\u306e\u5f8c\u7a7a\u306e\u30ea\u30b9\u30c8\u304c\u8fd4\u3055\u308c\u307e\u3059\u3002\u305d\u306e\u305f\u3081\u3001\u4ee3\u308f\u308a\u306b\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u3092\u8fd4\u3059\u95a2\u6570\u3092\u5b9a\u7fa9\u3057\u307e\u3059\uff1a</p> <pre><code>def get_training_corpus():\n    return (\n        raw_datasets[\"train\"][i : i + 1000][\"whole_func_string\"]\n        for i in range(0, len(raw_datasets[\"train\"]), 1000)\n    )\n\ntraining_corpus = get_training_corpus()\n</code></pre> <p><code>yield</code>\u6587\u3092\u4f7f\u7528\u3057\u3066<code>for</code>\u30eb\u30fc\u30d7\u5185\u3067\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\uff1a</p> <pre><code>def get_training_corpus():\n    dataset = raw_datasets[\"train\"]\n    for start_idx in range(0, len(dataset), 1000):\n        samples = dataset[start_idx : start_idx + 1000]\n        yield samples[\"whole_func_string\"]\n</code></pre> <p>\u3053\u308c\u306b\u3088\u308a\u3001\u524d\u306e\u3082\u306e\u3068\u307e\u3063\u305f\u304f\u540c\u3058\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u304c\u751f\u6210\u3055\u308c\u307e\u3059\u304c\u3001\u30ea\u30b9\u30c8\u5185\u5305\u8868\u8a18\u3067\u306f\u4e0d\u53ef\u80fd\u306a\u3001\u3088\u308a\u8907\u96d1\u306a\u30ed\u30b8\u30c3\u30af\u3092\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002</p>","tags":["NLP","Transformers","Tokenizer","Hugging Face","\u6a5f\u68b0\u5b66\u7fd2","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","BPE","WordPiece"]},{"location":"LLM/04_the_huggingface_tokenizers_library/#_6","title":"\u65b0\u3057\u3044\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306e\u8a13\u7df4","text":"<p>\u30c6\u30ad\u30b9\u30c8\u306e\u30d0\u30c3\u30c1\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u5f62\u3067\u30b3\u30fc\u30d1\u30b9\u3092\u6e96\u5099\u3067\u304d\u305f\u306e\u3067\u3001\u65b0\u3057\u3044\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3092\u8a13\u7df4\u3059\u308b\u6e96\u5099\u304c\u6574\u3044\u307e\u3057\u305f\u3002\u3053\u308c\u3092\u884c\u3046\u306b\u306f\u3001\u307e\u305a\u30e2\u30c7\u30eb\u3068\u7d44\u307f\u5408\u308f\u305b\u305f\u3044\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\uff08\u3053\u3053\u3067\u306fGPT-2\uff09\u3092\u8aad\u307f\u8fbc\u3080\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff1a</p> <pre><code>from transformers import AutoTokenizer\n\nold_tokenizer = AutoTokenizer.from_pretrained(\"gpt2\")\n</code></pre> <p>\u65b0\u3057\u3044\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3092\u8a13\u7df4\u3059\u308b\u3064\u3082\u308a\u3067\u3082\u3001\u3053\u308c\u3092\u884c\u3046\u306e\u306f\u826f\u3044\u30a2\u30a4\u30c7\u30a2\u3067\u3059\u3002\u5b8c\u5168\u306b\u4e00\u304b\u3089\u59cb\u3081\u308b\u5fc5\u8981\u304c\u306a\u3044\u304b\u3089\u3067\u3059\u3002\u3053\u306e\u3088\u3046\u306b\u3001\u30c8\u30fc\u30af\u30f3\u5316\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3084\u4f7f\u7528\u3057\u305f\u3044\u7279\u5225\u306a\u30c8\u30fc\u30af\u30f3\u306b\u3064\u3044\u3066\u4f55\u3082\u6307\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u305b\u3093\u3002\u65b0\u3057\u3044\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306fGPT-2\u3068\u307e\u3063\u305f\u304f\u540c\u3058\u306b\u306a\u308a\u3001\u5909\u5316\u3059\u308b\u306e\u306f\u8a9e\u5f59\u306e\u307f\u3067\u3001\u3053\u308c\u306f\u30b3\u30fc\u30d1\u30b9\u3067\u306e\u8a13\u7df4\u306b\u3088\u3063\u3066\u6c7a\u5b9a\u3055\u308c\u307e\u3059\u3002</p> <p>\u307e\u305a\u3001\u3053\u306e\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u304c\u4f8b\u306e\u95a2\u6570\u3092\u3069\u306e\u3088\u3046\u306b\u51e6\u7406\u3059\u308b\u304b\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\uff1a</p> <pre><code>from pprint import pprint\nexample = '''def add_numbers(a, b):\n    \"\"\"Add the two numbers `a` and `b`.\"\"\"\n    return a + b'''\n\ntokens = old_tokenizer.tokenize(example)\npprint(tokens, compact=True)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>['def', '\u00c4 add', '_', 'n', 'umbers', '(', 'a', ',', '\u00c4 b', '):', '\u00c4\u0160', '\u00c4 ', '\u00c4 ',\n '\u00c4 ', '\u00c4 \"\"\"', 'Add', '\u00c4 the', '\u00c4 two', '\u00c4 numbers', '\u00c4 `', 'a', '`', '\u00c4 and', '\u00c4 `',\n 'b', '`', '.\"', '\"\"', '\u00c4\u0160', '\u00c4 ', '\u00c4 ', '\u00c4 ', '\u00c4 return', '\u00c4 a', '\u00c4 +', '\u00c4 b']\n</code></pre></p> <p>\u3053\u306e\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306b\u306f\u3001\u30b9\u30da\u30fc\u30b9\u3068\u6539\u884c\u3092\u305d\u308c\u305e\u308c\u8868\u3059<code>\u00c4</code>\u3084<code>\u00c4\u0160</code>\u306e\u3088\u3046\u306a\u7279\u5225\u306a\u30b7\u30f3\u30dc\u30eb\u304c\u3042\u308a\u307e\u3059\u3002\u898b\u3066\u306e\u3068\u304a\u308a\u3001\u3053\u308c\u306f\u3042\u307e\u308a\u52b9\u7387\u7684\u3067\u306f\u3042\u308a\u307e\u305b\u3093\uff1a\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306f\u5404\u30b9\u30da\u30fc\u30b9\u306b\u5bfe\u3057\u3066\u500b\u5225\u306e\u30c8\u30fc\u30af\u30f3\u3092\u8fd4\u3057\u307e\u3059\u304c\u3001\u30a4\u30f3\u30c7\u30f3\u30c8\u30ec\u30d9\u30eb\u3092\u30b0\u30eb\u30fc\u30d7\u5316\u3067\u304d\u307e\u3059\uff084\u3064\u307e\u305f\u306f8\u3064\u306e\u30b9\u30da\u30fc\u30b9\u306e\u30bb\u30c3\u30c8\u304c\u30b3\u30fc\u30c9\u3067\u306f\u975e\u5e38\u306b\u4e00\u822c\u7684\u3067\u3042\u308b\u305f\u3081\uff09\u3002\u307e\u305f\u3001<code>_</code>\u6587\u5b57\u3092\u898b\u6163\u308c\u3066\u3044\u306a\u3044\u305f\u3081\u3001\u95a2\u6570\u540d\u3092\u5c11\u3057\u5947\u5999\u306b\u5206\u5272\u3057\u3066\u3044\u307e\u3059\u3002</p> <p>\u65b0\u3057\u3044\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3092\u8a13\u7df4\u3057\u3066\u3001\u3053\u308c\u3089\u306e\u554f\u984c\u304c\u89e3\u6c7a\u3059\u308b\u304b\u3069\u3046\u304b\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u3053\u308c\u306b\u306f\u3001<code>train_new_from_iterator()</code>\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3057\u307e\u3059\uff1a</p> <pre><code>tokenizer = old_tokenizer.train_new_from_iterator(training_corpus, 52000)\n</code></pre> <p>\u30b3\u30fc\u30d1\u30b9\u304c\u975e\u5e38\u306b\u5927\u304d\u3044\u5834\u5408\u3001\u3053\u306e\u30b3\u30de\u30f3\u30c9\u306b\u306f\u5c11\u3057\u6642\u9593\u304c\u304b\u304b\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u304c\u30011.6 GB\u306e\u30c6\u30ad\u30b9\u30c8\u306e\u3053\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3067\u306f\u975e\u5e38\u306b\u9ad8\u901f\u3067\u3059\uff0812\u30b3\u30a2\u306eAMD Ryzen 9 3900X CPU\u30671\u520616\u79d2\uff09\u3002</p> <p><code>AutoTokenizer.train_new_from_iterator()</code>\u306f\u3001\u4f7f\u7528\u3057\u3066\u3044\u308b\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u304c\u300c\u9ad8\u901f\u300d\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306e\u5834\u5408\u306b\u306e\u307f\u52d5\u4f5c\u3059\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u6b21\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u898b\u308b\u3088\u3046\u306b\u3001Hugging Face Transformers\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u306f2\u3064\u306e\u30bf\u30a4\u30d7\u306e\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\uff1a\u7d14\u7c8b\u306bPython\u3067\u66f8\u304b\u308c\u305f\u3082\u306e\u3068\u3001Rust\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u3067\u66f8\u304b\u308c\u305fHugging Face Tokenizers\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u3088\u3063\u3066\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u308b\u9ad8\u901f\u306a\u3082\u306e\u3067\u3059\u3002Python\u306f\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u3068\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u6700\u3082\u3088\u304f\u4f7f\u7528\u3055\u308c\u308b\u8a00\u8a9e\u3067\u3059\u304c\u3001\u4f55\u304b\u3092\u9ad8\u901f\u5316\u3059\u308b\u305f\u3081\u306b\u4e26\u5217\u5316\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u5834\u5408\u3001\u5225\u306e\u8a00\u8a9e\u3067\u66f8\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001\u30e2\u30c7\u30eb\u8a08\u7b97\u306e\u4e2d\u5fc3\u306b\u3042\u308b\u884c\u5217\u4e57\u7b97\u306f\u3001GPU\u7528\u306b\u6700\u9069\u5316\u3055\u308c\u305fC\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3042\u308bCUDA\u3067\u66f8\u304b\u308c\u3066\u3044\u307e\u3059\u3002</p> <p>\u7d14\u7c8b\u306aPython\u3067\u5168\u304f\u65b0\u3057\u3044\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3092\u8a13\u7df4\u3059\u308b\u3053\u3068\u306f\u975e\u5e38\u306b\u6642\u9593\u304c\u304b\u304b\u308b\u305f\u3081\u3001Hugging Face Tokenizers\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u958b\u767a\u3055\u308c\u307e\u3057\u305f\u3002GPU\u3067\u306e\u5165\u529b\u30d0\u30c3\u30c1\u3092\u7528\u3044\u305f\u30e2\u30c7\u30eb\u5b9f\u884c\u306e\u305f\u3081\u306bCUDA\u8a00\u8a9e\u3092\u5b66\u3076\u5fc5\u8981\u304c\u306a\u3044\u306e\u3068\u540c\u69d8\u306b\u3001\u9ad8\u901f\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3092\u4f7f\u7528\u3059\u308b\u305f\u3081\u306bRust\u3092\u5b66\u3076\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002Hugging Face Tokenizers\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u3001\u5185\u90e8\u7684\u306bRust\u306e\u30b3\u30fc\u30c9\u7247\u3092\u547c\u3073\u51fa\u3059\u591a\u304f\u306e\u30e1\u30bd\u30c3\u30c9\u306bPython\u30d0\u30a4\u30f3\u30c7\u30a3\u30f3\u30b0\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001\u65b0\u3057\u3044\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306e\u8a13\u7df4\u3092\u4e26\u5217\u5316\u3057\u305f\u308a\u3001\u7b2c3\u7ae0\u3067\u898b\u305f\u3088\u3046\u306b\u3001\u5165\u529b\u306e\u30d0\u30c3\u30c1\u306e\u30c8\u30fc\u30af\u30f3\u5316\u3092\u884c\u3044\u307e\u3059\u3002</p> <p>\u307b\u3068\u3093\u3069\u306eTransformer\u30e2\u30c7\u30eb\u306b\u306f\u9ad8\u901f\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u304c\u5229\u7528\u53ef\u80fd\u3067\u3059\uff08\u3053\u3053\u3067\u78ba\u8a8d\u3067\u304d\u308b\u4f8b\u5916\u3082\u3042\u308a\u307e\u3059\uff09\u3002<code>AutoTokenizer</code> API\u306f\u3001\u5229\u7528\u53ef\u80fd\u3067\u3042\u308c\u3070\u5e38\u306b\u9ad8\u901f\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3092\u9078\u629e\u3057\u307e\u3059\u3002\u6b21\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u306f\u3001\u9ad8\u901f\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u304c\u6301\u3064\u4ed6\u306e\u7279\u5225\u306a\u6a5f\u80fd\u306b\u3064\u3044\u3066\u8a73\u3057\u304f\u898b\u3066\u3044\u304d\u307e\u3059\u3002\u3053\u308c\u3089\u306f\u3001\u30c8\u30fc\u30af\u30f3\u5206\u985e\u3084\u8cea\u554f\u5fdc\u7b54\u306e\u3088\u3046\u306a\u30bf\u30b9\u30af\u3067\u672c\u5f53\u306b\u5f79\u7acb\u3061\u307e\u3059\u3002\u3057\u304b\u3057\u3001\u305d\u308c\u306b\u98db\u3073\u8fbc\u3080\u524d\u306b\u3001\u524d\u306e\u4f8b\u3067\u79c1\u305f\u3061\u306e\u5168\u304f\u65b0\u3057\u3044\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3092\u8a66\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff1a</p> <pre><code>tokens = tokenizer.tokenize(example)\npprint(tokens, compact=True)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>['def', '\u00c4 add', '_', 'numbers', '(', 'a', ',', '\u00c4 b', '):', '\u00c4\u0160\u00c4 \u00c4 \u00c4 ', '\u00c4 \"\"\"',\n 'Add', '\u00c4 the', '\u00c4 two', '\u00c4 numbers', '\u00c4 `', 'a', '`', '\u00c4 and', '\u00c4 `', 'b', '`.\"\"\"',\n '\u00c4\u0160\u00c4 \u00c4 \u00c4 ', '\u00c4 return', '\u00c4 a', '\u00c4 +', '\u00c4 b']\n</code></pre></p> <p>\u3053\u3053\u3067\u3082\u3001\u30b9\u30da\u30fc\u30b9\u3068\u6539\u884c\u3092\u8868\u3059\u7279\u5225\u306a\u30b7\u30f3\u30dc\u30eb<code>\u00c4</code>\u3068<code>\u00c4\u0160</code>\u304c\u898b\u3089\u308c\u307e\u3059\u304c\u3001\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u304cPython\u95a2\u6570\u306e\u30b3\u30fc\u30d1\u30b9\u306b\u975e\u5e38\u306b\u7279\u5316\u3057\u305f\u30c8\u30fc\u30af\u30f3\u3092\u5b66\u7fd2\u3057\u305f\u3053\u3068\u3082\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001\u30a4\u30f3\u30c7\u30f3\u30c8\u3092\u8868\u3059<code>\u00c4\u0160\u00c4 \u00c4 \u00c4</code>\u30c8\u30fc\u30af\u30f3\u3084\u3001docstring\u3092\u958b\u59cb\u3059\u308b3\u3064\u306e\u5f15\u7528\u7b26\u3092\u8868\u3059<code>\u00c4 \"\"\"</code>\u30c8\u30fc\u30af\u30f3\u304c\u3042\u308a\u307e\u3059\u3002\u307e\u305f\u3001\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306f<code>_</code>\u3067\u95a2\u6570\u540d\u3092\u6b63\u3057\u304f\u5206\u5272\u3057\u307e\u3057\u305f\u3002\u3053\u308c\u306f\u975e\u5e38\u306b\u30b3\u30f3\u30d1\u30af\u30c8\u306a\u8868\u73fe\u3067\u3059\u3002\u6bd4\u8f03\u3068\u3057\u3066\u3001\u540c\u3058\u4f8b\u3067\u901a\u5e38\u306e\u82f1\u8a9e\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3092\u4f7f\u7528\u3059\u308b\u3068\u3001\u3088\u308a\u9577\u3044\u6587\u7ae0\u304c\u5f97\u3089\u308c\u307e\u3059\uff1a</p> <pre><code>print(len(tokens))\nprint(len(old_tokenizer.tokenize(example)))\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>27\n36\n</code></pre></p> <p>\u5225\u306e\u4f8b\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\uff1a</p> <pre><code>example = \"\"\"class LinearLayer():\n    def __init__(self, input_size, output_size):\n        self.weight = torch.randn(input_size, output_size)\n        self.bias = torch.zeros(output_size)\n\n    def __call__(self, x):\n        return x @ self.weights + self.bias\n    \"\"\"\npprint(tokenizer.tokenize(example), compact=True)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>['class', '\u00c4 Linear', 'Layer', '():', '\u00c4\u0160\u00c4 \u00c4 \u00c4 ', '\u00c4 def', '\u00c4 __', 'init', '__(',\n 'self', ',', '\u00c4 input', '_', 'size', ',', '\u00c4 output', '_', 'size', '):',\n '\u00c4\u0160\u00c4 \u00c4 \u00c4 \u00c4 \u00c4 \u00c4 \u00c4 ', '\u00c4 self', '.', 'weight', '\u00c4 =', '\u00c4 torch', '.', 'randn', '(', 'input',\n '_', 'size', ',', '\u00c4 output', '_', 'size', ')', '\u00c4\u0160\u00c4 \u00c4 \u00c4 \u00c4 \u00c4 \u00c4 \u00c4 ', '\u00c4 self', '.',\n 'bias', '\u00c4 =', '\u00c4 torch', '.', 'zeros', '(', 'output', '_', 'size', ')', '\u00c4\u0160\u00c4\u0160\u00c4 \u00c4 \u00c4 ',\n '\u00c4 def', '\u00c4 __', 'call', '__(', 'self', ',', '\u00c4 x', '):', '\u00c4\u0160\u00c4 \u00c4 \u00c4 \u00c4 \u00c4 \u00c4 \u00c4 ', '\u00c4 return',\n '\u00c4 x', '\u00c4 @', '\u00c4 self', '.', 'weights', '\u00c4 +', '\u00c4 self', '.', 'bias', '\u00c4\u0160\u00c4 \u00c4 \u00c4 \u00c4 ']\n</code></pre></p> <p>\u30a4\u30f3\u30c7\u30f3\u30c8\u306b\u5bfe\u5fdc\u3059\u308b\u30c8\u30fc\u30af\u30f3\u306b\u52a0\u3048\u3066\u3001\u3053\u3053\u3067\u306f\u4e8c\u91cd\u30a4\u30f3\u30c7\u30f3\u30c8\u306e\u30c8\u30fc\u30af\u30f3<code>\u00c4\u0160\u00c4 \u00c4 \u00c4 \u00c4 \u00c4 \u00c4 \u00c4</code>\u3082\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002<code>class</code>\u3001<code>init</code>\u3001<code>call</code>\u3001<code>self</code>\u3001<code>return</code>\u306e\u3088\u3046\u306aPython\u306e\u7279\u5225\u306a\u5358\u8a9e\u306f\u3001\u305d\u308c\u305e\u308c\u4e00\u3064\u306e\u30c8\u30fc\u30af\u30f3\u3068\u3057\u3066\u30c8\u30fc\u30af\u30f3\u5316\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u307e\u305f\u3001<code>_</code>\u3068<code>.</code>\u3067\u306e\u5206\u5272\u306b\u52a0\u3048\u3066\u3001\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306f\u30ad\u30e3\u30e1\u30eb\u30b1\u30fc\u30b9\u306e\u540d\u524d\u3082\u6b63\u3057\u304f\u5206\u5272\u3057\u307e\u3059\uff1a<code>LinearLayer</code>\u306f<code>[\"\u00c4 Linear\", \"Layer\"]</code>\u3068\u3057\u3066\u30c8\u30fc\u30af\u30f3\u5316\u3055\u308c\u307e\u3059\u3002</p>","tags":["NLP","Transformers","Tokenizer","Hugging Face","\u6a5f\u68b0\u5b66\u7fd2","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","BPE","WordPiece"]},{"location":"LLM/04_the_huggingface_tokenizers_library/#_7","title":"\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306e\u4fdd\u5b58","text":"<p>\u5f8c\u3067\u4f7f\u7528\u3067\u304d\u308b\u3088\u3046\u306b\u3001\u65b0\u3057\u3044\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3092\u4fdd\u5b58\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u30e2\u30c7\u30eb\u3068\u540c\u69d8\u306b\u3001\u3053\u308c\u306f<code>save_pretrained()</code>\u30e1\u30bd\u30c3\u30c9\u3067\u884c\u308f\u308c\u307e\u3059\uff1a</p> <pre><code>tokenizer.save_pretrained(\"coder-search-net-tokenizer\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>('coder-search-net-tokenizer/tokenizer_config.json',\n 'coder-search-net-tokenizer/special_tokens_map.json',\n 'coder-search-net-tokenizer/vocab.json',\n 'coder-search-net-tokenizer/merges.txt',\n 'coder-search-net-tokenizer/added_tokens.json',\n 'coder-search-net-tokenizer/tokenizer.json')\n</code></pre></p> <p>\u3053\u308c\u306b\u3088\u308a\u3001code-search-net-tokenizer\u3068\u3044\u3046\u540d\u524d\u306e\u65b0\u3057\u3044\u30d5\u30a9\u30eb\u30c0\u304c\u4f5c\u6210\u3055\u308c\u3001\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306e\u518d\u8aad\u307f\u8fbc\u307f\u306b\u5fc5\u8981\u306a\u3059\u3079\u3066\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u542b\u307e\u308c\u307e\u3059\u3002</p> <p>\u305d\u306e\u5f8c\u3001<code>from_pretrained()</code>\u30e1\u30bd\u30c3\u30c9\u3067\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3092\u3069\u3053\u304b\u3089\u3067\u3082\u8aad\u307f\u8fbc\u3080\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a</p> <pre><code>tokenizer = AutoTokenizer.from_pretrained(\"coder-search-net-tokenizer\")\n</code></pre>","tags":["NLP","Transformers","Tokenizer","Hugging Face","\u6a5f\u68b0\u5b66\u7fd2","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","BPE","WordPiece"]},{"location":"LLM/04_the_huggingface_tokenizers_library/#_8","title":"\u9ad8\u901f\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306e\u7279\u5225\u306a\u6a5f\u80fd","text":"<p>\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u306f\u3001Hugging Face Transformers\u306e\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306e\u6a5f\u80fd\u3092\u3088\u308a\u8a73\u3057\u304f\u898b\u3066\u3044\u304d\u307e\u3059\u3002\u3053\u308c\u307e\u3067\u306f\u3001\u5165\u529b\u3092\u30c8\u30fc\u30af\u30f3\u5316\u3057\u305f\u308a\u3001ID\u3092\u30c6\u30ad\u30b9\u30c8\u306b\u30c7\u30b3\u30fc\u30c9\u3057\u305f\u308a\u3059\u308b\u305f\u3081\u306b\u306e\u307f\u4f7f\u7528\u3057\u3066\u3044\u307e\u3057\u305f\u304c\u3001\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\uff08\u7279\u306bHugging Face Tokenizers\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u3088\u3063\u3066\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u308b\u3082\u306e\uff09\u306f\u3082\u3063\u3068\u591a\u304f\u306e\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u3089\u306e\u8ffd\u52a0\u6a5f\u80fd\u3092\u8aac\u660e\u3059\u308b\u305f\u3081\u306b\u3001\u7b2c1\u7ae0\u3067\u6700\u521d\u306b\u906d\u9047\u3057\u305f<code>token-classification</code>\uff08<code>ner</code>\u3068\u547c\u3093\u3067\u3044\u307e\u3057\u305f\uff09\u3068<code>question-answering</code>\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306e\u7d50\u679c\u3092\u518d\u73fe\u3059\u308b\u65b9\u6cd5\u3092\u63a2\u6c42\u3057\u307e\u3059\u3002</p> <p>\u4ee5\u4e0b\u306e\u8b70\u8ad6\u3067\u306f\u3001\u300c\u4f4e\u901f\u300d\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3068\u300c\u9ad8\u901f\u300d\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3092\u983b\u7e41\u306b\u533a\u5225\u3057\u307e\u3059\u3002\u4f4e\u901f\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306fHugging Face Transformers\u30e9\u30a4\u30d6\u30e9\u30ea\u306ePython\u3067\u66f8\u304b\u308c\u305f\u3082\u306e\u3067\u3059\u3002\u4e00\u65b9\u3001\u9ad8\u901f\u7248\u306fHugging Face Tokenizers\u306b\u3088\u3063\u3066\u63d0\u4f9b\u3055\u308c\u3001Rust\u3067\u66f8\u304b\u308c\u3066\u3044\u307e\u3059\u3002</p> \u9ad8\u901f\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc \u4f4e\u901f\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc <code>batched=True</code> 10.8s 4min41s <code>batched=False</code> 59.2s 5min3s","tags":["NLP","Transformers","Tokenizer","Hugging Face","\u6a5f\u68b0\u5b66\u7fd2","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","BPE","WordPiece"]},{"location":"LLM/04_the_huggingface_tokenizers_library/#_9","title":"\u30d0\u30c3\u30c1\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0","text":"<p>\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306e\u51fa\u529b\u306f\u5358\u7d14\u306aPython\u8f9e\u66f8\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u5b9f\u969b\u306b\u53d6\u5f97\u3059\u308b\u306e\u306f\u7279\u5225\u306a<code>BatchEncoding</code>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3059\u3002\u3053\u308c\u306f\u8f9e\u66f8\u306e\u30b5\u30d6\u30af\u30e9\u30b9\u3067\u3059\uff08\u305d\u306e\u305f\u3081\u3001\u4ee5\u524d\u306f\u305d\u306e\u7d50\u679c\u306b\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u4ed8\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\uff09\u3002\u305f\u3060\u3057\u3001\u4e3b\u306b\u9ad8\u901f\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3067\u4f7f\u7528\u3055\u308c\u308b\u8ffd\u52a0\u306e\u30e1\u30bd\u30c3\u30c9\u3082\u5099\u3048\u3066\u3044\u307e\u3059\u3002</p> <p>\u4e26\u5217\u5316\u6a5f\u80fd\u306b\u52a0\u3048\u3066\u3001\u9ad8\u901f\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306e\u4e3b\u8981\u306a\u6a5f\u80fd\u306f\u3001\u6700\u7d42\u7684\u306a\u30c8\u30fc\u30af\u30f3\u304c\u5143\u306e\u30c6\u30ad\u30b9\u30c8\u306e\u7bc4\u56f2\u3092\u5e38\u306b\u8ffd\u8de1\u3059\u308b\u3053\u3068\u3067\u3059\u3002\u3053\u308c\u306f\u30aa\u30d5\u30bb\u30c3\u30c8\u30de\u30c3\u30d4\u30f3\u30b0\u3068\u547c\u3070\u308c\u308b\u6a5f\u80fd\u3067\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u5404\u5358\u8a9e\u304c\u3069\u306e\u30c8\u30fc\u30af\u30f3\u3092\u751f\u6210\u3057\u305f\u304b\u3092\u30de\u30c3\u30d4\u30f3\u30b0\u3057\u305f\u308a\u3001\u5143\u306e\u30c6\u30ad\u30b9\u30c8\u306e\u5404\u6587\u5b57\u304c\u3069\u306e\u30c8\u30fc\u30af\u30f3\u306e\u5185\u90e8\u306b\u3042\u308b\u304b\u3092\u30de\u30c3\u30d4\u30f3\u30b0\u3057\u305f\u308a\u3001\u305d\u306e\u9006\u3092\u884c\u3046\u6a5f\u80fd\u304c\u89e3\u653e\u3055\u308c\u307e\u3059\u3002</p> <p>\u4f8b\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\uff1a</p> <pre><code>from transformers import AutoTokenizer\n\ntokenizer = AutoTokenizer.from_pretrained(\"bert-base-cased\")\nexample = \"My name is Sylvain and I work at Hugging Face in Brooklyn.\"\nencoding = tokenizer(example)\nprint(type(encoding))\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>&lt;class 'transformers.tokenization_utils_base.BatchEncoding'&gt;\n</code></pre></p> <p>\u524d\u8ff0\u306e\u3068\u304a\u308a\u3001\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306e\u51fa\u529b\u3067<code>BatchEncoding</code>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002</p> <p><code>AutoTokenizer</code>\u30af\u30e9\u30b9\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u9ad8\u901f\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3092\u9078\u629e\u3059\u308b\u306e\u3067\u3001\u3053\u306e<code>BatchEncoding</code>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u63d0\u4f9b\u3059\u308b\u8ffd\u52a0\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u304c\u9ad8\u901f\u304b\u4f4e\u901f\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u65b9\u6cd5\u306f2\u3064\u3042\u308a\u307e\u3059\u3002<code>tokenizer</code>\u306e<code>is_fast</code>\u5c5e\u6027\u3092\u30c1\u30a7\u30c3\u30af\u3067\u304d\u307e\u3059\uff1a</p> <pre><code>tokenizer.is_fast\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>True\n</code></pre></p> <p>\u307e\u305f\u306f<code>encoding</code>\u306e\u540c\u3058\u5c5e\u6027\u3092\u30c1\u30a7\u30c3\u30af\u3067\u304d\u307e\u3059\uff1a</p> <pre><code>encoding.is_fast\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>True\n</code></pre></p> <p>\u9ad8\u901f\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u304c\u3067\u304d\u308b\u3053\u3068\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u307e\u305a\u3001ID\u3092\u30c8\u30fc\u30af\u30f3\u306b\u5909\u63db\u305b\u305a\u306b\u30c8\u30fc\u30af\u30f3\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u307e\u3059\uff1a</p> <pre><code>pprint(encoding.tokens(), compact=True)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>['[CLS]', 'My', 'name', 'is', 'S', '##yl', '##va', '##in', 'and', 'I', 'work',\n 'at', 'Hu', '##gging', 'Face', 'in', 'Brooklyn', '.', '[SEP]']\n</code></pre></p> <p>\u3053\u306e\u5834\u5408\u3001\u30a4\u30f3\u30c7\u30c3\u30af\u30b95\u306e\u30c8\u30fc\u30af\u30f3\u306f<code>##yl</code>\u3067\u3001\u5143\u306e\u6587\u306e\u5358\u8a9e\u300cSylvain\u300d\u306e\u4e00\u90e8\u3067\u3059\u3002<code>word_ids()</code>\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3057\u3066\u3001\u5404\u30c8\u30fc\u30af\u30f3\u304c\u7531\u6765\u3059\u308b\u5358\u8a9e\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\uff1a</p> <pre><code>encoding.word_ids()\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>[None, 0, 1, 2, 3, 3, 3, 3, 4, 5, 6, 7, 8, 8, 9, 10, 11, 12, None]\n</code></pre></p> <p>\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306e\u7279\u5225\u306a\u30c8\u30fc\u30af\u30f3<code>[CLS]</code>\u3068<code>[SEP]</code>\u304c<code>None</code>\u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3055\u308c\u3001\u305d\u306e\u5f8c\u3001\u5404\u30c8\u30fc\u30af\u30f3\u304c\u5143\u306e\u5358\u8a9e\u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3055\u308c\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u30c8\u30fc\u30af\u30f3\u304c\u5358\u8a9e\u306e\u958b\u59cb\u306b\u3042\u308b\u304b\u3069\u3046\u304b\u3001\u307e\u305f\u306f2\u3064\u306e\u30c8\u30fc\u30af\u30f3\u304c\u540c\u3058\u5358\u8a9e\u5185\u306b\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u6c7a\u5b9a\u3059\u308b\u306e\u306b\u7279\u306b\u6709\u7528\u3067\u3059\u3002<code>##</code>\u30d7\u30ec\u30d5\u30a3\u30c3\u30af\u30b9\u306b\u4f9d\u5b58\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u304c\u3001\u3053\u308c\u306fBERT\u306e\u3088\u3046\u306a\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3067\u306e\u307f\u52d5\u4f5c\u3057\u307e\u3059\u3002\u3053\u306e\u65b9\u6cd5\u306f\u3001\u9ad8\u901f\u3067\u3042\u308b\u9650\u308a\u3001\u3042\u3089\u3086\u308b\u30bf\u30a4\u30d7\u306e\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3067\u52d5\u4f5c\u3057\u307e\u3059\u3002\u6b21\u306e\u7ae0\u3067\u306f\u3001\u3053\u306e\u6a5f\u80fd\u3092\u4f7f\u7528\u3057\u3066\u3001\u56fa\u6709\u8868\u73fe\u8a8d\u8b58\uff08NER\uff09\u3084\u54c1\u8a5e\u30bf\u30ae\u30f3\u30b0\uff08POS\uff09\u306e\u3088\u3046\u306a\u30bf\u30b9\u30af\u3067\u3001\u5404\u5358\u8a9e\u306b\u6301\u3063\u3066\u3044\u308b\u30e9\u30d9\u30eb\u3092\u30c8\u30fc\u30af\u30f3\u306b\u9069\u5207\u306b\u9069\u7528\u3059\u308b\u65b9\u6cd5\u3092\u8aac\u660e\u3057\u307e\u3059\u3002\u307e\u305f\u3001\u30de\u30b9\u30af\u30c9\u8a00\u8a9e\u30e2\u30c7\u30ea\u30f3\u30b0\uff08\u5168\u5358\u8a9e\u30de\u30b9\u30ad\u30f3\u30b0\u3068\u547c\u3070\u308c\u308b\u6280\u8853\uff09\u3067\u3001\u540c\u3058\u5358\u8a9e\u304b\u3089\u6765\u308b\u3059\u3079\u3066\u306e\u30c8\u30fc\u30af\u30f3\u3092\u30de\u30b9\u30af\u3059\u308b\u305f\u3081\u306b\u3082\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002</p> <p>Tip</p> <p>\u5358\u8a9e\u3068\u306f\u4f55\u304b\u3068\u3044\u3046\u6982\u5ff5\u306f\u8907\u96d1\u3067\u3059\u3002\u4f8b\u3048\u3070\u3001\u300cI'll\u300d\uff08\u300cI will\u300d\u306e\u77ed\u7e2e\u5f62\uff09\u306f1\u3064\u306e\u5358\u8a9e\u3067\u3057\u3087\u3046\u304b\u3001\u305d\u308c\u3068\u30822\u3064\u306e\u5358\u8a9e\u3067\u3057\u3087\u3046\u304b\uff1f\u5b9f\u969b\u306b\u306f\u3001\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3068\u9069\u7528\u3059\u308b\u524d\u51e6\u7406\u64cd\u4f5c\u306b\u3088\u3063\u3066\u7570\u306a\u308a\u307e\u3059\u3002\u4e00\u90e8\u306e\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306f\u30b9\u30da\u30fc\u30b9\u3067\u306e\u307f\u5206\u5272\u3059\u308b\u305f\u3081\u3001\u3053\u308c\u30921\u3064\u306e\u5358\u8a9e\u3068\u307f\u306a\u3057\u307e\u3059\u3002\u305d\u306e\u4ed6\u306e\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306f\u30b9\u30da\u30fc\u30b9\u306b\u52a0\u3048\u3066\u53e5\u8aad\u70b9\u3082\u4f7f\u7528\u3059\u308b\u305f\u3081\u30012\u3064\u306e\u5358\u8a9e\u3068\u307f\u306a\u3057\u307e\u3059\u3002</p> <p>\u8a66\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff01</p> <p><code>bert-base-cased</code>\u3068<code>roberta-base</code>\u30c1\u30a7\u30c3\u30af\u30dd\u30a4\u30f3\u30c8\u304b\u3089\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3092\u4f5c\u6210\u3057\u3001\u300c81s\u300d\u3067\u30c8\u30fc\u30af\u30f3\u5316\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u4f55\u304c\u89b3\u5bdf\u3055\u308c\u307e\u3059\u304b\uff1f\u5358\u8a9eID\u306f\u4f55\u3067\u3059\u304b\uff1f</p> <pre><code>from transformers import AutoTokenizer\nbert_tokenizer = AutoTokenizer.from_pretrained(\"bert-base-cased\")\nbert_encoding = bert_tokenizer(\"81s\")\nprint(f\"bert_encoding tokens: {bert_encoding.tokens()}\")\nprint(f\"bert_encoding word_ids: {bert_encoding.word_ids()}\")\n\nroberta_tokenizer = AutoTokenizer.from_pretrained(\"roberta-base\")\nroberta_encoding = roberta_tokenizer(\"81s\")\nprint(f\"roberta_encoding tokens: {roberta_encoding.tokens()}\")\nprint(f\"roberta_encoding word_ids: {roberta_encoding.word_ids()}\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>bert_encoding tokens: ['[CLS]', '81', '##s', '[SEP]']\nbert_encoding word_ids: [None, 0, 0, None]\nroberta_encoding tokens: ['&lt;s&gt;', '81', 's', '&lt;/s&gt;']\nroberta_encoding word_ids: [None, 0, 1, None]\n</code></pre></p> <p>\u540c\u69d8\u306b\u3001\u30c8\u30fc\u30af\u30f3\u304c\u7531\u6765\u3059\u308b\u6587\u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3067\u304d\u308b<code>sentence_ids()</code>\u30e1\u30bd\u30c3\u30c9\u3082\u3042\u308a\u307e\u3059\uff08\u305f\u3060\u3057\u3001\u3053\u306e\u5834\u5408\u3001\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306b\u3088\u3063\u3066\u8fd4\u3055\u308c\u308b<code>token_type_ids</code>\u304c\u540c\u3058\u60c5\u5831\u3092\u63d0\u4f9b\u3067\u304d\u307e\u3059\uff09\u3002</p> <p>\u6700\u5f8c\u306b\u3001<code>word_to_chars()</code>\u307e\u305f\u306f<code>token_to_chars()</code>\u304a\u3088\u3073<code>char_to_word()</code>\u307e\u305f\u306f<code>char_to_token()</code>\u30e1\u30bd\u30c3\u30c9\u3092\u901a\u3058\u3066\u3001\u4efb\u610f\u306e\u5358\u8a9e\u307e\u305f\u306f\u30c8\u30fc\u30af\u30f3\u3092\u5143\u306e\u30c6\u30ad\u30b9\u30c8\u306e\u6587\u5b57\u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3057\u305f\u308a\u3001\u305d\u306e\u9006\u3092\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001<code>word_ids()</code>\u30e1\u30bd\u30c3\u30c9\u306f<code>##yl</code>\u304c \u30a4\u30f3\u30c7\u30c3\u30af\u30b93\u306e\u5358\u8a9e\u306e\u4e00\u90e8\u3067\u3042\u308b\u3053\u3068\u3092\u6559\u3048\u3066\u304f\u308c\u307e\u3057\u305f\u304c\u3001\u6587\u4e2d\u3067\u306f\u3069\u306e\u5358\u8a9e\u3067\u3057\u3087\u3046\u304b\uff1f\u6b21\u306e\u3088\u3046\u306b\u3057\u3066\u78ba\u8a8d\u3067\u304d\u307e\u3059\uff1a</p> <pre><code>start, end = encoding.word_to_chars(3)\nexample[start:end]\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>'Sylvain'\n</code></pre></p> <p>\u524d\u8ff0\u306e\u3068\u304a\u308a\u3001\u3053\u308c\u306f\u9ad8\u901f\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u304c\u30aa\u30d5\u30bb\u30c3\u30c8\u306e\u30ea\u30b9\u30c8\u3067\u5404\u30c8\u30fc\u30af\u30f3\u304c\u7531\u6765\u3059\u308b\u30c6\u30ad\u30b9\u30c8\u306e\u30b9\u30d1\u30f3\u3092\u8ffd\u8de1\u3057\u3066\u3044\u308b\u3068\u3044\u3046\u4e8b\u5b9f\u306b\u3088\u3063\u3066\u652f\u3048\u3089\u308c\u3066\u3044\u307e\u3059\u3002\u305d\u306e\u4f7f\u7528\u6cd5\u3092\u8aac\u660e\u3059\u308b\u305f\u3081\u306b\u3001\u6b21\u306b<code>token-classification</code>\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306e\u7d50\u679c\u3092\u624b\u52d5\u3067\u518d\u73fe\u3059\u308b\u65b9\u6cd5\u3092\u793a\u3057\u307e\u3059\u3002</p>","tags":["NLP","Transformers","Tokenizer","Hugging Face","\u6a5f\u68b0\u5b66\u7fd2","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","BPE","WordPiece"]},{"location":"LLM/04_the_huggingface_tokenizers_library/#token-classification","title":"<code>token-classification</code>\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306e\u5185\u90e8","text":"<p>\u7b2c1\u7ae0\u3067\u306f\u3001NER\u3092\u521d\u3081\u3066\u4f53\u9a13\u3057\u307e\u3057\u305f\u3002NER\u306f\u3001\u30c6\u30ad\u30b9\u30c8\u306e\u3069\u306e\u90e8\u5206\u304c\u4eba\u3001\u5834\u6240\u3001\u7d44\u7e54\u306a\u3069\u306e\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u306b\u5bfe\u5fdc\u3059\u308b\u304b\u3092\u7279\u5b9a\u3059\u308b\u30bf\u30b9\u30af\u3067\u3059\u3002Hugging Face Transformers\u306e<code>pipeline()</code>\u95a2\u6570\u3092\u4f7f\u7528\u3057\u307e\u3057\u305f\u3002\u305d\u306e\u5f8c\u3001\u7b2c2\u7ae0\u3067\u306f\u3001\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u304c\u751f\u306e\u30c6\u30ad\u30b9\u30c8\u304b\u3089\u4e88\u6e2c\u3092\u53d6\u5f97\u3059\u308b\u305f\u3081\u306b\u5fc5\u8981\u306a3\u3064\u306e\u30b9\u30c6\u30fc\u30b8\uff08\u30c8\u30fc\u30af\u30f3\u5316\u3001\u30e2\u30c7\u30eb\u3092\u901a\u3058\u305f\u5165\u529b\u306e\u6e21\u3057\u3001\u5f8c\u51e6\u7406\uff09\u3092\u30b0\u30eb\u30fc\u30d7\u5316\u3059\u308b\u65b9\u6cd5\u3092\u898b\u307e\u3057\u305f\u3002<code>token-classification</code>\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306e\u6700\u521d\u306e2\u3064\u306e\u30b9\u30c6\u30c3\u30d7\u306f\u4ed6\u306e\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u3068\u540c\u3058\u3067\u3059\u304c\u3001\u5f8c\u51e6\u7406\u306f\u3082\u3046\u5c11\u3057\u8907\u96d1\u3067\u3059\u3002\u898b\u3066\u307f\u307e\u3057\u3087\u3046\uff01</p>","tags":["NLP","Transformers","Tokenizer","Hugging Face","\u6a5f\u68b0\u5b66\u7fd2","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","BPE","WordPiece"]},{"location":"LLM/04_the_huggingface_tokenizers_library/#_10","title":"\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u3067\u306e\u57fa\u672c\u7d50\u679c\u306e\u53d6\u5f97","text":"<p>\u307e\u305a\u3001\u30c8\u30fc\u30af\u30f3\u5206\u985e\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u3092\u53d6\u5f97\u3057\u3066\u3001\u624b\u52d5\u3067\u6bd4\u8f03\u3059\u308b\u305f\u3081\u306e\u7d50\u679c\u3092\u5f97\u307e\u3057\u3087\u3046\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u4f7f\u7528\u3055\u308c\u308b\u30e2\u30c7\u30eb\u306f<code>dbmdz/bert-large-cased-finetuned-conll03-english</code>\u3067\u3001\u6587\u306b\u5bfe\u3057\u3066NER\u3092\u5b9f\u884c\u3057\u307e\u3059\uff1a</p> <pre><code>from transformers import pipeline\n\ntoken_classifier = pipeline(\"token-classification\", model=\"dbmdz/bert-large-cased-finetuned-conll03-english\")\npprint(token_classifier(\"My name is Sylvain and I work at Hugging Face in Brooklyn.\"), width=200)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>[{'end': 12, 'entity': 'I-PER', 'index': 4, 'score': np.float32(0.99938285), 'start': 11, 'word': 'S'},\n {'end': 14, 'entity': 'I-PER', 'index': 5, 'score': np.float32(0.99815494), 'start': 12, 'word': '##yl'},\n {'end': 16, 'entity': 'I-PER', 'index': 6, 'score': np.float32(0.9959072), 'start': 14, 'word': '##va'},\n {'end': 18, 'entity': 'I-PER', 'index': 7, 'score': np.float32(0.99923277), 'start': 16, 'word': '##in'},\n {'end': 35, 'entity': 'I-ORG', 'index': 12, 'score': np.float32(0.9738931), 'start': 33, 'word': 'Hu'},\n {'end': 40, 'entity': 'I-ORG', 'index': 13, 'score': np.float32(0.97611505), 'start': 35, 'word': '##gging'},\n {'end': 45, 'entity': 'I-ORG', 'index': 14, 'score': np.float32(0.9887976), 'start': 41, 'word': 'Face'},\n {'end': 57, 'entity': 'I-LOC', 'index': 16, 'score': np.float32(0.9932106), 'start': 49, 'word': 'Brooklyn'}]\n</code></pre></p> <p>\u30e2\u30c7\u30eb\u306f\u300cSylvain\u300d\u306b\u3088\u3063\u3066\u751f\u6210\u3055\u308c\u305f\u5404\u30c8\u30fc\u30af\u30f3\u3092\u4eba\u3068\u3057\u3066\u3001\u300cHugging Face\u300d\u306b\u3088\u3063\u3066\u751f\u6210\u3055\u308c\u305f\u5404\u30c8\u30fc\u30af\u30f3\u3092\u7d44\u7e54\u3068\u3057\u3066\u3001\u300cBrooklyn\u300d\u30c8\u30fc\u30af\u30f3\u3092\u5834\u6240\u3068\u3057\u3066\u9069\u5207\u306b\u8b58\u5225\u3057\u307e\u3057\u305f\u3002\u307e\u305f\u3001\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306b\u540c\u3058\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u306b\u5bfe\u5fdc\u3059\u308b\u30c8\u30fc\u30af\u30f3\u3092\u307e\u3068\u3081\u308b\u3088\u3046\u306b\u4f9d\u983c\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\uff1a</p> <pre><code>from transformers import pipeline\n\ntoken_classifier = pipeline(\"token-classification\", aggregation_strategy=\"simple\", model=\"dbmdz/bert-large-cased-finetuned-conll03-english\")\npprint(token_classifier(\"My name is Sylvain and I work at Hugging Face in Brooklyn.\"), width=200)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>[{'end': 18, 'entity_group': 'PER', 'score': np.float32(0.9981694), 'start': 11, 'word': 'Sylvain'},\n {'end': 45, 'entity_group': 'ORG', 'score': np.float32(0.9796019), 'start': 33, 'word': 'Hugging Face'},\n {'end': 57, 'entity_group': 'LOC', 'score': np.float32(0.9932106), 'start': 49, 'word': 'Brooklyn'}]\n</code></pre></p> <p>\u9078\u629e\u3055\u308c\u305f<code>aggregation_strategy</code>\u306f\u3001\u30b0\u30eb\u30fc\u30d7\u5316\u3055\u308c\u305f\u5404\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u306b\u5bfe\u3057\u3066\u8a08\u7b97\u3055\u308c\u308b\u30b9\u30b3\u30a2\u3092\u5909\u66f4\u3057\u307e\u3059\u3002<code>\"simple\"</code>\u3067\u306f\u3001\u30b9\u30b3\u30a2\u306f\u5358\u306b\u7279\u5b9a\u306e\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u5185\u306e\u5404\u30c8\u30fc\u30af\u30f3\u306e\u30b9\u30b3\u30a2\u306e\u5e73\u5747\u3067\u3059\u3002\u4f8b\u3048\u3070\u3001\u300cSylvain\u300d\u306e\u30b9\u30b3\u30a2\u306f\u3001\u524d\u306e\u4f8b\u3067\u898b\u305f\u30c8\u30fc\u30af\u30f3<code>S</code>\u3001<code>##yl</code>\u3001<code>##va</code>\u3001<code>##in</code>\u306e\u30b9\u30b3\u30a2\u306e\u5e73\u5747\u3067\u3059\u3002\u5229\u7528\u53ef\u80fd\u306a\u305d\u306e\u4ed6\u306e\u6226\u7565\u306f\u6b21\u306e\u3068\u304a\u308a\u3067\u3059\uff1a</p> <ul> <li><code>\"first\"</code>\uff1a\u5404\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u306e\u30b9\u30b3\u30a2\u306f\u305d\u306e\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u306e\u6700\u521d\u306e\u30c8\u30fc\u30af\u30f3\u306e\u30b9\u30b3\u30a2\u3067\u3059\uff08\u305d\u306e\u305f\u3081\u300cSylvain\u300d\u306e\u5834\u5408\u3001\u30c8\u30fc\u30af\u30f3<code>S</code>\u306e\u30b9\u30b3\u30a20.993828\u306b\u306a\u308a\u307e\u3059\uff09</li> <li><code>\"max\"</code>\uff1a\u5404\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u306e\u30b9\u30b3\u30a2\u306f\u305d\u306e\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u5185\u306e\u30c8\u30fc\u30af\u30f3\u306e\u6700\u5927\u30b9\u30b3\u30a2\u3067\u3059\uff08\u305d\u306e\u305f\u3081\u300cHugging Face\u300d\u306e\u5834\u5408\u3001\u300cFace\u300d\u306e\u30b9\u30b3\u30a20.98879766\u306b\u306a\u308a\u307e\u3059\uff09</li> <li><code>\"average\"</code>\uff1a\u5404\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u306e\u30b9\u30b3\u30a2\u306f\u305d\u306e\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u3092\u69cb\u6210\u3059\u308b\u5358\u8a9e\u306e\u30b9\u30b3\u30a2\u306e\u5e73\u5747\u3067\u3059\uff08\u305d\u306e\u305f\u3081\u300cSylvain\u300d\u306e\u5834\u5408\u3001<code>\"simple\"</code>\u6226\u7565\u3068\u306e\u9055\u3044\u306f\u3042\u308a\u307e\u305b\u3093\u304c\u3001\u300cHugging Face\u300d\u306e\u30b9\u30b3\u30a2\u306f\u300cHugging\u300d0.975\u3068\u300cFace\u300d0.98879\u306e\u30b9\u30b3\u30a2\u306e\u5e73\u5747\u3067\u3042\u308b0.9819\u306b\u306a\u308a\u307e\u3059\uff09</li> </ul>","tags":["NLP","Transformers","Tokenizer","Hugging Face","\u6a5f\u68b0\u5b66\u7fd2","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","BPE","WordPiece"]},{"location":"LLM/04_the_huggingface_tokenizers_library/#_11","title":"\u5165\u529b\u304b\u3089\u4e88\u6e2c\u307e\u3067","text":"<p>\u307e\u305a\u3001\u5165\u529b\u3092\u30c8\u30fc\u30af\u30f3\u5316\u3057\u3066\u30e2\u30c7\u30eb\u3092\u901a\u3059\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u306f\u7b2c2\u7ae0\u3067\u307e\u3063\u305f\u304f\u540c\u3058\u3088\u3046\u306b\u884c\u308f\u308c\u307e\u3059\u3002<code>AutoXxx</code>\u30af\u30e9\u30b9\u3092\u4f7f\u7528\u3057\u3066\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3068\u30e2\u30c7\u30eb\u3092\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3057\u3001\u4f8b\u306b\u4f7f\u7528\u3057\u307e\u3059\uff1a</p> <pre><code>from transformers import AutoTokenizer, AutoModelForTokenClassification\n\nmodel_checkpoint = \"dbmdz/bert-large-cased-finetuned-conll03-english\"\ntokenizer = AutoTokenizer.from_pretrained(model_checkpoint)\nmodel = AutoModelForTokenClassification.from_pretrained(model_checkpoint)\n\nexample = \"My name is Sylvain and I work at Hugging Face in Brooklyn.\"\ninputs = tokenizer(example, return_tensors=\"pt\")\noutputs = model(**inputs)\n</code></pre> <p>\u3053\u3053\u3067\u306f<code>AutoModelForTokenClassification</code>\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u5165\u529b\u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u5404\u30c8\u30fc\u30af\u30f3\u306b\u5bfe\u3057\u3066\u4e00\u7d44\u306e\u30ed\u30b8\u30c3\u30c8\u3092\u53d6\u5f97\u3057\u307e\u3059\uff1a</p> <pre><code>print(inputs[\"input_ids\"].shape)\nprint(outputs.logits.shape)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>torch.Size([1, 19])\ntorch.Size([1, 19, 9])\n</code></pre></p> <p>1\u3064\u306e\u30b7\u30fc\u30b1\u30f3\u30b9\u3092\u542b\u308019\u30c8\u30fc\u30af\u30f3\u306e\u30d0\u30c3\u30c1\u304c\u3042\u308a\u3001\u30e2\u30c7\u30eb\u306b\u306f9\u3064\u306e\u7570\u306a\u308b\u30e9\u30d9\u30eb\u304c\u3042\u308b\u305f\u3081\u3001\u30e2\u30c7\u30eb\u306e\u51fa\u529b\u306f1 x 19 x 9\u306e\u5f62\u72b6\u306b\u306a\u308a\u307e\u3059\u3002\u30c6\u30ad\u30b9\u30c8\u5206\u985e\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u3068\u540c\u69d8\u306b\u3001\u30bd\u30d5\u30c8\u30de\u30c3\u30af\u30b9\u95a2\u6570\u3092\u4f7f\u7528\u3057\u3066\u305d\u308c\u3089\u306e\u30ed\u30b8\u30c3\u30c8\u3092\u78ba\u7387\u306b\u5909\u63db\u3057\u3001argmax\u3092\u53d6\u3063\u3066\u4e88\u6e2c\u3092\u5f97\u307e\u3059\uff08\u30bd\u30d5\u30c8\u30de\u30c3\u30af\u30b9\u306f\u9806\u5e8f\u3092\u5909\u66f4\u3057\u306a\u3044\u305f\u3081\u3001\u30ed\u30b8\u30c3\u30c8\u3067argmax\u3092\u53d6\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff09\uff1a</p> <pre><code>import torch\n\nprobabilities = torch.nn.functional.softmax(outputs.logits, dim=-1)[0].tolist()\npredictions = outputs.logits.argmax(dim=-1)[0].tolist()\nprint(predictions)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>[0, 0, 0, 0, 4, 4, 4, 4, 0, 0, 0, 0, 6, 6, 6, 0, 8, 0, 0]\n</code></pre></p> <p><code>model.config.id2label</code>\u5c5e\u6027\u306b\u306f\u3001\u4e88\u6e2c\u3092\u7406\u89e3\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3067\u304d\u308b\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304b\u3089\u30e9\u30d9\u30eb\u3078\u306e\u30de\u30c3\u30d4\u30f3\u30b0\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\uff1a</p> <pre><code>model.config.id2label\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>{0: 'O',\n 1: 'B-MISC',\n 2: 'I-MISC',\n 3: 'B-PER',\n 4: 'I-PER',\n 5: 'B-ORG',\n 6: 'I-ORG',\n 7: 'B-LOC',\n 8: 'I-LOC'}\n</code></pre></p> <p>\u524d\u8ff0\u306e\u3068\u304a\u308a\u30019\u3064\u306e\u30e9\u30d9\u30eb\u304c\u3042\u308a\u307e\u3059\uff1a<code>O</code>\u306f\u540d\u524d\u4ed8\u304d\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u5185\u306b\u306a\u3044\u30c8\u30fc\u30af\u30f3\u306e\u30e9\u30d9\u30eb\uff08\u300coutside\u300d\u306e\u610f\u5473\uff09\u3067\u3001\u5404\u30bf\u30a4\u30d7\u306e\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\uff08\u305d\u306e\u4ed6\u3001\u4eba\u3001\u7d44\u7e54\u3001\u5834\u6240\uff09\u306b\u5bfe\u3057\u30662\u3064\u306e\u30e9\u30d9\u30eb\u304c\u3042\u308a\u307e\u3059\u3002\u30e9\u30d9\u30eb<code>B-XXX</code>\u306f\u30c8\u30fc\u30af\u30f3\u304c\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3<code>XXX</code>\u306e\u958b\u59cb\u306b\u3042\u308b\u3053\u3068\u3092\u793a\u3057\u3001\u30e9\u30d9\u30eb<code>I-XXX</code>\u306f\u30c8\u30fc\u30af\u30f3\u304c\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3<code>XXX</code>\u306e\u5185\u90e8\u306b\u3042\u308b\u3053\u3068\u3092\u793a\u3057\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001\u73fe\u5728\u306e\u4f8b\u3067\u306f\u3001\u30e2\u30c7\u30eb\u304c\u30c8\u30fc\u30af\u30f3<code>S</code>\u3092<code>B-PER</code>\uff08\u4eba\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u306e\u958b\u59cb\uff09\u306b\u5206\u985e\u3057\u3001\u30c8\u30fc\u30af\u30f3<code>##yl</code>\u3001<code>##va</code>\u3001<code>##in</code>\u3092<code>I-PER</code>\uff08\u4eba\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u306e\u5185\u90e8\uff09\u306b\u5206\u985e\u3059\u308b\u3053\u3068\u304c\u671f\u5f85\u3055\u308c\u307e\u3059\u3002</p> <p>\u3053\u306e\u5834\u5408\u3001\u30e2\u30c7\u30eb\u304c\u3053\u308c\u30894\u3064\u306e\u30c8\u30fc\u30af\u30f3\u3059\u3079\u3066\u306b<code>I-PER</code>\u30e9\u30d9\u30eb\u3092\u4ed8\u3051\u305f\u3053\u3068\u304c\u9593\u9055\u3044\u3060\u3068\u601d\u3046\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u305d\u308c\u306f\u5b8c\u5168\u306b\u6b63\u3057\u304f\u3042\u308a\u307e\u305b\u3093\u3002\u5b9f\u969b\u306b\u306f\u3001<code>B-</code>\u3068<code>I-</code>\u30e9\u30d9\u30eb\u306b\u306fIOB1\u3068IOB2\u3068\u3044\u30462\u3064\u306e\u5f62\u5f0f\u304c\u3042\u308a\u307e\u3059\u3002IOB2\u5f62\u5f0f\uff08\u4e0b\u56f3\u306e\u30d4\u30f3\u30af\uff09\u306f\u6211\u3005\u304c\u7d39\u4ecb\u3057\u305f\u3082\u306e\u3067\u3001IOB1\u5f62\u5f0f\uff08\u4e0b\u56f3\u306e\u9752\uff09\u3067\u306f\u3001<code>B-</code>\u3067\u59cb\u307e\u308b\u30e9\u30d9\u30eb\u306f\u540c\u3058\u30bf\u30a4\u30d7\u306e2\u3064\u306e\u96a3\u63a5\u3059\u308b\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u3092\u5206\u96e2\u3059\u308b\u305f\u3081\u306b\u306e\u307f\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002\u4f7f\u7528\u3057\u3066\u3044\u308b\u30e2\u30c7\u30eb\u306f\u305d\u306e\u5f62\u5f0f\u3092\u4f7f\u7528\u3059\u308b\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3067\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3001<code>S</code>\u30c8\u30fc\u30af\u30f3\u306b<code>I-PER</code>\u30e9\u30d9\u30eb\u3092\u5272\u308a\u5f53\u3066\u307e\u3059\u3002</p> <p></p> <p>\u3053\u306e\u30de\u30c3\u30d7\u3092\u4f7f\u7528\u3057\u3066\u3001\u6700\u521d\u306e\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306e\u7d50\u679c\u3092\uff08\u307b\u307c\u5b8c\u5168\u306b\uff09\u518d\u73fe\u3059\u308b\u6e96\u5099\u304c\u3067\u304d\u307e\u3057\u305f\u3002<code>O</code>\u3068\u3057\u3066\u5206\u985e\u3055\u308c\u306a\u304b\u3063\u305f\u5404\u30c8\u30fc\u30af\u30f3\u306e\u30b9\u30b3\u30a2\u3068\u30e9\u30d9\u30eb\u3092\u53d6\u5f97\u3059\u308b\u3060\u3051\u3067\u3059\uff1a</p> <pre><code>results = []\ntokens = inputs.tokens()\n\nfor idx, pred in enumerate(predictions):\n    label = model.config.id2label[pred]\n    if label != \"O\":\n        results.append(\n            {\"entity\": label, \"score\": probabilities[idx][pred], \"index\": idx, \"word\": tokens[idx]}\n        )\n\npprint(results, width=100)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>[{'entity': 'I-PER', 'index': 4, 'score': 0.9993828535079956, 'word': 'S'},\n {'entity': 'I-PER', 'index': 5, 'score': 0.9981549382209778, 'word': '##yl'},\n {'entity': 'I-PER', 'index': 6, 'score': 0.995907187461853, 'word': '##va'},\n {'entity': 'I-PER', 'index': 7, 'score': 0.9992326498031616, 'word': '##in'},\n {'entity': 'I-ORG', 'index': 12, 'score': 0.9738929867744446, 'word': 'Hu'},\n {'entity': 'I-ORG', 'index': 13, 'score': 0.9761149883270264, 'word': '##gging'},\n {'entity': 'I-ORG', 'index': 14, 'score': 0.9887974858283997, 'word': 'Face'},\n {'entity': 'I-LOC', 'index': 16, 'score': 0.99321049451828, 'word': 'Brooklyn'}]\n</code></pre></p> <p>\u3053\u308c\u306f\u4ee5\u524d\u6301\u3063\u3066\u3044\u305f\u3082\u306e\u3068\u975e\u5e38\u306b\u4f3c\u3066\u3044\u307e\u3059\u304c\u30011\u3064\u306e\u4f8b\u5916\u304c\u3042\u308a\u307e\u3059\uff1a\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306f\u3001\u5143\u306e\u6587\u306e\u5404\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u306e<code>start</code>\u3068<code>end</code>\u306b\u95a2\u3059\u308b\u60c5\u5831\u3082\u63d0\u4f9b\u3057\u307e\u3057\u305f\u3002\u3053\u3053\u3067\u30aa\u30d5\u30bb\u30c3\u30c8\u30de\u30c3\u30d4\u30f3\u30b0\u304c\u6d3b\u8e8d\u3057\u307e\u3059\u3002\u30aa\u30d5\u30bb\u30c3\u30c8\u3092\u53d6\u5f97\u3059\u308b\u306b\u306f\u3001\u5165\u529b\u306b\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3092\u9069\u7528\u3059\u308b\u969b\u306b<code>return_offsets_mapping=True</code>\u3092\u8a2d\u5b9a\u3059\u308b\u3060\u3051\u3067\u3059\uff1a</p> <pre><code>inputs_with_offsets = tokenizer(example, return_offsets_mapping=True)\nprint(inputs_with_offsets[\"offset_mapping\"])\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>[(0, 0), (0, 2), (3, 7), (8, 10), (11, 12), (12, 14), (14, 16), (16, 18), (19, 22), (23, 24), (25, 29), (30, 32), (33, 35), (35, 40), (41, 45), (46, 48), (49, 57), (57, 58), (0, 0)]\n</code></pre></p> <p>\u5404\u30bf\u30d7\u30eb\u306f\u3001\u5404\u30c8\u30fc\u30af\u30f3\u306b\u5bfe\u5fdc\u3059\u308b\u30c6\u30ad\u30b9\u30c8\u306e\u30b9\u30d1\u30f3\u3067\u3001<code>(0, 0)</code>\u306f\u7279\u5225\u306a\u30c8\u30fc\u30af\u30f3\u306e\u305f\u3081\u306b\u4e88\u7d04\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u524d\u8ff0\u306e\u3068\u304a\u308a\u3001\u30a4\u30f3\u30c7\u30c3\u30af\u30b95\u306e\u30c8\u30fc\u30af\u30f3\u306f<code>##yl</code>\u3067\u3001\u3053\u3053\u3067\u306f\u30aa\u30d5\u30bb\u30c3\u30c8\u3068\u3057\u3066<code>(12, 14)</code>\u304c\u3042\u308a\u307e\u3059\u3002\u4f8b\u306e\u5bfe\u5fdc\u3059\u308b\u30b9\u30e9\u30a4\u30b9\u3092\u53d6\u5f97\u3059\u308b\u3068\uff1a</p> <pre><code># `##`\u306a\u3057\u3067\u9069\u5207\u306a\u30c6\u30ad\u30b9\u30c8\u30b9\u30d1\u30f3\u3092\u53d6\u5f97\u3057\u307e\u3059\nexample[12:14]\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>'yl'\n</code></pre></p> <p>\u3053\u308c\u3092\u4f7f\u7528\u3057\u3066\u3001\u524d\u306e\u7d50\u679c\u3092\u5b8c\u6210\u3055\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a</p> <pre><code>results = []\ninputs_with_offsets = tokenizer(example, return_offsets_mapping=True)\ntokens = inputs_with_offsets.tokens()\noffsets = inputs_with_offsets[\"offset_mapping\"]\n\nfor idx, pred in enumerate(predictions):\n    label = model.config.id2label[pred]\n    if label != \"O\":\n        start, end = offsets[idx]\n        results.append(\n            {\n                \"entity\": label,\n                \"score\": probabilities[idx][pred],\n                \"index\": idx,\n                \"word\": tokens[idx],\n                \"start\": start,\n                \"end\": end,\n            }\n        )\n\npprint(results, width=150)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>[{'end': 12, 'entity': 'I-PER', 'index': 4, 'score': 0.9993828535079956, 'start': 11, 'word': 'S'},\n {'end': 14, 'entity': 'I-PER', 'index': 5, 'score': 0.9981549382209778, 'start': 12, 'word': '##yl'},\n {'end': 16, 'entity': 'I-PER', 'index': 6, 'score': 0.995907187461853, 'start': 14, 'word': '##va'},\n {'end': 18, 'entity': 'I-PER', 'index': 7, 'score': 0.9992326498031616, 'start': 16, 'word': '##in'},\n {'end': 35, 'entity': 'I-ORG', 'index': 12, 'score': 0.9738929867744446, 'start': 33, 'word': 'Hu'},\n {'end': 40, 'entity': 'I-ORG', 'index': 13, 'score': 0.9761149883270264, 'start': 35, 'word': '##gging'},\n {'end': 45, 'entity': 'I-ORG', 'index': 14, 'score': 0.9887974858283997, 'start': 41, 'word': 'Face'},\n {'end': 57, 'entity': 'I-LOC', 'index': 16, 'score': 0.99321049451828, 'start': 49, 'word': 'Brooklyn'}]\n</code></pre></p>","tags":["NLP","Transformers","Tokenizer","Hugging Face","\u6a5f\u68b0\u5b66\u7fd2","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","BPE","WordPiece"]},{"location":"LLM/04_the_huggingface_tokenizers_library/#_12","title":"\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u306e\u30b0\u30eb\u30fc\u30d7\u5316","text":"<p>\u30aa\u30d5\u30bb\u30c3\u30c8\u3092\u4f7f\u7528\u3057\u3066\u5404\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u306estart\u30ad\u30fc\u3068end\u30ad\u30fc\u3092\u6c7a\u5b9a\u3059\u308b\u306e\u306f\u4fbf\u5229\u3067\u3059\u304c\u3001\u305d\u306e\u60c5\u5831\u306f\u53b3\u5bc6\u306b\u306f\u5fc5\u8981\u3042\u308a\u307e\u305b\u3093\u3002\u3057\u304b\u3057\u3001\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u3092\u30b0\u30eb\u30fc\u30d7\u5316\u3057\u305f\u3044\u5834\u5408\u3001\u30aa\u30d5\u30bb\u30c3\u30c8\u306f\u591a\u304f\u306e\u7169\u96d1\u306a\u30b3\u30fc\u30c9\u3092\u7bc0\u7d04\u3057\u3066\u304f\u308c\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001\u30c8\u30fc\u30af\u30f3<code>Hu</code>\u3001<code>##gging</code>\u3001<code>Face</code>\u3092\u30b0\u30eb\u30fc\u30d7\u5316\u3057\u305f\u3044\u5834\u5408\u3001\u6700\u521d\u306e2\u3064\u306f<code>##</code>\u3092\u524a\u9664\u3057\u3066\u6dfb\u4ed8\u3057\u3001<code>Face</code>\u306f<code>##</code>\u3067\u59cb\u307e\u3089\u306a\u3044\u306e\u3067\u30b9\u30da\u30fc\u30b9\u3067\u8ffd\u52a0\u3059\u308b\u3068\u3044\u3046\u7279\u5225\u306a\u30eb\u30fc\u30eb\u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002\u3057\u304b\u3057\u3001\u3053\u308c\u306f\u7279\u5b9a\u306e\u30bf\u30a4\u30d7\u306e\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3067\u306e\u307f\u52d5\u4f5c\u3057\u307e\u3059\u3002SentencePiece\u3084Byte-Pair-Encoding\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\uff08\u3053\u306e\u7ae0\u3067\u5f8c\u8ff0\uff09\u306b\u306f\u5225\u306e\u30eb\u30fc\u30eb\u30bb\u30c3\u30c8\u3092\u66f8\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002</p> <p>\u30aa\u30d5\u30bb\u30c3\u30c8\u304c\u3042\u308c\u3070\u3001\u3059\u3079\u3066\u306e\u30ab\u30b9\u30bf\u30e0\u30b3\u30fc\u30c9\u304c\u4e0d\u8981\u306b\u306a\u308a\u307e\u3059\uff1a\u6700\u521d\u306e\u30c8\u30fc\u30af\u30f3\u3067\u59cb\u307e\u308a\u6700\u5f8c\u306e\u30c8\u30fc\u30af\u30f3\u3067\u7d42\u308f\u308b\u5143\u306e\u30c6\u30ad\u30b9\u30c8\u306e\u30b9\u30d1\u30f3\u3092\u53d6\u308b\u3060\u3051\u3067\u3059\u3002\u30c8\u30fc\u30af\u30f3<code>Hu</code>\u3001<code>##gging</code>\u3001<code>Face</code>\u306e\u5834\u5408\u3001\u6587\u5b5733\uff08<code>Hu</code>\u306e\u958b\u59cb\uff09\u3067\u958b\u59cb\u3057\u3001\u6587\u5b5745\uff08<code>Face</code>\u306e\u7d42\u4e86\uff09\u306e\u524d\u3067\u7d42\u4e86\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff1a</p> <pre><code>example[33:45]\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>'Hugging Face'\n</code></pre></p> <p>\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u3092\u30b0\u30eb\u30fc\u30d7\u5316\u3057\u306a\u304c\u3089\u4e88\u6e2c\u3092\u5f8c\u51e6\u7406\u3059\u308b\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u305f\u3081\u306b\u3001<code>I-XXX</code>\u3067\u30e9\u30d9\u30eb\u4ed8\u3051\u3055\u308c\u305f\u9023\u7d9a\u3059\u308b\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u3092\u30b0\u30eb\u30fc\u30d7\u5316\u3057\u307e\u3059\uff08\u6700\u521d\u306e\u3082\u306e\u306f<code>B-XXX</code>\u307e\u305f\u306f<code>I-XXX</code>\u3067\u30e9\u30d9\u30eb\u4ed8\u3051\u3067\u304d\u307e\u3059\uff09\u3002\u3064\u307e\u308a\u3001<code>O</code>\u3001\u65b0\u3057\u3044\u30bf\u30a4\u30d7\u306e\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u3001\u307e\u305f\u306f\u540c\u3058\u30bf\u30a4\u30d7\u306e\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u304c\u958b\u59cb\u3059\u308b\u3053\u3068\u3092\u4f1d\u3048\u308b<code>B-XXX</code>\u3092\u53d6\u5f97\u3057\u305f\u5834\u5408\u3001\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u306e\u30b0\u30eb\u30fc\u30d7\u5316\u3092\u505c\u6b62\u3057\u307e\u3059\uff1a</p> <pre><code>import numpy as np\n\nresults = []\ninputs_with_offsets = tokenizer(example, return_offsets_mapping=True)\ntokens = inputs_with_offsets.tokens()\noffsets = inputs_with_offsets[\"offset_mapping\"]\n\nidx = 0\nwhile idx &lt; len(predictions):\n    pred = predictions[idx]\n    label = model.config.id2label[pred]\n    if label != \"O\":\n        # B-\u307e\u305f\u306fI-\u3092\u524a\u9664\n        label = label[2:]\n        start, _ = offsets[idx]\n\n        # I-label\u3067\u30e9\u30d9\u30eb\u4ed8\u3051\u3055\u308c\u305f\u3059\u3079\u3066\u306e\u30c8\u30fc\u30af\u30f3\u3092\u53d6\u5f97\n        all_scores = []\n        while (\n            idx &lt; len(predictions)\n            and model.config.id2label[predictions[idx]] == f\"I-{label}\"\n        ):\n            all_scores.append(probabilities[idx][pred])\n            _, end = offsets[idx]\n            idx += 1\n\n        # \u30b9\u30b3\u30a2\u306f\u305d\u306e\u30b0\u30eb\u30fc\u30d7\u5316\u3055\u308c\u305f\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u5185\u306e\u3059\u3079\u3066\u306e\u30c8\u30fc\u30af\u30f3\u306e\u30b9\u30b3\u30a2\u306e\u5e73\u5747\n        score = np.mean(all_scores).item()\n        word = example[start:end]\n        results.append(\n            {\n                \"entity_group\": label,\n                \"score\": score,\n                \"word\": word,\n                \"start\": start,\n                \"end\": end,\n            }\n        )\n    idx += 1\n\npprint(results, width=150)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>[{'end': 18, 'entity_group': 'PER', 'score': 0.998169407248497, 'start': 11, 'word': 'Sylvain'},\n {'end': 45, 'entity_group': 'ORG', 'score': 0.9796018203099569, 'start': 33, 'word': 'Hugging Face'},\n {'end': 57, 'entity_group': 'LOC', 'score': 0.99321049451828, 'start': 49, 'word': 'Brooklyn'}]\n</code></pre></p> <p>\u3053\u308c\u3089\u306e\u30aa\u30d5\u30bb\u30c3\u30c8\u304c\u975e\u5e38\u306b\u6709\u7528\u306a\u30bf\u30b9\u30af\u306e\u5225\u306e\u4f8b\u306f\u8cea\u554f\u5fdc\u7b54\u3067\u3059\u3002\u6b21\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u98db\u3073\u8fbc\u3080\u305d\u306e\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306b\u3088\u308a\u3001\u5165\u529b\u3092\u7279\u5b9a\u306e\u9577\u3055\u306b\u5207\u308a\u6368\u3066\u308b\u969b\u306b\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\u3059\u308b\u30c8\u30fc\u30af\u30f3\u3092\u51e6\u7406\u3059\u308b\u65b9\u6cd5\u306b\u3064\u3044\u3066\u3001Hugging Face Transformers\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306e\u6700\u5f8c\u306e\u6a5f\u80fd\u306e1\u3064\u3082\u898b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p>","tags":["NLP","Transformers","Tokenizer","Hugging Face","\u6a5f\u68b0\u5b66\u7fd2","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","BPE","WordPiece"]},{"location":"LLM/04_the_huggingface_tokenizers_library/#_13","title":"\u6b63\u898f\u5316\u3068\u524d\u51e6\u7406","text":"<p>Transformer\u30e2\u30c7\u30eb\u3067\u4f7f\u7528\u3055\u308c\u308b3\u3064\u306e\u6700\u3082\u4e00\u822c\u7684\u306a\u30b5\u30d6\u30ef\u30fc\u30c9\u30fb\u30c8\u30fc\u30af\u30f3\u5316\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\uff08Byte-Pair Encoding [BPE]\u3001WordPiece\u3001Unigram\uff09\u306b\u3064\u3044\u3066\u3088\u308a\u6df1\u304f\u6398\u308a\u4e0b\u3052\u308b\u524d\u306b\u3001\u5404\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u304c\u30c6\u30ad\u30b9\u30c8\u306b\u9069\u7528\u3059\u308b\u524d\u51e6\u7406\u306b\u3064\u3044\u3066\u6700\u521d\u306b\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u30c8\u30fc\u30af\u30f3\u5316\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306e\u30b9\u30c6\u30c3\u30d7\u306e\u6982\u8981\u306f\u6b21\u306e\u3068\u304a\u308a\u3067\u3059\uff1a</p> <p></p> <p>\u30c6\u30ad\u30b9\u30c8\u3092\u30b5\u30d6\u30c8\u30fc\u30af\u30f3\uff08\u305d\u306e\u30e2\u30c7\u30eb\u306b\u5f93\u3063\u3066\uff09\u306b\u5206\u5272\u3059\u308b\u524d\u306b\u3001\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306f2\u3064\u306e\u30b9\u30c6\u30c3\u30d7\u3092\u5b9f\u884c\u3057\u307e\u3059\uff1a\u6b63\u898f\u5316\u3068\u524d\u51e6\u7406\u3002</p>","tags":["NLP","Transformers","Tokenizer","Hugging Face","\u6a5f\u68b0\u5b66\u7fd2","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","BPE","WordPiece"]},{"location":"LLM/04_the_huggingface_tokenizers_library/#_14","title":"\u6b63\u898f\u5316","text":"<p>\u6b63\u898f\u5316\u30b9\u30c6\u30c3\u30d7\u306b\u306f\u3001\u4e0d\u8981\u306a\u7a7a\u767d\u306e\u9664\u53bb\u3001\u5c0f\u6587\u5b57\u5316\u3001\u30a2\u30af\u30bb\u30f3\u30c8\u8a18\u53f7\u306e\u9664\u53bb\u306a\u3069\u306e\u4e00\u822c\u7684\u306a\u30af\u30ea\u30fc\u30f3\u30a2\u30c3\u30d7\u304c\u542b\u307e\u308c\u307e\u3059\u3002Unicode\u6b63\u898f\u5316\uff08NFC\u3084NFKC\u306a\u3069\uff09\u306b\u7cbe\u901a\u3057\u3066\u3044\u308b\u5834\u5408\u3001\u3053\u308c\u3082\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u304c\u9069\u7528\u3059\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u3082\u306e\u3067\u3059\u3002</p> <p>Hugging Face Transformers\u306e<code>tokenizer</code>\u306b\u306f<code>backend_tokenizer</code>\u3068\u3044\u3046\u5c5e\u6027\u304c\u3042\u308a\u3001Hugging Face Tokenizers\u30e9\u30a4\u30d6\u30e9\u30ea\u304b\u3089\u306e\u57fa\u790e\u3068\u306a\u308b\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306b\u30a2\u30af\u30bb\u30b9\u3092\u63d0\u4f9b\u3057\u307e\u3059\uff1a</p> <pre><code>from transformers import AutoTokenizer\n\ntokenizer = AutoTokenizer.from_pretrained(\"bert-base-uncased\")\nprint(type(tokenizer.backend_tokenizer))\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>&lt;class 'tokenizers.Tokenizer'&gt;\n</code></pre></p> <p><code>tokenizer</code>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e<code>normalizer</code>\u5c5e\u6027\u306b\u306f\u3001\u6b63\u898f\u5316\u304c\u3069\u306e\u3088\u3046\u306b\u5b9f\u884c\u3055\u308c\u308b\u304b\u3092\u78ba\u8a8d\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3067\u304d\u308b<code>normalize_str()</code>\u30e1\u30bd\u30c3\u30c9\u304c\u3042\u308a\u307e\u3059\uff1a</p> <pre><code>print(tokenizer.backend_tokenizer.normalizer.normalize_str(\"H\u00e9ll\u00f2 h\u00f4w are \u00fc?\"))\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>hello how are u?\n</code></pre></p> <p>\u3053\u306e\u4f8b\u3067\u306f\u3001<code>bert-base-uncased</code>\u30c1\u30a7\u30c3\u30af\u30dd\u30a4\u30f3\u30c8\u3092\u9078\u629e\u3057\u305f\u305f\u3081\u3001\u9069\u7528\u3055\u308c\u305f\u6b63\u898f\u5316\u306f\u5c0f\u6587\u5b57\u5316\u3068\u30a2\u30af\u30bb\u30f3\u30c8\u8a18\u53f7\u306e\u9664\u53bb\u3067\u3057\u305f\u3002</p> <p>\u8a66\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff01</p> <p><code>bert-base-cased</code>\u30c1\u30a7\u30c3\u30af\u30dd\u30a4\u30f3\u30c8\u304b\u3089\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3092\u8aad\u307f\u8fbc\u307f\u3001\u540c\u3058\u4f8b\u3092\u6e21\u3057\u3066\u304f\u3060\u3055\u3044\u3002cased\u30d0\u30fc\u30b8\u30e7\u30f3\u3068uncased\u30d0\u30fc\u30b8\u30e7\u30f3\u306e\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306e\u4e3b\u306a\u9055\u3044\u306f\u4f55\u3067\u3057\u3087\u3046\u304b\uff1f</p> <pre><code>tokenizer = AutoTokenizer.from_pretrained(\"bert-base-cased\")\nprint(tokenizer.backend_tokenizer.normalizer.normalize_str(\"H\u00e9ll\u00f2 h\u00f4w are \u00fc?\"))\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>H\u00e9ll\u00f2 h\u00f4w are \u00fc?\n</code></pre></p>","tags":["NLP","Transformers","Tokenizer","Hugging Face","\u6a5f\u68b0\u5b66\u7fd2","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","BPE","WordPiece"]},{"location":"LLM/04_the_huggingface_tokenizers_library/#_15","title":"\u524d\u51e6\u7406","text":"<p>\u6b21\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u898b\u308b\u3088\u3046\u306b\u3001\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306f\u751f\u306e\u30c6\u30ad\u30b9\u30c8\u3060\u3051\u3067\u306f\u8a13\u7df4\u3067\u304d\u307e\u305b\u3093\u3002\u4ee3\u308f\u308a\u306b\u3001\u6700\u521d\u306b\u30c6\u30ad\u30b9\u30c8\u3092\u5358\u8a9e\u306e\u3088\u3046\u306a\u5c0f\u3055\u306a\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u306b\u5206\u5272\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u305d\u3053\u3067\u524d\u51e6\u7406\u30b9\u30c6\u30c3\u30d7\u304c\u767b\u5834\u3057\u307e\u3059\u3002\u7b2c2\u7ae0\u3067\u898b\u305f\u3088\u3046\u306b\u3001\u5358\u8a9e\u30d9\u30fc\u30b9\u306e\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306f\u3001\u7a7a\u767d\u3068\u53e5\u8aad\u70b9\u3067\u751f\u306e\u30c6\u30ad\u30b9\u30c8\u3092\u5358\u8a9e\u306b\u5206\u5272\u3059\u308b\u3060\u3051\u3067\u3059\u3002\u3053\u308c\u3089\u306e\u5358\u8a9e\u306f\u3001\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u304c\u8a13\u7df4\u4e2d\u306b\u5b66\u7fd2\u3067\u304d\u308b\u30b5\u30d6\u30c8\u30fc\u30af\u30f3\u306e\u5883\u754c\u306b\u306a\u308a\u307e\u3059\u3002</p> <p>\u9ad8\u901f\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u304c\u3069\u306e\u3088\u3046\u306b\u524d\u51e6\u7406\u3092\u5b9f\u884c\u3059\u308b\u304b\u3092\u78ba\u8a8d\u3059\u308b\u305f\u3081\u306b\u3001<code>tokenizer</code>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e<code>pre_tokenizer</code>\u5c5e\u6027\u306e<code>pre_tokenize_str()</code>\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3067\u304d\u307e\u3059\uff1a</p> <pre><code>from transformers import AutoTokenizer\n\ntokenizer = AutoTokenizer.from_pretrained(\"bert-base-uncased\")\ntokenizer.backend_tokenizer.pre_tokenizer.pre_tokenize_str(\"Hello, how are you?\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>[('Hello', (0, 5)),\n (',', (5, 6)),\n ('how', (7, 10)),\n ('are', (11, 14)),\n ('you', (15, 18)),\n ('?', (18, 19))]\n</code></pre></p> <p>\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u304c\u65e2\u306b\u30aa\u30d5\u30bb\u30c3\u30c8\u3092\u8ffd\u8de1\u3057\u3066\u3044\u308b\u3053\u3068\u306b\u6ce8\u76ee\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u3053\u308c\u304c\u524d\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u4f7f\u7528\u3057\u305f\u30aa\u30d5\u30bb\u30c3\u30c8\u30de\u30c3\u30d4\u30f3\u30b0\u3092\u63d0\u4f9b\u3067\u304d\u308b\u7406\u7531\u3067\u3059\u3002\u3053\u3053\u3067\u3001\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306f2\u3064\u306e\u30b9\u30da\u30fc\u30b9\u3092\u7121\u8996\u3057\u30661\u3064\u3060\u3051\u3067\u7f6e\u304d\u63db\u3048\u307e\u3059\u304c\u3001\u30aa\u30d5\u30bb\u30c3\u30c8\u306f<code>are</code>\u3068<code>you</code>\u306e\u9593\u3067\u305d\u308c\u3092\u8003\u616e\u3057\u3066\u30b8\u30e3\u30f3\u30d7\u3057\u307e\u3059\u3002</p> <p>BERT\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u305f\u3081\u3001\u524d\u51e6\u7406\u306b\u306f\u7a7a\u767d\u3068\u53e5\u8aad\u70b9\u3067\u306e\u5206\u5272\u304c\u542b\u307e\u308c\u307e\u3059\u3002\u4ed6\u306e\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306f\u3053\u306e\u30b9\u30c6\u30c3\u30d7\u3067\u7570\u306a\u308b\u30eb\u30fc\u30eb\u3092\u6301\u3064\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001GPT-2\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\uff1a</p> <pre><code>tokenizer = AutoTokenizer.from_pretrained(\"gpt2\")\ntokenizer.backend_tokenizer.pre_tokenizer.pre_tokenize_str(\"Hello, how are  you?\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>[('Hello', (0, 5)),\n (',', (5, 6)),\n ('\u0120 how', (6, 10)),\n ('\u0120 are', (10, 14)),\n ('\u0120 ', (14, 15)),\n ('\u0120 you', (15, 19)),\n ('?', (19, 20))]\n</code></pre></p> <p>\u3053\u308c\u3082\u7a7a\u767d\u3068\u53e5\u8aad\u70b9\u3067\u5206\u5272\u3057\u307e\u3059\u304c\u3001\u30b9\u30da\u30fc\u30b9\u3092\u4fdd\u6301\u3057\u3066<code>\u0120</code>\u8a18\u53f7\u306b\u7f6e\u304d\u63db\u3048\u308b\u305f\u3081\u3001\u30c8\u30fc\u30af\u30f3\u3092\u30c7\u30b3\u30fc\u30c9\u3059\u308b\u969b\u306b\u5143\u306e\u30b9\u30da\u30fc\u30b9\u3092\u5fa9\u5143\u3067\u304d\u307e\u3059\u3002</p> <p>\u307e\u305f\u3001BERT\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3068\u306f\u7570\u306a\u308a\u3001\u3053\u306e\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306f\u4e8c\u91cd\u30b9\u30da\u30fc\u30b9\u3092\u7121\u8996\u3057\u306a\u3044\u3053\u3068\u306b\u3082\u6ce8\u76ee\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <p>\u6700\u5f8c\u306e\u4f8b\u3068\u3057\u3066\u3001SentencePiece\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u57fa\u3065\u304fT5\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\uff1a</p> <pre><code>tokenizer = AutoTokenizer.from_pretrained(\"t5-small\")\ntokenizer.backend_tokenizer.pre_tokenizer.pre_tokenize_str(\"Hello, how are  you?\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>[('\u2581Hello,', (0, 6)),\n ('\u2581how', (7, 10)),\n ('\u2581are', (11, 14)),\n ('\u2581you?', (16, 20))]\n</code></pre></p> <p>GPT-2\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3068\u540c\u69d8\u306b\u3001\u3053\u308c\u306f\u30b9\u30da\u30fc\u30b9\u3092\u4fdd\u6301\u3057\u3001\u7279\u5b9a\u306e\u30c8\u30fc\u30af\u30f3\uff08<code>_</code>\uff09\u306b\u7f6e\u304d\u63db\u3048\u307e\u3059\u304c\u3001T5\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306f\u53e5\u8aad\u70b9\u3067\u306f\u306a\u304f\u7a7a\u767d\u3067\u306e\u307f\u5206\u5272\u3057\u307e\u3059\u3002\u307e\u305f\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u6587\u306e\u6700\u521d\uff08<code>Hello</code>\u306e\u524d\uff09\u306b\u30b9\u30da\u30fc\u30b9\u3092\u8ffd\u52a0\u3057\u3001<code>are</code>\u3068<code>you</code>\u306e\u9593\u306e\u4e8c\u91cd\u30b9\u30da\u30fc\u30b9\u3092\u7121\u8996\u3057\u305f\u3053\u3068\u306b\u3082\u6ce8\u76ee\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <p>\u3044\u304f\u3064\u304b\u306e\u7570\u306a\u308b\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u304c\u30c6\u30ad\u30b9\u30c8\u3092\u51e6\u7406\u3059\u308b\u65b9\u6cd5\u3092\u5c11\u3057\u898b\u305f\u306e\u3067\u3001\u57fa\u790e\u3068\u306a\u308b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u81ea\u4f53\u306e\u63a2\u7d22\u3092\u958b\u59cb\u3067\u304d\u307e\u3059\u3002\u5e83\u304f\u9069\u7528\u53ef\u80fd\u306aSentencePiece\u3092\u7c21\u5358\u306b\u898b\u3066\u304b\u3089\u3001\u6b21\u306e3\u3064\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u3001\u30b5\u30d6\u30ef\u30fc\u30c9\u30fb\u30c8\u30fc\u30af\u30f3\u5316\u306b\u4f7f\u7528\u3055\u308c\u308b3\u3064\u306e\u4e3b\u8981\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u52d5\u4f5c\u3092\u691c\u8a3c\u3057\u307e\u3059\u3002</p>","tags":["NLP","Transformers","Tokenizer","Hugging Face","\u6a5f\u68b0\u5b66\u7fd2","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","BPE","WordPiece"]},{"location":"LLM/04_the_huggingface_tokenizers_library/#sentencepiece","title":"SentencePiece","text":"<p>SentencePiece\u306f\u3001\u6b21\u306e3\u3064\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u898b\u308b\u30e2\u30c7\u30eb\u306e\u3044\u305a\u308c\u304b\u3068\u7d44\u307f\u5408\u308f\u305b\u3066\u4f7f\u7528\u3067\u304d\u308b\u30c6\u30ad\u30b9\u30c8\u306e\u524d\u51e6\u7406\u7528\u306e\u30c8\u30fc\u30af\u30f3\u5316\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u3059\u3002\u30c6\u30ad\u30b9\u30c8\u3092Unicode\u6587\u5b57\u306e\u30b7\u30fc\u30b1\u30f3\u30b9\u3068\u3057\u3066\u8003\u616e\u3057\u3001\u30b9\u30da\u30fc\u30b9\u3092\u7279\u5225\u306a\u6587\u5b57<code>\u2581</code>\u306b\u7f6e\u304d\u63db\u3048\u307e\u3059\u3002Unigram\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3068\u7d44\u307f\u5408\u308f\u305b\u3066\u4f7f\u7528\u3059\u308b\u3068\u3001\u524d\u51e6\u7406\u30b9\u30c6\u30c3\u30d7\u3082\u5fc5\u8981\u3042\u308a\u307e\u305b\u3093\u3002\u3053\u308c\u306f\u30b9\u30da\u30fc\u30b9\u6587\u5b57\u304c\u4f7f\u7528\u3055\u308c\u3066\u3044\u306a\u3044\u8a00\u8a9e\uff08\u4e2d\u56fd\u8a9e\u3084\u65e5\u672c\u8a9e\u306a\u3069\uff09\u306b\u975e\u5e38\u306b\u5f79\u7acb\u3061\u307e\u3059\u3002</p> <p>SentencePiece\u306e\u3082\u30461\u3064\u306e\u4e3b\u8981\u306a\u6a5f\u80fd\u306f\u53ef\u9006\u7684\u30c8\u30fc\u30af\u30f3\u5316\u3067\u3059\uff1a\u30b9\u30da\u30fc\u30b9\u306e\u7279\u5225\u306a\u51e6\u7406\u304c\u306a\u3044\u305f\u3081\u3001\u30c8\u30fc\u30af\u30f3\u306e\u30c7\u30b3\u30fc\u30c9\u306f\u5358\u7d14\u306b\u305d\u308c\u3089\u3092\u9023\u7d50\u3057\u3001<code>_</code>\u3092\u30b9\u30da\u30fc\u30b9\u306b\u7f6e\u304d\u63db\u3048\u308b\u3053\u3068\u3067\u884c\u308f\u308c\u307e\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u6b63\u898f\u5316\u3055\u308c\u305f\u30c6\u30ad\u30b9\u30c8\u304c\u5f97\u3089\u308c\u307e\u3059\u3002\u524d\u8ff0\u306e\u3068\u304a\u308a\u3001BERT\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306f\u91cd\u8907\u3059\u308b\u30b9\u30da\u30fc\u30b9\u3092\u9664\u53bb\u3059\u308b\u305f\u3081\u3001\u305d\u306e\u30c8\u30fc\u30af\u30f3\u5316\u306f\u53ef\u9006\u7684\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002</p>","tags":["NLP","Transformers","Tokenizer","Hugging Face","\u6a5f\u68b0\u5b66\u7fd2","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","BPE","WordPiece"]},{"location":"LLM/04_the_huggingface_tokenizers_library/#_16","title":"\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u6982\u8981","text":"<p>\u4ee5\u4e0b\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u306f\u30013\u3064\u306e\u4e3b\u8981\u306a\u30b5\u30d6\u30ef\u30fc\u30c9\u30fb\u30c8\u30fc\u30af\u30f3\u5316\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u3064\u3044\u3066\u8a73\u3057\u304f\u8aac\u660e\u3057\u307e\u3059\uff1aBPE\uff08GPT-2\u306a\u3069\u3067\u4f7f\u7528\uff09\u3001WordPiece\uff08\u4f8b\u3048\u3070BERT\u3067\u4f7f\u7528\uff09\u3001Unigram\uff08T5\u306a\u3069\u3067\u4f7f\u7528\uff09\u3002\u59cb\u3081\u308b\u524d\u306b\u3001\u305d\u308c\u305e\u308c\u304c\u3069\u306e\u3088\u3046\u306b\u52d5\u4f5c\u3059\u308b\u304b\u306e\u7c21\u5358\u306a\u6982\u8981\u3092\u793a\u3057\u307e\u3059\u3002\u6b21\u306e\u5404\u30bb\u30af\u30b7\u30e7\u30f3\u3092\u8aad\u3093\u3060\u5f8c\u3001\u3053\u306e\u8868\u304c\u7406\u89e3\u3067\u304d\u306a\u3044\u5834\u5408\u306f\u3001\u9060\u616e\u306a\u304f\u623b\u3063\u3066\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> \u30e2\u30c7\u30eb BPE WordPiece Unigram \u8a13\u7df4 \u5c0f\u3055\u306a\u8a9e\u5f59\u304b\u3089\u958b\u59cb\u3057\u3066\u30c8\u30fc\u30af\u30f3\u3092\u30de\u30fc\u30b8\u3059\u308b\u30eb\u30fc\u30eb\u3092\u5b66\u7fd2 \u5c0f\u3055\u306a\u8a9e\u5f59\u304b\u3089\u958b\u59cb\u3057\u3066\u30c8\u30fc\u30af\u30f3\u3092\u30de\u30fc\u30b8\u3059\u308b\u30eb\u30fc\u30eb\u3092\u5b66\u7fd2 \u5927\u304d\u306a\u8a9e\u5f59\u304b\u3089\u958b\u59cb\u3057\u3066\u30c8\u30fc\u30af\u30f3\u3092\u524a\u9664\u3059\u308b\u30eb\u30fc\u30eb\u3092\u5b66\u7fd2 \u8a13\u7df4\u30b9\u30c6\u30c3\u30d7 \u6700\u3082\u4e00\u822c\u7684\u306a\u30da\u30a2\u306b\u5bfe\u5fdc\u3059\u308b\u30c8\u30fc\u30af\u30f3\u3092\u30de\u30fc\u30b8 \u30da\u30a2\u306e\u983b\u5ea6\u306b\u57fa\u3065\u304f\u6700\u9ad8\u30b9\u30b3\u30a2\u3092\u6301\u3064\u30da\u30a2\u306b\u5bfe\u5fdc\u3059\u308b\u30c8\u30fc\u30af\u30f3\u3092\u30de\u30fc\u30b8\u3057\u3001\u5404\u500b\u5225\u30c8\u30fc\u30af\u30f3\u304c\u3088\u308a\u983b\u5ea6\u304c\u4f4e\u3044\u30da\u30a2\u3092\u512a\u5148 \u5168\u30b3\u30fc\u30d1\u30b9\u3067\u8a08\u7b97\u3055\u308c\u305f\u640d\u5931\u3092\u6700\u5c0f\u5316\u3059\u308b\u3059\u3079\u3066\u306e\u30c8\u30fc\u30af\u30f3\u3092\u8a9e\u5f59\u304b\u3089\u9664\u53bb \u5b66\u7fd2\u5185\u5bb9 \u30de\u30fc\u30b8\u30eb\u30fc\u30eb\u3068\u8a9e\u5f59 \u8a9e\u5f59\u306e\u307f \u5404\u30c8\u30fc\u30af\u30f3\u306e\u30b9\u30b3\u30a2\u4ed8\u304d\u8a9e\u5f59 \u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0 \u5358\u8a9e\u3092\u6587\u5b57\u306b\u5206\u5272\u3057\u3001\u8a13\u7df4\u4e2d\u306b\u5b66\u7fd2\u3055\u308c\u305f\u30de\u30fc\u30b8\u3092\u9069\u7528 \u8a9e\u5f59\u5185\u306e\u6700\u521d\u304b\u3089\u59cb\u307e\u308b\u6700\u9577\u306e\u30b5\u30d6\u30ef\u30fc\u30c9\u3092\u898b\u3064\u3051\u3001\u5358\u8a9e\u306e\u6b8b\u308a\u306e\u90e8\u5206\u306b\u5bfe\u3057\u3066\u540c\u3058\u3053\u3068\u3092\u884c\u3046 \u8a13\u7df4\u4e2d\u306b\u5b66\u7fd2\u3055\u308c\u305f\u30b9\u30b3\u30a2\u3092\u4f7f\u7528\u3057\u3066\u3001\u6700\u3082\u53ef\u80fd\u6027\u306e\u9ad8\u3044\u30c8\u30fc\u30af\u30f3\u5206\u5272\u3092\u898b\u3064\u3051\u308b","tags":["NLP","Transformers","Tokenizer","Hugging Face","\u6a5f\u68b0\u5b66\u7fd2","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","BPE","WordPiece"]},{"location":"LLM/04_the_huggingface_tokenizers_library/#byte-pair-encoding","title":"Byte-Pair Encoding\u30c8\u30fc\u30af\u30f3\u5316","text":"<p>Byte-Pair Encoding\uff08BPE\uff09\u306f\u5143\u3005\u30c6\u30ad\u30b9\u30c8\u3092\u5727\u7e2e\u3059\u308b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3068\u3057\u3066\u958b\u767a\u3055\u308c\u3001\u305d\u306e\u5f8cOpenAI\u304cGPT\u30e2\u30c7\u30eb\u3092\u4e8b\u524d\u5b66\u7fd2\u3059\u308b\u969b\u306b\u30c8\u30fc\u30af\u30f3\u5316\u306b\u4f7f\u7528\u3057\u307e\u3057\u305f\u3002GPT\u3001GPT-2\u3001RoBERTa\u3001BART\u3001DeBERTa\u306a\u3069\u3001\u591a\u304f\u306eTransformer\u30e2\u30c7\u30eb\u3067\u4f7f\u7528\u3055\u308c\u3066\u3044\u307e\u3059\u3002</p> <p>Tip</p> <p>\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u306fBPE\u3092\u8a73\u7d30\u306b\u8aac\u660e\u3057\u3001\u5b8c\u5168\u306a\u5b9f\u88c5\u3092\u793a\u3059\u3068\u3053\u308d\u307e\u3067\u884c\u3044\u307e\u3059\u3002\u4e00\u822c\u7684\u306a\u30c8\u30fc\u30af\u30f3\u5316\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u6982\u8981\u3060\u3051\u304c\u6b32\u3057\u3044\u5834\u5408\u306f\u3001\u6700\u5f8c\u307e\u3067\u98db\u3070\u3057\u3066\u3082\u69cb\u3044\u307e\u305b\u3093\u3002</p>","tags":["NLP","Transformers","Tokenizer","Hugging Face","\u6a5f\u68b0\u5b66\u7fd2","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","BPE","WordPiece"]},{"location":"LLM/04_the_huggingface_tokenizers_library/#_17","title":"\u8a13\u7df4\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0","text":"<p>BPE\u8a13\u7df4\u306f\u3001\uff08\u6b63\u898f\u5316\u3068\u524d\u51e6\u7406\u30b9\u30c6\u30c3\u30d7\u304c\u5b8c\u4e86\u3057\u305f\u5f8c\uff09\u30b3\u30fc\u30d1\u30b9\u3067\u4f7f\u7528\u3055\u308c\u308b\u5358\u8a9e\u306e\u4e00\u610f\u306e\u30bb\u30c3\u30c8\u3092\u8a08\u7b97\u3057\u3001\u3053\u308c\u3089\u306e\u5358\u8a9e\u3092\u66f8\u304f\u305f\u3081\u306b\u4f7f\u7528\u3055\u308c\u308b\u3059\u3079\u3066\u306e\u30b7\u30f3\u30dc\u30eb\u3092\u53d6\u308b\u3053\u3068\u3067\u8a9e\u5f59\u3092\u69cb\u7bc9\u3059\u308b\u3053\u3068\u304b\u3089\u59cb\u307e\u308a\u307e\u3059\u3002\u975e\u5e38\u306b\u7c21\u5358\u306a\u4f8b\u3068\u3057\u3066\u3001\u30b3\u30fc\u30d1\u30b9\u3067\u4ee5\u4e0b\u306e5\u3064\u306e\u5358\u8a9e\u304c\u4f7f\u7528\u3055\u308c\u3066\u3044\u308b\u3068\u3057\u307e\u3059\uff1a</p> <pre><code>\"hug\", \"pug\", \"pun\", \"bun\", \"hugs\"\n</code></pre> <p>\u57fa\u672c\u8a9e\u5f59\u306f<code>[\"b\", \"g\", \"h\", \"n\", \"p\", \"s\", \"u\"]</code>\u306b\u306a\u308a\u307e\u3059\u3002\u5b9f\u4e16\u754c\u306e\u5834\u5408\u3001\u305d\u306e\u57fa\u672c\u8a9e\u5f59\u306b\u306f\u5c11\u306a\u304f\u3068\u3082\u3059\u3079\u3066\u306eASCII\u6587\u5b57\u304c\u542b\u307e\u308c\u3001\u304a\u305d\u3089\u304f\u4e00\u90e8\u306eUnicode\u6587\u5b57\u3082\u542b\u307e\u308c\u308b\u3067\u3057\u3087\u3046\u3002\u30c8\u30fc\u30af\u30f3\u5316\u3057\u3066\u3044\u308b\u4f8b\u304c\u8a13\u7df4\u30b3\u30fc\u30d1\u30b9\u306b\u306a\u3044\u6587\u5b57\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u5834\u5408\u3001\u305d\u306e\u6587\u5b57\u306f\u672a\u77e5\u30c8\u30fc\u30af\u30f3\u306b\u5909\u63db\u3055\u308c\u307e\u3059\u3002\u3053\u308c\u304c\u3001\u591a\u304f\u306eNLP\u30e2\u30c7\u30eb\u304c\u7d75\u6587\u5b57\u3092\u542b\u3080\u30b3\u30f3\u30c6\u30f3\u30c4\u306e\u5206\u6790\u3067\u975e\u5e38\u306b\u60aa\u3044\u6027\u80fd\u3092\u793a\u3059\u7406\u7531\u306e1\u3064\u3067\u3059\u3002</p> <p>GPT-2\u3068RoBERTa\u306e\u5de5\u592b</p> <p>GPT-2\u3068RoBERTa\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\uff08\u304b\u306a\u308a\u4f3c\u3066\u3044\u308b\uff09\u306b\u306f\u3001\u3053\u308c\u306b\u5bfe\u51e6\u3059\u308b\u5de7\u5999\u306a\u65b9\u6cd5\u304c\u3042\u308a\u307e\u3059\uff1aUnicode\u6587\u5b57\u3067\u66f8\u304b\u308c\u3066\u3044\u308b\u3068\u3057\u3066\u5358\u8a9e\u3092\u898b\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u30d0\u30a4\u30c8\u3067\u898b\u307e\u3059\u3002\u3053\u306e\u3088\u3046\u306b\u3001\u57fa\u672c\u8a9e\u5f59\u306e\u30b5\u30a4\u30ba\u306f\u5c0f\u3055\u304f\uff08256\uff09\u3001\u8003\u3048\u3089\u308c\u308b\u3059\u3079\u3066\u306e\u6587\u5b57\u304c\u542b\u307e\u308c\u3001\u672a\u77e5\u30c8\u30fc\u30af\u30f3\u306b\u5909\u63db\u3055\u308c\u308b\u3053\u3068\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u3053\u306e\u6280\u5de7\u306f\u30d0\u30a4\u30c8\u30ec\u30d9\u30ebBPE\u3068\u547c\u3070\u308c\u307e\u3059\u3002</p> <p>\u3053\u306e\u57fa\u672c\u8a9e\u5f59\u3092\u53d6\u5f97\u3057\u305f\u5f8c\u3001\u65e2\u5b58\u306e\u8a9e\u5f59\u306e2\u3064\u306e\u8981\u7d20\u3092\u4e00\u7dd2\u306b\u30de\u30fc\u30b8\u3057\u3066\u65b0\u3057\u3044\u3082\u306e\u306b\u3059\u308b\u30de\u30fc\u30b8\uff08\u30eb\u30fc\u30eb\uff09\u3092\u5b66\u7fd2\u3059\u308b\u3053\u3068\u3067\u3001\u671b\u307e\u3057\u3044\u8a9e\u5f59\u30b5\u30a4\u30ba\u306b\u9054\u3059\u308b\u307e\u3067\u65b0\u3057\u3044\u30c8\u30fc\u30af\u30f3\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\u305d\u306e\u305f\u3081\u3001\u6700\u521d\u306f\u3053\u308c\u3089\u306e\u30de\u30fc\u30b8\u306f2\u6587\u5b57\u306e\u30c8\u30fc\u30af\u30f3\u3092\u4f5c\u6210\u3057\u3001\u305d\u306e\u5f8c\u3001\u8a13\u7df4\u304c\u9032\u3080\u306b\u3064\u308c\u3066\u3001\u3088\u308a\u9577\u3044\u30b5\u30d6\u30ef\u30fc\u30c9\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002</p> <p>\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u8a13\u7df4\u4e2d\u306e\u4efb\u610f\u306e\u30b9\u30c6\u30c3\u30d7\u3067\u3001BPE\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u65e2\u5b58\u30c8\u30fc\u30af\u30f3\u306e\u6700\u3082\u983b\u7e41\u306a\u30da\u30a2\uff08\u3053\u3053\u3067\u306e\u300c\u30da\u30a2\u300d\u306f\u5358\u8a9e\u5185\u306e2\u3064\u306e\u9023\u7d9a\u3059\u308b\u30c8\u30fc\u30af\u30f3\u3092\u610f\u5473\u3057\u307e\u3059\uff09\u3092\u691c\u7d22\u3057\u307e\u3059\u3002\u305d\u306e\u6700\u3082\u983b\u7e41\u306a\u30da\u30a2\u304c\u30de\u30fc\u30b8\u3055\u308c\u3001\u6b21\u306e\u30b9\u30c6\u30c3\u30d7\u306e\u305f\u3081\u306b\u3059\u3059\u304e\u3068\u7e70\u308a\u8fd4\u3057\u3092\u884c\u3044\u307e\u3059\u3002</p> <p>\u524d\u306e\u4f8b\u306b\u623b\u3063\u3066\u3001\u5358\u8a9e\u304c\u4ee5\u4e0b\u306e\u983b\u5ea6\u3092\u6301\u3063\u3066\u3044\u305f\u3068\u3057\u307e\u3059\uff1a</p> <pre><code>(\"hug\", 10), (\"pug\", 5), (\"pun\", 12), (\"bun\", 4), (\"hugs\", 5)\n</code></pre> <p>\u3064\u307e\u308a\u3001<code>\"hug\"</code>\u304c\u30b3\u30fc\u30d1\u30b9\u5185\u306b10\u56de\u3001<code>\"pug\"</code>\u304c5\u56de\u3001<code>\"pun\"</code>\u304c12\u56de\u3001<code>\"bun\"</code>\u304c4\u56de\u3001<code>\"hugs\"</code>\u304c5\u56de\u5b58\u5728\u3057\u305f\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002\u8a13\u7df4\u3092\u958b\u59cb\u3059\u308b\u305f\u3081\u3001\u5404\u5358\u8a9e\u3092\u6587\u5b57\u306b\u5206\u5272\u3057\uff08\u521d\u671f\u8a9e\u5f59\u3092\u5f62\u6210\u3059\u308b\u3082\u306e\uff09\u3001\u5404\u5358\u8a9e\u3092\u30c8\u30fc\u30af\u30f3\u306e\u30ea\u30b9\u30c8\u3068\u3057\u3066\u898b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a</p> <pre><code>(\"h\" \"u\" \"g\", 10), (\"p\" \"u\" \"g\", 5), (\"p\" \"u\" \"n\", 12), (\"b\" \"u\" \"n\", 4), (\"h\" \"u\" \"g\" \"s\", 5)\n</code></pre> <p>\u6b21\u306b\u3001\u30da\u30a2\u3092\u898b\u307e\u3059\u3002\u30da\u30a2<code>(\"h\", \"u\")</code>\u306f\u5358\u8a9e<code>\"hug\"</code>\u3068<code>\"hugs\"</code>\u306b\u5b58\u5728\u3059\u308b\u306e\u3067\u3001\u30b3\u30fc\u30d1\u30b9\u5185\u3067\u5408\u8a0815\u56de\u5b58\u5728\u3057\u307e\u3059\u3002\u3057\u304b\u3057\u3001\u6700\u3082\u983b\u7e41\u306a\u30da\u30a2\u3067\u306f\u3042\u308a\u307e\u305b\u3093\uff1a\u305d\u306e\u6804\u8a89\u306f<code>(\"u\", \"g\")</code>\u306b\u5c5e\u3057\u3001<code>\"hug\"</code>\u3001<code>\"pug\"</code>\u3001<code>\"hugs\"</code>\u306b\u5b58\u5728\u3057\u3001\u8a9e\u5f59\u5185\u3067\u5408\u8a0820\u56de\u5b58\u5728\u3057\u307e\u3059\u3002</p> <p>\u3057\u305f\u304c\u3063\u3066\u3001\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u304c\u5b66\u7fd2\u3059\u308b\u6700\u521d\u306e\u30de\u30fc\u30b8\u30eb\u30fc\u30eb\u306f<code>(\"u\", \"g\") -&gt; \"ug\"</code>\u3067\u3001<code>\"ug\"</code>\u304c\u8a9e\u5f59\u306b\u8ffd\u52a0\u3055\u308c\u3001\u30da\u30a2\u306f\u30b3\u30fc\u30d1\u30b9\u306e\u3059\u3079\u3066\u306e\u5358\u8a9e\u3067\u30de\u30fc\u30b8\u3055\u308c\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u306e\u30b9\u30c6\u30fc\u30b8\u306e\u7d42\u308f\u308a\u306b\u3001\u8a9e\u5f59\u3068\u30b3\u30fc\u30d1\u30b9\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff1a</p> <pre><code>Vocabulary: [\"b\", \"g\", \"h\", \"n\", \"p\", \"s\", \"u\", \"ug\"]\nCorpus: (\"h\" \"ug\", 10), (\"p\" \"ug\", 5), (\"p\" \"u\" \"n\", 12), (\"b\" \"u\" \"n\", 4), (\"h\" \"ug\" \"s\", 5)\n</code></pre> <p>\u3053\u308c\u3067\u30012\u6587\u5b57\u3088\u308a\u3082\u9577\u3044\u30c8\u30fc\u30af\u30f3\u3092\u751f\u6210\u3059\u308b\u30da\u30a2\u304c\u3044\u304f\u3064\u304b\u3042\u308a\u307e\u3059\uff1a\u4f8b\u3048\u3070\u3001\u30da\u30a2<code>(\"h\", \"ug\")</code>\uff08\u30b3\u30fc\u30d1\u30b9\u5185\u306715\u56de\u5b58\u5728\uff09\u3002\u3057\u304b\u3057\u3001\u3053\u306e\u30b9\u30c6\u30fc\u30b8\u3067\u6700\u3082\u983b\u7e41\u306a\u30da\u30a2\u306f<code>(\"u\", \"n\")</code>\u3067\u3001\u30b3\u30fc\u30d1\u30b9\u5185\u306716\u56de\u5b58\u5728\u3059\u308b\u305f\u3081\u3001\u5b66\u7fd2\u3055\u308c\u308b2\u756a\u76ee\u306e\u30de\u30fc\u30b8\u30eb\u30fc\u30eb\u306f<code>(\"u\", \"n\") -&gt; \"un\"</code>\u3067\u3059\u3002\u3053\u308c\u3092\u8a9e\u5f59\u306b\u8ffd\u52a0\u3057\u3001\u3059\u3079\u3066\u306e\u65e2\u5b58\u306e\u51fa\u73fe\u3092\u30de\u30fc\u30b8\u3059\u308b\u3068\uff1a</p> <pre><code>Vocabulary: [\"b\", \"g\", \"h\", \"n\", \"p\", \"s\", \"u\", \"ug\", \"un\"]\nCorpus: (\"h\" \"ug\", 10), (\"p\" \"ug\", 5), (\"p\" \"un\", 12), (\"b\" \"un\", 4), (\"h\" \"ug\" \"s\", 5)\n</code></pre> <p>\u4eca\u3001\u6700\u3082\u983b\u7e41\u306a\u30da\u30a2\u306f<code>(\"h\", \"ug\")</code>\u306a\u306e\u3067\u3001\u30de\u30fc\u30b8\u30eb\u30fc\u30eb<code>(\"h\", \"ug\") -&gt; \"hug\"</code>\u3092\u5b66\u7fd2\u3057\u3001\u6700\u521d\u306e3\u6587\u5b57\u30c8\u30fc\u30af\u30f3\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\u30de\u30fc\u30b8\u5f8c\u3001\u30b3\u30fc\u30d1\u30b9\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff1a</p> <pre><code>Vocabulary: [\"b\", \"g\", \"h\", \"n\", \"p\", \"s\", \"u\", \"ug\", \"un\", \"hug\"]\nCorpus: (\"hug\", 10), (\"p\" \"ug\", 5), (\"p\" \"un\", 12), (\"b\" \"un\", 4), (\"hug\" \"s\", 5)\n</code></pre> <p>\u305d\u3057\u3066\u3001\u671b\u307e\u3057\u3044\u8a9e\u5f59\u30b5\u30a4\u30ba\u306b\u9054\u3059\u308b\u307e\u3067\u3053\u306e\u3088\u3046\u306b\u7d9a\u3051\u307e\u3059\u3002</p> <p>\u4eca\u5ea6\u306f\u3042\u306a\u305f\u306e\u756a\uff01</p> <p>\u6b21\u306e\u30de\u30fc\u30b8\u30eb\u30fc\u30eb\u306f\u4f55\u3060\u3068\u601d\u3044\u307e\u3059\u304b\uff1f</p> <p>\u7b54\u3048\uff1a <pre><code>Vocabulary: [\"b\", \"g\", \"h\", \"n\", \"p\", \"s\", \"u\", \"ug\", \"un\", \"hug\", \"pun\"]\nCorpus: (\"hug\", 10), (\"p\" \"ug\", 5), (\"pun\", 12), (\"b\" \"un\", 4), (\"hug\" \"s\", 5)\n</code></pre></p>","tags":["NLP","Transformers","Tokenizer","Hugging Face","\u6a5f\u68b0\u5b66\u7fd2","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","BPE","WordPiece"]},{"location":"LLM/04_the_huggingface_tokenizers_library/#_18","title":"\u30c8\u30fc\u30af\u30f3\u5316\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0","text":"<p>\u30c8\u30fc\u30af\u30f3\u5316\u306f\u8a13\u7df4\u30d7\u30ed\u30bb\u30b9\u306b\u5bc6\u63a5\u306b\u5f93\u3044\u307e\u3059\u3002\u65b0\u3057\u3044\u5165\u529b\u306f\u4ee5\u4e0b\u306e\u30b9\u30c6\u30c3\u30d7\u3092\u9069\u7528\u3057\u3066\u30c8\u30fc\u30af\u30f3\u5316\u3055\u308c\u307e\u3059\uff1a</p> <ol> <li>\u6b63\u898f\u5316</li> <li>\u524d\u51e6\u7406</li> <li>\u5358\u8a9e\u3092\u500b\u5225\u306e\u6587\u5b57\u306b\u5206\u5272</li> <li>\u5b66\u7fd2\u3055\u308c\u305f\u30de\u30fc\u30b8\u30eb\u30fc\u30eb\u3092\u9806\u756a\u306b\u5206\u5272\u306b\u9069\u7528</li> </ol> <p>\u8a13\u7df4\u4e2d\u306b\u4f7f\u7528\u3057\u305f\u4f8b\u3092\u4f7f\u7528\u3057\u3001\u5b66\u7fd2\u3057\u305f3\u3064\u306e\u30de\u30fc\u30b8\u30eb\u30fc\u30eb\u3092\u4f7f\u7528\u3057\u307e\u3057\u3087\u3046\uff1a</p> <pre><code>(\"u\", \"g\") -&gt; \"ug\"\n(\"u\", \"n\") -&gt; \"un\"\n(\"h\", \"ug\") -&gt; \"hug\"\n</code></pre> <p>\u5358\u8a9e<code>\"bug\"</code>\u306f<code>[\"b\", \"ug\"]</code>\u3068\u3057\u3066\u30c8\u30fc\u30af\u30f3\u5316\u3055\u308c\u307e\u3059\u3002\u3057\u304b\u3057\u3001<code>\"mug\"</code>\u306f<code>[\"[UNK]\", \"ug\"]</code>\u3068\u3057\u3066\u30c8\u30fc\u30af\u30f3\u5316\u3055\u308c\u307e\u3059\u3002\u6587\u5b57<code>\"m\"</code>\u304c\u57fa\u672c\u8a9e\u5f59\u306b\u306a\u304b\u3063\u305f\u304b\u3089\u3067\u3059\u3002\u540c\u69d8\u306b\u3001\u5358\u8a9e<code>\"thug\"</code>\u306f<code>[\"[UNK]\", \"hug\"]</code>\u3068\u3057\u3066\u30c8\u30fc\u30af\u30f3\u5316\u3055\u308c\u307e\u3059\uff1a\u6587\u5b57<code>\"t\"</code>\u304c\u57fa\u672c\u8a9e\u5f59\u306b\u306a\u304f\u3001\u30de\u30fc\u30b8\u30eb\u30fc\u30eb\u3092\u9069\u7528\u3059\u308b\u3068\u6700\u521d\u306b<code>\"u\"</code>\u3068<code>\"g\"</code>\u304c\u30de\u30fc\u30b8\u3055\u308c\u3001\u6b21\u306b<code>\"h\"</code>\u3068<code>\"ug\"</code>\u304c\u30de\u30fc\u30b8\u3055\u308c\u307e\u3059\u3002</p> <p>\u4eca\u5ea6\u306f\u3042\u306a\u305f\u306e\u756a\uff01</p> <p>\u5358\u8a9e<code>\"unhug\"</code>\u306f\u3069\u306e\u3088\u3046\u306b\u30c8\u30fc\u30af\u30f3\u5316\u3055\u308c\u308b\u3068\u601d\u3044\u307e\u3059\u304b\uff1f</p> <p>\u7b54\u3048\uff1a<code>[\"un\", \"hug\"]</code></p>","tags":["NLP","Transformers","Tokenizer","Hugging Face","\u6a5f\u68b0\u5b66\u7fd2","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","BPE","WordPiece"]},{"location":"LLM/04_the_huggingface_tokenizers_library/#bpe","title":"BPE\u306e\u5b9f\u88c5","text":"<p>BPE\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u5b9f\u88c5\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u3053\u308c\u306f\u5927\u304d\u306a\u30b3\u30fc\u30d1\u30b9\u3067\u5b9f\u969b\u306b\u4f7f\u7528\u3067\u304d\u308b\u6700\u9069\u5316\u3055\u308c\u305f\u30d0\u30fc\u30b8\u30e7\u30f3\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u3082\u3046\u5c11\u3057\u3088\u304f\u7406\u89e3\u3067\u304d\u308b\u3088\u3046\u306b\u30b3\u30fc\u30c9\u3092\u793a\u3059\u3060\u3051\u3067\u3059\u3002</p> <p>\u6700\u521d\u306b\u30b3\u30fc\u30d1\u30b9\u304c\u5fc5\u8981\u306a\u306e\u3067\u3001\u3044\u304f\u3064\u304b\u306e\u6587\u3067\u7c21\u5358\u306a\u3082\u306e\u3092\u4f5c\u6210\u3057\u307e\u3057\u3087\u3046\uff1a</p> <pre><code>corpus = [\n    \"This is the Hugging Face Course.\",\n    \"This chapter is about tokenization.\",\n    \"This section shows several tokenizer algorithms.\",\n    \"Hopefully, you will be able to understand how they are trained and generate tokens.\",\n]\n</code></pre> <p>\u6b21\u306b\u3001\u305d\u306e\u30b3\u30fc\u30d1\u30b9\u3092\u5358\u8a9e\u306b\u524d\u51e6\u7406\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002BPE\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\uff08GPT-2\u306a\u3069\uff09\u3092\u8907\u88fd\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u524d\u51e6\u7406\u306b<code>gpt2</code>\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3092\u4f7f\u7528\u3057\u307e\u3059\uff1a</p> <pre><code>from transformers import AutoTokenizer\n\ntokenizer = AutoTokenizer.from_pretrained(\"gpt2\")\n</code></pre> <p>\u6b21\u306b\u3001\u524d\u51e6\u7406\u3092\u884c\u3046\u969b\u306b\u30b3\u30fc\u30d1\u30b9\u5185\u306e\u5404\u5358\u8a9e\u306e\u983b\u5ea6\u3092\u8a08\u7b97\u3057\u307e\u3059\uff1a</p> <pre><code>from collections import defaultdict\n\nword_freqs = defaultdict(int)\n\nfor text in corpus:\n    words_with_offsets = tokenizer.backend_tokenizer.pre_tokenizer.pre_tokenize_str(text)\n    new_words = [word for word, offset in words_with_offsets]\n    for word in new_words:\n        word_freqs[word] += 1\n\nprint(word_freqs)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>defaultdict(&lt;class 'int'&gt;, {'This': 3, '\u0120 is': 2, '\u0120 the': 1, '\u0120 Hugging': 1, '\u0120 Face': 1, '\u0120 Course': 1, '.': 4, '\u0120 chapter': 1, '\u0120 about': 1, '\u0120 tokenization': 1, '\u0120 section': 1, '\u0120 shows': 1, '\u0120 several': 1, '\u0120 tokenizer': 1, '\u0120 algorithms': 1, 'Hopefully': 1, ',': 1, '\u0120 you': 1, '\u0120 will': 1, '\u0120 be': 1, '\u0120 able': 1, '\u0120 to': 1, '\u0120 understand': 1, '\u0120 how': 1, '\u0120 they': 1, '\u0120 are': 1, '\u0120 trained': 1, '\u0120 and': 1, '\u0120 generate': 1, '\u0120 tokens': 1})\n</code></pre></p> <p>\u6b21\u306e\u30b9\u30c6\u30c3\u30d7\u306f\u3001\u30b3\u30fc\u30d1\u30b9\u3067\u4f7f\u7528\u3055\u308c\u308b\u3059\u3079\u3066\u306e\u6587\u5b57\u3067\u5f62\u6210\u3055\u308c\u308b\u57fa\u672c\u8a9e\u5f59\u3092\u8a08\u7b97\u3059\u308b\u3053\u3068\u3067\u3059\uff1a</p> <pre><code>alphabet = []\n\nfor word in word_freqs.keys():\n    for letter in word:\n        if letter not in alphabet:\n            alphabet.append(letter)\nalphabet.sort()\n\nprint(alphabet)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>[',', '.', 'C', 'F', 'H', 'T', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'k', 'l', 'm', 'n', 'o', 'p', 'r', 's', 't', 'u', 'v', 'w', 'y', 'z', '\u0120 ']\n</code></pre></p> <p>\u307e\u305f\u3001\u305d\u306e\u8a9e\u5f59\u306e\u6700\u521d\u306b\u30e2\u30c7\u30eb\u3067\u4f7f\u7528\u3055\u308c\u308b\u7279\u5225\u306a\u30c8\u30fc\u30af\u30f3\u3082\u8ffd\u52a0\u3057\u307e\u3059\u3002GPT-2\u306e\u5834\u5408\u3001\u552f\u4e00\u306e\u7279\u5225\u306a\u30c8\u30fc\u30af\u30f3\u306f<code>\"&lt;|endoftext|&gt;\"</code>\u3067\u3059\uff1a</p> <pre><code>vocab = [\"&lt;|endoftext|&gt;\"] + alphabet.copy()\n</code></pre> <p>\u6b21\u306b\u3001\u8a13\u7df4\u3092\u958b\u59cb\u3067\u304d\u308b\u3088\u3046\u306b\u3001\u5404\u5358\u8a9e\u3092\u500b\u5225\u306e\u6587\u5b57\u306b\u5206\u5272\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff1a</p> <pre><code>splits = {word: [c for c in word] for word in word_freqs.keys()}\n</code></pre> <p>\u8a13\u7df4\u306e\u6e96\u5099\u304c\u6574\u3063\u305f\u306e\u3067\u3001\u5404\u30da\u30a2\u306e\u983b\u5ea6\u3092\u8a08\u7b97\u3059\u308b\u95a2\u6570\u3092\u66f8\u304d\u307e\u3057\u3087\u3046\u3002\u8a13\u7df4\u306e\u5404\u30b9\u30c6\u30c3\u30d7\u3067\u3053\u308c\u3092\u4f7f\u7528\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff1a</p> <pre><code>def compute_pair_freqs(splits):\n    pair_freqs = defaultdict(int)\n    for word, freq in word_freqs.items():\n        split = splits[word]\n        if len(split) == 1:\n            continue\n        for i in range(len(split) - 1):\n            pair = (split[i], split[i + 1])\n            pair_freqs[pair] += freq\n    return pair_freqs\n</code></pre> <p>\u521d\u671f\u5206\u5272\u5f8c\u3001\u3053\u306e\u8f9e\u66f8\u306e\u4e00\u90e8\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\uff1a</p> <pre><code>pair_freqs = compute_pair_freqs(splits)\n\nfor i, key in enumerate(pair_freqs.keys()):\n    print(f\"{key}: {pair_freqs[key]}\")\n    if i &gt;= 5:\n        break\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>('T', 'h'): 3\n('h', 'i'): 3\n('i', 's'): 5\n('\u0120 ', 'i'): 2\n('\u0120 ', 't'): 7\n('t', 'h'): 3\n</code></pre></p> <p>\u4eca\u3001\u6700\u3082\u983b\u7e41\u306a\u30da\u30a2\u3092\u898b\u3064\u3051\u308b\u306b\u306f\u3001\u7c21\u5358\u306a\u30eb\u30fc\u30d7\u304c\u5fc5\u8981\u3067\u3059\uff1a</p> <pre><code>best_pair = \"\"\nmax_freq = None\n\nfor pair, freq in pair_freqs.items():\n    if max_freq is None or max_freq &lt; freq:\n        best_pair = pair\n        max_freq = freq\n\nprint(best_pair, max_freq)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>('\u0120 ', 't') 7\n</code></pre></p> <p>\u6700\u521d\u306b\u5b66\u7fd2\u3059\u308b\u30de\u30fc\u30b8\u306f<code>('\u0120 ', 't') -&gt; '\u0120 t'</code>\u3067\u3001\u8a9e\u5f59\u306b<code>'\u0120 t'</code>\u3092\u8ffd\u52a0\u3057\u307e\u3059\uff1a</p> <pre><code>merges = {(\"\u0120 \", \"t\"): \"\u0120 t\"}\nvocab.append(\"\u0120 t\")\n</code></pre> <p>\u7d9a\u884c\u3059\u308b\u306b\u306f\u3001<code>splits</code>\u8f9e\u66f8\u306b\u305d\u306e\u30de\u30fc\u30b8\u3092\u9069\u7528\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u5225\u306e\u95a2\u6570\u3092\u66f8\u304d\u307e\u3057\u3087\u3046\uff1a</p> <pre><code>def merge_pair(a, b, splits):\n    for word in word_freqs:\n        split = splits[word]\n        if len(split) == 1:\n            continue\n\n        i = 0\n        while i &lt; len(split) - 1:\n            if split[i] == a and split[i + 1] == b:\n                split = split[:i] + [a + b] + split[i + 2 :]\n            else:\n                i += 1\n        splits[word] = split\n    return splits\n</code></pre> <p>\u6700\u521d\u306e\u30de\u30fc\u30b8\u306e\u7d50\u679c\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\uff1a</p> <pre><code>splits = merge_pair(\"\u0120 \", \"t\", splits)\nprint(splits[\"\u0120 trained\"])\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>['\u0120 t', 'r', 'a', 'i', 'n', 'e', 'd']\n</code></pre></p> <p>\u3059\u3079\u3066\u3092\u5b66\u7fd2\u3057\u305f\u3044\u30de\u30fc\u30b8\u307e\u3067\u30eb\u30fc\u30d7\u3059\u308b\u305f\u3081\u306b\u5fc5\u8981\u306a\u3059\u3079\u3066\u304c\u3042\u308a\u307e\u3059\u3002\u8a9e\u5f59\u30b5\u30a4\u30ba\u309250\u306b\u3057\u307e\u3057\u3087\u3046\uff1a</p> <pre><code>vocab_size = 50\n\nwhile len(vocab) &lt; vocab_size:\n    pair_freqs = compute_pair_freqs(splits)\n    best_pair = \"\"\n    max_freq = None\n    for pair, freq in pair_freqs.items():\n        if max_freq is None or max_freq &lt; freq:\n            best_pair = pair\n            max_freq = freq\n    splits = merge_pair(*best_pair, splits)\n    merges[best_pair] = best_pair[0] + best_pair[1]\n    vocab.append(best_pair[0] + best_pair[1])\n</code></pre> <p>\u7d50\u679c\u3068\u3057\u3066\u300119\u306e\u30de\u30fc\u30b8\u30eb\u30fc\u30eb\u3092\u5b66\u7fd2\u3057\u307e\u3057\u305f\uff08\u521d\u671f\u8a9e\u5f59\u306e\u30b5\u30a4\u30ba\u306f31 - \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306e30\u6587\u5b57\uff0b\u7279\u5225\u306a\u30c8\u30fc\u30af\u30f3\uff09\uff1a</p> <pre><code>print(merges)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>{('\u0120 ', 't'): '\u0120 t', ('i', 's'): 'is', ('e', 'r'): 'er', ('\u0120 ', 'a'): '\u0120 a', ('\u0120 t', 'o'): '\u0120 to', ('e', 'n'): 'en', ('T', 'h'): 'Th', ('Th', 'is'): 'This', ('o', 'u'): 'ou', ('s', 'e'): 'se', ('\u0120 to', 'k'): '\u0120 tok', ('\u0120 tok', 'en'): '\u0120 token', ('n', 'd'): 'nd', ('\u0120 ', 'is'): '\u0120 is', ('\u0120 t', 'h'): '\u0120 th', ('\u0120 th', 'e'): '\u0120 the', ('i', 'n'): 'in', ('\u0120 a', 'b'): '\u0120 ab', ('\u0120 token', 'i'): '\u0120 tokeni'}\n</code></pre></p> <p>\u8a9e\u5f59\u306f\u7279\u5225\u306a\u30c8\u30fc\u30af\u30f3\u3001\u521d\u671f\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u3001\u3059\u3079\u3066\u306e\u30de\u30fc\u30b8\u306e\u7d50\u679c\u3067\u69cb\u6210\u3055\u308c\u3066\u3044\u307e\u3059\uff1a</p> <pre><code>print(vocab)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>['&lt;|endoftext|&gt;', ',', '.', 'C', 'F', 'H', 'T', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'k', 'l', 'm', 'n', 'o', 'p', 'r', 's', 't', 'u', 'v', 'w', 'y', 'z', '\u0120 ', '\u0120 t', 'is', 'er', '\u0120 a', '\u0120 to', 'en', 'Th', 'This', 'ou', 'se', '\u0120 tok', '\u0120 token', 'nd', '\u0120 is', '\u0120 th', '\u0120 the', 'in', '\u0120 ab', '\u0120 tokeni']\n</code></pre></p> <p>\u540c\u4e00\u30b3\u30fc\u30d1\u30b9\u3067\u3082\u7570\u306a\u308b\u7d50\u679c</p> <p>\u540c\u3058\u30b3\u30fc\u30d1\u30b9\u3067<code>train_new_from_iterator()</code>\u3092\u4f7f\u7528\u3057\u3066\u3082\u3001\u307e\u3063\u305f\u304f\u540c\u3058\u8a9e\u5f59\u306b\u306f\u306a\u308a\u307e\u305b\u3093\u3002\u3053\u308c\u306f\u3001\u6700\u3082\u983b\u7e41\u306a\u30da\u30a2\u306e\u9078\u629e\u304c\u3042\u308b\u5834\u5408\u306b\u3001\u6700\u521d\u306b\u906d\u9047\u3057\u305f\u3082\u306e\u3092\u9078\u629e\u3057\u305f\u306e\u306b\u5bfe\u3057\u3001Hugging Face Tokenizers\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u5185\u90e8ID\u306b\u57fa\u3065\u3044\u3066\u6700\u521d\u306e\u3082\u306e\u3092\u9078\u629e\u3059\u308b\u305f\u3081\u3067\u3059\u3002</p> <p>\u65b0\u3057\u3044\u30c6\u30ad\u30b9\u30c8\u3092\u30c8\u30fc\u30af\u30f3\u5316\u3059\u308b\u305f\u3081\u306b\u3001\u524d\u51e6\u7406\u3092\u884c\u3044\u3001\u5206\u5272\u3057\u3066\u304b\u3089\u3001\u5b66\u7fd2\u3057\u305f\u3059\u3079\u3066\u306e\u30de\u30fc\u30b8\u30eb\u30fc\u30eb\u3092\u9069\u7528\u3057\u307e\u3059\uff1a</p> <pre><code>def tokenize(text):\n    pre_tokenize_result = tokenizer._tokenizer.pre_tokenizer.pre_tokenize_str(text)\n    pre_tokenized_text = [word for word, offset in pre_tokenize_result]\n    splits = [[l for l in word] for word in pre_tokenized_text]\n    for pair, merge in merges.items():\n        for idx, split in enumerate(splits):\n            i = 0\n            while i &lt; len(split) - 1:\n                if split[i] == pair[0] and split[i + 1] == pair[1]:\n                    split = split[:i] + [merge] + split[i + 2 :]\n                else:\n                    i += 1\n            splits[idx] = split\n\n    return sum(splits, [])\n</code></pre> <p>\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u5185\u306e\u6587\u5b57\u3067\u69cb\u6210\u3055\u308c\u308b\u4efb\u610f\u306e\u30c6\u30ad\u30b9\u30c8\u3067\u3053\u308c\u3092\u8a66\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a</p> <pre><code>tokenize(\"This is not a token.\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>['This', '\u0120 is', '\u0120 ', 'n', 'o', 't', '\u0120 a', '\u0120 token', '.']\n</code></pre></p> <p>\u672a\u77e5\u6587\u5b57\u3078\u306e\u5bfe\u51e6</p> <p>\u672a\u77e5\u306e\u6587\u5b57\u304c\u3042\u308b\u5834\u5408\u3001\u5b9f\u88c5\u306f\u30a8\u30e9\u30fc\u3092\u30b9\u30ed\u30fc\u3057\u307e\u3059\u3002\u4f55\u3082\u51e6\u7406\u3057\u3066\u3044\u306a\u3044\u305f\u3081\u3067\u3059\u3002GPT-2\u306b\u306f\u5b9f\u969b\u306b\u306f\u672a\u77e5\u30c8\u30fc\u30af\u30f3\u304c\u3042\u308a\u307e\u305b\u3093\uff08\u30d0\u30a4\u30c8\u30ec\u30d9\u30ebBPE\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\u3001\u672a\u77e5\u6587\u5b57\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u306f\u4e0d\u53ef\u80fd\u3067\u3059\uff09\u304c\u3001\u53ef\u80fd\u306a\u3059\u3079\u3066\u306e\u30d0\u30a4\u30c8\u3092\u521d\u671f\u8a9e\u5f59\u306b\u542b\u3081\u3066\u3044\u306a\u3044\u305f\u3081\u3001\u3053\u3053\u3067\u767a\u751f\u3059\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002BPE\u306e\u3053\u306e\u5074\u9762\u306f\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306e\u7bc4\u56f2\u3092\u8d85\u3048\u3066\u3044\u308b\u305f\u3081\u3001\u8a73\u7d30\u306f\u7701\u7565\u3057\u3066\u3044\u307e\u3059\u3002</p>","tags":["NLP","Transformers","Tokenizer","Hugging Face","\u6a5f\u68b0\u5b66\u7fd2","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","BPE","WordPiece"]},{"location":"LLM/04_the_huggingface_tokenizers_library/#wordpiece","title":"WordPiece\u30c8\u30fc\u30af\u30f3\u5316","text":"<p>WordPiece\u306f\u3001Google\u304cBERT\u3092\u4e8b\u524d\u5b66\u7fd2\u3059\u308b\u305f\u3081\u306b\u958b\u767a\u3057\u305f\u30c8\u30fc\u30af\u30f3\u5316\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u3059\u3002\u305d\u306e\u5f8c\u3001DistilBERT\u3001MobileBERT\u3001Funnel Transformers\u3001MPNET\u306a\u3069\u3001BERT\u30d9\u30fc\u30b9\u306e\u591a\u304f\u306eTransformer\u30e2\u30c7\u30eb\u3067\u518d\u4f7f\u7528\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u8a13\u7df4\u306e\u89b3\u70b9\u3067\u306fBPE\u3068\u975e\u5e38\u306b\u4f3c\u3066\u3044\u307e\u3059\u304c\u3001\u5b9f\u969b\u306e\u30c8\u30fc\u30af\u30f3\u5316\u306f\u7570\u306a\u3063\u3066\u884c\u308f\u308c\u307e\u3059\u3002</p> <p>Tip</p> <p>\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u306fWordPiece\u3092\u8a73\u7d30\u306b\u8aac\u660e\u3057\u3001\u5b8c\u5168\u306a\u5b9f\u88c5\u3092\u793a\u3059\u3068\u3053\u308d\u307e\u3067\u884c\u3044\u307e\u3059\u3002\u4e00\u822c\u7684\u306a\u30c8\u30fc\u30af\u30f3\u5316\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u6982\u8981\u3060\u3051\u304c\u6b32\u3057\u3044\u5834\u5408\u306f\u3001\u6700\u5f8c\u307e\u3067\u98db\u3070\u3057\u3066\u3082\u69cb\u3044\u307e\u305b\u3093\u3002</p>","tags":["NLP","Transformers","Tokenizer","Hugging Face","\u6a5f\u68b0\u5b66\u7fd2","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","BPE","WordPiece"]},{"location":"LLM/04_the_huggingface_tokenizers_library/#_19","title":"\u8a13\u7df4\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0","text":"<p>Warning</p> <p>Google\u306fWordPiece\u306e\u8a13\u7df4\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u5b9f\u88c5\u3092\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u5316\u3057\u305f\u3053\u3068\u304c\u306a\u3044\u305f\u3081\u3001\u4ee5\u4e0b\u306f\u516c\u958b\u3055\u308c\u305f\u6587\u732e\u306b\u57fa\u3065\u304f\u6700\u5584\u306e\u63a8\u6e2c\u3067\u3059\u3002100\uff05\u6b63\u78ba\u3067\u306f\u306a\u3044\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002</p> <p>BPE\u3068\u540c\u69d8\u306b\u3001WordPiece\u306f\u3001\u30e2\u30c7\u30eb\u3067\u4f7f\u7528\u3055\u308c\u308b\u7279\u5225\u306a\u30c8\u30fc\u30af\u30f3\u3068\u521d\u671f\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u3092\u542b\u3080\u5c0f\u3055\u306a\u8a9e\u5f59\u304b\u3089\u958b\u59cb\u3057\u307e\u3059\u3002\u30d7\u30ec\u30d5\u30a3\u30c3\u30af\u30b9\uff08BERT\u306e<code>##</code>\u306a\u3069\uff09\u3092\u8ffd\u52a0\u3057\u3066\u30b5\u30d6\u30ef\u30fc\u30c9\u3092\u8b58\u5225\u3059\u308b\u305f\u3081\u3001\u5404\u5358\u8a9e\u306f\u6700\u521d\u306b\u305d\u306e\u5358\u8a9e\u5185\u306e\u3059\u3079\u3066\u306e\u6587\u5b57\u306b\u30d7\u30ec\u30d5\u30a3\u30c3\u30af\u30b9\u3092\u8ffd\u52a0\u3059\u308b\u3053\u3068\u3067\u5206\u5272\u3055\u308c\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001<code>\"word\"</code>\u306f\u6b21\u306e\u3088\u3046\u306b\u5206\u5272\u3055\u308c\u307e\u3059\uff1a</p> <pre><code>w ##o ##r ##d\n</code></pre> <p>\u3057\u305f\u304c\u3063\u3066\u3001\u521d\u671f\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306b\u306f\u3001\u5358\u8a9e\u306e\u6700\u521d\u306b\u5b58\u5728\u3059\u308b\u3059\u3079\u3066\u306e\u6587\u5b57\u3068\u3001WordPiece\u30d7\u30ec\u30d5\u30a3\u30c3\u30af\u30b9\u304c\u524d\u306b\u4ed8\u3044\u305f\u5358\u8a9e\u5185\u306b\u5b58\u5728\u3059\u308b\u6587\u5b57\u304c\u542b\u307e\u308c\u307e\u3059\u3002</p> <p>\u6b21\u306b\u3001BPE\u3068\u540c\u69d8\u306b\u3001WordPiece\u306f\u30de\u30fc\u30b8\u30eb\u30fc\u30eb\u3092\u5b66\u7fd2\u3057\u307e\u3059\u3002\u4e3b\u306a\u9055\u3044\u306f\u3001\u30de\u30fc\u30b8\u3059\u308b\u30da\u30a2\u306e\u9078\u629e\u65b9\u6cd5\u3067\u3059\u3002\u6700\u3082\u983b\u7e41\u306a\u30da\u30a2\u3092\u9078\u629e\u3059\u308b\u4ee3\u308f\u308a\u306b\u3001WordPiece\u306f\u6b21\u306e\u5f0f\u3092\u4f7f\u7528\u3057\u3066\u5404\u30da\u30a2\u306e\u30b9\u30b3\u30a2\u3092\u8a08\u7b97\u3057\u307e\u3059\uff1a</p> <p>\\(\\mathrm{score} = \\frac{\\mathrm{freq\\_of\\_pair}}{\\mathrm{freq\\_of\\_first\\_element} \\times \\mathrm{freq\\_of\\_second\\_element}}\\)</p> <p>\u30da\u30a2\u306e\u983b\u5ea6\u3092\u305d\u306e\u5404\u90e8\u5206\u306e\u983b\u5ea6\u306e\u7a4d\u3067\u5272\u308b\u3053\u3068\u306b\u3088\u308a\u3001\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u500b\u3005\u306e\u90e8\u5206\u304c\u8a9e\u5f59\u3067\u3088\u308a\u983b\u5ea6\u304c\u4f4e\u3044\u30da\u30a2\u306e\u30de\u30fc\u30b8\u3092\u512a\u5148\u3057\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001\u305d\u306e\u30da\u30a2\u304c\u30b3\u30fc\u30d1\u30b9\u5185\u3067\u975e\u5e38\u306b\u983b\u7e41\u306b\u51fa\u73fe\u3057\u3066\u3082\u3001<code>\"un\"</code>\u3068<code>\"##able\"</code>\u306e2\u3064\u306e\u30da\u30a2\u306f\u305d\u308c\u305e\u308c\u4ed6\u306e\u591a\u304f\u306e\u5358\u8a9e\u306b\u51fa\u73fe\u3057\u3001\u9ad8\u3044\u983b\u5ea6\u3092\u6301\u3064\u53ef\u80fd\u6027\u304c\u9ad8\u3044\u305f\u3081\u3001\u5fc5\u305a\u3057\u3082<code>(\"un\", \"##able\")</code>\u3092\u30de\u30fc\u30b8\u3059\u308b\u308f\u3051\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u5bfe\u7167\u7684\u306b\u3001<code>(\"hu\", \"##gging\")</code>\u306e\u3088\u3046\u306a\u30da\u30a2\u306f\uff08\u5358\u8a9e\u300chugging\u300d\u304c\u30b3\u30fc\u30d1\u30b9\u5185\u306b\u983b\u7e41\u306b\u51fa\u73fe\u3059\u308b\u3068\u4eee\u5b9a\u3057\u3066\uff09<code>\"hu\"</code>\u3068<code>\"##gging\"</code>\u306f\u500b\u3005\u306b\u3088\u308a\u983b\u5ea6\u304c\u4f4e\u3044\u53ef\u80fd\u6027\u304c\u9ad8\u3044\u305f\u3081\u3001\u3088\u308a\u9ad8\u901f\u306b\u30de\u30fc\u30b8\u3055\u308c\u308b\u3067\u3057\u3087\u3046\u3002</p> <p>BPE\u8a13\u7df4\u4f8b\u3067\u4f7f\u7528\u3057\u305f\u306e\u3068\u540c\u3058\u8a9e\u5f59\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\uff1a</p> <pre><code>(\"hug\", 10), (\"pug\", 5), (\"pun\", 12), (\"bun\", 4), (\"hugs\", 5)\n</code></pre> <p>\u3053\u3053\u3067\u306e\u5206\u5272\u306f\uff1a</p> <pre><code>(\"h\" \"##u\" \"##g\", 10), (\"p\" \"##u\" \"##g\", 5), (\"p\" \"##u\" \"##n\", 12), (\"b\" \"##u\" \"##n\", 4), (\"h\" \"##u\" \"##g\" \"##s\", 5)\n</code></pre> <p>\u3064\u307e\u308a\u3001\u521d\u671f\u8a9e\u5f59\u306f<code>[\"b\", \"h\", \"p\", \"##g\", \"##n\", \"##s\", \"##u\"]</code>\u306b\u306a\u308a\u307e\u3059\uff08\u4eca\u306e\u3068\u3053\u308d\u7279\u5225\u306a\u30c8\u30fc\u30af\u30f3\u3092\u5fd8\u308c\u308b\u3068\u3057\u3066\uff09\u3002\u6700\u3082\u983b\u7e41\u306a\u30da\u30a2\u306f<code>(\"##u\", \"##g\")</code>\uff0820\u56de\u5b58\u5728\uff09\u3067\u3059\u304c\u3001<code>\"##u\"</code>\u306e\u500b\u3005\u306e\u983b\u5ea6\u304c\u975e\u5e38\u306b\u9ad8\u3044\u305f\u3081\u3001\u305d\u306e\u30b9\u30b3\u30a2\u306f\u6700\u9ad8\u3067\u306f\u3042\u308a\u307e\u305b\u3093\uff081/36\uff09\u3002<code>\"##u\"</code>\u3092\u542b\u3080\u3059\u3079\u3066\u306e\u30da\u30a2\u306f\u5b9f\u969b\u306b\u540c\u3058\u30b9\u30b3\u30a2\uff081/36\uff09\u3092\u6301\u3064\u305f\u3081\u3001\u6700\u9ad8\u30b9\u30b3\u30a2\u306f<code>\"##u\"</code>\u306a\u3057\u306e\u552f\u4e00\u306e\u30da\u30a2<code>(\"##g\", \"##s\")</code>\u306e1/20\u306b\u306a\u308a\u3001\u6700\u521d\u306b\u5b66\u7fd2\u3055\u308c\u308b\u30de\u30fc\u30b8\u306f<code>(\"##g\", \"##s\") -&gt; (\"##gs\")</code>\u3067\u3059\u3002</p> <p>\u30de\u30fc\u30b8\u3059\u308b\u3068\u304d\u30012\u3064\u306e\u30c8\u30fc\u30af\u30f3\u9593\u306e<code>##</code>\u3092\u524a\u9664\u3059\u308b\u306e\u3067\u3001\u8a9e\u5f59\u306b<code>\"##gs\"</code>\u3092\u8ffd\u52a0\u3057\u3001\u30b3\u30fc\u30d1\u30b9\u306e\u5358\u8a9e\u306b\u30de\u30fc\u30b8\u3092\u9069\u7528\u3057\u307e\u3059\uff1a</p> <pre><code>Vocabulary: [\"b\", \"h\", \"p\", \"##g\", \"##n\", \"##s\", \"##u\", \"##gs\"]\nCorpus: (\"h\" \"##u\" \"##g\", 10), (\"p\" \"##u\" \"##g\", 5), (\"p\" \"##u\" \"##n\", 12), (\"b\" \"##u\" \"##n\", 4), (\"h\" \"##u\" \"##gs\", 5)\n</code></pre> <p>\u3053\u306e\u6642\u70b9\u3067\u3001<code>\"##u\"</code>\u306f\u3059\u3079\u3066\u306e\u53ef\u80fd\u306a\u30da\u30a2\u306b\u542b\u307e\u308c\u308b\u305f\u3081\u3001\u3059\u3079\u3066\u540c\u3058\u30b9\u30b3\u30a2\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u306e\u5834\u5408\u3001\u6700\u521d\u306e\u30da\u30a2\u304c\u30de\u30fc\u30b8\u3055\u308c\u308b\u3068\u3057\u307e\u3057\u3087\u3046\u3002\u305d\u306e\u305f\u3081\u3001<code>(\"h\", \"##u\") -&gt; \"hu\"</code>\u3067\u3059\u3002\u3053\u308c\u306b\u3088\u308a\uff1a</p> <pre><code>Vocabulary: [\"b\", \"h\", \"p\", \"##g\", \"##n\", \"##s\", \"##u\", \"##gs\", \"hu\"]\nCorpus: (\"hu\" \"##g\", 10), (\"p\" \"##u\" \"##g\", 5), (\"p\" \"##u\" \"##n\", 12), (\"b\" \"##u\" \"##n\", 4), (\"hu\" \"##gs\", 5)\n</code></pre> <p>\u6b21\u306b\u6700\u9ad8\u30b9\u30b3\u30a2\u306f<code>(\"hu\", \"##g\")</code>\u3068<code>(\"hu\", \"##gs\")</code>\u3067\u5171\u6709\u3055\u308c\u307e\u3059\uff08\u4ed6\u306e\u3059\u3079\u3066\u306e\u30da\u30a2\u306e1/21\u3068\u6bd4\u8f03\u3057\u30661/15\uff09\u3002\u305d\u306e\u305f\u3081\u3001\u6700\u5927\u30b9\u30b3\u30a2\u3092\u6301\u3064\u6700\u521d\u306e\u30da\u30a2\u304c\u30de\u30fc\u30b8\u3055\u308c\u307e\u3059\uff1a</p> <pre><code>Vocabulary: [\"b\", \"h\", \"p\", \"##g\", \"##n\", \"##s\", \"##u\", \"##gs\", \"hu\", \"hug\"]\nCorpus: (\"hug\", 10), (\"p\" \"##u\" \"##g\", 5), (\"p\" \"##u\" \"##n\", 12), (\"b\" \"##u\" \"##n\", 4), (\"hu\" \"##gs\", 5)\n</code></pre> <p>\u305d\u3057\u3066\u3001\u671b\u307e\u3057\u3044\u8a9e\u5f59\u30b5\u30a4\u30ba\u306b\u9054\u3059\u308b\u307e\u3067\u3053\u306e\u3088\u3046\u306b\u7d9a\u3051\u307e\u3059\u3002</p>","tags":["NLP","Transformers","Tokenizer","Hugging Face","\u6a5f\u68b0\u5b66\u7fd2","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","BPE","WordPiece"]},{"location":"LLM/04_the_huggingface_tokenizers_library/#_20","title":"\u30c8\u30fc\u30af\u30f3\u5316\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0","text":"<p>WordPiece\u3067\u306e\u30c8\u30fc\u30af\u30f3\u5316\u306fBPE\u3068\u7570\u306a\u308a\u3001WordPiece\u306f\u6700\u7d42\u7684\u306a\u8a9e\u5f59\u306e\u307f\u3092\u4fdd\u5b58\u3057\u3001\u5b66\u7fd2\u3055\u308c\u305f\u30de\u30fc\u30b8\u30eb\u30fc\u30eb\u306f\u4fdd\u5b58\u3057\u307e\u305b\u3093\u3002\u30c8\u30fc\u30af\u30f3\u5316\u3059\u308b\u5358\u8a9e\u304b\u3089\u958b\u59cb\u3057\u3066\u3001WordPiece\u306f\u8a9e\u5f59\u5185\u306b\u3042\u308b\u6700\u9577\u306e\u30b5\u30d6\u30ef\u30fc\u30c9\u3092\u898b\u3064\u3051\u3001\u305d\u308c\u3067\u5206\u5272\u3057\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001\u4e0a\u8a18\u306e\u4f8b\u3067\u5b66\u7fd2\u3057\u305f\u8a9e\u5f59\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\u3001\u5358\u8a9e<code>\"hugs\"</code>\u306b\u3064\u3044\u3066\u3001\u6700\u521d\u304b\u3089\u59cb\u307e\u308b\u8a9e\u5f59\u5185\u306e\u6700\u9577\u30b5\u30d6\u30ef\u30fc\u30c9\u306f<code>\"hug\"</code>\u306a\u306e\u3067\u3001\u305d\u3053\u3067\u5206\u5272\u3057\u3066<code>[\"hug\", \"##s\"]</code>\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\u6b21\u306b<code>\"##s\"</code>\u3092\u7d9a\u884c\u3057\u307e\u3059\u3002\u3053\u308c\u306f\u8a9e\u5f59\u5185\u306b\u3042\u308b\u306e\u3067\u3001<code>\"hugs\"</code>\u306e\u30c8\u30fc\u30af\u30f3\u5316\u306f<code>[\"hug\", \"##s\"]</code>\u3067\u3059\u3002</p> <p>BPE\u3067\u306f\u3001\u5b66\u7fd2\u3057\u305f\u9806\u756a\u3067\u30de\u30fc\u30b8\u3092\u9069\u7528\u3057\u3066<code>[\"hu\", \"##gs\"]</code>\u3068\u3057\u3066\u30c8\u30fc\u30af\u30f3\u5316\u3059\u308b\u306e\u3067\u3001\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u304c\u7570\u306a\u308a\u307e\u3059\u3002</p> <p>\u5225\u306e\u4f8b\u3068\u3057\u3066\u3001\u5358\u8a9e<code>\"bugs\"</code>\u304c\u3069\u306e\u3088\u3046\u306b\u30c8\u30fc\u30af\u30f3\u5316\u3055\u308c\u308b\u304b\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002<code>\"b\"</code>\u306f\u8a9e\u5f59\u5185\u306b\u3042\u308b\u5358\u8a9e\u306e\u6700\u521d\u304b\u3089\u59cb\u307e\u308b\u6700\u9577\u30b5\u30d6\u30ef\u30fc\u30c9\u306a\u306e\u3067\u3001\u305d\u3053\u3067\u5206\u5272\u3057\u3066<code>[\"b\", \"##ugs\"]</code>\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\u6b21\u306b<code>\"##u\"</code>\u306f\u8a9e\u5f59\u5185\u306b\u3042\u308b<code>\"##ugs\"</code>\u306e\u6700\u521d\u304b\u3089\u59cb\u307e\u308b\u6700\u9577\u30b5\u30d6\u30ef\u30fc\u30c9\u306a\u306e\u3067\u3001\u305d\u3053\u3067\u5206\u5272\u3057\u3066<code>[\"b\", \"##u\", \"##gs\"]</code>\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\u6700\u5f8c\u306b\u3001<code>\"##gs\"</code>\u306f\u8a9e\u5f59\u5185\u306b\u3042\u308b\u306e\u3067\u3001\u3053\u306e\u6700\u5f8c\u306e\u30ea\u30b9\u30c8\u304c<code>\"bugs\"</code>\u306e\u30c8\u30fc\u30af\u30f3\u5316\u3067\u3059\u3002</p> <p>\u30c8\u30fc\u30af\u30f3\u5316\u304c\u8a9e\u5f59\u5185\u306e\u30b5\u30d6\u30ef\u30fc\u30c9\u3092\u898b\u3064\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u3044\u30b9\u30c6\u30fc\u30b8\u306b\u5230\u9054\u3059\u308b\u3068\u3001\u5358\u8a9e\u5168\u4f53\u304c\u672a\u77e5\u3068\u3057\u3066\u30c8\u30fc\u30af\u30f3\u5316\u3055\u308c\u307e\u3059\u3002\u305d\u306e\u305f\u3081\u3001\u4f8b\u3048\u3070<code>\"mug\"</code>\u306f<code>[\"[UNK]\"]</code>\u3068\u3057\u3066\u30c8\u30fc\u30af\u30f3\u5316\u3055\u308c\u3001<code>\"bum\"</code>\u3082\u540c\u69d8\u3067\u3059\uff08<code>\"b\"</code>\u3068<code>\"##u\"</code>\u3067\u958b\u59cb\u3067\u304d\u3066\u3082\u3001<code>\"##m\"</code>\u306f\u8a9e\u5f59\u306b\u306a\u3044\u305f\u3081\u3001\u7d50\u679c\u306e\u30c8\u30fc\u30af\u30f3\u5316\u306f<code>[\"b\", \"##u\", \"[UNK]\"]</code>\u3067\u306f\u306a\u304f\u3001\u5358\u306b<code>[\"[UNK]\"]</code>\u306b\u306a\u308a\u307e\u3059\uff09\u3002\u3053\u308c\u306fBPE\u3068\u306e\u5225\u306e\u9055\u3044\u3067\u3001BPE\u306f\u8a9e\u5f59\u306b\u306a\u3044\u500b\u3005\u306e\u6587\u5b57\u306e\u307f\u3092\u672a\u77e5\u3068\u3057\u3066\u5206\u985e\u3057\u307e\u3059\u3002</p> <p>\u4eca\u5ea6\u306f\u3042\u306a\u305f\u306e\u756a\uff01</p> <p>\u5358\u8a9e<code>\"pugs\"</code>\u306f\u3069\u306e\u3088\u3046\u306b\u30c8\u30fc\u30af\u30f3\u5316\u3055\u308c\u308b\u3067\u3057\u3087\u3046\u304b\uff1f</p> <p>\u7b54\u3048\uff1a<code>[\"p\", \"##u\", \"##gs\"]</code></p>","tags":["NLP","Transformers","Tokenizer","Hugging Face","\u6a5f\u68b0\u5b66\u7fd2","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","BPE","WordPiece"]},{"location":"LLM/04_the_huggingface_tokenizers_library/#wordpiece_1","title":"WordPiece\u306e\u5b9f\u88c5","text":"<p>WordPiece\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u5b9f\u88c5\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002BPE\u3068\u540c\u69d8\u306b\u3001\u3053\u308c\u306f\u6559\u80b2\u7684\u306a\u3082\u306e\u3067\u3001\u5927\u304d\u306a\u30b3\u30fc\u30d1\u30b9\u3067\u306f\u4f7f\u7528\u3067\u304d\u307e\u305b\u3093\u3002</p> <p>BPE\u306e\u4f8b\u3068\u540c\u3058\u30b3\u30fc\u30d1\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3059\uff1a</p> <pre><code>corpus = [\n    \"This is the Hugging Face Course.\",\n    \"This chapter is about tokenization.\",\n    \"This section shows several tokenizer algorithms.\",\n    \"Hopefully, you will be able to understand how they are trained and generate tokens.\",\n]\n</code></pre> <p>\u307e\u305a\u3001WordPiece\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\uff08BERT\u306a\u3069\uff09\u3092\u8907\u88fd\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u524d\u51e6\u7406\u306b<code>bert-base-cased</code>\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3092\u4f7f\u7528\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff1a</p> <pre><code>from transformers import AutoTokenizer\n\ntokenizer = AutoTokenizer.from_pretrained(\"bert-base-cased\")\n</code></pre> <p>\u6b21\u306b\u3001\u524d\u51e6\u7406\u3092\u884c\u3046\u969b\u306b\u30b3\u30fc\u30d1\u30b9\u5185\u306e\u5404\u5358\u8a9e\u306e\u983b\u5ea6\u3092\u8a08\u7b97\u3057\u307e\u3059\uff1a</p> <pre><code>from collections import defaultdict\n\nword_freqs = defaultdict(int)\nfor text in corpus:\n    words_with_offsets = tokenizer.backend_tokenizer.pre_tokenizer.pre_tokenize_str(text)\n    new_words = [word for word, offset in words_with_offsets]\n    for word in new_words:\n        word_freqs[word] += 1\n\nprint(word_freqs)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>defaultdict(&lt;class 'int'&gt;, {'This': 3, 'is': 2, 'the': 1, 'Hugging': 1, 'Face': 1, 'Course': 1, '.': 4, 'chapter': 1, 'about': 1, 'tokenization': 1, 'section': 1, 'shows': 1, 'several': 1, 'tokenizer': 1, 'algorithms': 1, 'Hopefully': 1, ',': 1, 'you': 1, 'will': 1, 'be': 1, 'able': 1, 'to': 1, 'understand': 1, 'how': 1, 'they': 1, 'are': 1, 'trained': 1, 'and': 1, 'generate': 1, 'tokens': 1})\n</code></pre></p> <p>\u524d\u8ff0\u306e\u3068\u304a\u308a\u3001\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306f\u5358\u8a9e\u306e\u3059\u3079\u3066\u306e\u6700\u521d\u306e\u6587\u5b57\u3068\u3001<code>##</code>\u30d7\u30ec\u30d5\u30a3\u30c3\u30af\u30b9\u304c\u4ed8\u3044\u305f\u5358\u8a9e\u306b\u73fe\u308c\u308b\u3059\u3079\u3066\u306e\u4ed6\u306e\u6587\u5b57\u3067\u69cb\u6210\u3055\u308c\u308b\u4e00\u610f\u306e\u30bb\u30c3\u30c8\u3067\u3059\uff1a</p> <pre><code>alphabet = []\nfor word in word_freqs.keys():\n    if word[0] not in alphabet:\n        alphabet.append(word[0])\n    for letter in word[1:]:\n        if f\"##{letter}\" not in alphabet:\n            alphabet.append(f\"##{letter}\")\n\nalphabet.sort()\nprint(alphabet)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>['##a', '##b', '##c', '##d', '##e', '##f', '##g', '##h', '##i', '##k', '##l', '##m', '##n', '##o', '##p', '##r', '##s', '##t', '##u', '##v', '##w', '##y', '##z', ',', '.', 'C', 'F', 'H', 'T', 'a', 'b', 'c', 'g', 'h', 'i', 's', 't', 'u', 'w', 'y']\n</code></pre></p> <p>\u307e\u305f\u3001\u305d\u306e\u8a9e\u5f59\u306e\u6700\u521d\u306b\u30e2\u30c7\u30eb\u3067\u4f7f\u7528\u3055\u308c\u308b\u7279\u5225\u306a\u30c8\u30fc\u30af\u30f3\u3082\u8ffd\u52a0\u3057\u307e\u3059\u3002BERT\u306e\u5834\u5408\u3001\u30ea\u30b9\u30c8\u306f<code>[\"[PAD]\", \"[UNK]\", \"[CLS]\", \"[SEP]\", \"[MASK]\"]</code>\u3067\u3059\uff1a</p> <pre><code>vocab = [\"[PAD]\", \"[UNK]\", \"[CLS]\", \"[SEP]\", \"[MASK]\"] + alphabet.copy()\n</code></pre> <p>\u6b21\u306b\u3001\u5404\u5358\u8a9e\u3092\u5206\u5272\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u6700\u521d\u306e\u6587\u5b57\u4ee5\u5916\u306e\u3059\u3079\u3066\u306e\u6587\u5b57\u306b<code>##</code>\u30d7\u30ec\u30d5\u30a3\u30c3\u30af\u30b9\u304c\u4ed8\u304d\u307e\u3059\uff1a</p> <pre><code>splits = {\n    word: [c if i == 0 else f\"##{c}\" for i, c in enumerate(word)]\n    for word in word_freqs.keys()\n}\n</code></pre> <p>\u8a13\u7df4\u306e\u6e96\u5099\u304c\u6574\u3063\u305f\u306e\u3067\u3001\u5404\u30da\u30a2\u306e\u30b9\u30b3\u30a2\u3092\u8a08\u7b97\u3059\u308b\u95a2\u6570\u3092\u66f8\u304d\u307e\u3057\u3087\u3046\u3002\u8a13\u7df4\u306e\u5404\u30b9\u30c6\u30c3\u30d7\u3067\u3053\u308c\u3092\u4f7f\u7528\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff1a</p> <pre><code>def compute_pair_scores(splits):\n    letter_freqs = defaultdict(int)\n    pair_freqs = defaultdict(int)\n    for word, freq in word_freqs.items():\n        split = splits[word]\n        if len(split) == 1:\n            letter_freqs[split[0]] += freq\n            continue\n        for i in range(len(split) - 1):\n            pair = (split[i], split[i + 1])\n            letter_freqs[split[i]] += freq\n            pair_freqs[pair] += freq\n        letter_freqs[split[-1]] += freq\n\n    scores = {\n        pair: freq / (letter_freqs[pair[0]] * letter_freqs[pair[1]])\n        for pair, freq in pair_freqs.items()\n    }\n    return scores\n</code></pre> <p>\u521d\u671f\u5206\u5272\u5f8c\u3001\u3053\u306e\u8f9e\u66f8\u306e\u4e00\u90e8\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\uff1a</p> <pre><code>pair_scores = compute_pair_scores(splits)\nfor i, key in enumerate(pair_scores.keys()):\n    print(f\"{key}: {pair_scores[key]}\")\n    if i &gt;= 5:\n        break\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>('T', '##h'): 0.125\n('##h', '##i'): 0.03409090909090909\n('##i', '##s'): 0.02727272727272727\n('i', '##s'): 0.1\n('t', '##h'): 0.03571428571428571\n('##h', '##e'): 0.011904761904761904\n</code></pre></p> <p>\u6700\u9ad8\u30b9\u30b3\u30a2\u3092\u6301\u3064\u30da\u30a2\u3092\u898b\u3064\u3051\u308b\u306b\u306f\u3001\u7c21\u5358\u306a\u30eb\u30fc\u30d7\u304c\u5fc5\u8981\u3067\u3059\uff1a</p> <pre><code>best_pair = \"\"\nmax_score = None\nfor pair, score in pair_scores.items():\n    if max_score is None or max_score &lt; score:\n        best_pair = pair\n        max_score = score\n\nprint(best_pair, max_score)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>('a', '##b') 0.2\n</code></pre></p> <p>\u6700\u521d\u306b\u5b66\u7fd2\u3059\u308b\u30de\u30fc\u30b8\u306f<code>('a', '##b') -&gt; 'ab'</code>\u3067\u3001\u8a9e\u5f59\u306b<code>'ab'</code>\u3092\u8ffd\u52a0\u3057\u307e\u3059\uff1a</p> <pre><code>vocab.append(\"ab\")\n</code></pre> <p>\u7d9a\u884c\u3059\u308b\u306b\u306f\u3001<code>splits</code>\u8f9e\u66f8\u306b\u305d\u306e\u30de\u30fc\u30b8\u3092\u9069\u7528\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u5225\u306e\u95a2\u6570\u3092\u66f8\u304d\u307e\u3057\u3087\u3046\uff1a</p> <pre><code>def merge_pair(a, b, splits):\n    for word in word_freqs:\n        split = splits[word]\n        if len(split) == 1:\n            continue\n        i = 0\n        while i &lt; len(split) - 1:\n            if split[i] == a and split[i + 1] == b:\n                merge = a + b[2:] if b.startswith(\"##\") else a + b\n                split = split[:i] + [merge] + split[i + 2 :]\n            else:\n                i += 1\n        splits[word] = split\n    return splits\n</code></pre> <p>\u6700\u521d\u306e\u30de\u30fc\u30b8\u306e\u7d50\u679c\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\uff1a</p> <pre><code>splits = merge_pair(\"a\", \"##b\", splits)\nsplits[\"about\"]\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>['ab', '##o', '##u', '##t']\n</code></pre></p> <p>\u3059\u3079\u3066\u3092\u5b66\u7fd2\u3057\u305f\u3044\u30de\u30fc\u30b8\u307e\u3067\u30eb\u30fc\u30d7\u3059\u308b\u305f\u3081\u306b\u5fc5\u8981\u306a\u3059\u3079\u3066\u304c\u3042\u308a\u307e\u3059\u3002\u8a9e\u5f59\u30b5\u30a4\u30ba\u309270\u306b\u3057\u307e\u3057\u3087\u3046\uff1a</p> <pre><code>vocab_size = 70\nwhile len(vocab) &lt; vocab_size:\n    scores = compute_pair_scores(splits)\n    best_pair, max_score = \"\", None\n    for pair, score in scores.items():\n        if max_score is None or max_score &lt; score:\n            best_pair = pair\n            max_score = score\n    splits = merge_pair(*best_pair, splits)\n    new_token = (\n        best_pair[0] + best_pair[1][2:]\n        if best_pair[1].startswith(\"##\")\n        else best_pair[0] + best_pair[1]\n    )\n    vocab.append(new_token)\n</code></pre> <pre><code>print(vocab)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>['[PAD]', '[UNK]', '[CLS]', '[SEP]', '[MASK]', '##a', '##b', '##c', '##d', '##e', '##f', '##g', '##h', '##i', '##k', '##l', '##m', '##n', '##o', '##p', '##r', '##s', '##t', '##u', '##v', '##w', '##y', '##z', ',', '.', 'C', 'F', 'H', 'T', 'a', 'b', 'c', 'g', 'h', 'i', 's', 't', 'u', 'w', 'y', 'ab', '##fu', 'Fa', 'Fac', '##ct', '##ful', '##full', '##fully', 'Th', 'ch', '##hm', 'cha', 'chap', 'chapt', '##thm', 'Hu', 'Hug', 'Hugg', 'sh', 'th', 'is', '##thms', '##za', '##zat', '##ut']\n</code></pre></p> <p>\u898b\u3066\u306e\u3068\u304a\u308a\u3001BPE\u3068\u6bd4\u8f03\u3057\u3066\u3001\u3053\u306e\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306f\u30c8\u30fc\u30af\u30f3\u3068\u3057\u3066\u5358\u8a9e\u306e\u4e00\u90e8\u3092\u3082\u3046\u5c11\u3057\u901f\u304f\u5b66\u7fd2\u3057\u307e\u3059\u3002</p> <p>\u540c\u4e00\u30b3\u30fc\u30d1\u30b9\u3067\u3082\u7570\u306a\u308b\u7d50\u679c</p> <p>\u540c\u3058\u30b3\u30fc\u30d1\u30b9\u3067<code>train_new_from_iterator()</code>\u3092\u4f7f\u7528\u3057\u3066\u3082\u3001\u307e\u3063\u305f\u304f\u540c\u3058\u8a9e\u5f59\u306b\u306f\u306a\u308a\u307e\u305b\u3093\u3002\u3053\u308c\u306f\u3001Hugging Face Tokenizers\u30e9\u30a4\u30d6\u30e9\u30ea\u304cWordPiece\u3092\u8a13\u7df4\u7528\u306b\u5b9f\u88c5\u3057\u3066\u3044\u306a\u3044\uff08\u5185\u90e8\u306b\u3064\u3044\u3066\u5b8c\u5168\u306b\u78ba\u4fe1\u3057\u3066\u3044\u306a\u3044\u305f\u3081\uff09\u305f\u3081\u3001\u4ee3\u308f\u308a\u306bBPE\u3092\u4f7f\u7528\u3059\u308b\u305f\u3081\u3067\u3059\u3002</p> <p>\u65b0\u3057\u3044\u30c6\u30ad\u30b9\u30c8\u3092\u30c8\u30fc\u30af\u30f3\u5316\u3059\u308b\u305f\u3081\u306b\u3001\u524d\u51e6\u7406\u3092\u884c\u3044\u3001\u5206\u5272\u3057\u3066\u304b\u3089\u3001\u5404\u5358\u8a9e\u306b\u30c8\u30fc\u30af\u30f3\u5316\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u9069\u7528\u3057\u307e\u3059\u3002\u3064\u307e\u308a\u3001\u6700\u521d\u306e\u5358\u8a9e\u306e\u6700\u521d\u304b\u3089\u59cb\u307e\u308b\u6700\u5927\u306e\u30b5\u30d6\u30ef\u30fc\u30c9\u3092\u63a2\u3057\u3066\u5206\u5272\u3057\u3001\u6b21\u306b2\u756a\u76ee\u306e\u90e8\u5206\u3067\u30d7\u30ed\u30bb\u30b9\u3092\u7e70\u308a\u8fd4\u3057\u3001\u305d\u306e\u5358\u8a9e\u306e\u6b8b\u308a\u306e\u90e8\u5206\u3068\u30c6\u30ad\u30b9\u30c8\u306e\u4ee5\u4e0b\u306e\u5358\u8a9e\u306b\u3064\u3044\u3066\u3082\u540c\u69d8\u306b\u884c\u3044\u307e\u3059\uff1a</p> <pre><code>def encode_word(word):\n    tokens = []\n    while len(word) &gt; 0:\n        i = len(word)\n        while i &gt; 0 and word[:i] not in vocab:\n            i -= 1\n        if i == 0:\n            return [\"[UNK]\"]\n        tokens.append(word[:i])\n        word = word[i:]\n        if len(word) &gt; 0:\n            word = f\"##{word}\"\n    return tokens\n</code></pre> <p>\u8a9e\u5f59\u5185\u306b\u3042\u308b\u5358\u8a9e\u3068\u3001\u305d\u3046\u3067\u306a\u3044\u5358\u8a9e\u3067\u30c6\u30b9\u30c8\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff1a</p> <pre><code>print(encode_word(\"Hugging\"))\nprint(encode_word(\"HOgging\"))\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>['Hugg', '##i', '##n', '##g']\n['[UNK]']\n</code></pre></p> <p>\u6b21\u306b\u3001\u30c6\u30ad\u30b9\u30c8\u3092\u30c8\u30fc\u30af\u30f3\u5316\u3059\u308b\u95a2\u6570\u3092\u66f8\u304d\u307e\u3057\u3087\u3046\uff1a</p> <pre><code>def tokenize(text):\n    pre_tokenize_result = tokenizer._tokenizer.pre_tokenizer.pre_tokenize_str(text)\n    pre_tokenized_text = [word for word, offset in pre_tokenize_result]\n    encoded_words = [encode_word(word) for word in pre_tokenized_text]\n    return sum(encoded_words, [])\n</code></pre> <pre><code>print(tokenize(\"This is the Hugging Face course!\"))\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>['Th', '##i', '##s', 'is', 'th', '##e', 'Hugg', '##i', '##n', '##g', 'Fac', '##e', 'c', '##o', '##u', '##r', '##s', '##e', '[UNK]']\n</code></pre></p>","tags":["NLP","Transformers","Tokenizer","Hugging Face","\u6a5f\u68b0\u5b66\u7fd2","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","BPE","WordPiece"]},{"location":"LLM/04_the_huggingface_tokenizers_library/#unigram","title":"Unigram\u30c8\u30fc\u30af\u30f3\u5316","text":"<p>Unigram\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306fSentencePiece\u3068\u7d44\u307f\u5408\u308f\u305b\u3066\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002\u3053\u308c\u306f\u3001AlBERT\u3001T5\u3001mBART\u3001Big Bird\u3001XLNet\u306a\u3069\u306e\u30e2\u30c7\u30eb\u3067\u4f7f\u7528\u3055\u308c\u308b\u30c8\u30fc\u30af\u30f3\u5316\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u3059\u3002</p> <p>SentencePiece\u306f\u3001\u3059\u3079\u3066\u306e\u8a00\u8a9e\u304c\u30b9\u30da\u30fc\u30b9\u3092\u4f7f\u7528\u3057\u3066\u5358\u8a9e\u3092\u5206\u96e2\u3059\u308b\u308f\u3051\u3067\u306f\u306a\u3044\u3068\u3044\u3046\u4e8b\u5b9f\u306b\u5bfe\u51e6\u3057\u307e\u3059\u3002\u4ee3\u308f\u308a\u306b\u3001SentencePiece\u306f\u5165\u529b\u3092\u751f\u306e\u5165\u529b\u30b9\u30c8\u30ea\u30fc\u30e0\u3068\u3057\u3066\u6271\u3044\u3001\u4f7f\u7528\u3059\u308b\u6587\u5b57\u30bb\u30c3\u30c8\u306b\u30b9\u30da\u30fc\u30b9\u3092\u542b\u3081\u307e\u3059\u3002\u6b21\u306b\u3001Unigram\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u4f7f\u7528\u3057\u3066\u9069\u5207\u306a\u8a9e\u5f59\u3092\u69cb\u7bc9\u3067\u304d\u307e\u3059\u3002</p> <p>Tip</p> <p>\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u306fUnigram\u3092\u8a73\u7d30\u306b\u8aac\u660e\u3057\u3001\u5b8c\u5168\u306a\u5b9f\u88c5\u3092\u793a\u3059\u3068\u3053\u308d\u307e\u3067\u884c\u3044\u307e\u3059\u3002\u4e00\u822c\u7684\u306a\u30c8\u30fc\u30af\u30f3\u5316\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u6982\u8981\u3060\u3051\u304c\u6b32\u3057\u3044\u5834\u5408\u306f\u3001\u6700\u5f8c\u307e\u3067\u98db\u3070\u3057\u3066\u3082\u69cb\u3044\u307e\u305b\u3093\u3002</p>","tags":["NLP","Transformers","Tokenizer","Hugging Face","\u6a5f\u68b0\u5b66\u7fd2","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","BPE","WordPiece"]},{"location":"LLM/04_the_huggingface_tokenizers_library/#_21","title":"\u8a13\u7df4\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0","text":"<p>BPE\u3084WordPiece\u3068\u6bd4\u8f03\u3057\u3066\u3001Unigram\u306f\u9006\u65b9\u5411\u306b\u52d5\u4f5c\u3057\u307e\u3059\uff1a\u5927\u304d\u306a\u8a9e\u5f59\u304b\u3089\u958b\u59cb\u3057\u3001\u671b\u307e\u3057\u3044\u8a9e\u5f59\u30b5\u30a4\u30ba\u306b\u9054\u3059\u308b\u307e\u3067\u30c8\u30fc\u30af\u30f3\u3092\u524a\u9664\u3057\u307e\u3059\u3002\u57fa\u672c\u8a9e\u5f59\u3092\u69cb\u7bc9\u3059\u308b\u305f\u3081\u306e\u3044\u304f\u3064\u304b\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u3042\u308a\u307e\u3059\uff1a\u4f8b\u3048\u3070\u3001\u524d\u51e6\u7406\u3055\u308c\u305f\u5358\u8a9e\u3067\u6700\u3082\u4e00\u822c\u7684\u306a\u30b5\u30d6\u30b9\u30c8\u30ea\u30f3\u30b0\u3092\u53d6\u5f97\u3059\u308b\u3001\u307e\u305f\u306f\u5927\u304d\u306a\u8a9e\u5f59\u30b5\u30a4\u30ba\u3067\u521d\u671f\u30b3\u30fc\u30d1\u30b9\u306bBPE\u3092\u9069\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p> <p>\u8a13\u7df4\u306e\u5404\u30b9\u30c6\u30c3\u30d7\u3067\u3001Unigram\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u73fe\u5728\u306e\u8a9e\u5f59\u304c\u4e0e\u3048\u3089\u308c\u305f\u30b3\u30fc\u30d1\u30b9\u4e0a\u3067\u306e\u640d\u5931\u3092\u8a08\u7b97\u3057\u307e\u3059\u3002\u6b21\u306b\u3001\u8a9e\u5f59\u5185\u306e\u5404\u30b7\u30f3\u30dc\u30eb\u306b\u3064\u3044\u3066\u3001\u30b7\u30f3\u30dc\u30eb\u304c\u524a\u9664\u3055\u308c\u305f\u5834\u5408\u306b\u5168\u4f53\u306e\u640d\u5931\u304c\u3069\u306e\u7a0b\u5ea6\u5897\u52a0\u3059\u308b\u304b\u3092\u8a08\u7b97\u3057\u3001\u6700\u5c0f\u306b\u5897\u52a0\u3055\u305b\u308b\u30b7\u30f3\u30dc\u30eb\u3092\u63a2\u3057\u307e\u3059\u3002\u3053\u308c\u3089\u306e\u30b7\u30f3\u30dc\u30eb\u306f\u30b3\u30fc\u30d1\u30b9\u4e0a\u306e\u5168\u4f53\u7684\u306a\u640d\u5931\u306b\u5bfe\u3059\u308b\u5f71\u97ff\u304c\u4f4e\u3044\u305f\u3081\u3001\u3042\u308b\u610f\u5473\u3067\u300c\u3042\u307e\u308a\u5fc5\u8981\u3067\u306a\u3044\u300d\u305f\u3081\u3001\u524a\u9664\u306e\u6700\u826f\u306e\u5019\u88dc\u3067\u3059\u3002</p> <p>\u3053\u308c\u306f\u3059\u3079\u3066\u975e\u5e38\u306b\u30b3\u30b9\u30c8\u306e\u9ad8\u3044\u64cd\u4f5c\u306a\u306e\u3067\u3001\u6700\u4f4e\u640d\u5931\u5897\u52a0\u306b\u95a2\u9023\u3059\u308b\u5358\u4e00\u30b7\u30f3\u30dc\u30eb\u3092\u524a\u9664\u3059\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u6700\u4f4e\u640d\u5931\u5897\u52a0\u306b\u95a2\u9023\u3059\u308b\u30b7\u30f3\u30dc\u30eb\u306e\\(p\\)\u30d1\u30fc\u30bb\u30f3\u30c8\uff08\\(p\\)\u306f\u5236\u5fa1\u3067\u304d\u308b\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u3001\u901a\u5e3810\u307e\u305f\u306f20\uff09\u3092\u524a\u9664\u3057\u307e\u3059\u3002\u3053\u306e\u30d7\u30ed\u30bb\u30b9\u306f\u3001\u8a9e\u5f59\u304c\u671b\u307e\u3057\u3044\u30b5\u30a4\u30ba\u306b\u9054\u3059\u308b\u307e\u3067\u7e70\u308a\u8fd4\u3055\u308c\u307e\u3059\u3002</p> <p>\u57fa\u672c\u6587\u5b57\u306f\u7d76\u5bfe\u306b\u524a\u9664\u3057\u306a\u3044\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u4efb\u610f\u306e\u5358\u8a9e\u304c\u30c8\u30fc\u30af\u30f3\u5316\u3067\u304d\u308b\u3053\u3068\u304c\u4fdd\u8a3c\u3055\u308c\u307e\u3059\u3002</p> <p>\u3053\u308c\u3067\u3082\u307e\u3060\u5c11\u3057\u66d6\u6627\u3067\u3059\uff1a\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u4e3b\u8981\u90e8\u5206\u306f\u3001\u30b3\u30fc\u30d1\u30b9\u4e0a\u3067\u306e\u640d\u5931\u3092\u8a08\u7b97\u3057\u3001\u8a9e\u5f59\u304b\u3089\u3044\u304f\u3064\u304b\u306e\u30c8\u30fc\u30af\u30f3\u3092\u524a\u9664\u3059\u308b\u3068\u304d\u306b\u305d\u308c\u304c\u3069\u306e\u3088\u3046\u306b\u5909\u5316\u3059\u308b\u304b\u3092\u78ba\u8a8d\u3059\u308b\u3053\u3068\u3067\u3059\u304c\u3001\u3053\u308c\u3092\u884c\u3046\u65b9\u6cd5\u3092\u307e\u3060\u8aac\u660e\u3057\u3066\u3044\u307e\u305b\u3093\u3002\u3053\u306e\u30b9\u30c6\u30c3\u30d7\u306f\u3001Unigram\u30e2\u30c7\u30eb\u306e\u30c8\u30fc\u30af\u30f3\u5316\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u4f9d\u5b58\u3057\u3066\u3044\u308b\u305f\u3081\u3001\u6b21\u306b\u3053\u308c\u306b\u3064\u3044\u3066\u8a73\u3057\u304f\u8aac\u660e\u3057\u307e\u3059\u3002</p> <p>\u524d\u306e\u4f8b\u306e\u30b3\u30fc\u30d1\u30b9\u3092\u518d\u5229\u7528\u3057\u307e\u3059\uff1a</p> <pre><code>(\"hug\", 10), (\"pug\", 5), (\"pun\", 12), (\"bun\", 4), (\"hugs\", 5)\n</code></pre> <p>\u3053\u306e\u4f8b\u3067\u306f\u3001\u521d\u671f\u8a9e\u5f59\u306b\u3059\u3079\u3066\u306e\u53b3\u5bc6\u306a\u30b5\u30d6\u30b9\u30c8\u30ea\u30f3\u30b0\u3092\u53d6\u308a\u307e\u3059\uff1a</p> <pre><code>[\"h\", \"u\", \"g\", \"hu\", \"ug\", \"p\", \"pu\", \"n\", \"un\", \"b\", \"bu\", \"s\", \"hug\", \"gs\", \"ugs\"]\n</code></pre>","tags":["NLP","Transformers","Tokenizer","Hugging Face","\u6a5f\u68b0\u5b66\u7fd2","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","BPE","WordPiece"]},{"location":"LLM/04_the_huggingface_tokenizers_library/#_22","title":"\u30c8\u30fc\u30af\u30f3\u5316\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0","text":"<p>Unigram\u30e2\u30c7\u30eb\u306f\u3001\u5404\u30c8\u30fc\u30af\u30f3\u304c\u524d\u306e\u30c8\u30fc\u30af\u30f3\u304b\u3089\u72ec\u7acb\u3057\u3066\u3044\u308b\u3068\u8003\u3048\u308b\u8a00\u8a9e\u30e2\u30c7\u30eb\u306e\u4e00\u7a2e\u3067\u3059\u3002\u6700\u3082\u5358\u7d14\u306a\u8a00\u8a9e\u30e2\u30c7\u30eb\u3067\u3042\u308a\u3001\u524d\u306e\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u304c\u4e0e\u3048\u3089\u308c\u305f\u30c8\u30fc\u30af\u30f3X\u306e\u78ba\u7387\u306f\u3001\u5358\u306b\u30c8\u30fc\u30af\u30f3X\u306e\u78ba\u7387\u3067\u3059\u3002\u305d\u306e\u305f\u3081\u3001Unigram\u8a00\u8a9e\u30e2\u30c7\u30eb\u3092\u4f7f\u7528\u3057\u3066\u30c6\u30ad\u30b9\u30c8\u3092\u751f\u6210\u3059\u308b\u5834\u5408\u3001\u5e38\u306b\u6700\u3082\u4e00\u822c\u7684\u306a\u30c8\u30fc\u30af\u30f3\u3092\u4e88\u6e2c\u3059\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002</p> <p>\u7279\u5b9a\u306e\u30c8\u30fc\u30af\u30f3\u306e\u78ba\u7387\u306f\u3001\u5143\u306e\u30b3\u30fc\u30d1\u30b9\u5185\u3067\u306e\u305d\u306e\u983b\u5ea6\uff08\u898b\u3064\u3051\u305f\u56de\u6570\uff09\u3092\u3001\u8a9e\u5f59\u5185\u306e\u3059\u3079\u3066\u306e\u30c8\u30fc\u30af\u30f3\u306e\u3059\u3079\u3066\u306e\u983b\u5ea6\u306e\u5408\u8a08\u3067\u5272\u3063\u305f\u3082\u306e\u3067\u3059\uff08\u78ba\u7387\u306e\u5408\u8a08\u304c1\u306b\u306a\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308b\u305f\u3081\uff09\u3002\u4f8b\u3048\u3070\u3001<code>\"ug\"</code>\u306f<code>\"hug\"</code>\u3001<code>\"pug\"</code>\u3001<code>\"hugs\"</code>\u306b\u5b58\u5728\u3059\u308b\u305f\u3081\u3001\u30b3\u30fc\u30d1\u30b9\u5185\u3067\u983b\u5ea6\u304c20\u3067\u3059\u3002</p> <p>\u8a9e\u5f59\u5185\u306e\u3059\u3079\u3066\u306e\u53ef\u80fd\u306a\u30b5\u30d6\u30ef\u30fc\u30c9\u306e\u983b\u5ea6\u306f\u6b21\u306e\u3068\u304a\u308a\u3067\u3059\uff1a</p> <pre><code>(\"h\", 15) (\"u\", 36) (\"g\", 20) (\"hu\", 15) (\"ug\", 20) (\"p\", 17) (\"pu\", 17) (\"n\", 16)\n(\"un\", 16) (\"b\", 4) (\"bu\", 4) (\"s\", 5) (\"hug\", 15) (\"gs\", 5) (\"ugs\", 5)\n</code></pre> <p>\u3059\u3079\u3066\u306e\u983b\u5ea6\u306e\u5408\u8a08\u306f210\u306a\u306e\u3067\u3001\u30b5\u30d6\u30ef\u30fc\u30c9<code>\"ug\"</code>\u306e\u78ba\u7387\u306f20/210\u3067\u3059\u3002</p> <p>\u4eca\u3001\u7279\u5b9a\u306e\u5358\u8a9e\u3092\u30c8\u30fc\u30af\u30f3\u5316\u3059\u308b\u305f\u3081\u306b\u3001\u3059\u3079\u3066\u306e\u53ef\u80fd\u306a\u30c8\u30fc\u30af\u30f3\u3078\u306e\u30bb\u30b0\u30e1\u30f3\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u898b\u3066\u3001Unigram\u30e2\u30c7\u30eb\u306b\u5f93\u3063\u3066\u5404\u3005\u306e\u78ba\u7387\u3092\u8a08\u7b97\u3057\u307e\u3059\u3002\u3059\u3079\u3066\u306e\u30c8\u30fc\u30af\u30f3\u306f\u72ec\u7acb\u3057\u3066\u3044\u308b\u3068\u898b\u306a\u3055\u308c\u308b\u305f\u3081\u3001\u3053\u306e\u78ba\u7387\u306f\u5358\u306b\u5404\u30c8\u30fc\u30af\u30f3\u306e\u78ba\u7387\u306e\u7a4d\u3067\u3059\u3002\u4f8b\u3048\u3070\u3001<code>\"pug\"</code>\u306e\u30c8\u30fc\u30af\u30f3\u5316<code>[\"p\", \"u\", \"g\"]</code>\u306e\u78ba\u7387\u306f\uff1a</p> <p>\\(P([<code>p\",</code>u\", <code>g\"]) = P(</code>p\") \\times P(<code>u\") \\times P(</code>g\") = \\frac{5}{210} \\times \\frac{36}{210} \\times \\frac{20}{210} = 0.000389\\)</p> <p>\u6bd4\u8f03\u3068\u3057\u3066\u3001\u30c8\u30fc\u30af\u30f3\u5316<code>[\"pu\", \"g\"]</code>\u306e\u78ba\u7387\u306f\uff1a</p> <p>\\(P([<code>pu\",</code>g\"]) = P(<code>pu\") \\times P(</code>g\") = \\frac{5}{210} \\times \\frac{20}{210} = 0.0022676\\)</p> <p>\u305d\u306e\u305f\u3081\u3001\u305d\u3061\u3089\u306e\u65b9\u304c\u306f\u308b\u304b\u306b\u53ef\u80fd\u6027\u304c\u9ad8\u3044\u3067\u3059\u3002\u4e00\u822c\u306b\u3001\u53ef\u80fd\u306a\u9650\u308a\u5c11\u306a\u3044\u30c8\u30fc\u30af\u30f3\u6570\u3067\u306e\u30c8\u30fc\u30af\u30f3\u5316\u304c\u6700\u9ad8\u78ba\u7387\u3092\u6301\u3061\u307e\u3059\uff08\u5404\u30c8\u30fc\u30af\u30f3\u306b\u5bfe\u3057\u3066210\u3067\u306e\u9664\u7b97\u304c\u7e70\u308a\u8fd4\u3055\u308c\u308b\u305f\u3081\uff09\u3002\u3053\u308c\u306f\u3001\u76f4\u611f\u7684\u306b\u671b\u3080\u3082\u306e\uff08\u5358\u8a9e\u3092\u3067\u304d\u308b\u3060\u3051\u5c11\u306a\u3044\u30c8\u30fc\u30af\u30f3\u6570\u306b\u5206\u5272\u3059\u308b\uff09\u306b\u5bfe\u5fdc\u3057\u307e\u3059\u3002</p> <p>Unigram\u30e2\u30c7\u30eb\u3067\u306e\u5358\u8a9e\u306e\u30c8\u30fc\u30af\u30f3\u5316\u306f\u3001\u6700\u9ad8\u78ba\u7387\u3092\u6301\u3064\u30c8\u30fc\u30af\u30f3\u5316\u3067\u3059\u3002<code>\"pug\"</code>\u306e\u4f8b\u3067\u306f\u3001\u5404\u53ef\u80fd\u306a\u30bb\u30b0\u30e1\u30f3\u30c6\u30fc\u30b7\u30e7\u30f3\u3067\u5f97\u3089\u308c\u308b\u78ba\u7387\u306f\u6b21\u306e\u3068\u304a\u308a\u3067\u3059\uff1a</p> <pre><code>[\"p\", \"u\", \"g\"] : 0.000389\n[\"p\", \"ug\"] : 0.0022676\n[\"pu\", \"g\"] : 0.0022676\n</code></pre> <p>\u305d\u306e\u305f\u3081\u3001<code>\"pug\"</code>\u306f<code>[\"p\", \"ug\"]</code>\u307e\u305f\u306f<code>[\"pu\", \"g\"]</code>\u3068\u3057\u3066\u30c8\u30fc\u30af\u30f3\u5316\u3055\u308c\u307e\u3059\u3002\u3053\u308c\u3089\u306e\u30bb\u30b0\u30e1\u30f3\u30c6\u30fc\u30b7\u30e7\u30f3\u306e\u3046\u3061\u3069\u3061\u3089\u304c\u6700\u521d\u306b\u906d\u9047\u3055\u308c\u308b\u304b\u306b\u3088\u308a\u307e\u3059\uff08\u3088\u308a\u5927\u304d\u306a\u30b3\u30fc\u30d1\u30b9\u3067\u306f\u3001\u3053\u306e\u3088\u3046\u306a\u7b49\u4fa1\u30b1\u30fc\u30b9\u306f\u7a00\u3067\u3059\uff09\u3002</p> <p>\u3053\u306e\u5834\u5408\u3001\u3059\u3079\u3066\u306e\u53ef\u80fd\u306a\u30bb\u30b0\u30e1\u30f3\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u898b\u3064\u3051\u3066\u78ba\u7387\u3092\u8a08\u7b97\u3059\u308b\u306e\u306f\u7c21\u5358\u3067\u3057\u305f\u304c\u3001\u4e00\u822c\u7684\u306b\u306f\u3082\u3046\u5c11\u3057\u56f0\u96e3\u3067\u3059\u3002\u3053\u308c\u306b\u4f7f\u7528\u3055\u308c\u308b\u53e4\u5178\u7684\u306a\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306fViterbi\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3068\u547c\u3070\u308c\u307e\u3059\u3002\u672c\u8cea\u7684\u306b\u3001\u7279\u5b9a\u306e\u5358\u8a9e\u306e\u53ef\u80fd\u306a\u30bb\u30b0\u30e1\u30f3\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u691c\u51fa\u3059\u308b\u305f\u3081\u306b\u30b0\u30e9\u30d5\u3092\u69cb\u7bc9\u3057\u307e\u3059\u3002\u6587\u5b57_a_\u304b\u3089\u6587\u5b57_b_\u3078\u306e\u5206\u5c90\u304c\u3042\u308b\u5834\u5408\u3001_a_\u304b\u3089_b_\u307e\u3067\u306e\u30b5\u30d6\u30ef\u30fc\u30c9\u304c\u8a9e\u5f59\u5185\u306b\u3042\u308b\u3068\u3044\u3063\u3066\u3001\u305d\u306e\u30d6\u30e9\u30f3\u30c1\u306b\u30b5\u30d6\u30ef\u30fc\u30c9\u306e\u78ba\u7387\u3092\u5c5e\u6027\u3068\u3057\u3066\u5272\u308a\u5f53\u3066\u307e\u3059\u3002</p> <p>\u305d\u306e\u30b0\u30e9\u30d5\u3067\u6700\u9ad8\u30b9\u30b3\u30a2\u3092\u6301\u3064\u30d1\u30b9\u3092\u898b\u3064\u3051\u308b\u305f\u3081\u306b\u3001Viterbi\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u304c\u6c7a\u5b9a\u3057\u307e\u3059\u3002\u5358\u8a9e\u306e\u5404\u4f4d\u7f6e\u306b\u3064\u3044\u3066\u3001\u305d\u306e\u4f4d\u7f6e\u3067\u7d42\u308f\u308b\u6700\u9ad8\u30b9\u30b3\u30a2\u306e\u30bb\u30b0\u30e1\u30f3\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u6c7a\u5b9a\u3057\u307e\u3059\u3002\u6700\u521d\u304b\u3089\u6700\u5f8c\u306b\u884c\u304f\u306e\u3067\u3001\u305d\u306e\u6700\u9ad8\u30b9\u30b3\u30a2\u306f\u3001\u73fe\u5728\u4f4d\u7f6e\u3067\u7d42\u308f\u308b\u3059\u3079\u3066\u306e\u30b5\u30d6\u30ef\u30fc\u30c9\u3092\u30eb\u30fc\u30d7\u3057\u3066\u3001\u3053\u306e\u30b5\u30d6\u30ef\u30fc\u30c9\u304c\u59cb\u307e\u308b\u4f4d\u7f6e\u304b\u3089\u306e\u6700\u9ad8\u306e\u30c8\u30fc\u30af\u30f3\u5316\u30b9\u30b3\u30a2\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3067\u898b\u3064\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u6b21\u306b\u3001\u6700\u5f8c\u306b\u5230\u9054\u3059\u308b\u305f\u3081\u306b\u53d6\u3063\u305f\u30d1\u30b9\u3092\u5c55\u958b\u3059\u308b\u3060\u3051\u3067\u3059\u3002</p> <p>\u8a9e\u5f59\u3068\u5358\u8a9e<code>\"unhug\"</code>\u3092\u4f7f\u7528\u3057\u305f\u4f8b\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u5404\u4f4d\u7f6e\u306b\u3064\u3044\u3066\u3001\u305d\u3053\u3067\u7d42\u308f\u308b\u6700\u9ad8\u30b9\u30b3\u30a2\u306e\u30b5\u30d6\u30ef\u30fc\u30c9\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\uff1a</p> <pre><code>Character 0 (u): \"u\" (score 0.171429)\nCharacter 1 (n): \"un\" (score 0.076191)\nCharacter 2 (h): \"un\" \"h\" (score 0.005442)\nCharacter 3 (u): \"un\" \"hu\" (score 0.005442)\nCharacter 4 (g): \"un\" \"hug\" (score 0.005442)\n</code></pre> <p>\u3057\u305f\u304c\u3063\u3066\u3001<code>\"unhug\"</code>\u306f<code>[\"un\", \"hug\"]</code>\u3068\u3057\u3066\u30c8\u30fc\u30af\u30f3\u5316\u3055\u308c\u307e\u3059\u3002</p>","tags":["NLP","Transformers","Tokenizer","Hugging Face","\u6a5f\u68b0\u5b66\u7fd2","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","BPE","WordPiece"]},{"location":"LLM/04_the_huggingface_tokenizers_library/#_23","title":"\u8a13\u7df4\u306b\u623b\u308b","text":"<p>\u30c8\u30fc\u30af\u30f3\u5316\u304c\u3069\u306e\u3088\u3046\u306b\u52d5\u4f5c\u3059\u308b\u304b\u3092\u898b\u305f\u306e\u3067\u3001\u8a13\u7df4\u4e2d\u306b\u4f7f\u7528\u3055\u308c\u308b\u640d\u5931\u306b\u3064\u3044\u3066\u3082\u3046\u5c11\u3057\u6df1\u304f\u6398\u308a\u4e0b\u3052\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u4efb\u610f\u306e\u6bb5\u968e\u3067\u3001\u3053\u306e\u640d\u5931\u306f\u3001\u73fe\u5728\u306e\u8a9e\u5f59\u3068\u30b3\u30fc\u30d1\u30b9\u5185\u306e\u5404\u30c8\u30fc\u30af\u30f3\u306e\u983b\u5ea6\u306b\u3088\u3063\u3066\u6c7a\u5b9a\u3055\u308c\u308bUnigram\u30e2\u30c7\u30eb\u3092\u4f7f\u7528\u3057\u3066\u3001\u30b3\u30fc\u30d1\u30b9\u5185\u306e\u3059\u3079\u3066\u306e\u5358\u8a9e\u3092\u30c8\u30fc\u30af\u30f3\u5316\u3059\u308b\u3053\u3068\u3067\u8a08\u7b97\u3055\u308c\u307e\u3059\uff08\u524d\u8ff0\u306e\u3068\u304a\u308a\uff09\u3002</p> <p>\u30b3\u30fc\u30d1\u30b9\u5185\u306e\u5404\u5358\u8a9e\u306b\u306f\u30b9\u30b3\u30a2\u304c\u3042\u308a\u3001\u640d\u5931\u306f\u305d\u308c\u3089\u306e\u30b9\u30b3\u30a2\u306e\u8ca0\u306e\u5bfe\u6570\u5c24\u5ea6\u3001\u3064\u307e\u308a\u3001\u30b3\u30fc\u30d1\u30b9\u5185\u306e\u3059\u3079\u3066\u306e\u5358\u8a9e\u306b\u3064\u3044\u3066\u306e\u3059\u3079\u3066\u306e<code>-log(P(word))</code>\u306e\u5408\u8a08\u3067\u3059\u3002</p> <p>\u4ee5\u4e0b\u306e\u30b3\u30fc\u30d1\u30b9\u3092\u4f7f\u3063\u305f\u4f8b\u306b\u623b\u308a\u307e\u3057\u3087\u3046\uff1a</p> <pre><code>(\"hug\", 10), (\"pug\", 5), (\"pun\", 12), (\"bun\", 4), (\"hugs\", 5)\n</code></pre> <p>\u305d\u308c\u305e\u308c\u306e\u30b9\u30b3\u30a2\u3092\u6301\u3064\u5404\u5358\u8a9e\u306e\u30c8\u30fc\u30af\u30f3\u5316\u306f\uff1a</p> <pre><code>\"hug\": [\"hug\"] (score 0.071428)\n\"pug\": [\"pu\", \"g\"] (score 0.007710)\n\"pun\": [\"pu\", \"n\"] (score 0.006168)\n\"bun\": [\"bu\", \"n\"] (score 0.001451)\n\"hugs\": [\"hug\", \"s\"] (score 0.001701)\n</code></pre> <p>\u305d\u306e\u305f\u3081\u3001\u640d\u5931\u306f\uff1a</p> <pre><code>10 * (-log(0.071428)) + 5 * (-log(0.007710)) + 12 * (-log(0.006168)) + 4 * (-log(0.001451)) + 5 * (-log(0.001701)) = 169.8\n</code></pre> <p>\u4eca\u3001\u5404\u30c8\u30fc\u30af\u30f3\u3092\u524a\u9664\u3059\u308b\u3053\u3068\u304c\u640d\u5931\u306b\u3069\u306e\u3088\u3046\u306b\u5f71\u97ff\u3059\u308b\u304b\u3092\u8a08\u7b97\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u306f\u304b\u306a\u308a\u9762\u5012\u306a\u306e\u3067\u3001\u3053\u3053\u3067\u306f2\u3064\u306e\u30c8\u30fc\u30af\u30f3\u306b\u3064\u3044\u3066\u306e\u307f\u884c\u3044\u3001\u30b3\u30fc\u30c9\u304c\u3042\u308b\u6642\u306e\u5168\u4f53\u7684\u306a\u30d7\u30ed\u30bb\u30b9\u306f\u5f8c\u3067\u4fdd\u5b58\u3057\u307e\u3059\u3002\u3053\u306e\uff08\u975e\u5e38\u306b\uff09\u7279\u6b8a\u306a\u30b1\u30fc\u30b9\u3067\u306f\u3001\u3059\u3079\u3066\u306e\u5358\u8a9e\u306e2\u3064\u306e\u540c\u7b49\u306a\u30c8\u30fc\u30af\u30f3\u5316\u304c\u3042\u308a\u307e\u3057\u305f\uff1a\u524d\u8ff0\u306e\u3088\u3046\u306b\u3001\u4f8b\u3048\u3070<code>\"pug\"</code>\u306f\u540c\u3058\u30b9\u30b3\u30a2\u3067<code>[\"p\", \"ug\"]</code>\u3068\u3057\u3066\u30c8\u30fc\u30af\u30f3\u5316\u3067\u304d\u307e\u3057\u305f\u3002\u3057\u305f\u304c\u3063\u3066\u3001\u8a9e\u5f59\u304b\u3089<code>\"pu\"</code>\u30c8\u30fc\u30af\u30f3\u3092\u524a\u9664\u3059\u308b\u3068\u3001\u307e\u3063\u305f\u304f\u540c\u3058\u640d\u5931\u304c\u5f97\u3089\u308c\u307e\u3059\u3002</p> <p>\u4e00\u65b9\u3001<code>\"hug\"</code>\u3092\u524a\u9664\u3059\u308b\u3068\u640d\u5931\u304c\u60aa\u5316\u3057\u307e\u3059\u3002<code>\"hug\"</code>\u3068<code>\"hugs\"</code>\u306e\u30c8\u30fc\u30af\u30f3\u5316\u304c\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b\u305f\u3081\u3067\u3059\uff1a</p> <pre><code>\"hug\": [\"hu\", \"g\"] (score 0.006802)\n\"hugs\": [\"hu\", \"gs\"] (score 0.001701)\n</code></pre> <p>\u3053\u308c\u3089\u306e\u5909\u66f4\u306b\u3088\u308a\u3001\u640d\u5931\u306f\u4ee5\u4e0b\u3060\u3051\u4e0a\u6607\u3057\u307e\u3059\uff1a</p> <pre><code>- 10 * (-log(0.071428)) + 10 * (-log(0.006802)) = 23.5\n</code></pre> <p>\u3057\u305f\u304c\u3063\u3066\u3001\u30c8\u30fc\u30af\u30f3<code>\"pu\"</code>\u306f\u304a\u305d\u3089\u304f\u8a9e\u5f59\u304b\u3089\u524a\u9664\u3055\u308c\u307e\u3059\u304c\u3001<code>\"hug\"</code>\u306f\u524a\u9664\u3055\u308c\u307e\u305b\u3093\u3002</p>","tags":["NLP","Transformers","Tokenizer","Hugging Face","\u6a5f\u68b0\u5b66\u7fd2","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","BPE","WordPiece"]},{"location":"LLM/04_the_huggingface_tokenizers_library/#unigram_1","title":"Unigram\u306e\u5b9f\u88c5","text":"<p>\u3053\u308c\u307e\u3067\u898b\u3066\u304d\u305f\u3059\u3079\u3066\u3092\u30b3\u30fc\u30c9\u3067\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002BPE\u3084WordPiece\u3068\u540c\u69d8\u306b\u3001\u3053\u308c\u306fUnigram\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u52b9\u7387\u7684\u306a\u5b9f\u88c5\u3067\u306f\u3042\u308a\u307e\u305b\u3093\uff08\u5168\u304f\u9006\u3067\u3059\uff09\u304c\u3001\u7406\u89e3\u3059\u308b\u306e\u306b\u5f79\u7acb\u3064\u306f\u305a\u3067\u3059\u3002</p> <p>\u524d\u3068\u540c\u3058\u30b3\u30fc\u30d1\u30b9\u3092\u4f8b\u3068\u3057\u3066\u4f7f\u7528\u3057\u307e\u3059\uff1a</p> <pre><code>corpus = [\n    \"This is the Hugging Face Course.\",\n    \"This chapter is about tokenization.\",\n    \"This section shows several tokenizer algorithms.\",\n    \"Hopefully, you will be able to understand how they are trained and generate tokens.\",\n]\n</code></pre> <p>\u4eca\u56de\u306f\u3001\u30e2\u30c7\u30eb\u3068\u3057\u3066<code>xlnet-base-cased</code>\u3092\u4f7f\u7528\u3057\u307e\u3059\uff1a</p> <pre><code>from transformers import AutoTokenizer\n\ntokenizer = AutoTokenizer.from_pretrained(\"xlnet-base-cased\")\n</code></pre> <p>BPE\u3084WordPiece\u3068\u540c\u69d8\u306b\u3001\u30b3\u30fc\u30d1\u30b9\u5185\u306e\u5404\u5358\u8a9e\u306e\u51fa\u73fe\u56de\u6570\u3092\u30ab\u30a6\u30f3\u30c8\u3059\u308b\u3053\u3068\u304b\u3089\u59cb\u3081\u307e\u3059\uff1a</p> <pre><code>from collections import defaultdict\n\nword_freqs = defaultdict(int)\nfor text in corpus:\n    words_with_offsets = tokenizer.backend_tokenizer.pre_tokenizer.pre_tokenize_str(text)\n    new_words = [word for word, offset in words_with_offsets]\n    for word in new_words:\n        word_freqs[word] += 1\n\nprint(word_freqs)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>defaultdict(&lt;class 'int'&gt;, {'\u2581This': 3, '\u2581is': 2, '\u2581the': 1, '\u2581Hugging': 1, '\u2581Face': 1, '\u2581Course.': 1, '\u2581chapter': 1, '\u2581about': 1, '\u2581tokenization.': 1, '\u2581section': 1, '\u2581shows': 1, '\u2581several': 1, '\u2581tokenizer': 1, '\u2581algorithms.': 1, '\u2581Hopefully,': 1, '\u2581you': 1, '\u2581will': 1, '\u2581be': 1, '\u2581able': 1, '\u2581to': 1, '\u2581understand': 1, '\u2581how': 1, '\u2581they': 1, '\u2581are': 1, '\u2581trained': 1, '\u2581and': 1, '\u2581generate': 1, '\u2581tokens.': 1})\n</code></pre></p> <p>\u6b21\u306b\u3001\u6700\u7d42\u7684\u306b\u6b32\u3057\u3044\u8a9e\u5f59\u30b5\u30a4\u30ba\u3088\u308a\u5927\u304d\u306a\u4f55\u304b\u306b\u8a9e\u5f59\u3092\u521d\u671f\u5316\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3059\u3079\u3066\u306e\u57fa\u672c\u6587\u5b57\u3092\u542b\u3081\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff08\u305d\u3046\u3067\u306a\u3044\u3068\u3001\u3059\u3079\u3066\u306e\u5358\u8a9e\u3092\u30c8\u30fc\u30af\u30f3\u5316\u3067\u304d\u307e\u305b\u3093\uff09\u304c\u3001\u5927\u304d\u306a\u30b5\u30d6\u30b9\u30c8\u30ea\u30f3\u30b0\u306b\u3064\u3044\u3066\u306f\u3001\u6700\u3082\u4e00\u822c\u7684\u306a\u3082\u306e\u306e\u307f\u3092\u4fdd\u6301\u3059\u308b\u306e\u3067\u3001\u983b\u5ea6\u3067\u4e26\u3079\u66ff\u3048\u307e\u3059\uff1a</p> <pre><code>char_freqs = defaultdict(int)\nsubwords_freqs = defaultdict(int)\nfor word, freq in word_freqs.items():\n    for i in range(len(word)):\n        char_freqs[word[i]] += freq\n        # \u9577\u3055\u304c\u5c11\u306a\u304f\u3068\u30822\u306e\u30b5\u30d6\u30ef\u30fc\u30c9\u3092\u30eb\u30fc\u30d7\u3059\u308b\n        for j in range(i + 2, len(word) + 1):\n            subwords_freqs[word[i:j]] += freq\n\n# \u30b5\u30d6\u30ef\u30fc\u30c9\u3092\u983b\u5ea6\u3067\u4e26\u3079\u66ff\u3048\nsorted_subwords = sorted(subwords_freqs.items(), key=lambda x: x[1], reverse=True)\nsorted_subwords[:10]\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>[('\u2581t', 7),\n ('is', 5),\n ('er', 5),\n ('\u2581a', 5),\n ('\u2581to', 4),\n ('to', 4),\n ('en', 4),\n ('\u2581T', 3),\n ('\u2581Th', 3),\n ('\u2581Thi', 3)]\n</code></pre></p> <p>\u6587\u5b57\u3068\u6700\u826f\u306e\u30b5\u30d6\u30ef\u30fc\u30c9\u3092\u30b0\u30eb\u30fc\u30d7\u5316\u3057\u3066\u3001\u30b5\u30a4\u30ba300\u306e\u521d\u671f\u8a9e\u5f59\u306b\u5230\u9054\u3057\u307e\u3059\uff1a</p> <pre><code>token_freqs = list(char_freqs.items()) + sorted_subwords[: 300 - len(char_freqs)]\ntoken_freqs = {token: freq for token, freq in token_freqs}\n</code></pre> <p>SentencePiece\u306e\u52b9\u7387\u7684\u306a\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0</p> <p>SentencePiece\u306f\u3001\u521d\u671f\u8a9e\u5f59\u3092\u4f5c\u6210\u3059\u308b\u305f\u3081\u306bEnhanced Suffix Array\uff08ESA\uff09\u3068\u547c\u3070\u308c\u308b\u3088\u308a\u52b9\u7387\u7684\u306a\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002</p> <p>\u6b21\u306b\u3001\u3059\u3079\u3066\u306e\u983b\u5ea6\u306e\u5408\u8a08\u3092\u8a08\u7b97\u3057\u3066\u3001\u983b\u5ea6\u3092\u78ba\u7387\u306b\u5909\u63db\u3057\u307e\u3059\u3002\u79c1\u305f\u3061\u306e\u30e2\u30c7\u30eb\u3067\u306f\u3001\u78ba\u7387\u306e\u5bfe\u6570\u3092\u683c\u7d0d\u3057\u307e\u3059\u3002\u5c0f\u3055\u306a\u6570\u3092\u639b\u3051\u308b\u3088\u308a\u3082\u5bfe\u6570\u3092\u8db3\u3059\u65b9\u304c\u6570\u5024\u7684\u306b\u5b89\u5b9a\u3057\u3066\u304a\u308a\u3001\u3053\u308c\u306b\u3088\u308a\u30e2\u30c7\u30eb\u306e\u640d\u5931\u306e\u8a08\u7b97\u304c\u7c21\u5358\u306b\u306a\u308a\u307e\u3059\uff1a</p> <pre><code>from math import log\n\ntotal_sum = sum([freq for token, freq in token_freqs.items()])\nmodel = {token: -log(freq / total_sum) for token, freq in token_freqs.items()}\n</code></pre> <p>\u4e3b\u8981\u306a\u95a2\u6570\u306f\u3001Viterbi\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u4f7f\u7528\u3057\u3066\u5358\u8a9e\u3092\u30c8\u30fc\u30af\u30f3\u5316\u3059\u308b\u3082\u306e\u3067\u3059\u3002\u524d\u8ff0\u306e\u3068\u304a\u308a\u3001\u3053\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u5358\u8a9e\u306e\u5404\u30b5\u30d6\u30b9\u30c8\u30ea\u30f3\u30b0\u306e\u6700\u826f\u306e\u30bb\u30b0\u30e1\u30f3\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u8a08\u7b97\u3057\u3001<code>best_segmentations</code>\u3068\u3044\u3046\u5909\u6570\u306b\u683c\u7d0d\u3057\u307e\u3059\u3002\u5358\u8a9e\u5185\u306e\u5404\u4f4d\u7f6e\uff080\u304b\u3089\u7dcf\u9577\u307e\u3067\uff09\u306b\u5bfe\u3057\u30661\u3064\u306e\u8f9e\u66f8\u3092\u683c\u7d0d\u3057\u30012\u3064\u306e\u30ad\u30fc\u3092\u6301\u3061\u307e\u3059\uff1a\u6700\u826f\u306e\u30bb\u30b0\u30e1\u30f3\u30c6\u30fc\u30b7\u30e7\u30f3\u306e\u6700\u5f8c\u306e\u30c8\u30fc\u30af\u30f3\u306e\u958b\u59cb\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3068\u3001\u6700\u826f\u306e\u30bb\u30b0\u30e1\u30f3\u30c6\u30fc\u30b7\u30e7\u30f3\u306e\u30b9\u30b3\u30a2\u3067\u3059\u3002\u6700\u5f8c\u306e\u30c8\u30fc\u30af\u30f3\u306e\u958b\u59cb\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304c\u3042\u308c\u3070\u3001\u30ea\u30b9\u30c8\u304c\u5b8c\u5168\u306b\u5165\u529b\u3055\u308c\u305f\u3089\u5b8c\u5168\u306a\u30bb\u30b0\u30e1\u30f3\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002</p> <p>\u30ea\u30b9\u30c8\u306e\u5165\u529b\u306f2\u3064\u306e\u30eb\u30fc\u30d7\u3060\u3051\u3067\u884c\u308f\u308c\u307e\u3059\uff1a\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306f\u5404\u958b\u59cb\u4f4d\u7f6e\u3092\u901a\u308a\u30012\u756a\u76ee\u306e\u30eb\u30fc\u30d7\u306f\u305d\u306e\u958b\u59cb\u4f4d\u7f6e\u3067\u59cb\u307e\u308b\u3059\u3079\u3066\u306e\u30b5\u30d6\u30b9\u30c8\u30ea\u30f3\u30b0\u3092\u8a66\u3057\u307e\u3059\u3002\u30b5\u30d6\u30b9\u30c8\u30ea\u30f3\u30b0\u304c\u8a9e\u5f59\u5185\u306b\u3042\u308b\u5834\u5408\u3001\u305d\u306e\u7d42\u4e86\u4f4d\u7f6e\u307e\u3067\u306e\u5358\u8a9e\u306e\u65b0\u3057\u3044\u30bb\u30b0\u30e1\u30f3\u30c6\u30fc\u30b7\u30e7\u30f3\u304c\u3042\u308a\u3001\u3053\u308c\u3092<code>best_segmentations</code>\u306b\u3042\u308b\u3082\u306e\u3068\u6bd4\u8f03\u3057\u307e\u3059\u3002</p> <p>\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u304c\u7d42\u4e86\u3057\u305f\u3089\u3001\u6700\u5f8c\u304b\u3089\u958b\u59cb\u3057\u3001\u4e00\u3064\u306e\u958b\u59cb\u4f4d\u7f6e\u304b\u3089\u6b21\u306e\u958b\u59cb\u4f4d\u7f6e\u306b\u30db\u30c3\u30d7\u3057\u3066\u3001\u9032\u884c\u4e2d\u306b\u30c8\u30fc\u30af\u30f3\u3092\u8a18\u9332\u3057\u3001\u5358\u8a9e\u306e\u958b\u59cb\u306b\u5230\u9054\u3059\u308b\u307e\u3067\u7d9a\u3051\u307e\u3059\uff1a</p> <pre><code>def encode_word(word, model):\n    best_segmentations = [{\"start\": 0, \"score\": 1}] + [\n        {\"start\": None, \"score\": None} for _ in range(len(word))\n    ]\n    for start_idx in range(len(word)):\n        # \u3053\u308c\u306f\u30eb\u30fc\u30d7\u306e\u524d\u306e\u30b9\u30c6\u30c3\u30d7\u3067\u9069\u5207\u306b\u5165\u529b\u3055\u308c\u3066\u3044\u308b\u306f\u305a\n        best_score_at_start = best_segmentations[start_idx][\"score\"]\n        for end_idx in range(start_idx + 1, len(word) + 1):\n            token = word[start_idx:end_idx]\n            if token in model and best_score_at_start is not None:\n                score = model[token] + best_score_at_start\n                # end_idx\u3067\u7d42\u308f\u308b \u3088\u308a\u826f\u3044\u30bb\u30b0\u30e1\u30f3\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u898b\u3064\u3051\u305f\u5834\u5408\u3001\u66f4\u65b0\u3059\u308b\n                if (\n                    best_segmentations[end_idx][\"score\"] is None\n                    or best_segmentations[end_idx][\"score\"] &gt; score\n                ):\n                    best_segmentations[end_idx] = {\"start\": start_idx, \"score\": score}\n\n    segmentation = best_segmentations[-1]\n    if segmentation[\"score\"] is None:\n        # \u5358\u8a9e\u306e\u30c8\u30fc\u30af\u30f3\u5316\u304c\u898b\u3064\u304b\u3089\u306a\u304b\u3063\u305f -&gt; \u672a\u77e5\n        return [\"&lt;unk&gt;\"], None\n\n    score = segmentation[\"score\"]\n    start = segmentation[\"start\"]\n    end = len(word)\n    tokens = []\n    while start != 0:\n        tokens.insert(0, word[start:end])\n        next_start = best_segmentations[start][\"start\"]\n        end = start\n        start = next_start\n    tokens.insert(0, word[start:end])\n    return tokens, score\n</code></pre> <pre><code>print(encode_word(\"Hopefully\", model))\nprint(encode_word(\"This\", model))\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>(['H', 'o', 'p', 'e', 'f', 'u', 'll', 'y'], 41.5157494601402)\n(['This'], 6.288267030694535)\n</code></pre></p> <p>\u30b3\u30fc\u30d1\u30b9\u4e0a\u3067\u306e\u30e2\u30c7\u30eb\u306e\u640d\u5931\u3092\u8a08\u7b97\u3059\u308b\u306e\u306f\u7c21\u5358\u3067\u3059\uff01</p> <pre><code>def compute_loss(model):\n    loss = 0\n    for word, freq in word_freqs.items():\n        _, word_loss = encode_word(word, model)\n        loss += freq * word_loss\n    return loss\n</code></pre> <pre><code>compute_loss(model)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>413.10377642940875\n</code></pre></p> <p>\u5404\u30c8\u30fc\u30af\u30f3\u306e\u30b9\u30b3\u30a2\u3092\u8a08\u7b97\u3059\u308b\u306e\u3082\u975e\u5e38\u306b\u56f0\u96e3\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u5404\u30c8\u30fc\u30af\u30f3\u3092\u524a\u9664\u3057\u3066\u5f97\u3089\u308c\u308b\u30e2\u30c7\u30eb\u306e\u640d\u5931\u3092\u8a08\u7b97\u3059\u308b\u3060\u3051\u3067\u3059\uff1a</p> <pre><code>import copy\n\ndef compute_scores(model):\n    scores = {}\n    model_loss = compute_loss(model)\n    for token, score in model.items():\n        # \u9577\u30551\u306e\u30c8\u30fc\u30af\u30f3\u306f\u5e38\u306b\u4fdd\u6301\n        if len(token) == 1:\n            continue\n        model_without_token = copy.deepcopy(model)\n        _ = model_without_token.pop(token)\n        scores[token] = compute_loss(model_without_token) - model_loss\n    return scores\n</code></pre> <pre><code>scores = compute_scores(model)\nprint(scores[\"ll\"])\nprint(scores[\"his\"])\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>6.376412403623874\n0.0\n</code></pre></p> <p>Tip</p> <p>\u3053\u306e\u30a2\u30d7\u30ed\u30fc\u30c1\u306f\u975e\u5e38\u306b\u975e\u52b9\u7387\u7684\u306a\u305f\u3081\u3001SentencePiece\u306f\u30c8\u30fc\u30af\u30f3X\u306a\u3057\u306e\u30e2\u30c7\u30eb\u306e\u640d\u5931\u306e\u8fd1\u4f3c\u3092\u4f7f\u7528\u3057\u307e\u3059\uff1a\u4e00\u304b\u3089\u59cb\u3081\u308b\u4ee3\u308f\u308a\u306b\u3001\u6b8b\u3063\u3066\u3044\u308b\u8a9e\u5f59\u3067\u306e\u30c8\u30fc\u30af\u30f3X\u3092\u305d\u306e\u30bb\u30b0\u30e1\u30f3\u30c6\u30fc\u30b7\u30e7\u30f3\u306b\u7f6e\u304d\u63db\u3048\u308b\u3060\u3051\u3067\u3059\u3002\u3053\u306e\u3088\u3046\u306b\u3001\u3059\u3079\u3066\u306e\u30b9\u30b3\u30a2\u3092\u30e2\u30c7\u30eb\u640d\u5931\u3068\u540c\u6642\u306b\u4e00\u5ea6\u306b\u8a08\u7b97\u3067\u304d\u307e\u3059\u3002</p> <p>\u3059\u3079\u3066\u304c\u6574\u3063\u305f\u306e\u3067\u3001\u6700\u5f8c\u306b\u884c\u3046\u5fc5\u8981\u304c\u3042\u308b\u3053\u3068\u306f\u3001\u30e2\u30c7\u30eb\u3067\u4f7f\u7528\u3055\u308c\u308b\u7279\u5225\u306a\u30c8\u30fc\u30af\u30f3\u3092\u8a9e\u5f59\u306b\u8ffd\u52a0\u3057\u3001\u671b\u307e\u3057\u3044\u30b5\u30a4\u30ba\u306b\u9054\u3059\u308b\u307e\u3067\u8a9e\u5f59\u304b\u3089\u5341\u5206\u306a\u30c8\u30fc\u30af\u30f3\u3092\u526a\u5b9a\u3059\u308b\u307e\u3067\u30eb\u30fc\u30d7\u3059\u308b\u3053\u3068\u3067\u3059\uff1a</p> <pre><code>percent_to_remove = 0.1\nwhile len(model) &gt; 100:\n    scores = compute_scores(model)\n    sorted_scores = sorted(scores.items(), key=lambda x: x[1])\n    # \u6700\u4f4e\u30b9\u30b3\u30a2\u306epercent_to_remove\u30c8\u30fc\u30af\u30f3\u3092\u524a\u9664\n    for i in range(int(len(model) * percent_to_remove)):\n        _ = token_freqs.pop(sorted_scores[i][0])\n\n    total_sum = sum([freq for token, freq in token_freqs.items()])\n    model = {token: -log(freq / total_sum) for token, freq in token_freqs.items()}\n</code></pre> <p>\u6b21\u306b\u3001\u30c6\u30ad\u30b9\u30c8\u3092\u30c8\u30fc\u30af\u30f3\u5316\u3059\u308b\u306b\u306f\u3001\u524d\u51e6\u7406\u3092\u9069\u7528\u3057\u3066\u304b\u3089<code>encode_word()</code>\u95a2\u6570\u3092\u4f7f\u7528\u3059\u308b\u3060\u3051\u3067\u3059\uff1a</p> <pre><code>def tokenize(text, model):\n    words_with_offsets = tokenizer.backend_tokenizer.pre_tokenizer.pre_tokenize_str(text)\n    pre_tokenized_text = [word for word, offset in words_with_offsets]\n    encoded_words = [encode_word(word, model)[0] for word in pre_tokenized_text]\n    return sum(encoded_words, [])\n\nprint(tokenize(\"This is the Hugging Face course.\", model))\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>['\u2581This', '\u2581is', '\u2581the', '\u2581Hugging', '\u2581Face', '\u2581', 'c', 'ou', 'r', 's', 'e', '.']\n</code></pre></p> <p>Tip</p> <p>XLNetTokenizer\u306fSentencePiece\u3092\u4f7f\u7528\u3059\u308b\u305f\u3081\u3001<code>\"_\"</code>\u6587\u5b57\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002SentencePiece\u3067\u30c7\u30b3\u30fc\u30c9\u3059\u308b\u306b\u306f\u3001\u3059\u3079\u3066\u306e\u30c8\u30fc\u30af\u30f3\u3092\u9023\u7d50\u3057\u3066<code>\"_\"</code>\u3092\u30b9\u30da\u30fc\u30b9\u306b\u7f6e\u304d\u63db\u3048\u307e\u3059\u3002</p>","tags":["NLP","Transformers","Tokenizer","Hugging Face","\u6a5f\u68b0\u5b66\u7fd2","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","BPE","WordPiece"]},{"location":"LLM/04_the_huggingface_tokenizers_library/#_24","title":"\u30d6\u30ed\u30c3\u30af\u3054\u3068\u306e\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u69cb\u7bc9","text":"<p>\u524d\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u898b\u305f\u3088\u3046\u306b\u3001\u30c8\u30fc\u30af\u30f3\u5316\u306b\u306f\u3044\u304f\u3064\u304b\u306e\u30b9\u30c6\u30c3\u30d7\u304c\u542b\u307e\u308c\u307e\u3059\uff1a</p> <ul> <li>\u6b63\u898f\u5316\uff08\u5fc5\u8981\u3068\u601d\u308f\u308c\u308b\u30c6\u30ad\u30b9\u30c8\u306e\u30af\u30ea\u30fc\u30f3\u30a2\u30c3\u30d7\u3001\u30b9\u30da\u30fc\u30b9\u3084\u30a2\u30af\u30bb\u30f3\u30c8\u8a18\u53f7\u306e\u9664\u53bb\u3001Unicode\u6b63\u898f\u5316\u306a\u3069\uff09</li> <li>\u524d\u51e6\u7406\uff08\u5165\u529b\u3092\u5358\u8a9e\u306b\u5206\u5272\uff09</li> <li>\u30e2\u30c7\u30eb\u3092\u901a\u3058\u3066\u5165\u529b\u3092\u5b9f\u884c\uff08\u524d\u51e6\u7406\u3055\u308c\u305f\u5358\u8a9e\u3092\u4f7f\u7528\u3057\u3066\u30c8\u30fc\u30af\u30f3\u306e\u30b7\u30fc\u30b1\u30f3\u30b9\u3092\u751f\u6210\uff09</li> <li>\u5f8c\u51e6\u7406\uff08\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306e\u7279\u5225\u306a\u30c8\u30fc\u30af\u30f3\u306e\u8ffd\u52a0\u3001\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u30de\u30b9\u30af\u3068\u30c8\u30fc\u30af\u30f3\u30bf\u30a4\u30d7ID\u306e\u751f\u6210\uff09</li> </ul> <p>\u601d\u3044\u51fa\u3059\u305f\u3081\u306b\u3001\u5168\u4f53\u7684\u306a\u30d7\u30ed\u30bb\u30b9\u3092\u3082\u3046\u4e00\u5ea6\u898b\u3066\u307f\u307e\u3057\u3087\u3046\uff1a</p> <p></p> <p>Hugging Face Tokenizers\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u3001\u3053\u308c\u3089\u306e\u5404\u30b9\u30c6\u30c3\u30d7\u306b\u5bfe\u3057\u3066\u8907\u6570\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u63d0\u4f9b\u3059\u308b\u3088\u3046\u306b\u69cb\u7bc9\u3055\u308c\u3066\u304a\u308a\u3001\u305d\u308c\u3089\u3092\u7d44\u307f\u5408\u308f\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u306f\u3001\u53e4\u3044\u3082\u306e\u304b\u3089\u65b0\u3057\u3044\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3092\u8a13\u7df4\u3059\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u4e00\u304b\u3089\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3092\u69cb\u7bc9\u3059\u308b\u65b9\u6cd5\u3092\u898b\u3066\u3044\u304d\u307e\u3059\u3002\u601d\u3044\u4ed8\u304f\u3042\u3089\u3086\u308b\u7a2e\u985e\u306e\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3092\u69cb\u7bc9\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002</p> <p>\u3088\u308a\u6b63\u78ba\u306b\u306f\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u4e2d\u5fc3\u3068\u306a\u308b<code>Tokenizer</code>\u30af\u30e9\u30b9\u3092\u4e2d\u5fc3\u306b\u69cb\u7bc9\u3055\u308c\u3066\u304a\u308a\u3001\u69cb\u6210\u8981\u7d20\u304c\u30b5\u30d6\u30e2\u30b8\u30e5\u30fc\u30eb\u306b\u307e\u3068\u3081\u3089\u308c\u3066\u3044\u307e\u3059\uff1a</p> <ul> <li><code>normalizers</code>\u306f\u4f7f\u7528\u3067\u304d\u308b<code>Normalizer</code>\u306e\u3059\u3079\u3066\u306e\u53ef\u80fd\u306a\u30bf\u30a4\u30d7\u3092\u542b\u307f\u307e\u3059\uff08\u5b8c\u5168\u306a\u30ea\u30b9\u30c8\u306f\u3053\u3053\uff09\u3002</li> <li><code>pre_tokenizers</code>\u306f\u4f7f\u7528\u3067\u304d\u308b<code>PreTokenizer</code>\u306e\u3059\u3079\u3066\u306e\u53ef\u80fd\u306a\u30bf\u30a4\u30d7\u3092\u542b\u307f\u307e\u3059\uff08\u5b8c\u5168\u306a\u30ea\u30b9\u30c8\u306f\u3053\u3053\uff09\u3002</li> <li><code>models</code>\u306f<code>BPE</code>\u3001<code>WordPiece</code>\u3001<code>Unigram</code>\u306a\u3069\u306e\u4f7f\u7528\u3067\u304d\u308b\u69d8\u3005\u306a\u30bf\u30a4\u30d7\u306e<code>Model</code>\u3092\u542b\u307f\u307e\u3059\uff08\u5b8c\u5168\u306a\u30ea\u30b9\u30c8\u306f\u3053\u3053\uff09\u3002</li> <li><code>trainers</code>\u306f\u30b3\u30fc\u30d1\u30b9\u4e0a\u3067\u30e2\u30c7\u30eb\u3092\u8a13\u7df4\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3067\u304d\u308b\u3059\u3079\u3066\u306e\u7570\u306a\u308b\u30bf\u30a4\u30d7\u306e<code>Trainer</code>\u3092\u542b\u307f\u307e\u3059\uff08\u30e2\u30c7\u30eb\u306e\u30bf\u30a4\u30d7\u3054\u3068\u306b1\u3064\uff1b\u5b8c\u5168\u306a\u30ea\u30b9\u30c8\u306f\u3053\u3053\uff09\u3002</li> <li><code>post_processors</code>\u306f\u4f7f\u7528\u3067\u304d\u308b\u69d8\u3005\u306a\u30bf\u30a4\u30d7\u306e<code>PostProcessor</code>\u3092\u542b\u307f\u307e\u3059\uff08\u5b8c\u5168\u306a\u30ea\u30b9\u30c8\u306f\u3053\u3053\uff09\u3002</li> <li><code>decoders</code>\u306f\u30c8\u30fc\u30af\u30f3\u5316\u306e\u51fa\u529b\u3092\u30c7\u30b3\u30fc\u30c9\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3067\u304d\u308b\u69d8\u3005\u306a\u30bf\u30a4\u30d7\u306e<code>Decoder</code>\u3092\u542b\u307f\u307e\u3059\uff08\u5b8c\u5168\u306a\u30ea\u30b9\u30c8\u306f\u3053\u3053\uff09\u3002</li> </ul> <p>\u69cb\u6210\u8981\u7d20\u306e\u5b8c\u5168\u306a\u30ea\u30b9\u30c8\u306f\u3053\u3053\u3067\u898b\u3064\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p>","tags":["NLP","Transformers","Tokenizer","Hugging Face","\u6a5f\u68b0\u5b66\u7fd2","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","BPE","WordPiece"]},{"location":"LLM/04_the_huggingface_tokenizers_library/#_25","title":"\u30b3\u30fc\u30d1\u30b9\u306e\u53d6\u5f97","text":"<p>\u65b0\u3057\u3044\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3092\u8a13\u7df4\u3059\u308b\u305f\u3081\u306b\u3001\u30c6\u30ad\u30b9\u30c8\u306e\u5c0f\u3055\u306a\u30b3\u30fc\u30d1\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3059\uff08\u4f8b\u304c\u9ad8\u901f\u306b\u5b9f\u884c\u3055\u308c\u308b\u3088\u3046\u306b\uff09\u3002\u30b3\u30fc\u30d1\u30b9\u3092\u53d6\u5f97\u3059\u308b\u30b9\u30c6\u30c3\u30d7\u306f\u3001\u3053\u306e\u7ae0\u306e\u6700\u521d\u306b\u53d6\u3063\u305f\u3082\u306e\u3068\u4f3c\u3066\u3044\u307e\u3059\u304c\u3001\u4eca\u56de\u306fWikiText-2\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u4f7f\u7528\u3057\u307e\u3059\uff1a</p> <pre><code>from datasets import load_dataset\n\ndataset = load_dataset(\"wikitext\", name=\"wikitext-2-raw-v1\", split=\"train\")\n\ndef get_training_corpus():\n    for i in range(0, len(dataset), 1000):\n        yield dataset[i : i + 1000][\"text\"]\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>Generating test split: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 4358/4358 [00:00&lt;00:00, 780910.70 examples/s]\nGenerating train split: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 36718/36718 [00:00&lt;00:00, 2049920.86 examples/s]\nGenerating validation split: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3760/3760 [00:00&lt;00:00, 1191401.60 examples/s]\n</code></pre></p> <p>\u95a2\u6570<code>get_training_corpus()</code>\u306f\u3001\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3092\u8a13\u7df4\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3059\u308b1,000\u30c6\u30ad\u30b9\u30c8\u306e\u30d0\u30c3\u30c1\u3092\u751f\u6210\u3059\u308b\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u3067\u3059\u3002</p> <p>Hugging Face Tokenizers\u306f\u3001\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u3067\u3082\u76f4\u63a5\u8a13\u7df4\u3067\u304d\u307e\u3059\u3002WikiText-2\u304b\u3089\u306e\u3059\u3079\u3066\u306e\u30c6\u30ad\u30b9\u30c8/\u5165\u529b\u3092\u542b\u3080\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u30ed\u30fc\u30ab\u30eb\u3067\u4f7f\u7528\u3067\u304d\u308b\u3088\u3046\u306b\u751f\u6210\u3059\u308b\u65b9\u6cd5\u306f\u6b21\u306e\u3068\u304a\u308a\u3067\u3059\uff1a</p> <pre><code>with open(\"wikitext-2.txt\", \"w\", encoding=\"utf-8\") as f:\n    for i in range(len(dataset)):\n        f.write(dataset[i][\"text\"] + \"\\n\")\n</code></pre> <p>\u6b21\u306b\u3001\u72ec\u81ea\u306eBERT\u3001GPT-2\u3001XLNet\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3092\u30d6\u30ed\u30c3\u30af\u3054\u3068\u306b\u69cb\u7bc9\u3059\u308b\u65b9\u6cd5\u3092\u793a\u3057\u307e\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u30013\u3064\u306e\u4e3b\u8981\u306a\u30c8\u30fc\u30af\u30f3\u5316\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u305d\u308c\u305e\u308c\u306e\u4f8b\u304c\u5f97\u3089\u308c\u307e\u3059\uff1aWordPiece\u3001BPE\u3001Unigram\u3002BERT\u304b\u3089\u59cb\u3081\u307e\u3057\u3087\u3046\uff01</p>","tags":["NLP","Transformers","Tokenizer","Hugging Face","\u6a5f\u68b0\u5b66\u7fd2","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","BPE","WordPiece"]},{"location":"LLM/04_the_huggingface_tokenizers_library/#wordpiece_2","title":"WordPiece\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3092\u4e00\u304b\u3089\u69cb\u7bc9","text":"<p>Hugging Face Tokenizers\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3092\u69cb\u7bc9\u3059\u308b\u306b\u306f\u3001<code>model</code>\u3067<code>Tokenizer</code>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3057\u3066\u304b\u3089\u3001\u305d\u306e<code>normalizer</code>\u3001<code>pre_tokenizer</code>\u3001<code>post_processor</code>\u3001<code>decoder</code>\u5c5e\u6027\u3092\u6b32\u3057\u3044\u5024\u306b\u8a2d\u5b9a\u3057\u307e\u3059\u3002</p> <p>\u3053\u306e\u4f8b\u3067\u306f\u3001WordPiece\u30e2\u30c7\u30eb\u3067<code>Tokenizer</code>\u3092\u4f5c\u6210\u3057\u307e\u3059\uff1a</p> <pre><code>from tokenizers import (\n    decoders,\n    models,\n    normalizers,\n    pre_tokenizers,\n    processors,\n    trainers,\n    Tokenizer\n)\n\ntokenizer = Tokenizer(models.WordPiece(unk_token=\"[UNK]\"))\n</code></pre> <p>\u30e2\u30c7\u30eb\u304c\u4ee5\u524d\u306b\u898b\u305f\u3053\u3068\u306e\u306a\u3044\u6587\u5b57\u306b\u906d\u9047\u3057\u305f\u3068\u304d\u306b\u4f55\u3092\u8fd4\u3059\u304b\u304c\u308f\u304b\u308b\u3088\u3046\u306b\u3001<code>unk_token</code>\u3092\u6307\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u3053\u3067\u8a2d\u5b9a\u3067\u304d\u308b\u4ed6\u306e\u5f15\u6570\u306b\u306f\u3001\u30e2\u30c7\u30eb\u306e<code>vocab</code>\uff08\u30e2\u30c7\u30eb\u3092\u8a13\u7df4\u3059\u308b\u3064\u3082\u308a\u306a\u306e\u3067\u3001\u3053\u308c\u3092\u8a2d\u5b9a\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\uff09\u3084\u3001\u5404\u5358\u8a9e\u306e\u6700\u5927\u9577\u3092\u6307\u5b9a\u3059\u308b<code>max_input_chars_per_word</code>\u304c\u3042\u308a\u307e\u3059\uff08\u6e21\u3055\u308c\u305f\u5024\u3088\u308a\u9577\u3044\u5358\u8a9e\u306f\u5206\u5272\u3055\u308c\u307e\u3059\uff09\u3002</p> <p>\u30c8\u30fc\u30af\u30f3\u5316\u306e\u6700\u521d\u306e\u30b9\u30c6\u30c3\u30d7\u306f\u6b63\u898f\u5316\u306a\u306e\u3067\u3001\u305d\u308c\u304b\u3089\u59cb\u3081\u307e\u3057\u3087\u3046\u3002BERT\u306f\u5e83\u304f\u4f7f\u7528\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3001BERT\u306b\u8a2d\u5b9a\u3067\u304d\u308b\u53e4\u5178\u7684\u306a\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u6301\u3064<code>BertNormalizer</code>\u304c\u3042\u308a\u307e\u3059\uff1a<code>lowercase</code>\u3068<code>strip_accents</code>\u306f\u81ea\u660e\u3067\u3001<code>clean_text</code>\u306f\u3059\u3079\u3066\u306e\u5236\u5fa1\u6587\u5b57\u3092\u524a\u9664\u3057\u3001\u7e70\u308a\u8fd4\u3057\u30b9\u30da\u30fc\u30b9\u30921\u3064\u306b\u7f6e\u304d\u63db\u3048\u3001<code>handle_chinese_chars</code>\u306f\u4e2d\u56fd\u8a9e\u6587\u5b57\u306e\u5468\u308a\u306b\u30b9\u30da\u30fc\u30b9\u3092\u914d\u7f6e\u3057\u307e\u3059\u3002<code>bert-base-uncased</code>\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3092\u8907\u88fd\u3059\u308b\u305f\u3081\u306b\u3001\u3053\u306e\u6b63\u898f\u5316\u5668\u3092\u8a2d\u5b9a\u3067\u304d\u307e\u3059\uff1a</p> <pre><code>tokenizer.normalizer = normalizers.BertNormalizer(lowercase=True)\n</code></pre> <p>\u3057\u304b\u3057\u3001\u4e00\u822c\u7684\u306b\u8a00\u3048\u3070\u3001\u65b0\u3057\u3044\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3092\u69cb\u7bc9\u3059\u308b\u969b\u3001Hugging Face Tokenizers\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u65e2\u306b\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u305d\u306e\u3088\u3046\u306a\u4fbf\u5229\u306a\u6b63\u898f\u5316\u5668\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u306a\u3044\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\u624b\u3067BERT\u6b63\u898f\u5316\u5668\u3092\u4f5c\u6210\u3059\u308b\u65b9\u6cd5\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u30e9\u30a4\u30d6\u30e9\u30ea\u306f<code>Lowercase</code>\u6b63\u898f\u5316\u5668\u3068<code>StripAccents</code>\u6b63\u898f\u5316\u5668\u3092\u63d0\u4f9b\u3057\u3001<code>Sequence</code>\u3092\u4f7f\u7528\u3057\u3066\u8907\u6570\u306e\u6b63\u898f\u5316\u5668\u3092\u69cb\u6210\u3067\u304d\u307e\u3059\uff1a</p> <pre><code>tokenizer.normalizer = normalizers.Sequence(\n    [normalizers.NFD(), normalizers.Lowercase(), normalizers.StripAccents()]\n)\n</code></pre> <p>\u307e\u305f\u3001<code>StripAccents</code>\u6b63\u898f\u5316\u5668\u304c\u30a2\u30af\u30bb\u30f3\u30c8\u4ed8\u304d\u6587\u5b57\u3092\u9069\u5207\u306b\u8a8d\u8b58\u3057\u3066\u305d\u308c\u3089\u3092\u524a\u9664\u3057\u306a\u3044\u305f\u3081\u3001<code>NFD</code> Unicode\u6b63\u898f\u5316\u5668\u3082\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002</p> <p>\u524d\u8ff0\u306e\u3068\u304a\u308a\u3001<code>normalizer</code>\u306e<code>normalize_str()</code>\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3057\u3066\u3001\u7279\u5b9a\u306e\u30c6\u30ad\u30b9\u30c8\u306b\u5bfe\u3059\u308b\u52b9\u679c\u3092\u78ba\u8a8d\u3067\u304d\u307e\u3059\uff1a</p> <pre><code>print(tokenizer.normalizer.normalize_str(\"H\u00e9ll\u00f2 h\u00f4w are \u00fc?\"))\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>hello how are u?\n</code></pre></p> <p>\u6b63\u898f\u5316\u5668\u306e\u540c\u7b49\u6027\u306b\u3064\u3044\u3066</p> <p>\u6587\u5b57\u5217<code>u\"\\u0085\"</code>\u3092\u542b\u3080\u6587\u5b57\u5217\u3067\u524d\u306e\u6b63\u898f\u5316\u5668\u306e2\u3064\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u30c6\u30b9\u30c8\u3059\u308b\u5834\u5408\u3001\u3053\u308c\u30892\u3064\u306e\u6b63\u898f\u5316\u5668\u306f\u5b8c\u5168\u306b\u540c\u7b49\u3067\u306f\u306a\u3044\u3053\u3068\u306b\u6c17\u4ed8\u304f\u3067\u3057\u3087\u3046\u3002<code>normalizers.Sequence</code>\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u3042\u307e\u308a\u8907\u96d1\u306b\u3057\u306a\u3044\u305f\u3081\u306b\u3001<code>clean_text</code>\u5f15\u6570\u304c<code>True</code>\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408\uff08\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u52d5\u4f5c\uff09\u306b<code>BertNormalizer</code>\u304c\u5fc5\u8981\u3068\u3059\u308bRegex\u7f6e\u63db\u3092\u542b\u3081\u3066\u3044\u307e\u305b\u3093\u3002\u3057\u304b\u3057\u5fc3\u914d\u3057\u306a\u3044\u3067\u304f\u3060\u3055\u3044\uff1a\u4fbf\u5229\u306a<code>BertNormalizer</code>\u3092\u4f7f\u7528\u305b\u305a\u306b\u307e\u3063\u305f\u304f\u540c\u3058\u6b63\u898f\u5316\u3092\u5f97\u308b\u3053\u3068\u306f\u53ef\u80fd\u3067\u3001\u6b63\u898f\u5316\u5668\u30b7\u30fc\u30b1\u30f3\u30b9\u306b2\u3064\u306e<code>normalizers.Replace</code>\u3092\u8ffd\u52a0\u3059\u308b\u3060\u3051\u3067\u3059\u3002</p> <p>\u6b21\u306f\u524d\u51e6\u7406\u30b9\u30c6\u30c3\u30d7\u3067\u3059\u3002\u3053\u3053\u3067\u3082\u3001\u4f7f\u7528\u3067\u304d\u308b\u4e8b\u524d\u69cb\u7bc9\u3055\u308c\u305f<code>BertPreTokenizer</code>\u304c\u3042\u308a\u307e\u3059\uff1a</p> <pre><code>tokenizer.pre_tokenizer = pre_tokenizers.BertPreTokenizer()\n</code></pre> <p>\u307e\u305f\u306f\u3001\u4e00\u304b\u3089\u69cb\u7bc9\u3067\u304d\u307e\u3059\uff1a</p> <pre><code>tokenizer.pre_tokenizer = pre_tokenizers.Whitespace()\n</code></pre> <p><code>Whitespace</code>\u524d\u51e6\u7406\u5668\u306f\u7a7a\u767d\u304a\u3088\u3073\u3059\u3079\u3066\u306e\u6587\u5b57\u3001\u6570\u5b57\u3001\u30a2\u30f3\u30c0\u30fc\u30b9\u30b3\u30a2\u6587\u5b57\u4ee5\u5916\u306e\u6587\u5b57\u3067\u5206\u5272\u3059\u308b\u305f\u3081\u3001\u6280\u8853\u7684\u306b\u306f\u7a7a\u767d\u3068\u53e5\u8aad\u70b9\u3067\u5206\u5272\u3057\u307e\u3059\uff1a</p> <pre><code>tokenizer.pre_tokenizer.pre_tokenize_str(\"Let's test my pre-tokenizer.\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>[('Let', (0, 3)),\n (\"'\", (3, 4)),\n ('s', (4, 5)),\n ('test', (6, 10)),\n ('my', (11, 13)),\n ('pre', (14, 17)),\n ('-', (17, 18)),\n ('tokenizer', (18, 27)),\n ('.', (27, 28))]\n</code></pre></p> <p>\u7a7a\u767d\u3067\u306e\u307f\u5206\u5272\u3057\u305f\u3044\u5834\u5408\u306f\u3001\u4ee3\u308f\u308a\u306b<code>WhitespaceSplit</code>\u524d\u51e6\u7406\u5668\u3092\u4f7f\u7528\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff1a</p> <pre><code>pre_tokenizer = pre_tokenizers.WhitespaceSplit()\npre_tokenizer.pre_tokenize_str(\"Let's test my pre-tokenizer.\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>[(\"Let's\", (0, 5)),\n ('test', (6, 10)),\n ('my', (11, 13)),\n ('pre-tokenizer.', (14, 28))]\n</code></pre></p> <p>\u6b63\u898f\u5316\u5668\u3068\u540c\u69d8\u306b\u3001<code>Sequence</code>\u3092\u4f7f\u7528\u3057\u3066\u8907\u6570\u306e\u524d\u51e6\u7406\u5668\u3092\u69cb\u6210\u3067\u304d\u307e\u3059\uff1a</p> <pre><code>pre_tokenizer = pre_tokenizers.Sequence(\n    [pre_tokenizers.WhitespaceSplit(), pre_tokenizers.Punctuation()]\n)\npre_tokenizer.pre_tokenize_str(\"Let's test my pre-tokenizer.\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>[('Let', (0, 3)),\n (\"'\", (3, 4)),\n ('s', (4, 5)),\n ('test', (6, 10)),\n ('my', (11, 13)),\n ('pre', (14, 17)),\n ('-', (17, 18)),\n ('tokenizer', (18, 27)),\n ('.', (27, 28))]\n</code></pre></p> <p>\u30c8\u30fc\u30af\u30f3\u5316\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306e\u6b21\u306e\u30b9\u30c6\u30c3\u30d7\u306f\u3001\u30e2\u30c7\u30eb\u3092\u901a\u3058\u3066\u5165\u529b\u3092\u5b9f\u884c\u3059\u308b\u3053\u3068\u3067\u3059\u3002\u521d\u671f\u5316\u3067\u30e2\u30c7\u30eb\u3092\u65e2\u306b\u6307\u5b9a\u3057\u307e\u3057\u305f\u304c\u3001\u307e\u3060\u8a13\u7df4\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u306b\u306f<code>WordPieceTrainer</code>\u304c\u5fc5\u8981\u3067\u3059\u3002Hugging Face Tokenizers\u3067\u30c8\u30ec\u30fc\u30ca\u30fc\u3092\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3059\u308b\u969b\u306b\u899a\u3048\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308b\u4e3b\u306a\u3053\u3068\u306f\u3001\u4f7f\u7528\u3059\u308b\u3064\u3082\u308a\u306e\u3059\u3079\u3066\u306e\u7279\u5225\u306a\u30c8\u30fc\u30af\u30f3\u3092\u6e21\u3059\u5fc5\u8981\u304c\u3042\u308b\u3053\u3068\u3067\u3059\u3002\u305d\u3046\u3057\u306a\u3044\u3068\u3001\u8a13\u7df4\u30b3\u30fc\u30d1\u30b9\u306b\u306a\u3044\u305f\u3081\u3001\u8a9e\u5f59\u306b\u8ffd\u52a0\u3055\u308c\u307e\u305b\u3093\uff1a</p> <pre><code>special_tokens = [\"[UNK]\", \"[PAD]\", \"[CLS]\", \"[SEP]\", \"[MASK]\"]\ntrainer = trainers.WordPieceTrainer(vocab_size=25000, special_tokens=special_tokens)\n</code></pre> <p><code>vocab_size</code>\u3068<code>special_tokens</code>\u306e\u6307\u5b9a\u306b\u52a0\u3048\u3066\u3001<code>min_frequency</code>\uff08\u8a9e\u5f59\u306b\u542b\u307e\u308c\u308b\u305f\u3081\u306b\u30c8\u30fc\u30af\u30f3\u304c\u51fa\u73fe\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u56de\u6570\uff09\u3092\u8a2d\u5b9a\u3057\u305f\u308a\u3001<code>continuing_subword_prefix</code>\u3092\u5909\u66f4\u3057\u305f\u308a\u3067\u304d\u307e\u3059\uff08<code>##</code>\u4ee5\u5916\u306e\u4f55\u304b\u3092\u4f7f\u7528\u3057\u305f\u3044\u5834\u5408\uff09\u3002</p> <p>\u524d\u306b\u5b9a\u7fa9\u3057\u305f\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u4f7f\u7528\u3057\u3066\u30e2\u30c7\u30eb\u3092\u8a13\u7df4\u3059\u308b\u306b\u306f\u3001\u3053\u306e\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3059\u308b\u3060\u3051\u3067\u3059\uff1a</p> <pre><code>tokenizer.train_from_iterator(get_training_corpus(), trainer=trainer)\n</code></pre> <p>\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u4f7f\u7528\u3057\u3066\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3092\u8a13\u7df4\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff08\u4e8b\u524d\u306b\u7a7a\u306e<code>WordPiece</code>\u3067\u30e2\u30c7\u30eb\u3092\u518d\u521d\u671f\u5316\u3057\u307e\u3059\uff09\uff1a</p> <pre><code># tokenizer.model = models.WordPiece(unk_token=\"[UNK]\")\n# tokenizer.train([\"wikitext-2.txt\"], trainer=trainer)\n</code></pre> <p>\u3069\u3061\u3089\u306e\u5834\u5408\u3067\u3082\u3001<code>encode()</code>\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3057\u3066\u30c6\u30ad\u30b9\u30c8\u3067\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3092\u30c6\u30b9\u30c8\u3067\u304d\u307e\u3059\uff1a</p> <pre><code>encoding = tokenizer.encode(\"Let's test this tokenizer.\")\nprint(encoding.tokens)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>['[CLS]', 'let', \"'\", 's', 'test', 'this', 'tok', '##eni', '##zer', '.', '[SEP]']\n</code></pre></p> <p>\u53d6\u5f97\u3055\u308c\u308b<code>encoding</code>\u306f<code>Encoding</code>\u3067\u3001\u69d8\u3005\u306a\u5c5e\u6027\u3067\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306e\u5fc5\u8981\u306a\u3059\u3079\u3066\u306e\u51fa\u529b\u3092\u542b\u3093\u3067\u3044\u307e\u3059\uff1a<code>ids</code>\u3001<code>type_ids</code>\u3001<code>tokens</code>\u3001<code>offsets</code>\u3001<code>attention_mask</code>\u3001<code>special_tokens_mask</code>\u3001<code>overflowing</code>\u3002</p> <p>\u30c8\u30fc\u30af\u30f3\u5316\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306e\u6700\u5f8c\u306e\u30b9\u30c6\u30c3\u30d7\u306f\u5f8c\u51e6\u7406\u3067\u3059\u3002\u6700\u521d\u306b<code>[CLS]</code>\u30c8\u30fc\u30af\u30f3\u3092\u8ffd\u52a0\u3057\u3001\u6700\u5f8c\u306b<code>[SEP]</code>\u30c8\u30fc\u30af\u30f3\u3092\u8ffd\u52a0\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff08\u307e\u305f\u306f\u6587\u306e\u30da\u30a2\u304c\u3042\u308b\u5834\u5408\u306f\u5404\u6587\u306e\u5f8c\uff09\u3002\u3053\u308c\u306b\u306f<code>TemplateProcessor</code>\u3092\u4f7f\u7528\u3057\u307e\u3059\u304c\u3001\u307e\u305a\u8a9e\u5f59\u5185\u306e<code>[CLS]</code>\u3068<code>[SEP]</code>\u30c8\u30fc\u30af\u30f3\u306eID\u3092\u77e5\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff1a</p> <pre><code>cls_token_id = tokenizer.token_to_id(\"[CLS]\")\nsep_token_id = tokenizer.token_to_id(\"[SEP]\")\nprint(cls_token_id, sep_token_id)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>2 3\n</code></pre></p> <p><code>TemplateProcessor</code>\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u66f8\u304f\u306b\u306f\u3001\u5358\u4e00\u6587\u3068\u6587\u306e\u30da\u30a2\u3092\u3069\u306e\u3088\u3046\u306b\u6271\u3046\u304b\u3092\u6307\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u4e21\u65b9\u306b\u3064\u3044\u3066\u3001\u4f7f\u7528\u3057\u305f\u3044\u7279\u5225\u306a\u30c8\u30fc\u30af\u30f3\u3092\u66f8\u304d\u307e\u3059\uff1b\u6700\u521d\u306e\uff08\u307e\u305f\u306f\u5358\u4e00\u306e\uff09\u6587\u306f<code>$A</code>\u3067\u8868\u3055\u308c\u30012\u756a\u76ee\u306e\u6587\uff08\u30da\u30a2\u3092\u30a8\u30f3\u30b3\u30fc\u30c9\u3059\u308b\u5834\u5408\uff09\u306f<code>$B</code>\u3067\u8868\u3055\u308c\u307e\u3059\u3002\u3053\u308c\u3089\u306e\u305d\u308c\u305e\u308c\uff08\u7279\u5225\u306a\u30c8\u30fc\u30af\u30f3\u3068\u6587\uff09\u306b\u3064\u3044\u3066\u3001\u30b3\u30ed\u30f3\u306e\u5f8c\u306b\u5bfe\u5fdc\u3059\u308b\u30c8\u30fc\u30af\u30f3\u30bf\u30a4\u30d7ID\u3082\u6307\u5b9a\u3057\u307e\u3059\u3002</p> <p>\u5178\u578b\u7684\u306aBERT\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306f\u6b21\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3055\u308c\u307e\u3059\uff1a</p> <pre><code>tokenizer.post_processor = processors.TemplateProcessing(\n    single=f\"[CLS]:0 $A:0 [SEP]:0\",\n    pair=f\"[CLS]:0 $A:0 [SEP]:0 $B:1 [SEP]:1\",\n    special_tokens=[(\"[CLS]\", cls_token_id), (\"[SEP]\", sep_token_id)],\n)\n</code></pre> <p>\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u304c\u7279\u5225\u306a\u30c8\u30fc\u30af\u30f3\u3092\u9069\u5207\u306b\u305d\u306eID\u306b\u5909\u63db\u3067\u304d\u308b\u3088\u3046\u306b\u3001\u7279\u5225\u306a\u30c8\u30fc\u30af\u30f3\u306eID\u3092\u6e21\u3059\u5fc5\u8981\u304c\u3042\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <p>\u3053\u308c\u304c\u8ffd\u52a0\u3055\u308c\u308b\u3068\u3001\u524d\u306e\u4f8b\u306b\u623b\u308b\u3068\u6b21\u304c\u5f97\u3089\u308c\u307e\u3059\uff1a</p> <pre><code>encoding = tokenizer.encode(\"Let's test this tokenizer.\")\nprint(encoding.tokens)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>['[CLS]', 'let', \"'\", 's', 'test', 'this', 'tok', '##eni', '##zer', '.', '[SEP]']\n</code></pre></p> <p>\u6587\u306e\u30da\u30a2\u3067\u306f\u3001\u9069\u5207\u306a\u7d50\u679c\u304c\u5f97\u3089\u308c\u307e\u3059\uff1a</p> <pre><code>encoding = tokenizer.encode(\"Let's test this tokenizer...\", \"on a pair of sentences.\")\nprint(encoding)\nprint(encoding.tokens)\nprint(encoding.type_ids)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>Encoding(num_tokens=18, attributes=[ids, type_ids, tokens, offsets, attention_mask, special_tokens_mask, overflowing])\n['[CLS]', 'let', \"'\", 's', 'test', 'this', 'tok', '##eni', '##zer', '...', '[SEP]', 'on', 'a', 'pair', 'of', 'sentences', '.', '[SEP]']\n[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1]\n</code></pre></p> <p>\u3053\u306e\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3092\u4e00\u304b\u3089\u69cb\u7bc9\u3059\u308b\u306e\u306f\u307b\u307c\u7d42\u4e86\u3057\u307e\u3057\u305f\u3002\u6700\u5f8c\u306e\u30b9\u30c6\u30c3\u30d7\u306f\u30c7\u30b3\u30fc\u30c0\u30fc\u3092\u542b\u3081\u308b\u3053\u3068\u3067\u3059\uff1a</p> <pre><code>tokenizer.decoder = decoders.WordPiece(prefix=\"##\")\n</code></pre> <p>\u524d\u306e<code>encoding</code>\u3067\u30c6\u30b9\u30c8\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff1a</p> <pre><code>tokenizer.decode(encoding.ids)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>\"let ' s test this tokenizer... on a pair of sentences.\"\n</code></pre></p> <p>\u7d20\u6674\u3089\u3057\u3044\uff01\u3053\u306e\u3088\u3046\u306b\u5358\u4e00\u306eJSON\u30d5\u30a1\u30a4\u30eb\u3067\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3092\u4fdd\u5b58\u3067\u304d\u307e\u3059\uff1a</p> <pre><code>tokenizer.save(\"tokenizer.json\")\n</code></pre> <p>\u305d\u306e\u5f8c\u3001<code>from_file()</code>\u30e1\u30bd\u30c3\u30c9\u3067<code>Tokenizer</code>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u305d\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u518d\u8aad\u307f\u8fbc\u307f\u3067\u304d\u307e\u3059\uff1a</p> <pre><code>new_tokenizer = Tokenizer.from_file(\"tokenizer.json\")\n\nnew_encoding = new_tokenizer.encode(\"Let's test this tokenizer...\", \"on a pair of sentences.\")\n\nprint(new_encoding.tokens)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>['[CLS]', 'let', \"'\", 's', 'test', 'this', 'tok', '##eni', '##zer', '...', '[SEP]', 'on', 'a', 'pair', 'of', 'sentences', '.', '[SEP]']\n</code></pre></p> <p>Hugging Face Transformers\u3067\u3053\u306e\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3092\u4f7f\u7528\u3059\u308b\u306b\u306f\u3001<code>PreTrainedTokenizerFast</code>\u3067\u30e9\u30c3\u30d7\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u6c4e\u7528\u30af\u30e9\u30b9\u3092\u4f7f\u7528\u3059\u308b\u304b\u3001\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u304c\u65e2\u5b58\u306e\u30e2\u30c7\u30eb\u306b\u5bfe\u5fdc\u3059\u308b\u5834\u5408\u306f\u305d\u306e\u30af\u30e9\u30b9\u3092\u4f7f\u7528\u3067\u304d\u307e\u3059\uff08\u3053\u3053\u3067\u306f<code>BertTokenizerFast</code>\uff09\u3002\u307e\u3063\u305f\u304f\u65b0\u3057\u3044\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3092\u69cb\u7bc9\u3059\u308b\u305f\u3081\u306b\u3053\u306e\u30ec\u30c3\u30b9\u30f3\u3092\u9069\u7528\u3059\u308b\u5834\u5408\u306f\u3001\u6700\u521d\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u4f7f\u7528\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002</p> <p><code>PreTrainedTokenizerFast</code>\u3067\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3092\u30e9\u30c3\u30d7\u3059\u308b\u306b\u306f\u3001\u69cb\u7bc9\u3057\u305f\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3092<code>tokenizer_object</code>\u3068\u3057\u3066\u6e21\u3059\u304b\u3001\u4fdd\u5b58\u3057\u305f\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u30d5\u30a1\u30a4\u30eb\u3092<code>tokenizer_file</code>\u3068\u3057\u3066\u6e21\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u899a\u3048\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308b\u91cd\u8981\u306a\u3053\u3068\u306f\u3001\u305d\u306e\u30af\u30e9\u30b9\u304c<code>tokenizer</code>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304b\u3089\u3069\u306e\u30c8\u30fc\u30af\u30f3\u304c\u30de\u30b9\u30af\u30c8\u30fc\u30af\u30f3\u3067\u3001<code>[CLS]</code>\u30c8\u30fc\u30af\u30f3\u306a\u3069\u304b\u3092\u63a8\u6e2c\u3067\u304d\u306a\u3044\u305f\u3081\u3001\u3059\u3079\u3066\u306e\u7279\u5225\u306a\u30c8\u30fc\u30af\u30f3\u3092\u624b\u52d5\u3067\u8a2d\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3053\u3068\u3067\u3059\uff1a</p> <pre><code>from transformers import PreTrainedTokenizerFast\n\nwrapped_tokenizer = PreTrainedTokenizerFast(\n    tokenizer_object=tokenizer,\n    # tokenizer_file=\"tokenizer.json\", # \u307e\u305f\u306f\u3001\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u8aad\u307f\u8fbc\u307f\n    unk_token=\"[UNK]\",\n    pad_token=\"[PAD]\",\n    cls_token=\"[CLS]\",\n    sep_token=\"[SEP]\",\n    mask_token=\"[MASK]\",\n)\n</code></pre> <p>\u7279\u5b9a\u306e\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u30af\u30e9\u30b9\uff08<code>BertTokenizerFast</code>\u306a\u3069\uff09\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u5834\u5408\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3068\u7570\u306a\u308b\u7279\u5225\u306a\u30c8\u30fc\u30af\u30f3\u306e\u307f\u3092\u6307\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff08\u3053\u3053\u3067\u306f\u4f55\u3082\u3042\u308a\u307e\u305b\u3093\uff09\uff1a</p> <pre><code>from transformers import BertTokenizerFast\n\nwrapped_tokenizer = BertTokenizerFast(tokenizer_object=tokenizer)\n</code></pre> <p>\u3053\u306e\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3092\u4ed6\u306eHugging Face Transformers\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3068\u540c\u3058\u3088\u3046\u306b\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002<code>save_pretrained()</code>\u30e1\u30bd\u30c3\u30c9\u3067\u4fdd\u5b58\u3067\u304d\u307e\u3059\u3002</p>","tags":["NLP","Transformers","Tokenizer","Hugging Face","\u6a5f\u68b0\u5b66\u7fd2","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","BPE","WordPiece"]},{"location":"LLM/04_the_huggingface_tokenizers_library/#bpe_1","title":"BPE\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3092\u4e00\u304b\u3089\u69cb\u7bc9","text":"<p>GPT-2\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3092\u69cb\u7bc9\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002BERT\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3068\u540c\u69d8\u306b\u3001BPE\u30e2\u30c7\u30eb\u3067<code>Tokenizer</code>\u3092\u521d\u671f\u5316\u3059\u308b\u3053\u3068\u304b\u3089\u59cb\u3081\u307e\u3059\uff1a</p> <pre><code>tokenizer = Tokenizer(models.BPE())\n</code></pre> <p>BERT\u3068\u540c\u69d8\u306b\u3001\u8a9e\u5f59\u304c\u3042\u308b\u5834\u5408\u306f\u3053\u306e\u30e2\u30c7\u30eb\u3092\u521d\u671f\u5316\u3067\u304d\u307e\u3059\uff08\u3053\u306e\u5834\u5408\u306f<code>vocab</code>\u3068<code>merges</code>\u3092\u6e21\u3059\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff09\u304c\u3001\u4e00\u304b\u3089\u8a13\u7df4\u3059\u308b\u305f\u3081\u3001\u3053\u308c\u3092\u884c\u3046\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002GPT-2\u306f\u30d0\u30a4\u30c8\u30ec\u30d9\u30ebBPE\u3092\u4f7f\u7528\u3059\u308b\u305f\u3081\u3001<code>unk_token</code>\u3092\u6307\u5b9a\u3059\u308b\u5fc5\u8981\u3082\u3042\u308a\u307e\u305b\u3093\u3002</p> <p>GPT-2\u306f\u6b63\u898f\u5316\u5668\u3092\u4f7f\u7528\u3057\u306a\u3044\u305f\u3081\u3001\u305d\u306e\u30b9\u30c6\u30c3\u30d7\u3092\u30b9\u30ad\u30c3\u30d7\u3057\u3066\u524d\u51e6\u7406\u306b\u76f4\u63a5\u9032\u307f\u307e\u3059\uff1a</p> <pre><code>tokenizer.pre_tokenizer = pre_tokenizers.ByteLevel(add_prefix_space=False)\n</code></pre> <p>\u3053\u3053\u3067<code>ByteLevel</code>\u306b\u8ffd\u52a0\u3057\u305f\u30aa\u30d7\u30b7\u30e7\u30f3\u306f\u3001\u6587\u306e\u6700\u521d\u306b\u30b9\u30da\u30fc\u30b9\u3092\u8ffd\u52a0\u3057\u306a\u3044\u3053\u3068\u3067\u3059\uff08\u305d\u3046\u3057\u306a\u3044\u3068\u30c7\u30d5\u30a9\u30eb\u30c8\u306b\u306a\u308a\u307e\u3059\uff09\u3002\u524d\u3068\u540c\u69d8\u306b\u3001\u4f8b\u306e\u30c6\u30ad\u30b9\u30c8\u306e\u524d\u51e6\u7406\u3092\u78ba\u8a8d\u3067\u304d\u307e\u3059\uff1a</p> <pre><code>tokenizer.pre_tokenizer.pre_tokenize_str(\"Let's test pre-tokenization!\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>[('Let', (0, 3)),\n (\"'s\", (3, 5)),\n ('\u0120 test', (5, 10)),\n ('\u0120 pre', (10, 14)),\n ('-', (14, 15)),\n ('tokenization', (15, 27)),\n ('!', (27, 28))]\n</code></pre></p> <p>\u6b21\u306f\u30e2\u30c7\u30eb\u3067\u3001\u3053\u308c\u306b\u306f\u8a13\u7df4\u304c\u5fc5\u8981\u3067\u3059\u3002GPT-2\u306e\u5834\u5408\u3001\u552f\u4e00\u306e\u7279\u5225\u306a\u30c8\u30fc\u30af\u30f3\u306fend-of-text\u30c8\u30fc\u30af\u30f3\u3067\u3059\uff1a</p> <pre><code>trainer = trainers.BpeTrainer(vocab_size=25000, special_tokens=[\"&lt;|endoftext|&gt;\"])\ntokenizer.train_from_iterator(get_training_corpus(), trainer=trainer)\n</code></pre> <p><code>WordPieceTrainer</code>\u3068\u540c\u69d8\u306b\u3001<code>vocab_size</code>\u3068<code>special_tokens</code>\u306b\u52a0\u3048\u3066\u3001\u671b\u3080\u5834\u5408\u306f<code>min_frequency</code>\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002\u307e\u305f\u306f\u3001\u5358\u8a9e\u7d42\u4e86\u30b5\u30d5\u30a3\u30c3\u30af\u30b9\uff08<code>&lt;/w&gt;</code>\u306a\u3069\uff09\u304c\u3042\u308b\u5834\u5408\u3001<code>end_of_word_suffix</code>\u3067\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002</p> <p>\u3053\u306e\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306f\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u3067\u3082\u8a13\u7df4\u3067\u304d\u307e\u3059\uff1a</p> <pre><code># tokenizer.model = models.BPE()\n# tokenizer.train([\"wikitext-2.txt\"], trainer=trainer)\n</code></pre> <p>\u30b5\u30f3\u30d7\u30eb\u30c6\u30ad\u30b9\u30c8\u306e\u30c8\u30fc\u30af\u30f3\u5316\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\uff1a</p> <pre><code>encoding = tokenizer.encode(\"Let's test this tokenizer.\")\nprint(encoding.tokens)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>['L', 'et', \"'\", 's', '\u0120 test', '\u0120 this', '\u0120 token', 'izer', '.']\n</code></pre></p> <p>GPT-2\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306b\u30d0\u30a4\u30c8\u30ec\u30d9\u30eb\u5f8c\u51e6\u7406\u3092\u9069\u7528\u3057\u307e\u3059\uff1a</p> <pre><code>tokenizer.post_processor = processors.ByteLevel(trim_offsets=False)\n</code></pre> <p><code>trim_offsets = False</code>\u30aa\u30d7\u30b7\u30e7\u30f3\u306f\u3001\u5f8c\u51e6\u7406\u5668\u306b\u300c\u0120\u300d\u3067\u59cb\u307e\u308b\u30c8\u30fc\u30af\u30f3\u306e\u30aa\u30d5\u30bb\u30c3\u30c8\u3092\u305d\u306e\u307e\u307e\u306b\u3057\u3066\u304a\u304f\u3088\u3046\u306b\u6307\u793a\u3057\u307e\u3059\uff1a\u3053\u306e\u3088\u3046\u306b\u3001\u30aa\u30d5\u30bb\u30c3\u30c8\u306e\u958b\u59cb\u306f\u5358\u8a9e\u306e\u6700\u521d\u306e\u6587\u5b57\u3067\u306f\u306a\u304f\u3001\u5358\u8a9e\u306e\u524d\u306e\u30b9\u30da\u30fc\u30b9\u3092\u6307\u3059\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff08\u30b9\u30da\u30fc\u30b9\u306f\u6280\u8853\u7684\u306b\u306f\u30c8\u30fc\u30af\u30f3\u306e\u4e00\u90e8\u3067\u3042\u308b\u305f\u3081\uff09\u3002\u30a8\u30f3\u30b3\u30fc\u30c9\u3057\u305f\u3070\u304b\u308a\u306e\u30c6\u30ad\u30b9\u30c8\u3067\u306e\u7d50\u679c\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u3053\u3053\u3067\u3001<code>'\u0120 test'</code>\u306f\u30a4\u30f3\u30c7\u30c3\u30af\u30b94\u306e\u30c8\u30fc\u30af\u30f3\u3067\u3059\uff1a</p> <pre><code>sentence = \"Let's test this tokenizer.\"\nencoding = tokenizer.encode(sentence)\nstart, end = encoding.offsets[4]\nsentence[start:end]\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>' test'\n</code></pre></p> <p>\u6700\u5f8c\u306b\u3001\u30d0\u30a4\u30c8\u30ec\u30d9\u30eb\u30c7\u30b3\u30fc\u30c0\u30fc\u3092\u8ffd\u52a0\u3057\u307e\u3059\uff1a</p> <pre><code>tokenizer.decoder = decoders.ByteLevel()\ndecoded_text = tokenizer.decode(encoding.ids)\nprint(f\"Decoded: {decoded_text}\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>Decoded: Let's test this tokenizer.\n</code></pre></p> <p>\u7d20\u6674\u3089\u3057\u3044\uff01\u5b8c\u4e86\u3057\u305f\u306e\u3067\u3001\u524d\u3068\u540c\u3058\u3088\u3046\u306b\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3092\u4fdd\u5b58\u3057\u3001Hugging Face Transformers\u3067\u4f7f\u7528\u3057\u305f\u3044\u5834\u5408\u306f<code>PreTrainedTokenizerFast</code>\u307e\u305f\u306f<code>GPT2TokenizerFast</code>\u3067\u30e9\u30c3\u30d7\u3067\u304d\u307e\u3059\uff1a</p> <pre><code>from transformers import PreTrainedTokenizerFast\n\nwrapped_tokenizer = PreTrainedTokenizerFast(\n    tokenizer_object=tokenizer,\n    bos_token=\"&lt;|endoftext|&gt;\",\n    eos_token=\"&lt;|endoftext|&gt;\",\n)\n\n# \u307e\u305f\u306f\n# from transformers import GPT2TokenizerFast\n# wrapped_tokenizer = GPT2TokenizerFast(tokenizer_object=tokenizer)\n</code></pre>","tags":["NLP","Transformers","Tokenizer","Hugging Face","\u6a5f\u68b0\u5b66\u7fd2","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","BPE","WordPiece"]},{"location":"LLM/04_the_huggingface_tokenizers_library/#unigram_2","title":"Unigram\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3092\u4e00\u304b\u3089\u69cb\u7bc9","text":"<p>XLNet\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3092\u69cb\u7bc9\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u524d\u306e\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3068\u540c\u69d8\u306b\u3001Unigram\u30e2\u30c7\u30eb\u3067<code>Tokenizer</code>\u3092\u521d\u671f\u5316\u3059\u308b\u3053\u3068\u304b\u3089\u59cb\u3081\u307e\u3059\uff1a</p> <pre><code>tokenizer = Tokenizer(models.Unigram())\n</code></pre> <p>\u3053\u3053\u3067\u3082\u3001\u8a9e\u5f59\u304c\u3042\u308b\u5834\u5408\u306f\u3053\u306e\u30e2\u30c7\u30eb\u3092\u521d\u671f\u5316\u3067\u304d\u307e\u3059\u3002</p> <p>\u6b63\u898f\u5316\u306b\u3064\u3044\u3066\u306f\u3001XLNet\uff08SentencePiece\u304b\u3089\u6765\u308b\uff09\u3044\u304f\u3064\u304b\u306e\u7f6e\u63db\u3092\u4f7f\u7528\u3057\u307e\u3059\uff1a</p> <pre><code>from tokenizers import Regex\n\ntokenizer.normalizer = normalizers.Sequence(\n    [\n        normalizers.Replace(\"``\", '\"'),\n        normalizers.Replace(\"''\", '\"'),\n        normalizers.NFKD(),\n        normalizers.StripAccents(),\n        normalizers.Replace(Regex(\" {2,}\"), \" \"),\n    ]\n)\n</code></pre> <p>\u3053\u308c\u306f<code>``</code>\u3068<code>''</code>\u3092<code>\"</code>\u306b\u7f6e\u304d\u63db\u3048\u30012\u3064\u4ee5\u4e0a\u306e\u30b9\u30da\u30fc\u30b9\u306e\u4efb\u610f\u306e\u30b7\u30fc\u30b1\u30f3\u30b9\u3092\u5358\u4e00\u306e\u30b9\u30da\u30fc\u30b9\u306b\u7f6e\u304d\u63db\u3048\u3001\u30c8\u30fc\u30af\u30f3\u5316\u3059\u308b\u30c6\u30ad\u30b9\u30c8\u5185\u306e\u30a2\u30af\u30bb\u30f3\u30c8\u8a18\u53f7\u3092\u9664\u53bb\u3057\u307e\u3059\u3002</p> <p>\u4efb\u610f\u306eSentencePiece\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306b\u4f7f\u7528\u3059\u308b\u524d\u51e6\u7406\u5668\u306f<code>Metaspace</code>\u3067\u3059\uff1a</p> <pre><code>tokenizer.pre_tokenizer = pre_tokenizers.Metaspace()\n</code></pre> <p>\u524d\u3068\u540c\u69d8\u306b\u3001\u4f8b\u306e\u30c6\u30ad\u30b9\u30c8\u306e\u524d\u51e6\u7406\u3092\u78ba\u8a8d\u3067\u304d\u307e\u3059\uff1a</p> <pre><code>tokenizer.pre_tokenizer.pre_tokenize_str(\"Let's test the pre-tokenizer!\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>[(\"\u2581Let's\", (0, 5)),\n ('\u2581test', (5, 10)),\n ('\u2581the', (10, 14)),\n ('\u2581pre-tokenizer!', (14, 29))]\n</code></pre></p> <p>\u6b21\u306f\u30e2\u30c7\u30eb\u3067\u3001\u3053\u308c\u306b\u306f\u8a13\u7df4\u304c\u5fc5\u8981\u3067\u3059\u3002XLNet\u306b\u306f\u304b\u306a\u308a\u591a\u304f\u306e\u7279\u5225\u306a\u30c8\u30fc\u30af\u30f3\u304c\u3042\u308a\u307e\u3059\uff1a</p> <pre><code>special_tokens = [\"&lt;cls&gt;\", \"&lt;sep&gt;\", \"&lt;unk&gt;\", \"&lt;pad&gt;\", \"&lt;mask&gt;\", \"&lt;s&gt;\", \"&lt;/s&gt;\"]\ntrainer = trainers.UnigramTrainer(\n    vocab_size=25000, special_tokens=special_tokens, unk_token=\"&lt;unk&gt;\"\n)\ntokenizer.train_from_iterator(get_training_corpus(), trainer=trainer)\n</code></pre> <p><code>UnigramTrainer</code>\u3067\u5fd8\u308c\u3066\u306f\u306a\u3089\u306a\u3044\u975e\u5e38\u306b\u91cd\u8981\u306a\u5f15\u6570\u306f<code>unk_token</code>\u3067\u3059\u3002\u307e\u305f\u3001Unigram\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u56fa\u6709\u306e\u4ed6\u306e\u5f15\u6570\u3082\u6e21\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001\u30c8\u30fc\u30af\u30f3\u3092\u524a\u9664\u3059\u308b\u5404\u30b9\u30c6\u30c3\u30d7\u3067\u306e<code>shrinking_factor</code>\uff08\u30c7\u30d5\u30a9\u30eb\u30c8\u306f0.75\uff09\u3084\u3001\u7279\u5b9a\u306e\u30c8\u30fc\u30af\u30f3\u306e\u6700\u5927\u9577\u3092\u6307\u5b9a\u3059\u308b<code>max_piece_length</code>\uff08\u30c7\u30d5\u30a9\u30eb\u30c8\u306f16\uff09\u3067\u3059\u3002</p> <p>\u3053\u306e\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306f\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u3067\u3082\u8a13\u7df4\u3067\u304d\u307e\u3059\uff1a</p> <pre><code># tokenizer.model = models.Unigram()\n# tokenizer.train([\"wikitext-2.txt\"], trainer=trainer)\n</code></pre> <p>\u30b5\u30f3\u30d7\u30eb\u30c6\u30ad\u30b9\u30c8\u306e\u30c8\u30fc\u30af\u30f3\u5316\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\uff1a</p> <pre><code>encoding = tokenizer.encode(\"Let's test this tokenizer.\")\nprint(encoding.tokens)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>['\u2581Let', \"'\", 's', '\u2581test', '\u2581this', '\u2581to', 'ken', 'izer', '.']\n</code></pre></p> <p>XLNet\u306e\u7279\u6b8a\u6027\u306f\u3001\u6587\u306e\u6700\u5f8c\u306b\u30bf\u30a4\u30d7ID 2\u3067<code>&lt;cls&gt;</code>\u30c8\u30fc\u30af\u30f3\u3092\u7f6e\u304f\u3053\u3068\u3067\u3059\uff08\u4ed6\u306e\u30c8\u30fc\u30af\u30f3\u3068\u533a\u5225\u3059\u308b\u305f\u3081\uff09\u3002\u7d50\u679c\u3068\u3057\u3066\u3001\u5de6\u5074\u306b\u30d1\u30c7\u30a3\u30f3\u30b0\u304c\u884c\u308f\u308c\u307e\u3059\u3002\u3059\u3079\u3066\u306e\u7279\u5225\u306a\u30c8\u30fc\u30af\u30f3\u3068\u30c8\u30fc\u30af\u30f3\u30bf\u30a4\u30d7ID\u3092\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3067\u51e6\u7406\u3067\u304d\u307e\u3059\u304c\u3001BERT\u3068\u540c\u69d8\u306b\u3001\u307e\u305a<code>&lt;cls&gt;</code>\u3068<code>&lt;sep&gt;</code>\u30c8\u30fc\u30af\u30f3\u306eID\u3092\u53d6\u5f97\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff1a</p> <pre><code>cls_token_id = tokenizer.token_to_id(\"&lt;cls&gt;\")\nsep_token_id = tokenizer.token_to_id(\"&lt;sep&gt;\")\nprint(cls_token_id, sep_token_id)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>0 1\n</code></pre></p> <p>\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff1a</p> <pre><code>tokenizer.post_processor = processors.TemplateProcessing(\n    single=\"$A:0 &lt;sep&gt;:0 &lt;cls&gt;:2\",\n    pair=\"$A:0 &lt;sep&gt;:0 $B:1 &lt;sep&gt;:1 &lt;cls&gt;:2\",\n    special_tokens=[(\"&lt;sep&gt;\", sep_token_id), (\"&lt;cls&gt;\", cls_token_id)],\n)\n</code></pre> <p>\u6587\u306e\u30da\u30a2\u3092\u30a8\u30f3\u30b3\u30fc\u30c9\u3057\u3066\u52d5\u4f5c\u3059\u308b\u3053\u3068\u3092\u30c6\u30b9\u30c8\u3067\u304d\u307e\u3059\uff1a</p> <pre><code>encoding = tokenizer.encode(\"Let's test this tokenizer...\", \"on a pair of sentences!\")\nprint(encoding.tokens)\nprint(encoding.type_ids)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>['\u2581Let', \"'\", 's', '\u2581test', '\u2581this', '\u2581to', 'ken', 'izer', '.', '.', '.', '&lt;sep&gt;', '\u2581', 'on', '\u2581', 'a', '\u2581pair', '\u2581of', '\u2581sentence', 's', '!', '&lt;sep&gt;', '&lt;cls&gt;']\n[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]\n</code></pre></p> <p>\u6700\u5f8c\u306b\u3001<code>Metaspace</code>\u30c7\u30b3\u30fc\u30c0\u30fc\u3092\u8ffd\u52a0\u3057\u307e\u3059\uff1a</p> <pre><code>tokenizer.decoder = decoders.Metaspace()\n</code></pre> <p>\u3053\u306e\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306f\u5b8c\u4e86\u3067\u3059\uff01\u524d\u3068\u540c\u3058\u3088\u3046\u306b\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3092\u4fdd\u5b58\u3057\u3001Hugging Face Transformers\u3067\u4f7f\u7528\u3057\u305f\u3044\u5834\u5408\u306f<code>PreTrainedTokenizerFast</code>\u307e\u305f\u306f<code>XLNetTokenizerFast</code>\u3067\u30e9\u30c3\u30d7\u3067\u304d\u307e\u3059\u3002<code>PreTrainedTokenizerFast</code>\u3092\u4f7f\u7528\u3059\u308b\u969b\u306b\u6ce8\u610f\u3059\u3079\u304d\u70b9\u306f\u3001\u7279\u5225\u306a\u30c8\u30fc\u30af\u30f3\u306b\u52a0\u3048\u3066\u3001Hugging Face Transformers\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u5de6\u30d1\u30c7\u30a3\u30f3\u30b0\u3059\u308b\u3088\u3046\u306b\u4f1d\u3048\u308b\u5fc5\u8981\u304c\u3042\u308b\u3053\u3068\u3067\u3059\uff1a</p> <pre><code>from transformers import PreTrainedTokenizerFast\n\nwrapped_tokenizer = PreTrainedTokenizerFast(\n    tokenizer_object=tokenizer,\n    bos_token=\"&lt;s&gt;\",\n    eos_token=\"&lt;/s&gt;\",\n    unk_token=\"&lt;unk&gt;\",\n    pad_token=\"&lt;pad&gt;\",\n    cls_token=\"&lt;cls&gt;\",\n    sep_token=\"&lt;sep&gt;\",\n    mask_token=\"&lt;mask&gt;\",\n    padding_side=\"left\",\n)\n\n# \u307e\u305f\u306f\n# from transformers import XLNetTokenizerFast\n# wrapped_tokenizer = XLNetTokenizerFast(tokenizer_object=tokenizer)\n</code></pre> <p>\u69d8\u3005\u306a\u69cb\u6210\u8981\u7d20\u304c\u3069\u306e\u3088\u3046\u306b\u4f7f\u7528\u3055\u308c\u3066\u65e2\u5b58\u306e\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3092\u69cb\u7bc9\u3059\u308b\u304b\u3092\u898b\u305f\u306e\u3067\u3001Hugging Face Tokenizers\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u671b\u3080\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3092\u66f8\u3044\u3066\u3001Hugging Face Transformers\u3067\u4f7f\u7528\u3067\u304d\u308b\u306f\u305a\u3067\u3059\u3002</p>","tags":["NLP","Transformers","Tokenizer","Hugging Face","\u6a5f\u68b0\u5b66\u7fd2","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","BPE","WordPiece"]},{"location":"LLM/04_the_huggingface_tokenizers_library/#_26","title":"\u307e\u3068\u3081","text":"<p>\u3053\u306e\u8a18\u4e8b\u3092\u901a\u3058\u3066\u3001Hugging Face Tokenizers\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u7528\u3057\u305f\u9ad8\u5ea6\u306a\u30c8\u30fc\u30af\u30f3\u5316\u6280\u8853\u306b\u3064\u3044\u3066\u8a73\u3057\u304f\u5b66\u7fd2\u3057\u307e\u3057\u305f\u3002\u65b0\u3057\u3044\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306e\u8a13\u7df4\u304b\u3089\u3001\u9ad8\u901f\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306e\u7279\u5225\u306a\u6a5f\u80fd\u3001\u305d\u3057\u30663\u3064\u306e\u4e3b\u8981\u306a\u30b5\u30d6\u30ef\u30fc\u30c9\u30fb\u30c8\u30fc\u30af\u30f3\u5316\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\uff08BPE\u3001WordPiece\u3001Unigram\uff09\u306e\u5b9f\u88c5\u307e\u3067\u3001\u5b9f\u8df5\u7684\u306a\u30b3\u30fc\u30c9\u4f8b\u3068\u3068\u3082\u306b\u5e45\u5e83\u3044\u30c8\u30d4\u30c3\u30af\u3092\u30ab\u30d0\u30fc\u3057\u307e\u3057\u305f\u3002</p>","tags":["NLP","Transformers","Tokenizer","Hugging Face","\u6a5f\u68b0\u5b66\u7fd2","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","BPE","WordPiece"]},{"location":"LLM/04_the_huggingface_tokenizers_library/#_27","title":"\u5b66\u7fd2\u30dd\u30a4\u30f3\u30c8\u306e\u632f\u308a\u8fd4\u308a","text":"<ol> <li>\u65b0\u3057\u3044\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306e\u8a13\u7df4: \u65e2\u5b58\u306e\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3092\u30d9\u30fc\u30b9\u3068\u3057\u3066\u3001\u65b0\u3057\u3044\u30b3\u30fc\u30d1\u30b9\u306b\u9069\u5fdc\u3055\u305b\u308b\u65b9\u6cd5\u3092\u7fd2\u5f97</li> <li>\u9ad8\u901f\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306e\u6a5f\u80fd: \u30aa\u30d5\u30bb\u30c3\u30c8\u30de\u30c3\u30d4\u30f3\u30b0\u3092\u6d3b\u7528\u3057\u305f\u30c8\u30fc\u30af\u30f3\u5206\u985e\u3084\u8cea\u554f\u5fdc\u7b54\u30bf\u30b9\u30af\u306e\u5b9f\u88c5</li> <li>\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u7406\u89e3: BPE\u3001WordPiece\u3001Unigram\u306e\u8a13\u7df4\u30d7\u30ed\u30bb\u30b9\u3068\u30c8\u30fc\u30af\u30f3\u5316\u65b9\u6cd5\u306e\u9055\u3044\u3092\u8a73\u7d30\u306b\u5b66\u7fd2</li> <li>\u4e00\u304b\u3089\u306e\u69cb\u7bc9: Hugging Face Tokenizers\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u7528\u3057\u3066\u3001\u5404\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3092\u7d44\u307f\u5408\u308f\u305b\u305f\u30ab\u30b9\u30bf\u30e0\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306e\u69cb\u7bc9</li> </ol>","tags":["NLP","Transformers","Tokenizer","Hugging Face","\u6a5f\u68b0\u5b66\u7fd2","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","BPE","WordPiece"]},{"location":"LLM/04_the_huggingface_tokenizers_library/#_28","title":"\u6b21\u306e\u30b9\u30c6\u30c3\u30d7","text":"<ul> <li>\u3088\u308a\u5927\u898f\u6a21\u306a\u30b3\u30fc\u30d1\u30b9\u3067\u306e\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u8a13\u7df4\u306b\u6311\u6226</li> <li>\u7279\u5b9a\u306e\u30c9\u30e1\u30a4\u30f3\uff08\u533b\u7642\u3001\u6cd5\u5f8b\u3001\u6280\u8853\u6587\u66f8\u306a\u3069\uff09\u306b\u7279\u5316\u3057\u305f\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306e\u958b\u767a</li> <li>\u591a\u8a00\u8a9e\u5bfe\u5fdc\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306e\u69cb\u7bc9</li> <li>\u5b9f\u969b\u306eTransformer\u30e2\u30c7\u30eb\u3068\u7d44\u307f\u5408\u308f\u305b\u305f\u4e8b\u524d\u5b66\u7fd2\u306e\u5b9f\u8df5</li> </ul>","tags":["NLP","Transformers","Tokenizer","Hugging Face","\u6a5f\u68b0\u5b66\u7fd2","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","BPE","WordPiece"]},{"location":"LLM/04_the_huggingface_tokenizers_library/#_29","title":"\u53c2\u8003\u8cc7\u6599","text":"<ul> <li>Hugging Face Tokenizers \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8</li> <li>Hugging Face Transformers \u30e9\u30a4\u30d6\u30e9\u30ea</li> <li>BPE: Neural Machine Translation of Rare Words with Subword Units</li> <li>WordPiece: Japanese and Korean Voice Search</li> <li>SentencePiece: A simple and language independent subword tokenizer and detokenizer for Neural Text Processing</li> </ul> <p>\u3053\u306e\u77e5\u8b58\u3092\u57fa\u306b\u3001\u81ea\u7136\u8a00\u8a9e\u51e6\u7406\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u3088\u308a\u52b9\u679c\u7684\u306a\u30c8\u30fc\u30af\u30f3\u5316\u6226\u7565\u3092\u5b9f\u88c5\u3057\u3001\u30e2\u30c7\u30eb\u306e\u6027\u80fd\u5411\u4e0a\u3092\u76ee\u6307\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u30c8\u30fc\u30af\u30f3\u5316\u306f\u6a5f\u68b0\u5b66\u7fd2\u30e2\u30c7\u30eb\u306e\u57fa\u76e4\u3068\u306a\u308b\u91cd\u8981\u306a\u6280\u8853\u3067\u3042\u308a\u3001\u305d\u306e\u7406\u89e3\u3068\u5b9f\u8df5\u7684\u306a\u5fdc\u7528\u80fd\u529b\u306f\u3001NLP\u5206\u91ce\u3067\u306e\u6210\u529f\u306b\u4e0d\u53ef\u6b20\u3067\u3059\u3002</p>","tags":["NLP","Transformers","Tokenizer","Hugging Face","\u6a5f\u68b0\u5b66\u7fd2","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","BPE","WordPiece"]},{"location":"LLM/05_Let%27s_build_GPT_from_scratch/","title":"GPT\u3092\u30bc\u30ed\u304b\u3089\u69cb\u7bc9\u3059\u308b\u5b8c\u5168\u30ac\u30a4\u30c9 - Transformer\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306e\u5b9f\u88c5\u3068\u89e3\u8aac","text":"","tags":["GPT","Transformer","Self-Attention","PyTorch","\u8a00\u8a9e\u30e2\u30c7\u30eb","\u6df1\u5c64\u5b66\u7fd2","\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u6a5f\u69cb","\u4f4d\u7f6e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0","\u30c6\u30ad\u30b9\u30c8\u751f\u6210","\u30aa\u30fc\u30c8\u30ea\u30b0\u30ec\u30c3\u30b7\u30d6","ChatGPT"]},{"location":"LLM/05_Let%27s_build_GPT_from_scratch/#_1","title":"\u6982\u8981","text":"<p>\u672c\u30ac\u30a4\u30c9\u3067\u306f\u3001GPT\uff08Generative Pre-trained Transformer\uff09\u3092PyTorch\u3092\u4f7f\u3063\u3066\u4e00\u304b\u3089\u5b9f\u88c5\u3059\u308b\u65b9\u6cd5\u3092\u8a73\u3057\u304f\u89e3\u8aac\u3057\u307e\u3059\u3002\u5358\u306a\u308b\u30b3\u30fc\u30c9\u306e\u30b3\u30d4\u30fc&amp;\u30da\u30fc\u30b9\u30c8\u3067\u306f\u306a\u304f\u3001\u5404\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306e\u7406\u8ad6\u7684\u80cc\u666f\u304b\u3089\u5b9f\u88c5\u306e\u8a73\u7d30\u3001\u6700\u9069\u5316\u624b\u6cd5\u307e\u3067\u4f53\u7cfb\u7684\u306b\u5b66\u7fd2\u3067\u304d\u308b\u5185\u5bb9\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002</p>","tags":["GPT","Transformer","Self-Attention","PyTorch","\u8a00\u8a9e\u30e2\u30c7\u30eb","\u6df1\u5c64\u5b66\u7fd2","\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u6a5f\u69cb","\u4f4d\u7f6e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0","\u30c6\u30ad\u30b9\u30c8\u751f\u6210","\u30aa\u30fc\u30c8\u30ea\u30b0\u30ec\u30c3\u30b7\u30d6","ChatGPT"]},{"location":"LLM/05_Let%27s_build_GPT_from_scratch/#_2","title":"\u5b66\u7fd2\u76ee\u6a19","text":"<p>\u3053\u306e\u30ac\u30a4\u30c9\u3092\u4fee\u4e86\u3059\u308b\u3053\u3068\u3067\u3001\u4ee5\u4e0b\u306e\u77e5\u8b58\u3068\u30b9\u30ad\u30eb\u3092\u8eab\u306b\u3064\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a</p> <p>\u57fa\u790e\u7406\u89e3</p> <ul> <li>ChatGPT\u30fbGPT\u306e\u52d5\u4f5c\u539f\u7406\u3068Transformer\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306e\u7406\u89e3</li> <li>\u6587\u5b57\u30ec\u30d9\u30eb\u8a00\u8a9e\u30e2\u30c7\u30ea\u30f3\u30b0\u306e\u4ed5\u7d44\u307f</li> <li>\u30c8\u30fc\u30af\u30f3\u5316\u30fb\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u306e\u8a2d\u8a08\u3068\u5b9f\u88c5</li> <li>\u30c7\u30fc\u30bf\u6e96\u5099\u3068\u30d0\u30c3\u30c1\u51e6\u7406\u306e\u6700\u9069\u5316\u624b\u6cd5</li> </ul> <p>\u30b3\u30a2\u5b9f\u88c5\u6280\u8853</p> <ul> <li>Bigram\u30e2\u30c7\u30eb\u304b\u3089GPT\u3078\u306e\u6bb5\u968e\u7684\u69cb\u7bc9</li> <li>Self-Attention\u30e1\u30ab\u30cb\u30ba\u30e0\u306e\u6570\u5b66\u7684\u7406\u89e3\u3068\u5b9f\u88c5</li> <li>Multi-Head Attention\u3068Feed-Forward Network\u306e\u69cb\u7bc9</li> <li>\u4f4d\u7f6e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3068\u91cd\u307f\u521d\u671f\u5316\u306e\u8a73\u7d30\u5b9f\u88c5</li> </ul> <p>\u9ad8\u5ea6\u306a\u6280\u8853\u8981\u7d20</p> <ul> <li>Pre-Norm vs Post-Norm\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306e\u6bd4\u8f03\u7406\u89e3</li> <li>\u6b8b\u5dee\u63a5\u7d9a\u3068Layer Normalization\u306e\u52b9\u679c</li> <li>\u30aa\u30fc\u30c8\u30ea\u30b0\u30ec\u30c3\u30b7\u30d6\u306a\u30c6\u30ad\u30b9\u30c8\u751f\u6210\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0</li> <li>\u640d\u5931\u95a2\u6570\u306e\u8a2d\u8a08\u3068\u8a13\u7df4\u30eb\u30fc\u30d7\u306e\u6700\u9069\u5316</li> </ul>","tags":["GPT","Transformer","Self-Attention","PyTorch","\u8a00\u8a9e\u30e2\u30c7\u30eb","\u6df1\u5c64\u5b66\u7fd2","\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u6a5f\u69cb","\u4f4d\u7f6e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0","\u30c6\u30ad\u30b9\u30c8\u751f\u6210","\u30aa\u30fc\u30c8\u30ea\u30b0\u30ec\u30c3\u30b7\u30d6","ChatGPT"]},{"location":"LLM/05_Let%27s_build_GPT_from_scratch/#_3","title":"\u524d\u63d0\u77e5\u8b58","text":"<p>\u3053\u306e\u30ac\u30a4\u30c9\u3092\u6700\u5927\u9650\u6d3b\u7528\u3059\u308b\u305f\u3081\u306b\u3001\u4ee5\u4e0b\u306e\u77e5\u8b58\u304c\u3042\u308b\u3053\u3068\u3092\u63a8\u5968\u3057\u307e\u3059\uff1a</p> <ul> <li>Python \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0: \u57fa\u672c\u7684\u306a\u69cb\u6587\u3001\u30af\u30e9\u30b9\u3001\u95a2\u6570\u306e\u7406\u89e3</li> <li>PyTorch \u57fa\u790e: \u30c6\u30f3\u30bd\u30eb\u64cd\u4f5c\u3001\u81ea\u52d5\u5fae\u5206\u3001nn.Module\u306e\u57fa\u672c\u6982\u5ff5</li> <li>\u6df1\u5c64\u5b66\u7fd2\u306e\u57fa\u672c: \u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3001\u30d0\u30c3\u30af\u30d7\u30ed\u30d1\u30b2\u30fc\u30b7\u30e7\u30f3\u3001\u52fe\u914d\u964d\u4e0b\u6cd5</li> <li>\u7dda\u5f62\u4ee3\u6570: \u884c\u5217\u4e57\u7b97\u3001\u30d9\u30af\u30c8\u30eb\u6f14\u7b97\u306e\u57fa\u672c\u6982\u5ff5</li> <li>\u78ba\u7387\u30fb\u7d71\u8a08: \u78ba\u7387\u5206\u5e03\u3001\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u624b\u6cd5\u306e\u7406\u89e3</li> </ul> <p>\u53c2\u8003\u8cc7\u6599</p> <p>\u672c\u30ac\u30a4\u30c9\u306f Andrej Karpathy \u6c0f\u306e\u300cLet's build GPT: from scratch, in code, spelled out\u300d\u3092\u57fa\u306b\u3001\u65e5\u672c\u8a9e\u3067\u306e\u8a73\u7d30\u89e3\u8aac\u3068\u8ffd\u52a0\u306e\u5b9f\u8df5\u7684\u306a\u5185\u5bb9\u3092\u52a0\u3048\u305f\u3082\u306e\u3067\u3059\u3002</p>","tags":["GPT","Transformer","Self-Attention","PyTorch","\u8a00\u8a9e\u30e2\u30c7\u30eb","\u6df1\u5c64\u5b66\u7fd2","\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u6a5f\u69cb","\u4f4d\u7f6e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0","\u30c6\u30ad\u30b9\u30c8\u751f\u6210","\u30aa\u30fc\u30c8\u30ea\u30b0\u30ec\u30c3\u30b7\u30d6","ChatGPT"]},{"location":"LLM/05_Let%27s_build_GPT_from_scratch/#_4","title":"\u5b9f\u88c5\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u6982\u8981","text":"<p>\u79c1\u305f\u3061\u304c\u69cb\u7bc9\u3059\u308bGPT\u30e2\u30c7\u30eb\u306f\u4ee5\u4e0b\u306e\u4e3b\u8981\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u304b\u3089\u69cb\u6210\u3055\u308c\u3066\u3044\u307e\u3059\u3002</p> <p></p>","tags":["GPT","Transformer","Self-Attention","PyTorch","\u8a00\u8a9e\u30e2\u30c7\u30eb","\u6df1\u5c64\u5b66\u7fd2","\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u6a5f\u69cb","\u4f4d\u7f6e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0","\u30c6\u30ad\u30b9\u30c8\u751f\u6210","\u30aa\u30fc\u30c8\u30ea\u30b0\u30ec\u30c3\u30b7\u30d6","ChatGPT"]},{"location":"LLM/05_Let%27s_build_GPT_from_scratch/#1","title":"1. \u8a00\u8a9e\u30e2\u30c7\u30ea\u30f3\u30b0\u306e\u57fa\u790e\u3068\u958b\u767a\u74b0\u5883\u69cb\u7bc9","text":"","tags":["GPT","Transformer","Self-Attention","PyTorch","\u8a00\u8a9e\u30e2\u30c7\u30eb","\u6df1\u5c64\u5b66\u7fd2","\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u6a5f\u69cb","\u4f4d\u7f6e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0","\u30c6\u30ad\u30b9\u30c8\u751f\u6210","\u30aa\u30fc\u30c8\u30ea\u30b0\u30ec\u30c3\u30b7\u30d6","ChatGPT"]},{"location":"LLM/05_Let%27s_build_GPT_from_scratch/#_5","title":"\u8a00\u8a9e\u30e2\u30c7\u30ea\u30f3\u30b0\u3068\u306f","text":"<p>\u8a00\u8a9e\u30e2\u30c7\u30ea\u30f3\u30b0\u306f\u3001\u30c6\u30ad\u30b9\u30c8\u306e\u78ba\u7387\u5206\u5e03\u3092\u5b66\u7fd2\u3059\u308b\u6a5f\u68b0\u5b66\u7fd2\u30bf\u30b9\u30af\u3067\u3059\u3002\u5177\u4f53\u7684\u306b\u306f\u3001\u4e0e\u3048\u3089\u308c\u305f\u6587\u8108\u306b\u57fa\u3065\u3044\u3066\u300c\u6b21\u306b\u6765\u308b\u53ef\u80fd\u6027\u306e\u9ad8\u3044\u5358\u8a9e\uff08\u307e\u305f\u306f\u30c8\u30fc\u30af\u30f3\uff09\u300d\u3092\u4e88\u6e2c\u3059\u308b\u3053\u3068\u3092\u5b66\u7fd2\u3057\u307e\u3059\u3002</p> <p>\u6570\u5b66\u7684\u8868\u73fe\uff1a <pre><code>P(x\u2081, x\u2082, ..., x\u2099) = \u220f\u1d62\u208c\u2081\u207f P(x\u1d62|x\u2081, x\u2082, ..., x\u1d62\u208b\u2081)\n</code></pre></p> <p>\u3053\u306e\u5f0f\u306f\u3001\u6587\u7ae0\u5168\u4f53\u306e\u78ba\u7387\u3092\u3001\u5404\u5358\u8a9e\u304c\u524d\u306e\u6587\u8108\u306b\u6761\u4ef6\u4ed8\u3051\u3089\u308c\u305f\u78ba\u7387\u306e\u7a4d\u3068\u3057\u3066\u8868\u73fe\u3057\u3066\u3044\u307e\u3059\u3002</p>","tags":["GPT","Transformer","Self-Attention","PyTorch","\u8a00\u8a9e\u30e2\u30c7\u30eb","\u6df1\u5c64\u5b66\u7fd2","\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u6a5f\u69cb","\u4f4d\u7f6e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0","\u30c6\u30ad\u30b9\u30c8\u751f\u6210","\u30aa\u30fc\u30c8\u30ea\u30b0\u30ec\u30c3\u30b7\u30d6","ChatGPT"]},{"location":"LLM/05_Let%27s_build_GPT_from_scratch/#_6","title":"\u306a\u305c\u6587\u5b57\u30ec\u30d9\u30eb\u8a00\u8a9e\u30e2\u30c7\u30eb\u306a\u306e\u304b\uff1f","text":"<p>\u3053\u306e\u30ac\u30a4\u30c9\u3067\u306f\u3001\u6587\u5b57\u30ec\u30d9\u30eb\uff08Character-level\uff09\u306e\u8a00\u8a9e\u30e2\u30c7\u30eb\u3092\u69cb\u7bc9\u3057\u3066\u3044\u304d\u307e\u3059\u3002</p> <p>\u5229\u70b9:</p> <ul> <li>\u30b7\u30f3\u30d7\u30eb\u3055: \u8a9e\u5f59\u30b5\u30a4\u30ba\u304c\u5c0f\u3055\u3044\uff08\u82f1\u8a9e\u306a\u308926\u6587\u5b57 + \u8a18\u53f7\uff09</li> <li>OOV\u554f\u984c\u306e\u56de\u907f: \u672a\u77e5\u8a9e\uff08Out-of-Vocabulary\uff09\u306e\u554f\u984c\u304c\u767a\u751f\u3057\u306a\u3044</li> <li>\u7406\u89e3\u3057\u3084\u3059\u3055: \u30c8\u30fc\u30af\u30f3\u5316\u306e\u8907\u96d1\u3055\u3092\u907f\u3051\u3066\u672c\u8cea\u306b\u96c6\u4e2d\u3067\u304d\u308b</li> </ul> <p>\u5236\u7d04:</p> <ul> <li>\u52b9\u7387\u6027: \u5358\u8a9e\u30ec\u30d9\u30eb\u3088\u308a\u9577\u3044\u30b7\u30fc\u30b1\u30f3\u30b9\u304c\u5fc5\u8981</li> <li>\u610f\u5473\u7406\u89e3: \u6587\u5b57\u30ec\u30d9\u30eb\u304b\u3089\u5358\u8a9e\u306e\u610f\u5473\u3092\u5b66\u7fd2\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b</li> </ul>","tags":["GPT","Transformer","Self-Attention","PyTorch","\u8a00\u8a9e\u30e2\u30c7\u30eb","\u6df1\u5c64\u5b66\u7fd2","\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u6a5f\u69cb","\u4f4d\u7f6e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0","\u30c6\u30ad\u30b9\u30c8\u751f\u6210","\u30aa\u30fc\u30c8\u30ea\u30b0\u30ec\u30c3\u30b7\u30d6","ChatGPT"]},{"location":"LLM/05_Let%27s_build_GPT_from_scratch/#_7","title":"\u958b\u767a\u74b0\u5883\u3068\u30e9\u30a4\u30d6\u30e9\u30ea","text":"<pre><code>import torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom torch.utils.data import DataLoader, Dataset\n\n# GPU\u5229\u7528\u53ef\u80fd\u6027\u306e\u78ba\u8a8d\ndevice = 'cuda' if torch.cuda.is_available() else 'mps' if torch.mps.is_available() else 'cpu'\nprint(f\"\u4f7f\u7528\u30c7\u30d0\u30a4\u30b9: {device}\")\n</code></pre>","tags":["GPT","Transformer","Self-Attention","PyTorch","\u8a00\u8a9e\u30e2\u30c7\u30eb","\u6df1\u5c64\u5b66\u7fd2","\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u6a5f\u69cb","\u4f4d\u7f6e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0","\u30c6\u30ad\u30b9\u30c8\u751f\u6210","\u30aa\u30fc\u30c8\u30ea\u30b0\u30ec\u30c3\u30b7\u30d6","ChatGPT"]},{"location":"LLM/05_Let%27s_build_GPT_from_scratch/#2","title":"2. \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u6e96\u5099\u3068\u30c8\u30fc\u30af\u30f3\u5316","text":"","tags":["GPT","Transformer","Self-Attention","PyTorch","\u8a00\u8a9e\u30e2\u30c7\u30eb","\u6df1\u5c64\u5b66\u7fd2","\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u6a5f\u69cb","\u4f4d\u7f6e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0","\u30c6\u30ad\u30b9\u30c8\u751f\u6210","\u30aa\u30fc\u30c8\u30ea\u30b0\u30ec\u30c3\u30b7\u30d6","ChatGPT"]},{"location":"LLM/05_Let%27s_build_GPT_from_scratch/#21-tiny-shakespeare","title":"2.1 \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u9078\u629e\uff1aTiny Shakespeare","text":"<p>Tiny Shakespeare\u3092\u4f7f\u7528\u3059\u308b\u7406\u7531\uff1a</p> <ol> <li>\u9069\u5ea6\u306a\u30b5\u30a4\u30ba: \u7d041.1MB\u3067\u8a13\u7df4\u306b\u9069\u3057\u3066\u3044\u308b</li> <li>\u69cb\u9020\u5316\u3055\u308c\u305f\u30c6\u30ad\u30b9\u30c8: \u660e\u78ba\u306a\u6587\u6cd5\u3068\u6587\u4f53</li> <li>\u82f1\u8a9e\u570f\u3067\u306e\u6a19\u6e96: \u591a\u304f\u306e\u7814\u7a76\u3067\u4f7f\u7528\u3055\u308c\u3066\u3044\u308b</li> <li>\u8907\u96d1\u6027\u306e\u30d0\u30e9\u30f3\u30b9: \u5358\u7d14\u3059\u304e\u305a\u3001\u8907\u96d1\u3059\u304e\u306a\u3044</li> </ol>","tags":["GPT","Transformer","Self-Attention","PyTorch","\u8a00\u8a9e\u30e2\u30c7\u30eb","\u6df1\u5c64\u5b66\u7fd2","\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u6a5f\u69cb","\u4f4d\u7f6e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0","\u30c6\u30ad\u30b9\u30c8\u751f\u6210","\u30aa\u30fc\u30c8\u30ea\u30b0\u30ec\u30c3\u30b7\u30d6","ChatGPT"]},{"location":"LLM/05_Let%27s_build_GPT_from_scratch/#22","title":"2.2 \u30c7\u30fc\u30bf\u6e96\u5099\u306e\u8a73\u7d30\u30d7\u30ed\u30bb\u30b9","text":"<pre><code># \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\n!wget https://raw.githubusercontent.com/karpathy/char-rnn/master/data/tinyshakespeare/input.txt\n</code></pre> <pre><code># \u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u3068\u57fa\u672c\u60c5\u5831\u78ba\u8a8d\nwith open(\"input.txt\", 'r', encoding='utf-8') as f:\n    text = f.read()\n\nprint(\"length of dataset in characters: \", len(text))\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>length of dataset in characters:  1115394\n</code></pre></p> <pre><code># \u6700\u521d\u306e1000\u6587\u5b57\u3092\u78ba\u8a8d\u3057\u3066\u30c7\u30fc\u30bf\u306e\u5185\u5bb9\u3092\u628a\u63e1\nprint(text[:1000])\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>First Citizen:\nBefore we proceed any further, hear me speak.\n\nAll:\nSpeak, speak.\n\nFirst Citizen:\nYou are all resolved rather to die than to famish?\n\nAll:\nResolved. resolved.\n\nFirst Citizen:\nFirst, you know Caius Marcius is chief enemy to the people.\n\nAll:\nWe know't, we know't.\n\nFirst Citizen:\nLet us kill him, and we'll have corn at our own price.\nIs't a verdict?\n\nAll:\nNo more talking on't; let it be done: away, away!\n\nSecond Citizen:\nOne word, good citizens.\n\nFirst Citizen:\nWe are accounted poor citizens, the patricians good.\nWhat authority surfeits on would relieve us: if they\nwould yield us but the superfluity, while it were\nwholesome, we might guess they relieved us humanely;\nbut they think we are too dear: the leanness that\nafflicts us, the object of our misery, is as an\ninventory to particularise their abundance; our\nsufferance is a gain to them Let us revenge this with\nour pikes, ere we become rakes: for the gods know I\nspeak this in hunger for bread, not in thirst for revenge.\n</code></pre></p>","tags":["GPT","Transformer","Self-Attention","PyTorch","\u8a00\u8a9e\u30e2\u30c7\u30eb","\u6df1\u5c64\u5b66\u7fd2","\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u6a5f\u69cb","\u4f4d\u7f6e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0","\u30c6\u30ad\u30b9\u30c8\u751f\u6210","\u30aa\u30fc\u30c8\u30ea\u30b0\u30ec\u30c3\u30b7\u30d6","ChatGPT"]},{"location":"LLM/05_Let%27s_build_GPT_from_scratch/#23-vocabulary","title":"2.3 \u8a9e\u5f59\uff08Vocabulary\uff09\u306e\u69cb\u7bc9","text":"<p>\u30c6\u30ad\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u6570\u5024\u5f62\u5f0f\u306b\u5909\u63db\u3059\u308b\u305f\u3081\u3001\u307e\u305a\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u5185\u306e\u5168\u30e6\u30cb\u30fc\u30af\u6587\u5b57\u3092\u7279\u5b9a\u3057\u307e\u3059\uff1a</p> <pre><code># \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u5185\u306e\u5168\u30e6\u30cb\u30fc\u30af\u6587\u5b57\u306e\u62bd\u51fa\u3068\u8a9e\u5f59\u69cb\u7bc9\nchars = sorted(list(set(text)))\nvocab_size = len(chars)\nprint(''.join(chars))\nprint(vocab_size)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code> !$&amp;',-.3:;?ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\n65\n</code></pre></p>","tags":["GPT","Transformer","Self-Attention","PyTorch","\u8a00\u8a9e\u30e2\u30c7\u30eb","\u6df1\u5c64\u5b66\u7fd2","\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u6a5f\u69cb","\u4f4d\u7f6e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0","\u30c6\u30ad\u30b9\u30c8\u751f\u6210","\u30aa\u30fc\u30c8\u30ea\u30b0\u30ec\u30c3\u30b7\u30d6","ChatGPT"]},{"location":"LLM/05_Let%27s_build_GPT_from_scratch/#24-tokenization","title":"2.4 \u30c8\u30fc\u30af\u30f3\u5316\uff08Tokenization\uff09\u306e\u5b9f\u88c5","text":"<p>\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u306f\u6587\u5b57\u3092\u76f4\u63a5\u7406\u89e3\u3067\u304d\u306a\u3044\u305f\u3081\u3001\u6587\u5b57\u2194\u6570\u5024\u306e\u53cc\u65b9\u5411\u30de\u30c3\u30d4\u30f3\u30b0\u3092\u4f5c\u6210\u3057\u307e\u3059\uff1a</p>","tags":["GPT","Transformer","Self-Attention","PyTorch","\u8a00\u8a9e\u30e2\u30c7\u30eb","\u6df1\u5c64\u5b66\u7fd2","\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u6a5f\u69cb","\u4f4d\u7f6e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0","\u30c6\u30ad\u30b9\u30c8\u751f\u6210","\u30aa\u30fc\u30c8\u30ea\u30b0\u30ec\u30c3\u30b7\u30d6","ChatGPT"]},{"location":"LLM/05_Let%27s_build_GPT_from_scratch/#_8","title":"\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u8a2d\u8a08\u306e\u539f\u5247","text":"<ol> <li>\u4e00\u610f\u6027: \u5404\u6587\u5b57\u306b\u552f\u4e00\u306eID\u3092\u5272\u308a\u5f53\u3066</li> <li>\u53ef\u9006\u6027: \u6570\u5024\u304b\u3089\u6587\u5b57\u3078\u306e\u5fa9\u5143\u304c\u5b8c\u5168\u306b\u53ef\u80fd</li> <li>\u52b9\u7387\u6027: \u30b7\u30f3\u30d7\u30eb\u3067\u9ad8\u901f\u306a\u5909\u63db</li> </ol> <pre><code># \u6587\u5b57\u2192\u6574\u6570\u3001\u6574\u6570\u2192\u6587\u5b57\u306e\u30de\u30c3\u30d4\u30f3\u30b0\u8f9e\u66f8\u3092\u4f5c\u6210\nstoi = { ch:i for i, ch in enumerate(chars)}\nprint(stoi)\nitos = { i:ch for i, ch in enumerate(chars)}\nprint(itos)\n\n# \u30a8\u30f3\u30b3\u30fc\u30c0\u30fc\u95a2\u6570: \u6587\u5b57\u5217\u3092\u6574\u6570\u30ea\u30b9\u30c8\u306b\u5909\u63db\nencode = lambda s: [stoi[c] for c in s]\n# \u30c7\u30b3\u30fc\u30c0\u30fc\u95a2\u6570: \u6574\u6570\u30ea\u30b9\u30c8\u3092\u6587\u5b57\u5217\u306b\u5909\u63db\ndecode = lambda l: ''.join([itos[i] for i in l])\n\nprint(encode(\"hii there\"))\nprint(decode(encode(\"hii there\")))\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>{'\\n': 0, ' ': 1, '!': 2, '$': 3, '&amp;': 4, \"'\": 5, ',': 6, '-': 7, '.': 8, '3': 9, ':': 10, ';': 11, '?': 12, 'A': 13, 'B': 14, 'C': 15, 'D': 16, 'E': 17, 'F': 18, 'G': 19, 'H': 20, 'I': 21, 'J': 22, 'K': 23, 'L': 24, 'M': 25, 'N': 26, 'O': 27, 'P': 28, 'Q': 29, 'R': 30, 'S': 31, 'T': 32, 'U': 33, 'V': 34, 'W': 35, 'X': 36, 'Y': 37, 'Z': 38, 'a': 39, 'b': 40, 'c': 41, 'd': 42, 'e': 43, 'f': 44, 'g': 45, 'h': 46, 'i': 47, 'j': 48, 'k': 49, 'l': 50, 'm': 51, 'n': 52, 'o': 53, 'p': 54, 'q': 55, 'r': 56, 's': 57, 't': 58, 'u': 59, 'v': 60, 'w': 61, 'x': 62, 'y': 63, 'z': 64}\n{0: '\\n', 1: ' ', 2: '!', 3: '$', 4: '&amp;', 5: \"'\", 6: ',', 7: '-', 8: '.', 9: '3', 10: ':', 11: ';', 12: '?', 13: 'A', 14: 'B', 15: 'C', 16: 'D', 17: 'E', 18: 'F', 19: 'G', 20: 'H', 21: 'I', 22: 'J', 23: 'K', 24: 'L', 25: 'M', 26: 'N', 27: 'O', 28: 'P', 29: 'Q', 30: 'R', 31: 'S', 32: 'T', 33: 'U', 34: 'V', 35: 'W', 36: 'X', 37: 'Y', 38: 'Z', 39: 'a', 40: 'b', 41: 'c', 42: 'd', 43: 'e', 44: 'f', 45: 'g', 46: 'h', 47: 'i', 48: 'j', 49: 'k', 50: 'l', 51: 'm', 52: 'n', 53: 'o', 54: 'p', 55: 'q', 56: 'r', 57: 's', 58: 't', 59: 'u', 60: 'v', 61: 'w', 62: 'x', 63: 'y', 64: 'z'}\n[46, 47, 47, 1, 58, 46, 43, 56, 43]\nhii there\n</code></pre></p>","tags":["GPT","Transformer","Self-Attention","PyTorch","\u8a00\u8a9e\u30e2\u30c7\u30eb","\u6df1\u5c64\u5b66\u7fd2","\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u6a5f\u69cb","\u4f4d\u7f6e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0","\u30c6\u30ad\u30b9\u30c8\u751f\u6210","\u30aa\u30fc\u30c8\u30ea\u30b0\u30ec\u30c3\u30b7\u30d6","ChatGPT"]},{"location":"LLM/05_Let%27s_build_GPT_from_scratch/#25","title":"2.5 \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u6e96\u5099\u3068\u5206\u5272","text":"<pre><code># \u5168\u30c6\u30ad\u30b9\u30c8\u30c7\u30fc\u30bf\u3092PyTorch\u30c6\u30f3\u30bd\u30eb\u306b\u5909\u63db\nimport torch\ndata = torch.tensor(encode(text), dtype=torch.long)\n\nprint(data.shape, data.dtype)\nprint(data[:100])  # \u6700\u521d\u306e100\u6587\u5b57\u306e\u6570\u5024\u8868\u73fe\u3092\u78ba\u8a8d\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>torch.Size([1115394]) torch.int64\ntensor([18, 47, 56, 57, 58,  1, 15, 47, 58, 47, 64, 43, 52, 10,  0, 14, 43, 44,\n        53, 56, 43,  1, 61, 43,  1, 54, 56, 53, 41, 43, 43, 42,  1, 39, 52, 63,\n         1, 44, 59, 56, 58, 46, 43, 56,  6,  1, 46, 43, 39, 56,  1, 51, 43,  1,\n        57, 54, 43, 39, 49,  8,  0,  0, 13, 50, 50, 10,  0, 31, 54, 43, 39, 49,\n         6,  1, 57, 54, 43, 39, 49,  8,  0,  0, 18, 47, 56, 57, 58,  1, 15, 47,\n        58, 47, 64, 43, 52, 10,  0, 37, 53, 59])\n</code></pre></p> <p>\u8a13\u7df4/\u691c\u8a3c\u5206\u5272: </p> <p>\u8a13\u7df4\u7528\u3068\u691c\u8a3c\u7528\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 \u30c7\u30fc\u30bf\u306e\u6700\u521d\u306e90%\u3092\u8a13\u7df4\u30c7\u30fc\u30bf\u3001\u6700\u5f8c\u306e10%\u3092\u691c\u8a3c\u30c7\u30fc\u30bf\u3068\u3057\u3066\u4f7f\u7528\u3057\u3001\u30e2\u30c7\u30eb\u306e\u904e\u5b66\u7fd2\u3092\u8a55\u4fa1\u3057\u307e\u3059\u3002</p> <pre><code># \u30c7\u30fc\u30bf\u3092\u8a13\u7df4\u7528\uff0890%\uff09\u3068\u691c\u8a3c\u7528\uff0810%\uff09\u306b\u5206\u5272\nn = int(0.9*len(data))\ntrain_data = data[:n]\nval_data = data[n:]\n</code></pre>","tags":["GPT","Transformer","Self-Attention","PyTorch","\u8a00\u8a9e\u30e2\u30c7\u30eb","\u6df1\u5c64\u5b66\u7fd2","\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u6a5f\u69cb","\u4f4d\u7f6e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0","\u30c6\u30ad\u30b9\u30c8\u751f\u6210","\u30aa\u30fc\u30c8\u30ea\u30b0\u30ec\u30c3\u30b7\u30d6","ChatGPT"]},{"location":"LLM/05_Let%27s_build_GPT_from_scratch/#3","title":"3. \u30d0\u30c3\u30c1\u51e6\u7406\u3068\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u30e2\u30c7\u30eb","text":"","tags":["GPT","Transformer","Self-Attention","PyTorch","\u8a00\u8a9e\u30e2\u30c7\u30eb","\u6df1\u5c64\u5b66\u7fd2","\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u6a5f\u69cb","\u4f4d\u7f6e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0","\u30c6\u30ad\u30b9\u30c8\u751f\u6210","\u30aa\u30fc\u30c8\u30ea\u30b0\u30ec\u30c3\u30b7\u30d6","ChatGPT"]},{"location":"LLM/05_Let%27s_build_GPT_from_scratch/#31","title":"3.1 \u30d0\u30c3\u30c1\u51e6\u7406\u3068\u30b7\u30fc\u30b1\u30f3\u30b9\u69cb\u7bc9","text":"<p>\u30c1\u30e3\u30f3\u30af\u51e6\u7406: Transformer\u306f\u5168\u30c6\u30ad\u30b9\u30c8\u3092\u4e00\u5ea6\u306b\u51e6\u7406\u3067\u304d\u306a\u3044\u305f\u3081\u3001\u30c7\u30fc\u30bf\u306e\u300c\u5c0f\u3055\u306a\u30e9\u30f3\u30c0\u30e0\u306a\u30c1\u30e3\u30f3\u30af\u300d\u3092\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3057\u3066\u8a13\u7df4\u3057\u307e\u3059\u3002</p> <ul> <li>\u30d6\u30ed\u30c3\u30af\u30b5\u30a4\u30ba: \u30c1\u30e3\u30f3\u30af\u306e\u6700\u5927\u9577\u3002\u300c\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u9577\u300d\u3068\u3082\u547c\u3070\u308c\u308b\u3002</li> <li>\u8907\u6570\u306e\u4f8b\u306e\u30d1\u30c3\u30af: \u5404\u30c1\u30e3\u30f3\u30af\u306b\u306f\u3001\u6587\u8108\u3068\u305d\u306e\u6b21\u306e\u30bf\u30fc\u30b2\u30c3\u30c8\u6587\u5b57\u306e\u8907\u6570\u306e\u4e88\u6e2c\u4f8b\u304c\u542b\u307e\u308c\u308b\u3002</li> <li>\u30d0\u30c3\u30c1\u51e6\u7406: GPU\u306e\u52b9\u7387\u7684\u306a\u5229\u7528\u306e\u305f\u3081\u3001\u300c\u8907\u6570\u306e\u30c1\u30e3\u30f3\u30af\u3092\u5358\u4e00\u306e\u30c6\u30f3\u30bd\u30eb\u306b\u307e\u3068\u3081\u3066\u30b9\u30bf\u30c3\u30af\u3059\u308b\u300d\u3002</li> </ul> <pre><code>block_size = 8\ntrain_data[:block_size + 1]\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>tensor([18, 47, 56, 57, 58,  1, 15, 47, 58])\n</code></pre></p> <pre><code># \u5358\u4e00\u306e\u30c1\u30e3\u30f3\u30af\u304b\u3089\u8907\u6570\u306e\u8a13\u7df4\u4f8b\u3092\u751f\u6210\u3059\u308b\u4ed5\u7d44\u307f\u3092\u78ba\u8a8d\nx = train_data[:block_size]\ny = train_data[1:block_size+1]\nprint(y)\nfor t in range(block_size):\n    context = x[:t+1]\n    target = y[t]\n    print(f\"{t}. when input is {context} the target: {target}\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>tensor([47, 56, 57, 58,  1, 15, 47, 58])\n0. when input is tensor([18]) the target: 47\n1. when input is tensor([18, 47]) the target: 56\n2. when input is tensor([18, 47, 56]) the target: 57\n3. when input is tensor([18, 47, 56, 57]) the target: 58\n4. when input is tensor([18, 47, 56, 57, 58]) the target: 1\n5. when input is tensor([18, 47, 56, 57, 58,  1]) the target: 15\n6. when input is tensor([18, 47, 56, 57, 58,  1, 15]) the target: 47\n7. when input is tensor([18, 47, 56, 57, 58,  1, 15, 47]) the target: 58\n</code></pre></p> <p>\u30d0\u30c3\u30c1\u51e6\u7406</p> <pre><code>torch.manual_seed(1337)  # \u4e71\u6570\u30b7\u30fc\u30c9\u3092\u56fa\u5b9a\u3057\u3066\u518d\u73fe\u6027\u3092\u78ba\u4fdd\nbatch_size = 4           # \u30d0\u30c3\u30c1\u30b5\u30a4\u30ba\uff08\u540c\u6642\u306b\u51e6\u7406\u3059\u308b\u30c7\u30fc\u30bf\u6570\uff09\nblock_size = 8           # 1\u30b5\u30f3\u30d7\u30eb\u306e\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u9577\uff08\u30c8\u30fc\u30af\u30f3\u6570\uff09\n\ndef get_batch(split):\n    # \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u9078\u629e\uff1atrain\u307e\u305f\u306fvalidation\n    data = train_data if split == 'train' else val_data\n\n    # \u30e9\u30f3\u30c0\u30e0\u306a\u958b\u59cb\u4f4d\u7f6e\u3092\u751f\u6210\uff08batch_size\u500b\uff09\n    # len(data) - block_size\u306b\u3059\u308b\u3053\u3068\u3067\u3001\u5883\u754c\u30aa\u30fc\u30d0\u30fc\u3092\u9632\u3050\n    ix = torch.randint(len(data) - block_size, (batch_size,))  \n\n    # \u5165\u529b\u30b7\u30fc\u30b1\u30f3\u30b9\uff08x\uff09\uff1a\u5404\u958b\u59cb\u4f4d\u7f6e\u304b\u3089block_size\u5206\u306e\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\n    x = torch.stack([data[i:i+block_size] for i in ix]) \n\n    # \u30bf\u30fc\u30b2\u30c3\u30c8\u30b7\u30fc\u30b1\u30f3\u30b9\uff08y\uff09\uff1ax\u3088\u308a1\u3064\u305a\u3064\u5f8c\u308d\u306b\u30b7\u30d5\u30c8\u3057\u305f\u30c7\u30fc\u30bf\n    y = torch.stack([data[i+1:i+block_size+1] for i in ix])  \n\n    return x, y  # (batch_size, block_size)\u306e\u5f62\u72b6\u3067\u8fd4\u3059\n\nxb, yb = get_batch(\"train\")  # \u8a13\u7df4\u30c7\u30fc\u30bf\u304b\u3089\u30d0\u30c3\u30c1\u3092\u53d6\u5f97\n\nprint(\"inputs\")\nprint(xb.shape)              # \u5165\u529b\u30c6\u30f3\u30bd\u30eb\u306e\u5f62\u72b6\u3092\u8868\u793a\nprint(xb)                    # \u5165\u529b\u30c6\u30f3\u30bd\u30eb\u306e\u5185\u5bb9\u3092\u8868\u793a\nprint(\"targets\")\nprint(yb.shape)              # \u30bf\u30fc\u30b2\u30c3\u30c8\u30c6\u30f3\u30bd\u30eb\u306e\u5f62\u72b6\u3092\u8868\u793a\nprint(yb)                    # \u30bf\u30fc\u30b2\u30c3\u30c8\u30c6\u30f3\u30bd\u30eb\u306e\u5185\u5bb9\u3092\u8868\u793a\n\nprint(\"--------\")\n\n# \u5404\u30d0\u30c3\u30c1\u30fb\u5404\u6642\u523b\u3054\u3068\u306b\u3001\u4e0e\u3048\u3089\u308c\u305f\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3068\u30bf\u30fc\u30b2\u30c3\u30c8\u3092\u8868\u793a\nfor b in range(batch_size): # \u30d0\u30c3\u30c1\u6b21\u5143\n    for t in range(block_size): # \u6642\u7cfb\u5217\u6b21\u5143\n        context = xb[b, :t+1]   # t\u6642\u70b9\u307e\u3067\u306e\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\n        target = yb[b, t]       # \u4e88\u6e2c\u3059\u3079\u304d\u30bf\u30fc\u30b2\u30c3\u30c8\n        print(f\"when input is {context.tolist()} the target: {target}\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>inputs\ntorch.Size([4, 8])\ntensor([[24, 43, 58,  5, 57,  1, 46, 43],\n        [44, 53, 56,  1, 58, 46, 39, 58],\n        [52, 58,  1, 58, 46, 39, 58,  1],\n        [25, 17, 27, 10,  0, 21,  1, 54]])\ntargets\ntorch.Size([4, 8])\ntensor([[43, 58,  5, 57,  1, 46, 43, 39],\n        [53, 56,  1, 58, 46, 39, 58,  1],\n        [58,  1, 58, 46, 39, 58,  1, 46],\n        [17, 27, 10,  0, 21,  1, 54, 39]])\n--------\nwhen input is [24] the target: 43\nwhen input is [24, 43] the target: 58\nwhen input is [24, 43, 58] the target: 5\nwhen input is [24, 43, 58, 5] the target: 57\nwhen input is [24, 43, 58, 5, 57] the target: 1\nwhen input is [24, 43, 58, 5, 57, 1] the target: 46\nwhen input is [24, 43, 58, 5, 57, 1, 46] the target: 43\nwhen input is [24, 43, 58, 5, 57, 1, 46, 43] the target: 39\nwhen input is [44] the target: 53\nwhen input is [44, 53] the target: 56\nwhen input is [44, 53, 56] the target: 1\nwhen input is [44, 53, 56, 1] the target: 58\nwhen input is [44, 53, 56, 1, 58] the target: 46\nwhen input is [44, 53, 56, 1, 58, 46] the target: 39\nwhen input is [44, 53, 56, 1, 58, 46, 39] the target: 58\nwhen input is [44, 53, 56, 1, 58, 46, 39, 58] the target: 1\nwhen input is [52] the target: 58\nwhen input is [52, 58] the target: 1\nwhen input is [52, 58, 1] the target: 58\nwhen input is [52, 58, 1, 58] the target: 46\nwhen input is [52, 58, 1, 58, 46] the target: 39\nwhen input is [52, 58, 1, 58, 46, 39] the target: 58\nwhen input is [52, 58, 1, 58, 46, 39, 58] the target: 1\nwhen input is [52, 58, 1, 58, 46, 39, 58, 1] the target: 46\nwhen input is [25] the target: 17\nwhen input is [25, 17] the target: 27\nwhen input is [25, 17, 27] the target: 10\nwhen input is [25, 17, 27, 10] the target: 0\nwhen input is [25, 17, 27, 10, 0] the target: 21\nwhen input is [25, 17, 27, 10, 0, 21] the target: 1\nwhen input is [25, 17, 27, 10, 0, 21, 1] the target: 54\nwhen input is [25, 17, 27, 10, 0, 21, 1, 54] the target: 39\n</code></pre></p> <pre><code>print(xb) # Transformer\u3078\u306e\u5165\u529b\u30c7\u30fc\u30bf\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>tensor([[24, 43, 58,  5, 57,  1, 46, 43],\n        [44, 53, 56,  1, 58, 46, 39, 58],\n        [52, 58,  1, 58, 46, 39, 58,  1],\n        [25, 17, 27, 10,  0, 21,  1, 54]])\n</code></pre></p> <p>\u30e9\u30f3\u30c0\u30e0\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u306b\u3064\u3044\u3066</p> <p>\u8a00\u8a9e\u30e2\u30c7\u30eb\u306e\u8a13\u7df4\u3067\u306f\u3001\u30c7\u30fc\u30bf\u304b\u3089\u30e9\u30f3\u30c0\u30e0\u306bblock_size\u5206\u306e\u30b7\u30fc\u30b1\u30f3\u30b9\u3092\u53d6\u5f97\u3059\u308b\u3002\u3053\u306e\u6642\u3001\u5168\u3066\u306eblock\u304c\u8a13\u7df4\u306b\u4f7f\u308f\u308c\u308b\u308f\u3051\u3067\u306f\u306a\u3044\u3002\u4e00\u90e8\u306eblock\u306f\u4f55\u5ea6\u3082\u9078\u3070\u308c\u3001\u4e00\u90e8\u306f\u4e00\u5ea6\u3082\u9078\u3070\u308c\u306a\u3044\u53ef\u80fd\u6027\u304c\u3042\u308b\u3002 \u3057\u304b\u3057\u3001\u3053\u308c\u306f\u554f\u984c\u3067\u306f\u306a\u3044\u3002\u6df1\u5c64\u5b66\u7fd2\u306f\u7d71\u8a08\u5b66\u7fd2\u3067\u3042\u308a\u3001\u5168\u3066\u306e\u30c7\u30fc\u30bf\u3092\u898b\u308b\u5fc5\u8981\u306f\u306a\u3044\u3002\u8a00\u8a9e\u306b\u306f\u591a\u304f\u306e\u91cd\u8907\u30d1\u30bf\u30fc\u30f3\u304c\u3042\u308b\u305f\u3081\u3001\u30e9\u30f3\u30c0\u30e0\u30b5\u30f3\u30d7\u30eb\u3067\u3082\u8a00\u8a9e\u306e\u7d71\u8a08\u7684\u898f\u5247\u3092\u5341\u5206\u5b66\u7fd2\u3067\u304d\u308b\u3002\u307e\u305f\u3001\u30e9\u30f3\u30c0\u30e0\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u306f\u30c7\u30fc\u30bf\u306e\u5c40\u6240\u7684\u76f8\u95a2\u3092\u6253\u7834\u3057\u3001\u52b9\u7387\u7684\u306a\u5b66\u7fd2\u3092\u4fc3\u9032\u3059\u308b\u3002 \u5341\u5206\u306a\u8a13\u7df4\u30b9\u30c6\u30c3\u30d7\u3092\u884c\u3048\u3070\u3001\u7d71\u8a08\u7684\u306b\u5927\u90e8\u5206\u306eblock\u306f\u6700\u7d42\u7684\u306b\u30b5\u30f3\u30d7\u30eb\u3055\u308c\u308b\u3053\u3068\u306b\u306a\u308b\u3002</p>","tags":["GPT","Transformer","Self-Attention","PyTorch","\u8a00\u8a9e\u30e2\u30c7\u30eb","\u6df1\u5c64\u5b66\u7fd2","\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u6a5f\u69cb","\u4f4d\u7f6e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0","\u30c6\u30ad\u30b9\u30c8\u751f\u6210","\u30aa\u30fc\u30c8\u30ea\u30b0\u30ec\u30c3\u30b7\u30d6","ChatGPT"]},{"location":"LLM/05_Let%27s_build_GPT_from_scratch/#32","title":"3.2 \u6700\u3082\u30b7\u30f3\u30d7\u30eb\u306a\u30e2\u30c7\u30eb: \u30d0\u30a4\u30b0\u30e9\u30e0\u8a00\u8a9e\u30e2\u30c7\u30eb","text":"<p>\u6700\u521d\u306b\u3001\u6700\u3082\u30b7\u30f3\u30d7\u30eb\u306a\u30d0\u30a4\u30b0\u30e9\u30e0\u8a00\u8a9e\u30e2\u30c7\u30eb\u3092\u5b9f\u88c5\u3057\u3066\u57fa\u672c\u6982\u5ff5\u3092\u7406\u89e3\u3059\u308b\uff1a</p> <ul> <li>\u5b9f\u88c5: PyTorch\u306enn.Module\u3067\u30d0\u30a4\u30b0\u30e9\u30e0\u8a00\u8a9e\u30e2\u30c7\u30eb\u3092\u5b9f\u88c5</li> <li>\u57cb\u3081\u8fbc\u307f\u5c64: nn.Embedding\u3092\u4f7f\u7528\u3057\u3066\u3001\u5404\u30c8\u30fc\u30af\u30f3\uff08\u6587\u5b57\uff09\u3092vocab_size x vocab_size\u306e\u57cb\u3081\u8fbc\u307f\u30d9\u30af\u30c8\u30eb\u306b\u5909\u63db\u3059\u308b\u3002\u5165\u529b\u306e\u5404\u6574\u6570\u304c\u57cb\u3081\u8fbc\u307f\u5c64\u306e\u884c\u3092\u9078\u629e\u3059\u308b</li> <li>\u30ed\u30b8\u30c3\u30c8\u3068\u640d\u5931: \u51fa\u529b\u306f\u6b21\u306e\u6587\u5b57\u306e\u300c\u30b9\u30b3\u30a2\u300d\uff08logit\uff09\u3068\u306a\u308b\u3002\u640d\u5931\u306f\u300cNegative Log Likelihood Loss\u300d\uff08PyTorch\u3067\u306fCrossEntropyLoss\uff09\u3067\u8a55\u4fa1\u3059\u308b</li> <li>\u751f\u6210: \u73fe\u5728\u306e\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u306b\u57fa\u3065\u3044\u3066\u6b21\u306e\u30c8\u30fc\u30af\u30f3\u3092\u751f\u6210\u3059\u308b\u3002softmax\u3067\u78ba\u7387\u3092\u8a08\u7b97\u3057\u3001torch.multinomial\u3067\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3059\u308b</li> <li>\u8a13\u7df4: Adam\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u3092\u4f7f\u7528\u3057\u3001\u640d\u5931\u3092\u6700\u5c0f\u5316\u3059\u308b\u3088\u3046\u306b\u30e2\u30c7\u30eb\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u66f4\u65b0\u3059\u308b\u3002\u30d0\u30a4\u30b0\u30e9\u30e0\u30e2\u30c7\u30eb\u3067\u306f\u3001\u300c\u5165\u529b\u306f\u5b8c\u5168\u306b\u30e9\u30f3\u30c0\u30e0\u300d\u306a\u51fa\u529b\u3092\u751f\u6210\u3059\u308b\u304c\u3001\u8a13\u7df4\u306b\u3088\u308a\u3044\u304f\u3089\u304b\u6539\u5584\u3055\u308c\u308b</li> </ul> <pre><code>import torch\nimport torch.nn as nn\nfrom torch.nn import functional as F\ntorch.manual_seed(1337)\n\nclass BigramLanguageModel(nn.Module):\n    def __init__(self, vocab_size):\n        super().__init__()\n        # \u5404\u30c8\u30fc\u30af\u30f3\u306f\u57cb\u3081\u8fbc\u307f\u5c64\u304b\u3089\u6b21\u306e\u30c8\u30fc\u30af\u30f3\u306e\u30ed\u30b8\u30c3\u30c8\u3092\u76f4\u63a5\u8aad\u307f\u53d6\u308b\n        self.token_embedding_table = nn.Embedding(vocab_size, vocab_size)\n\n    def forward(self, idx, targets=None):\n        # idx\u3068targets\u306f\u3069\u3061\u3089\u3082\u6574\u6570\u306e(B, T)\u30c6\u30f3\u30bd\u30eb\n        logits = self.token_embedding_table(idx) # (B, T, C)\n\n        if targets is None:\n            loss = None\n        else:\n            B, T, C = logits.shape\n            logits = logits.view(B*T, C)\n            targets = targets.view(B*T)\n            loss = F.cross_entropy(logits, targets)\n\n        return logits, loss\n\n    def generate(self, idx, max_new_tokens):\n        # idx\u306f\u73fe\u5728\u306e\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e(B, T)\u914d\u5217\n        for _ in range(max_new_tokens):\n            # \u4e88\u6e2c\u3092\u53d6\u5f97\n            logits, loss = self(idx)\n            # \u6700\u5f8c\u306e\u6642\u9593\u30b9\u30c6\u30c3\u30d7\u306b\u306e\u307f\u7126\u70b9\u3092\u5f53\u3066\u308b\n            logits = logits[:, -1, :] # (B, C)\u306b\u306a\u308b\n            # softmax\u3092\u9069\u7528\u3057\u3066\u78ba\u7387\u3092\u53d6\u5f97\n            probs = F.softmax(logits, dim=-1) # (B, C)\n            # \u5206\u5e03\u304b\u3089\u30b5\u30f3\u30d7\u30eb\n            idx_next = torch.multinomial(probs, num_samples=1) # (B, 1)\n            # \u30b5\u30f3\u30d7\u30eb\u3055\u308c\u305f\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u5b9f\u884c\u30b7\u30fc\u30b1\u30f3\u30b9\u306b\u8ffd\u52a0\n            idx = torch.cat((idx, idx_next), dim=1) # (B, T+1)\n        return idx\n\nprint(f\"inputs: {xb.shape}\") # \u5165\u529b\u30c6\u30f3\u30bd\u30eb\u306e\u5f62\u72b6\u3092\u8868\u793a\nprint(f\"targets: {yb.shape}\") # \u30bf\u30fc\u30b2\u30c3\u30c8\u30c6\u30f3\u30bd\u30eb\u306e\u5f62\u72b6\u3092\u8868\u793a\nmodel = BigramLanguageModel(vocab_size)\nlogits, loss = model(xb, yb)\nprint(logits.shape)\nprint(loss)\n\nprint(decode(model.generate(idx = torch.zeros((1, 1), dtype=torch.long), max_new_tokens=100)[0].tolist()))\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>inputs: torch.Size([4, 8])\ntargets: torch.Size([4, 8])\ntorch.Size([32, 65])\ntensor(4.8786, grad_fn=&lt;NllLossBackward0&gt;)\n\nSKIcLT;AcELMoTbvZv C?nq-QE33:CJqkOKH-q;:la!oiywkHjgChzbQ?u!3bLIgwevmyFJGUGp\nwnYWmnxKWWev-tDqXErVKLgJ\n</code></pre></p> <p>\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6: AdamW (Adam\u306e\u6539\u826f\u7248) \u3092\u5229\u7528\u3057\u307e\u3059\u3002</p> <pre><code># PyTorch\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u306e\u4f5c\u6210\noptimizer = torch.optim.AdamW(model.parameters(), lr=1e-3)\n</code></pre> <pre><code># \u8a13\u7df4\u30eb\u30fc\u30d7\u306e\u5b9f\u884c\nbatch_size = 32\nfor steps in range(5000): # \u3088\u308a\u826f\u3044\u7d50\u679c\u3092\u5f97\u308b\u306b\u306f\u30b9\u30c6\u30c3\u30d7\u6570\u3092\u5897\u3084\u3059...\n    # \u30c7\u30fc\u30bf\u306e\u30d0\u30c3\u30c1\u3092\u30b5\u30f3\u30d7\u30eb\n    xb, yb = get_batch(\"train\")\n\n    # \u640d\u5931\u3092\u8a55\u4fa1\n    logits, loss = model(xb, yb)\n    optimizer.zero_grad(set_to_none=True)\n    loss.backward()\n    optimizer.step()\n\nprint(f\"loss: {loss.item()}\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>loss: 4.801066875457764\n</code></pre></p> <pre><code>print(decode(model.generate(idx = torch.zeros((1, 1), dtype=torch.long), max_new_tokens=500)[0].tolist()))\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>Yc;A-wF-Idfyh$-HSVLzR'QljxYiykGzMGJmKUfN-IJL-mZI-PWT;AnYju'KZRmXc;ha;hEq-epHAA:NJjmyhjd\n3Q&amp;vW:PiHA fotx:VFv$VrgCOlvyeE?BK-j,lzoUlx;ALIB;&amp;srWk:PqNgCJW?nOphstDM$zW.:x:a-gfr,LC'KDIEuC -LzRwfqoTF&amp;!wKS.byhixJJi?aUJa,SjNYwJUDnLgBZ!zPYQQ&amp;oiOlv'bFOYGxrDGM?iNubZwJFbqAm,.pSrgi,\nW:CVz zlfFC!ufNevU'd f?Y3fAr.uYCJr&amp;!Aqm,p$YCUAbV!PnQhhs;:wiBk!a!!Q!ITh\nRwEiMWkzoXn!a!ajn&amp;o;cLgFVTq,Njx.y,cUNfI'qUzdpG;EZvmJMlH;w$ vhzzrgKtdlgM;zPNXrzVvix?LTNXx,ehfVJUZbW -.jxXW:x;i?nQUh&amp;yJh;tQJ$a:Cj$uUEa-PyFERV\noEBCKpF$ehSKgKYIoaiB\n</code></pre></p> <p>\u640d\u5931\u306f\u4e0b\u304c\u308a\u307e\u3057\u305f\u304c\u3001\u4e88\u6e2c\u306e\u5185\u5bb9\u306f\u5168\u7136\u30c0\u30e1\u3067\u3059\u306d\u3002 \u305d\u308c\u306f\u3082\u3063\u3068\u3082\u30b7\u30f3\u30d7\u30eb\u306a\u30e2\u30c7\u30eb\u3067\u3059\u304b\u3089\u3001features\u304c\u72ec\u7acb\u3057\u3066\u3001\u95a2\u9023\u6027\u304c\u306a\u304b\u3063\u305f\u3067\u3059\u3002</p>","tags":["GPT","Transformer","Self-Attention","PyTorch","\u8a00\u8a9e\u30e2\u30c7\u30eb","\u6df1\u5c64\u5b66\u7fd2","\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u6a5f\u69cb","\u4f4d\u7f6e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0","\u30c6\u30ad\u30b9\u30c8\u751f\u6210","\u30aa\u30fc\u30c8\u30ea\u30b0\u30ec\u30c3\u30b7\u30d6","ChatGPT"]},{"location":"LLM/05_Let%27s_build_GPT_from_scratch/#4-self-attention","title":"4. Self-Attention\u30e1\u30ab\u30cb\u30ba\u30e0\u306e\u69cb\u7bc9","text":"","tags":["GPT","Transformer","Self-Attention","PyTorch","\u8a00\u8a9e\u30e2\u30c7\u30eb","\u6df1\u5c64\u5b66\u7fd2","\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u6a5f\u69cb","\u4f4d\u7f6e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0","\u30c6\u30ad\u30b9\u30c8\u751f\u6210","\u30aa\u30fc\u30c8\u30ea\u30b0\u30ec\u30c3\u30b7\u30d6","ChatGPT"]},{"location":"LLM/05_Let%27s_build_GPT_from_scratch/#41-self-attention","title":"4.1 Self-Attention\uff08\u81ea\u5df1\u6ce8\u610f\u6a5f\u69cb\uff09\u306e\u7406\u8ad6","text":"","tags":["GPT","Transformer","Self-Attention","PyTorch","\u8a00\u8a9e\u30e2\u30c7\u30eb","\u6df1\u5c64\u5b66\u7fd2","\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u6a5f\u69cb","\u4f4d\u7f6e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0","\u30c6\u30ad\u30b9\u30c8\u751f\u6210","\u30aa\u30fc\u30c8\u30ea\u30b0\u30ec\u30c3\u30b7\u30d6","ChatGPT"]},{"location":"LLM/05_Let%27s_build_GPT_from_scratch/#_9","title":"\u52b9\u7387\u7684\u306a\u91cd\u307f\u4ed8\u304d\u96c6\u7d04\u306e\u6570\u5b66\u7684\u30c8\u30ea\u30c3\u30af","text":"<p>\u307e\u305a\u3001\u884c\u5217\u4e57\u7b97\u3092\u4f7f\u3063\u305f\u91cd\u307f\u4ed8\u304d\u96c6\u7d04\u306e\u4ed5\u7d44\u307f\u3092\u7406\u89e3\u3059\u308b\u305f\u3081\u306b\u3001\u30b7\u30f3\u30d7\u30eb\u306a\u30c8\u30a4\u4f8b\u304b\u3089\u59cb\u3081\u307e\u3057\u3087\u3046\u3002\u3053\u306e\u4f8b\u3067\u306f\u3001\u4e0b\u4e09\u89d2\u884c\u5217\u3068\u91cd\u307f\u6b63\u898f\u5316\u3092\u4f7f\u3063\u3066\u3001\u904e\u53bb\u306e\u30c8\u30fc\u30af\u30f3\u306e\u307f\u3092\u53c2\u7167\u3059\u308b\u4ed5\u7d44\u307f\u3092\u4f5c\u308a\u307e\u3059\u3002</p> <pre><code># \u884c\u5217\u4e57\u7b97\u304c\u300c\u91cd\u307f\u4ed8\u304d\u96c6\u7d04\u300d\u306b\u3069\u306e\u3088\u3046\u306b\u4f7f\u7528\u3055\u308c\u308b\u304b\u3092\u793a\u3059\u30c8\u30a4\u4f8b\ntorch.manual_seed(42)\na_original = torch.tril(torch.ones(3,3))\na = a_original / torch.sum(a_original, 1, keepdim=True)\nb = torch.randint(0,10,(3,2)).float()\nc = a @ b\nprint(\"a_original=\")\nprint(a_original)\nprint(f\"a={a}\")\nprint(f\"b={b}\")\nprint(f\"c={c}\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>a_original=\ntensor([[1., 0., 0.],\n        [1., 1., 0.],\n        [1., 1., 1.]])\na=tensor([[1.0000, 0.0000, 0.0000],\n        [0.5000, 0.5000, 0.0000],\n        [0.3333, 0.3333, 0.3333]])\nb=tensor([[2., 7.],\n        [6., 4.],\n        [6., 5.]])\nc=tensor([[2.0000, 7.0000],\n        [4.0000, 5.5000],\n        [4.6667, 5.3333]])\n</code></pre></p> <p>\u305d\u308c\u3067\u306f\u3001\u5b9f\u969b\u306e\u30c6\u30f3\u30bd\u30eb\u3092\u4f7f\u3063\u3066\u3053\u306e\u6982\u5ff5\u3092\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u4ee5\u4e0b\u3067\u306f\u3001\u30d0\u30c3\u30c1\u51e6\u7406\u3092\u542b\u30803\u6b21\u5143\u30c6\u30f3\u30bd\u30eb\uff08\u30d0\u30c3\u30c1\u3001\u6642\u9593\u3001\u30c1\u30e3\u30f3\u30cd\u30eb\uff09\u3067\u91cd\u307f\u4ed8\u304d\u96c6\u7d04\u304c\u3069\u306e\u3088\u3046\u306b\u52d5\u4f5c\u3059\u308b\u304b\u3092\u898b\u3066\u3044\u304d\u307e\u3059\u3002</p> <pre><code># \u4ee5\u4e0b\u306e\u30c8\u30a4\u4f8b\u3092\u8003\u3048\u3066\u307f\u307e\u3057\u3087\u3046\uff1a\ntorch.manual_seed(1337)\nB,T,C = 4,8,2 # \u30d0\u30c3\u30c1\u3001\u6642\u9593\u3001\u30c1\u30e3\u30f3\u30cd\u30eb\nx = torch.randn(B,T,C)\nprint(x.shape)\nprint(x[0])\nprint(x[0, :2])\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>torch.Size([4, 8, 2])\ntensor([[ 0.1808, -0.0700],\n        [-0.3596, -0.9152],\n        [ 0.6258,  0.0255],\n        [ 0.9545,  0.0643],\n        [ 0.3612,  1.1679],\n        [-1.3499, -0.5102],\n        [ 0.2360, -0.2398],\n        [-0.9211,  1.5433]])\ntensor([[ 0.1808, -0.0700],\n        [-0.3596, -0.9152]])\n</code></pre></p> <pre><code># x[b,t] = mean_{i&lt;=t} x[b,i] \u3092\u5b9f\u73fe\u3057\u305f\u3044\nxbow = torch.zeros((B,T,C))\nfor b in range(B):\n    for t in range(T):\n        xprev = x[b, :t+1] # (t,C)\n        xbow[b,t] = torch.mean(xprev, 0)\n\nprint(xbow.shape)\nprint(xbow[0])\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>torch.Size([4, 8, 2])\ntensor([[ 0.1808, -0.0700],\n        [-0.0894, -0.4926],\n        [ 0.1490, -0.3199],\n        [ 0.3504, -0.2238],\n        [ 0.3525,  0.0545],\n        [ 0.0688, -0.0396],\n        [ 0.0927, -0.0682],\n        [-0.0341,  0.1332]])\n</code></pre></p> <pre><code># \u30d0\u30fc\u30b8\u30e7\u30f32: \u91cd\u307f\u4ed8\u304d\u96c6\u7d04\u306b\u884c\u5217\u4e57\u7b97\u3092\u4f7f\u7528\nwei = torch.tril(torch.ones(T,T))\nwei = wei / wei.sum(1, keepdim=True)\nxbow2 = wei @ x # (B,T,T)@(B,T,C)----&gt; (B,T,C)\nprint(torch.allclose(xbow, xbow2))\n\nprint(xbow2[0])\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>True\ntensor([[ 0.1808, -0.0700],\n        [-0.0894, -0.4926],\n        [ 0.1490, -0.3199],\n        [ 0.3504, -0.2238],\n        [ 0.3525,  0.0545],\n        [ 0.0688, -0.0396],\n        [ 0.0927, -0.0682],\n        [-0.0341,  0.1332]])\n</code></pre></p> <p>\u5f62\u72b6\u5909\u63db\u306e\u4ed5\u7d44\u307f <pre><code>wei.shape = [T, T] = [8, 8]\nx.shape = [B, T, C] = [4, 8, 2]\nbroadcasting\u306b\u3088\u308a: [8, 8] \u2192 [4, 8, 8]\n\u6700\u7d42\u7d50\u679c: [4, 8, 8] @ [4, 8, 2] \u2192 [4, 8, 2]\n</code></pre></p> <p>matrix multiplication\u306e\u30eb\u30fc\u30eb</p> <ul> <li>\u6700\u5f8c\u306e2\u6b21\u5143\u306e\u307f\u304c\u884c\u5217\u4e57\u7b97\u306b\u53c2\u52a0 </li> <li>\u524d\u306e\u6b21\u5143\u306f\u30d0\u30c3\u30c1\u51e6\u7406\uff08for loop\u306b\u76f8\u5f53\uff09</li> <li>4\u6b21\u5143\u306a\u30892\u91cdfor loop\u30015\u6b21\u5143\u306a\u30893\u91cdfor loop\u3068\u540c\u7b49</li> </ul> <p>wei\u30de\u30c8\u30ea\u30c3\u30af\u30b9\u306e\u5f79\u5272 <pre><code>wei = [[1.0, 0.0, 0.0, ...],   # \u6642\u523b0: \u81ea\u5206\u306e\u307f\n       [0.5, 0.5, 0.0, ...],   # \u6642\u523b1: 0,1\u306e\u5e73\u5747  \n       [0.33,0.33,0.33,...],   # \u6642\u523b2: 0,1,2\u306e\u5e73\u5747\n       ...]\n</code></pre></p> <p>\u306a\u305c\u3053\u3093\u306a\u306b\u5de7\u307f\u306a\u306e\u304b\uff1f</p> <p>\u5404\u884c\u304c\u300c\u96c6\u7d04\u30eb\u30fc\u30eb\u300d\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u308b\uff1a <pre><code>\u7b2c0\u884c\uff1a\u81ea\u5206\u306e\u307f\u3092\u898b\u308b \u2192 [1, 0, 0, 0]\n\u7b2c1\u884c\uff1a\u81ea\u5206\u3068\u524d\u306e1\u3064\u3092\u898b\u308b \u2192 [0.5, 0.5, 0, 0]\n\u7b2c2\u884c\uff1a\u81ea\u5206\u3068\u524d\u306e2\u3064\u3092\u898b\u308b \u2192 [1/3, 1/3, 1/3, 0]\n</code></pre> matrix multiplication\u304c\u3053\u308c\u3089\u306e\u30eb\u30fc\u30eb\u3092\u81ea\u52d5\u9069\u7528\u3059\u308b\uff01</p> <p>\u3053\u308c\u304cmatrix multiplication\u304c\u6df1\u5c64\u5b66\u7fd2\u3067\u3053\u308c\u307b\u3069\u4e2d\u6838\u7684\u306a\u7406\u7531 - \u8907\u96d1\u306a\u96c6\u7d04\u64cd\u4f5c\u3092\u512a\u96c5\u306b\u8868\u73fe\u3067\u304d\u308b\uff01</p> <p>\u6b21\u306b\u3001Softmax\u95a2\u6570\u3092\u4f7f\u3063\u305f\u91cd\u307f\u4ed8\u304d\u3092\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002Softmax\u306f\u3001\u30de\u30b9\u30ad\u30f3\u30b0\u3055\u308c\u3066\u3044\u306a\u3044\u90e8\u5206\u306e\u91cd\u307f\u3092\u6b63\u898f\u5316\u3057\u3001\u3088\u308a\u5b89\u5b9a\u3057\u305f\u5b66\u7fd2\u3092\u53ef\u80fd\u306b\u3057\u307e\u3059\u3002\u3053\u306e\u624b\u6cd5\u306f\u3001\u5b9f\u969b\u306eTransformer\u30e2\u30c7\u30eb\u3067\u4f7f\u7528\u3055\u308c\u3066\u3044\u307e\u3059\u3002</p> <pre><code># \u30d0\u30fc\u30b8\u30e7\u30f33: Softmax\u3092\u4f7f\u7528\ntril = torch.tril(torch.ones(T,T))\nwei = torch.zeros(T,T)\nwei = wei.masked_fill(tril == 0, float('-inf'))\nwei = F.softmax(wei, dim=1)\nxbow3 = wei @ x\nprint(torch.allclose(xbow,xbow3))\nprint(xbow3[0])\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>True\ntensor([[ 0.1808, -0.0700],\n        [-0.0894, -0.4926],\n        [ 0.1490, -0.3199],\n        [ 0.3504, -0.2238],\n        [ 0.3525,  0.0545],\n        [ 0.0688, -0.0396],\n        [ 0.0927, -0.0682],\n        [-0.0341,  0.1332]])\n</code></pre></p>","tags":["GPT","Transformer","Self-Attention","PyTorch","\u8a00\u8a9e\u30e2\u30c7\u30eb","\u6df1\u5c64\u5b66\u7fd2","\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u6a5f\u69cb","\u4f4d\u7f6e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0","\u30c6\u30ad\u30b9\u30c8\u751f\u6210","\u30aa\u30fc\u30c8\u30ea\u30b0\u30ec\u30c3\u30b7\u30d6","ChatGPT"]},{"location":"LLM/05_Let%27s_build_GPT_from_scratch/#_10","title":"\u30bb\u30eb\u30d5\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u30d8\u30c3\u30c9\u306e\u69cb\u7bc9","text":"<p>\u30bb\u30eb\u30d5\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u30d8\u30c3\u30c9\u306f\u3001Transformer\u30e2\u30c7\u30eb\u306e\u5fc3\u81d3\u90e8\u3067\u3042\u308a\u3001\u6587\u8108\u3092\u7406\u89e3\u3059\u308b\u305f\u3081\u306b\u5404\u30c8\u30fc\u30af\u30f3\uff08\u5358\u8a9e\u3084\u6587\u5b57\uff09\u304c\u4ed6\u306e\u3059\u3079\u3066\u306e\u30c8\u30fc\u30af\u30f3\u3068\u306e\u95a2\u4fc2\u3092\u8a08\u7b97\u3059\u308b\u4ed5\u7d44\u307f\u3067\u3059\u3002\u3053\u306e\u30d7\u30ed\u30bb\u30b9\u306f\u3001\u4ee5\u4e0b\u306e\u30b9\u30c6\u30c3\u30d7\u3067\u9032\u307f\u307e\u3059\u3002</p> <p>1. \u30af\u30a8\u30ea\u3001\u30ad\u30fc\u3001\u30d0\u30ea\u30e5\u30fc\u306e\u751f\u6210</p> <p>\u307e\u305a\u3001\u5165\u529b\u3055\u308c\u305f\u5404\u30c8\u30fc\u30af\u30f3\u306f\u3001\u81ea\u8eab\u306e\u60c5\u5831\u3092\u57fa\u306b3\u3064\u306e\u7570\u306a\u308b\u30d9\u30af\u30c8\u30eb\u300c\u30af\u30a8\u30ea\uff08Query\uff09\u300d\u3001\u300c\u30ad\u30fc\uff08Key\uff09\u300d\u3001\u300c\u30d0\u30ea\u30e5\u30fc\uff08Value\uff09\u300d\u3092\u751f\u6210\u3057\u307e\u3059\u3002\u3053\u308c\u3089\u306f\u305d\u308c\u305e\u308c\u4ee5\u4e0b\u306e\u5f79\u5272\u3092\u62c5\u3044\u307e\u3059\u3002</p> <ul> <li>\u30af\u30a8\u30ea\uff08Query\uff09: \u300c\u79c1\u306f\u4f55\u3092\u63a2\u3057\u3066\u3044\u308b\u304b\uff1f\u300d\u3068\u3044\u3046\u554f\u3044\u3092\u8868\u3057\u307e\u3059\u3002</li> <li>\u30ad\u30fc\uff08Key\uff09: \u300c\u79c1\u304c\u4f55\u3092\u6301\u3063\u3066\u3044\u308b\u304b\uff1f\u300d\u3068\u3044\u3046\u60c5\u5831\u3092\u542b\u307f\u307e\u3059\u3002</li> <li>\u30d0\u30ea\u30e5\u30fc\uff08Value\uff09: \u300c\u4f55\u3092\u4f1d\u3048\u308b\u3079\u304d\u60c5\u5831\u304b\uff1f\u300d\u3068\u3044\u3046\u5185\u5bb9\u305d\u306e\u3082\u306e\u3067\u3059\u3002</li> </ul> <p>\u3053\u306e\u30d7\u30ed\u30bb\u30b9\u3067\u306f\u3001nn.Linear\u30ec\u30a4\u30e4\u30fc\u3092\u4f7f\u3063\u3066\u3001\u5165\u529bX\u304b\u3089key_linear\u3001query_linear\u3001value_linear\u3068\u3044\u30463\u3064\u306e\u30d9\u30af\u30c8\u30eb\u304c\u751f\u6210\u3055\u308c\u307e\u3059\u3002</p> <p>2. \u30a2\u30d5\u30a3\u30cb\u30c6\u30a3\uff08\u95a2\u9023\u5ea6\uff09\u306e\u8a08\u7b97</p> <p>\u6b21\u306b\u3001\u5404\u30c8\u30fc\u30af\u30f3\u306e\u30af\u30a8\u30ea\u3068\u3001\u4ed6\u306e\u3059\u3079\u3066\u306e\u30c8\u30fc\u30af\u30f3\u306e\u30ad\u30fc\u306e\u5185\u7a4d\uff08\u30c9\u30c3\u30c8\u7a4d\uff09\u3092\u8a08\u7b97\u3057\u307e\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u305d\u308c\u305e\u308c\u306e\u30c8\u30fc\u30af\u30f3\u304c\u4e92\u3044\u306b\u3069\u308c\u3060\u3051\u95a2\u9023\u3057\u3066\u3044\u308b\u304b\u3092\u793a\u3059\u300c\u30a2\u30d5\u30a3\u30cb\u30c6\u30a3\u884c\u5217\u300d\u304c\u751f\u6210\u3055\u308c\u307e\u3059\u3002</p> <p>\u3053\u306e\u884c\u5217\u306f\u3001\u30e2\u30c7\u30eb\u304c\u3069\u306e\u30c8\u30fc\u30af\u30f3\u3092\u300c\u91cd\u8981\u300d\u3068\u898b\u306a\u3059\u3079\u304d\u304b\u3092\u5224\u65ad\u3059\u308b\u969b\u306e\u571f\u53f0\u3068\u306a\u308a\u307e\u3059\u3002\u7279\u306b\u3001B x T x head_size\u306e\u30af\u30a8\u30ea\u3068B x head_size x T\u306e\u30ad\u30fc\u3092\u4e57\u7b97\u3059\u308b\u3053\u3068\u3067\u3001B x T x T\u3068\u3044\u3046\u5f62\u72b6\u306e\u30a2\u30d5\u30a3\u30cb\u30c6\u30a3\u884c\u5217wei\u304c\u751f\u6210\u3055\u308c\u307e\u3059\u3002\u3053\u306e\u8a08\u7b97\u306b\u3088\u308a\u3001\u30d0\u30c3\u30c1\u5185\u306e\u30c7\u30fc\u30bf\u3054\u3068\u306b\u7570\u306a\u308b\u95a2\u9023\u5ea6\u304c\u8a08\u7b97\u3055\u308c\u3001\u30c7\u30fc\u30bf\u306b\u4f9d\u5b58\u3057\u305f\u67d4\u8edf\u306a\u76f8\u4e92\u4f5c\u7528\u304c\u53ef\u80fd\u306b\u306a\u308a\u307e\u3059\u3002</p> <p>3. \u30b9\u30b1\u30fc\u30ea\u30f3\u30b0\u3068\u30de\u30b9\u30ad\u30f3\u30b0</p> <p>\u8a08\u7b97\u3055\u308c\u305f\u30a2\u30d5\u30a3\u30cb\u30c6\u30a3wei\u306f\u3001sqrt(head_size)\u3067\u5272\u308b\u3053\u3068\u3067\u30b9\u30b1\u30fc\u30ea\u30f3\u30b0\u3055\u308c\u307e\u3059\u3002\u3053\u308c\u306f\u3001softmax\u95a2\u6570\u3092\u9069\u7528\u3059\u308b\u969b\u306b\u5024\u304c\u6975\u7aef\u306b\u5927\u304d\u304f\u306a\u308a\u3059\u304e\u308b\u306e\u3092\u9632\u304e\u3001\u5b66\u7fd2\u3092\u5b89\u5b9a\u3055\u305b\u308b\u305f\u3081\u306e\u91cd\u8981\u306a\u30b9\u30c6\u30c3\u30d7\u3067\u3059\u3002</p> <p>\u307e\u305f\u3001\u6587\u7ae0\u751f\u6210\u306a\u3069\u306e\u30bf\u30b9\u30af\u3067\u306f\u3001\u672a\u6765\u306e\u60c5\u5831\u3092\u53c2\u7167\u3057\u3066\u3057\u307e\u308f\u306a\u3044\u3088\u3046\u306b\u3001\u30de\u30b9\u30ad\u30f3\u30b0\u304c\u9069\u7528\u3055\u308c\u307e\u3059\u3002\u4e0b\u4e09\u89d2\u884c\u5217\u3092\u4f7f\u3046\u3053\u3068\u3067\u3001\u5404\u30c8\u30fc\u30af\u30f3\u304c\u81ea\u8eab\u3088\u308a\u524d\u306e\u30c8\u30fc\u30af\u30f3\u306b\u306e\u307f\u6ce8\u610f\u3092\u5411\u3051\u308b\u3088\u3046\u306b\u306a\u308a\u3001\u4e88\u6e2c\u304c\u904e\u53bb\u306e\u6587\u8108\u306b\u306e\u307f\u57fa\u3065\u304f\u300c\u30aa\u30fc\u30c8\u30ea\u30b0\u30ec\u30c3\u30b7\u30d6\u300d\u306a\u6027\u8cea\u3092\u4fdd\u3061\u307e\u3059\u3002</p> <p>4. \u30bd\u30d5\u30c8\u30de\u30c3\u30af\u30b9\u3068\u30d0\u30ea\u30e5\u30fc\u306e\u96c6\u7d04</p> <p>\u30b9\u30b1\u30fc\u30ea\u30f3\u30b0\u3068\u30de\u30b9\u30ad\u30f3\u30b0\u306e\u51e6\u7406\u3092\u7d42\u3048\u305f\u30a2\u30d5\u30a3\u30cb\u30c6\u30a3wei\u306bsoftmax\u3092\u9069\u7528\u3057\u3001\u305d\u308c\u305e\u308c\u306e\u95a2\u9023\u5ea6\u3092\u6b63\u898f\u5316\u3055\u308c\u305f\u78ba\u7387\u5206\u5e03\u306b\u5909\u63db\u3057\u307e\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u95a2\u9023\u5ea6\u304c0\u304b\u30891\u306e\u7bc4\u56f2\u306b\u53ce\u307e\u308a\u3001\u300c\u3069\u308c\u3060\u3051\u6ce8\u610f\u3092\u5411\u3051\u308b\u304b\u300d\u3068\u3044\u3046\u91cd\u307f\u4ed8\u3051\u304c\u660e\u78ba\u306b\u306a\u308a\u307e\u3059\u3002</p> <p>\u6700\u5f8c\u306b\u3001\u3053\u306e\u6b63\u898f\u5316\u3055\u308c\u305f\u91cd\u307fwei\u3068\u3001\u5404\u30c8\u30fc\u30af\u30f3\u306e\u30d0\u30ea\u30e5\u30fc\u3092\u884c\u5217\u4e57\u7b97\u3057\u307e\u3059\u3002\u3053\u306e\u51e6\u7406\u306b\u3088\u3063\u3066\u3001\u95a2\u9023\u6027\u306e\u9ad8\u3044\u30c8\u30fc\u30af\u30f3\u306e\u30d0\u30ea\u30e5\u30fc\u304c\u300c\u96c6\u7d04\u300d\u3055\u308c\u3001\u6587\u8108\u3092\u8003\u616e\u3057\u305f\u65b0\u305f\u306a\u30d9\u30af\u30c8\u30eb\u304c\u51fa\u529b\u3055\u308c\u307e\u3059\u3002\u3053\u306e\u30d9\u30af\u30c8\u30eb\u3053\u305d\u304c\u3001\u30bb\u30eb\u30d5\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u30d8\u30c3\u30c9\u304c\u300c\u3053\u306e\u30d8\u30c3\u30c9\u306e\u76ee\u7684\u306e\u305f\u3081\u306b\u96c6\u7d04\u3055\u308c\u305f\u60c5\u5831\u300d\u3067\u3059\u3002</p> <pre><code># \u30d0\u30fc\u30b8\u30e7\u30f34: \u30bb\u30eb\u30d5\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\uff01\ntorch.manual_seed(1337)\nB,T,C = 4,8,32 # \u30d0\u30c3\u30c1\u3001\u6642\u9593\u3001\u30c1\u30e3\u30f3\u30cd\u30eb\nx = torch.randn(B,T,C)\n\n# \u5358\u4e00\u306e\u30d8\u30c3\u30c9\u3067\u30bb\u30eb\u30d5\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u3092\u5b9f\u884c\u3057\u3066\u307f\u3088\u3046\nhead_size = 16\nkey = nn.Linear(C, head_size, bias=False)\nquery = nn.Linear(C, head_size, bias=False)\nvalue = nn.Linear(C, head_size, bias=False)\nk = key(x) # (B, T, 16)\nq = query(x) # (B, T, 16)\nwei = q @ k.transpose(-2, -1) # (B, T, 16)@(B, 16, T) ---&gt; (B, T, T)\n\ntril = torch.tril(torch.ones(T, T))\n# wei = torch.zeros((T,T))\nwei = wei.masked_fill(tril == 0, float('-inf'))\nwei = F.softmax(wei, dim=-1) # [4, 8, 8]\n\nv = value(x) # [4, 8, 16]\nout = wei @ v #  [4, 8, 8]@ [4, 8, 16] -&gt; [4, 8, 16]\n\nwei[0]\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>tensor([[1.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],\n        [0.1574, 0.8426, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],\n        [0.2088, 0.1646, 0.6266, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],\n        [0.5792, 0.1187, 0.1889, 0.1131, 0.0000, 0.0000, 0.0000, 0.0000],\n        [0.0294, 0.1052, 0.0469, 0.0276, 0.7909, 0.0000, 0.0000, 0.0000],\n        [0.0176, 0.2689, 0.0215, 0.0089, 0.6812, 0.0019, 0.0000, 0.0000],\n        [0.1691, 0.4066, 0.0438, 0.0416, 0.1048, 0.2012, 0.0329, 0.0000],\n        [0.0210, 0.0843, 0.0555, 0.2297, 0.0573, 0.0709, 0.2423, 0.2391]],\n       grad_fn=&lt;SelectBackward0&gt;)\n</code></pre></p>","tags":["GPT","Transformer","Self-Attention","PyTorch","\u8a00\u8a9e\u30e2\u30c7\u30eb","\u6df1\u5c64\u5b66\u7fd2","\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u6a5f\u69cb","\u4f4d\u7f6e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0","\u30c6\u30ad\u30b9\u30c8\u751f\u6210","\u30aa\u30fc\u30c8\u30ea\u30b0\u30ec\u30c3\u30b7\u30d6","ChatGPT"]},{"location":"LLM/05_Let%27s_build_GPT_from_scratch/#_11","title":"\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u306b\u95a2\u3059\u308b\u6ce8\u610f\u70b9","text":"<ul> <li>\u901a\u4fe1\u30e1\u30ab\u30cb\u30ba\u30e0: \u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u306f\u3001\u6307\u5411\u6027\u30b0\u30e9\u30d5\u5185\u306e\u30ce\u30fc\u30c9\u9593\u306e\u901a\u4fe1\u30e1\u30ab\u30cb\u30ba\u30e0\u3068\u3057\u3066\u6a5f\u80fd\u3059\u308b</li> <li>\u7a7a\u9593\u306e\u6982\u5ff5\u304c\u306a\u3044: \u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u7a7a\u9593\u306e\u6982\u5ff5\u3092\u6301\u305f\u306a\u3044\u305f\u3081\u3001\u4f4d\u7f6e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u304c\u5fc5\u8981</li> <li>\u30d0\u30c3\u30c1\u6b21\u5143\u306e\u72ec\u7acb\u6027: \u30d0\u30c3\u30c1\u5185\u306e\u5404\u4f8b\u306f\u72ec\u7acb\u3057\u3066\u51e6\u7406\u3055\u308c\u308b</li> <li>\u30c7\u30b3\u30fc\u30c0\u30fc\u30d6\u30ed\u30c3\u30af\uff08\u6211\u3005\u306e\u5b9f\u88c5\uff09: \u672a\u6765\u306e\u30c8\u30fc\u30af\u30f3\u304b\u3089\u306e\u901a\u4fe1\u3092\u30de\u30b9\u30af\u3059\u308b\uff08\u30aa\u30fc\u30c8\u30ea\u30b0\u30ec\u30c3\u30b7\u30d6\uff09</li> <li>\u30a8\u30f3\u30b3\u30fc\u30c0\u30fc\u30d6\u30ed\u30c3\u30af: \u5168\u3066\u306e\u30ce\u30fc\u30c9\u304c\u5b8c\u5168\u306b\u901a\u4fe1\u3067\u304d\u308b\uff08\u30de\u30b9\u30af\u306a\u3057\uff09</li> <li>\u81ea\u5df1\u6ce8\u610f\uff08Self-Attention\uff09: \u30af\u30a8\u30ea\u3001\u30ad\u30fc\u3001\u30d0\u30ea\u30e5\u30fc\u304c\u5168\u3066\u540c\u3058\u30bd\u30fc\u30b9\u304b\u3089\u751f\u6210\u3055\u308c\u308b</li> <li>\u4ea4\u5dee\u6ce8\u610f\uff08Cross-Attention\uff09: \u30af\u30a8\u30ea\u304c\u81ea\u8eab\u306e\u30bd\u30fc\u30b9\u304b\u3089\u3001\u30ad\u30fc\u3068\u30d0\u30ea\u30e5\u30fc\u304c\u5916\u90e8\u30bd\u30fc\u30b9\u304b\u3089\u751f\u6210\u3055\u308c\u308b\uff08\u4f8b\uff1a\u30a8\u30f3\u30b3\u30fc\u30c0\u30fc\u30fb\u30c7\u30b3\u30fc\u30c0\u30fcTransformer\uff09</li> </ul>","tags":["GPT","Transformer","Self-Attention","PyTorch","\u8a00\u8a9e\u30e2\u30c7\u30eb","\u6df1\u5c64\u5b66\u7fd2","\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u6a5f\u69cb","\u4f4d\u7f6e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0","\u30c6\u30ad\u30b9\u30c8\u751f\u6210","\u30aa\u30fc\u30c8\u30ea\u30b0\u30ec\u30c3\u30b7\u30d6","ChatGPT"]},{"location":"LLM/05_Let%27s_build_GPT_from_scratch/#42-self-attention","title":"4.2 Self-Attention\u30d8\u30c3\u30c9\u306e\u7d71\u5408","text":"<pre><code>import torch\nimport torch.nn as nn\nfrom torch.nn import functional as F\n\n# \u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8a2d\u5b9a\nbatch_size = 16 # \u4e26\u5217\u51e6\u7406\u3059\u308b\u72ec\u7acb\u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u6570\nblock_size = 32 # \u4e88\u6e2c\u306e\u305f\u3081\u306e\u6700\u5927\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u9577\nmax_iters = 5000\neval_interval = 100\nlearning_rate = 1e-3\ndevice = 'mps' if torch.mps.is_available() else 'cpu'\neval_iters = 200\nn_embd = 64\nn_head = 4\nn_layer = 4\ndropout = 0.0\n\ntorch.manual_seed(1337)\n</code></pre> <pre><code>def get_batch(split):\n    # \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u9078\u629e\uff1atrain\u307e\u305f\u306fvalidation\n    data = train_data if split == 'train' else val_data\n\n    # \u30e9\u30f3\u30c0\u30e0\u306a\u958b\u59cb\u4f4d\u7f6e\u3092\u751f\u6210\uff08batch_size\u500b\uff09\n    # len(data) - block_size\u306b\u3059\u308b\u3053\u3068\u3067\u3001\u5883\u754c\u30aa\u30fc\u30d0\u30fc\u3092\u9632\u3050\n    ix = torch.randint(len(data) - block_size, (batch_size,))  \n\n    # \u5165\u529b\u30b7\u30fc\u30b1\u30f3\u30b9\uff08x\uff09\uff1a\u5404\u958b\u59cb\u4f4d\u7f6e\u304b\u3089block_size\u5206\u306e\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\n    x = torch.stack([data[i:i+block_size] for i in ix]) \n\n    # \u30bf\u30fc\u30b2\u30c3\u30c8\u30b7\u30fc\u30b1\u30f3\u30b9\uff08y\uff09\uff1ax\u3088\u308a1\u3064\u305a\u3064\u5f8c\u308d\u306b\u30b7\u30d5\u30c8\u3057\u305f\u30c7\u30fc\u30bf\n    y = torch.stack([data[i+1:i+block_size+1] for i in ix])  \n    x, y = x.to(device), y.to(device)\n    return x, y  # (batch_size, block_size)\u306e\u5f62\u72b6\u3067\u8fd4\u3059\n</code></pre> <pre><code>class Head(nn.Module):\n    \"\"\"\u4e00\u3064\u306e\u81ea\u5df1\u6ce8\u610f\u30d8\u30c3\u30c9\"\"\"\n\n    def __init__(self,head_size):\n        super().__init__()\n        self.key = nn.Linear(n_embd, head_size, bias=False)\n        self.value = nn.Linear(n_embd, head_size, bias=False)\n        self.query = nn.Linear(n_embd, head_size, bias=False)\n        self.register_buffer('tril', torch.tril(torch.ones(block_size, block_size)))\n\n        self.dropout = nn.Dropout(dropout)\n\n    def forward(self, x):\n        # \u30b5\u30a4\u30ba(batch, time-step, channels)\u306e\u5165\u529b\n        # \u30b5\u30a4\u30ba(batch, time-step, head size)\u306e\u51fa\u529b\n        B, T, C = x.shape\n        k = self.key(x) # (B, T, hs)\n        q = self.query(x) # (B, T, hs)\n        # \u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u30b9\u30b3\u30a2\uff08\u300c\u30a2\u30d5\u30a3\u30cb\u30c6\u30a3\u300d\uff09\u3092\u8a08\u7b97\n        wei = q @ k.transpose(-2, -1) * k.shape[-1]**-0.5 # (B, T, hs) -&gt; (B, T, T)\n        wei = wei.masked_fill(self.tril[:T, :T] == 0, float('-inf')) # (B, T, T)\n        wei = F.softmax(wei, dim=-1) # (B, T, T)\n        wei = self.dropout(wei)\n        # \u30d0\u30ea\u30e5\u30fc\u306e\u91cd\u307f\u4ed8\u304d\u96c6\u7d04\u3092\u5b9f\u884c\n        v = self.value(x) # (B, T, hs)\n        out = wei @ v # (B, T, T) @ (B, T, hs) -&gt; (B, T, hs)\n        return out\n</code></pre> <p>\u306a\u305c\u221ad_k\u3067\u9664\u7b97\u3059\u308b\u306e\u304b\uff1f</p> <p>\u3053\u308c\u306f\u30b9\u30b1\u30fc\u30eb\u5185\u7a4d\u6ce8\u610f\u529b\u306e\u91cd\u8981\u306a\u6280\u8853\uff1a</p> <ul> <li>\u6b21\u5143d_k\u304c\u5927\u304d\u3044\u6642\u3001\u5185\u7a4d\u306e\u5206\u6563\u304c\u5927\u304d\u304f\u306a\u308b</li> <li>\u5927\u304d\u306a\u5185\u7a4d\u5024\u306fsoftmax\u5f8c\u306b\u6975\u7aef\u306a\u91cd\u307f\u5206\u5e03\u3092\u751f\u6210</li> <li>\u221ad_k\u3067\u9664\u7b97\u3059\u308b\u3053\u3068\u3067\u5185\u7a4d\u306e\u5206\u6563\u3092\u5236\u5fa1\u3057\u3001\u52fe\u914d\u3092\u3088\u308a\u5b89\u5b9a\u3055\u305b\u308b \u6570\u5b66\u7684\u306b\uff1a\u30d9\u30af\u30c8\u30eb\u8981\u7d20\u304c\u72ec\u7acb\u540c\u5206\u5e03\u306e\u5834\u5408\u3001d_k\u6b21\u5143\u5185\u7a4d\u306e\u5206\u6563\u306f\u7d04d_k\u3067\u3059\u3002</li> </ul>","tags":["GPT","Transformer","Self-Attention","PyTorch","\u8a00\u8a9e\u30e2\u30c7\u30eb","\u6df1\u5c64\u5b66\u7fd2","\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u6a5f\u69cb","\u4f4d\u7f6e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0","\u30c6\u30ad\u30b9\u30c8\u751f\u6210","\u30aa\u30fc\u30c8\u30ea\u30b0\u30ec\u30c3\u30b7\u30d6","ChatGPT"]},{"location":"LLM/05_Let%27s_build_GPT_from_scratch/#5-transformer","title":"5. \u30de\u30eb\u30c1\u30d8\u30c3\u30c9\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u3068Transformer\u30d6\u30ed\u30c3\u30af","text":"","tags":["GPT","Transformer","Self-Attention","PyTorch","\u8a00\u8a9e\u30e2\u30c7\u30eb","\u6df1\u5c64\u5b66\u7fd2","\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u6a5f\u69cb","\u4f4d\u7f6e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0","\u30c6\u30ad\u30b9\u30c8\u751f\u6210","\u30aa\u30fc\u30c8\u30ea\u30b0\u30ec\u30c3\u30b7\u30d6","ChatGPT"]},{"location":"LLM/05_Let%27s_build_GPT_from_scratch/#51-multi-head-attention","title":"5.1 Multi-Head Attention","text":"<p>\u8907\u6570\u306e\u81ea\u5df1\u6ce8\u610f\u30d8\u30c3\u30c9\u3092\u4e26\u5217\u306b\u5b9f\u884c\u3057\u3001\u305d\u306e\u7d50\u679c\u3092\u9023\u7d50\u3059\u308b\u3002 \u5404\u30d8\u30c3\u30c9\u306f\u7570\u306a\u308b\u300c\u901a\u4fe1\u30c1\u30e3\u30cd\u30eb\u300d\u3068\u3057\u3066\u6a5f\u80fd\u3057\u3001\u7570\u306a\u308b\u30bf\u30a4\u30d7\u306e\u7279\u5fb4\u3092\u5b66\u7fd2\u3067\u304d\u307e\u3059\u3002</p> <pre><code>class MultiHeadAttention(nn.Module):\n    \"\"\"\u8907\u6570\u306e\u81ea\u5df1\u6ce8\u610f\u30d8\u30c3\u30c9\u3092\u4e26\u5217\u5b9f\u884c\"\"\"\n\n    def __init__(self, num_heads, head_size):\n        super().__init__()\n        self.heads = nn.ModuleList([Head(head_size) for _ in range(num_heads)])\n        self.proj = nn.Linear(head_size * num_heads, n_embd)\n        self.dropout = nn.Dropout(dropout)\n\n    def forward(self, x):\n        out = torch.cat([h(x) for h in self.heads], dim=-1)\n        out = self.dropout(self.proj(out))\n        return out\n</code></pre>","tags":["GPT","Transformer","Self-Attention","PyTorch","\u8a00\u8a9e\u30e2\u30c7\u30eb","\u6df1\u5c64\u5b66\u7fd2","\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u6a5f\u69cb","\u4f4d\u7f6e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0","\u30c6\u30ad\u30b9\u30c8\u751f\u6210","\u30aa\u30fc\u30c8\u30ea\u30b0\u30ec\u30c3\u30b7\u30d6","ChatGPT"]},{"location":"LLM/05_Let%27s_build_GPT_from_scratch/#52-feed-forward-network-mlp","title":"5.2 Feed-Forward Network (MLP)","text":"<p>\u30de\u30eb\u30c1\u30d8\u30c3\u30c9\u81ea\u5df1\u6ce8\u610f\u306e\u5f8c\u306b\u914d\u7f6e\u3055\u308c\u308b\u30b7\u30f3\u30d7\u30eb\u306a\u591a\u5c64\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3\uff08MLP\uff09\u3002</p> <ul> <li>nn.Linear\u3001ReLU\u975e\u7dda\u5f62\u6027\u3067\u69cb\u6210\u3055\u308c\u308b</li> <li>\u30c8\u30fc\u30af\u30f3\u306f\u3001\u901a\u4fe1\u3067\u5f97\u305f\u60c5\u5831\u3092\u500b\u5225\u306b\u300c\u8003\u3048\u308b\u300d\u305f\u3081\u306e\u6642\u9593\u3068\u8a08\u7b97\u80fd\u529b\u3092\u5f97\u308b</li> <li>\u30c8\u30fc\u30af\u30f3\u3054\u3068\u306b\u72ec\u7acb\u3057\u3066\u9069\u7528\u3055\u308c\u308b</li> </ul> <pre><code>class FeedFoward(nn.Module):\n    \"\"\"\u975e\u7dda\u5f62\u6027\u3092\u4f34\u3046\u30b7\u30f3\u30d7\u30eb\u306a\u7dda\u5f62\u5c64\"\"\"\n\n    def __init__(self, n_embd):\n        super().__init__()\n        self.net = nn.Sequential(\n            nn.Linear(n_embd, 4 * n_embd),\n            nn.ReLU(),\n            nn.Linear(4 * n_embd, n_embd),\n            nn.Dropout(dropout)\n        )\n\n    def forward(self, x):\n        return self.net(x)\n</code></pre>","tags":["GPT","Transformer","Self-Attention","PyTorch","\u8a00\u8a9e\u30e2\u30c7\u30eb","\u6df1\u5c64\u5b66\u7fd2","\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u6a5f\u69cb","\u4f4d\u7f6e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0","\u30c6\u30ad\u30b9\u30c8\u751f\u6210","\u30aa\u30fc\u30c8\u30ea\u30b0\u30ec\u30c3\u30b7\u30d6","ChatGPT"]},{"location":"LLM/05_Let%27s_build_GPT_from_scratch/#53-transformer","title":"5.3 Transformer\u30d6\u30ed\u30c3\u30af\u306e\u69cb\u7bc9\u3068\u6700\u9069\u5316","text":"<p>Transformer\u30d6\u30ed\u30c3\u30af:Multi-Head Self-Attention\u3068Feed-Forward Network\u3092\u7d44\u307f\u5408\u308f\u305b\u305f\u3082\u306e\u3002</p> <p>\u901a\u4fe1\uff08Self-Attention\uff09\u3068\u8a08\u7b97\uff08Feed-Forward\uff09\u3092\u4ea4\u4e92\u306b\u884c\u3044\u307e\u3059\u3002</p> <p>\u8907\u6570\u306e\u30d6\u30ed\u30c3\u30af\u3092\u30b7\u30fc\u30b1\u30f3\u30b7\u30e3\u30eb\u306b\u9069\u7528\u3059\u308b\u3053\u3068\u3067\u3001\u3088\u308a\u6df1\u3044\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u69cb\u7bc9\u3057\u307e\u3059\u3002</p> <p>\u6b8b\u5dee\u63a5\u7d9a\uff08Residual Connections / Skip Connections\uff09: x = x + self.attention(x)\u306e\u3088\u3046\u306b\u3001\u5909\u63db\u3055\u308c\u305f\u30c7\u30fc\u30bf\u306b\u5165\u529b\u30c7\u30fc\u30bf\u3092\u76f4\u63a5\u52a0\u7b97\u3057\u307e\u3059\u3002</p> <p>\u52fe\u914d\u304c\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u6df1\u3044\u5c64\u307e\u3067\u59a8\u3052\u3089\u308c\u305a\u306b\u6d41\u308c\u308b\u300c\u30b9\u30fc\u30d1\u30fc\u30cf\u30a4\u30a6\u30a7\u30a4\u300d\u3092\u63d0\u4f9b\u3057\u3001\u6700\u9069\u5316\u3092\u5287\u7684\u306b\u6539\u5584\u3057\u307e\u3059\u3002</p> <p>\u30d6\u30ed\u30c3\u30af\u5185\u306e\u5404\u90e8\u5206\u306e\u5f8c\u306b\u9069\u7528\u3055\u308c\u307e\u3059\u3002</p> <p>\u51fa\u529b\u5c64\u3078\u306e\u300c\u30d7\u30ed\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u300d\uff08nn.Linear\uff09\u3092\u5c0e\u5165\u3057\u307e\u3059\u3002</p> <p>\u30ec\u30a4\u30e4\u30fc\u6b63\u898f\u5316\uff08Layer Normalization\uff09: batch_norm\u306b\u4f3c\u3066\u3044\u307e\u3059\u304c\u3001\u30d0\u30c3\u30c1\u6b21\u5143\u3067\u306f\u306a\u304f\u7279\u5fb4\u6b21\u5143\uff08\u884c\uff09\u306b\u6cbf\u3063\u3066\u6b63\u898f\u5316\u3092\u884c\u3044\u307e\u3059\u3002</p> <p>\u30c9\u30ed\u30c3\u30d7\u30a2\u30a6\u30c8\uff08Dropout\uff09: \u8a13\u7df4\u4e2d\u306b\u30e9\u30f3\u30c0\u30e0\u306b\u4e00\u90e8\u306e\u30cb\u30e5\u30fc\u30ed\u30f3\u3092\u7121\u52b9\u306b\u3059\u308b\uff08\u30bc\u30ed\u306b\u8a2d\u5b9a\u3059\u308b\uff09\u6b63\u5247\u5316\u6280\u8853\u3067\u3059\u3002</p> <pre><code>class Block(nn.Module):\n    \"\"\"Transformer\u30d6\u30ed\u30c3\u30af: \u901a\u4fe1\u306e\u5f8c\u306b\u8a08\u7b97\u3092\u884c\u3046\"\"\"\n\n    def __init__(self, n_embd, n_head):\n        # n_embd: \u57cb\u3081\u8fbc\u307f\u6b21\u5143, n_head: \u4f7f\u7528\u3057\u305f\u3044\u30d8\u30c3\u30c9\u6570\n        super().__init__()\n        head_size = n_embd // n_head\n        self.sa = MultiHeadAttention(n_head, head_size)\n        self.ffwd = FeedFoward(n_embd)\n        self.ln1 = nn.LayerNorm(n_embd)\n        self.ln2 = nn.LayerNorm(n_embd)\n\n    def forward(self, x):\n        # \u6b8b\u5dee\u63a5\u7d9a\n        x = x + self.sa(self.ln1(x))\n        x = x + self.ffwd(self.ln2(x))\n        return x\n</code></pre> <p>Pre-Norm vs Post-Norm \u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306e\u6bd4\u8f03</p> <p>\u539f\u59cbTransformer (Post-Norm, 2017) <pre><code># Attention is All You Need \u306e\u8a2d\u8a08\nx = embedding + positional_encoding\nx = self.ln1(x + self.sa(x))        # LayerNorm\u304c\u6b8b\u5dee\u63a5\u7d9a\u306e\u5f8c\nx = self.ln2(x + self.ffwd(x))      # LayerNorm\u304c\u6b8b\u5dee\u63a5\u7d9a\u306e\u5f8c\n</code></pre></p> <p>\u73fe\u4ee3GPT (Pre-Norm) <pre><code># GPT\u30b7\u30ea\u30fc\u30ba\u306e\u8a2d\u8a08\nx = embedding + positional_encoding  \nx = x + self.sa(self.ln1(x))        # LayerNorm\u304c\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u524d\nx = x + self.ffwd(self.ln2(x))      # LayerNorm\u304c\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u524d\n</code></pre></p> <p>\u306a\u305c\u5909\u5316\u3057\u305f\u306e\u304b\uff1f</p> <p>Post-Norm\u306e\u554f\u984c\u70b9: - \u6df1\u5c64\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3067\u52fe\u914d\u6d88\u5931\u304c\u8d77\u3053\u308a\u3084\u3059\u3044 - \u52fe\u914d\u304cLayerNorm\u3092\u901a\u904e\u3059\u308b\u969b\u306b\u5f31\u304f\u306a\u308b - \u5b66\u7fd2\u7387\u306e\u30a6\u30a9\u30fc\u30e0\u30a2\u30c3\u30d7\u304c\u5fc5\u8981</p> <p>Pre-Norm\u306e\u5229\u70b9: - \u76f4\u63a5\u7684\u306a\u52fe\u914d\u30d1\u30b9: x = x + module(ln(x)) \u3067\u6052\u7b49\u5199\u50cf\u304c\u4fdd\u8a3c\u3055\u308c\u308b - \u6df1\u5c64\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u5b89\u5b9a\u8a13\u7df4: 12\u5c64\u4ee5\u4e0a\u3067\u3082\u5b89\u5b9a - \u5b66\u7fd2\u306e\u9ad8\u901f\u5316: \u3088\u308a\u5927\u304d\u306a\u5b66\u7fd2\u7387\u3092\u4f7f\u7528\u53ef\u80fd - \u52fe\u914d\u7206\u767a\u306e\u6291\u5236: \u6570\u5024\u7684\u306b\u3088\u308a\u5b89\u5b9a</p> <p>\u5b9f\u7528\u7684\u306a\u9055\u3044 - \u539f\u59cbTransformer: \u6a5f\u68b0\u7ffb\u8a33\u306a\u3069\uff08\u6bd4\u8f03\u7684\u6d45\u5c64\uff09 - GPT: \u8a00\u8a9e\u751f\u6210\u30bf\u30b9\u30af\uff08\u6df1\u5c64\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u5fc5\u9808\uff09</p> <p>\u73fe\u5728\u306e\u4e3b\u6d41</p> <p>\u73fe\u4ee3\u306e\u5927\u898f\u6a21\u8a00\u8a9e\u30e2\u30c7\u30eb\uff08GPT\u3001BERT\u5909\u7a2e\u306a\u3069\uff09\u306f\u3001\u6df1\u5c64\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u8a13\u7df4\u5b89\u5b9a\u6027\u306e\u305f\u3081Pre-Norm\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3092\u63a1\u7528\u3057\u3066\u3044\u308b\u3002</p>","tags":["GPT","Transformer","Self-Attention","PyTorch","\u8a00\u8a9e\u30e2\u30c7\u30eb","\u6df1\u5c64\u5b66\u7fd2","\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u6a5f\u69cb","\u4f4d\u7f6e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0","\u30c6\u30ad\u30b9\u30c8\u751f\u6210","\u30aa\u30fc\u30c8\u30ea\u30b0\u30ec\u30c3\u30b7\u30d6","ChatGPT"]},{"location":"LLM/05_Let%27s_build_GPT_from_scratch/#54-positional-encoding","title":"5.4 \u4f4d\u7f6e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\uff08Positional Encoding\uff09\u306e\u91cd\u8981\u6027","text":"<p>Transformer\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3067\u306f\u3001\u4f4d\u7f6e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u304c\u6975\u3081\u3066\u91cd\u8981\u306a\u5f79\u5272\u3092\u679c\u305f\u3057\u307e\u3059\u3002</p>","tags":["GPT","Transformer","Self-Attention","PyTorch","\u8a00\u8a9e\u30e2\u30c7\u30eb","\u6df1\u5c64\u5b66\u7fd2","\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u6a5f\u69cb","\u4f4d\u7f6e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0","\u30c6\u30ad\u30b9\u30c8\u751f\u6210","\u30aa\u30fc\u30c8\u30ea\u30b0\u30ec\u30c3\u30b7\u30d6","ChatGPT"]},{"location":"LLM/05_Let%27s_build_GPT_from_scratch/#_12","title":"\u306a\u305c\u4f4d\u7f6e\u60c5\u5831\u304c\u5fc5\u8981\u306a\u306e\u304b\uff1f","text":"<p>1. Self-Attention\u306e\u6027\u8cea</p> <p>Self-Attention\u306f\u5168\u3066\u306e\u30c8\u30fc\u30af\u30f3\u9593\u306e\u95a2\u4fc2\u3092\u4e26\u5217\u8a08\u7b97\u3057\u307e\u3059\u304c\u3001\u3053\u306e\u51e6\u7406\u306b\u306f\u9806\u5e8f\u306e\u6982\u5ff5\u304c\u3042\u308a\u307e\u305b\u3093\u3002\u8a00\u3044\u63db\u3048\u308b\u3068\u3001\u300c\u79c1\u306f\u5b66\u6821\u306b\u884c\u304f\u300d\u3068\u300c\u5b66\u6821\u306b\u79c1\u306f\u884c\u304f\u300d\u3092\u540c\u3058\u3082\u306e\u3068\u3057\u3066\u6271\u3063\u3066\u3057\u307e\u3046\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002</p> <p>2. \u30d0\u30c3\u30b0\u30aa\u30d6\u30ef\u30fc\u30c9\u554f\u984c</p> <p>\u4f4d\u7f6e\u60c5\u5831\u304c\u306a\u3044\u5834\u5408\u3001\u30e2\u30c7\u30eb\u306f\u5358\u8a9e\u306e\u300c\u888b\uff08bag\uff09\u300d\u3068\u3057\u3066\u6587\u7ae0\u3092\u7406\u89e3\u3057\u3001\u6587\u6cd5\u3084\u8a9e\u9806\u306b\u3088\u308b\u610f\u5473\u306e\u9055\u3044\u3092\u6349\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u3002</p> <p>3. \u6587\u8108\u306e\u7406\u89e3</p> <p>\u8a00\u8a9e\u306b\u304a\u3044\u3066\u3001\u5358\u8a9e\u306e\u4f4d\u7f6e\u306f\u610f\u5473\u306b\u5927\u304d\u304f\u5f71\u97ff\u3057\u307e\u3059\u3002\u4f8b\u3048\u3070\uff1a - \u300c\u7530\u4e2d\u3055\u3093\u306f\u5c71\u7530\u3055\u3093\u3092\u7d39\u4ecb\u3057\u305f\u300d - \u300c\u5c71\u7530\u3055\u3093\u306f\u7530\u4e2d\u3055\u3093\u3092\u7d39\u4ecb\u3057\u305f\u300d</p> <p>\u3053\u308c\u3089\u306f\u8a9e\u9806\u306b\u3088\u3063\u3066\u5168\u304f\u610f\u5473\u304c\u7570\u306a\u308a\u307e\u3059\u3002</p>","tags":["GPT","Transformer","Self-Attention","PyTorch","\u8a00\u8a9e\u30e2\u30c7\u30eb","\u6df1\u5c64\u5b66\u7fd2","\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u6a5f\u69cb","\u4f4d\u7f6e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0","\u30c6\u30ad\u30b9\u30c8\u751f\u6210","\u30aa\u30fc\u30c8\u30ea\u30b0\u30ec\u30c3\u30b7\u30d6","ChatGPT"]},{"location":"LLM/05_Let%27s_build_GPT_from_scratch/#_13","title":"\u4f4d\u7f6e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u306e\u4ed5\u7d44\u307f","text":"<pre><code># \u4f4d\u7f6e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u306e\u5b9f\u88c5\u4f8b\npos_emb = self.position_embedding_table(torch.arange(T, device=device)) # (T, C)\nx = tok_emb + pos_emb # \u30c8\u30fc\u30af\u30f3\u57cb\u3081\u8fbc\u307f\u3068\u4f4d\u7f6e\u57cb\u3081\u8fbc\u307f\u306e\u52a0\u7b97\n</code></pre> <p>\u3053\u306e\u52a0\u7b97\u306b\u3088\u308a\u3001\u5404\u30c8\u30fc\u30af\u30f3\u306f\u300c\u4f55\u306e\u5358\u8a9e\u304b\u300d\u3068\u300c\u3069\u306e\u4f4d\u7f6e\u306b\u3042\u308b\u304b\u300d\u306e\u4e21\u65b9\u306e\u60c5\u5831\u3092\u6301\u3064\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002</p> <p>\u5b66\u7fd2\u53ef\u80fd\u306a\u4f4d\u7f6e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0 vs \u56fa\u5b9a\u4f4d\u7f6e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0</p> <ul> <li>\u5b66\u7fd2\u53ef\u80fd\uff08\u6211\u3005\u306e\u5b9f\u88c5\uff09: nn.Embedding\u3067\u4f4d\u7f6e\u3054\u3068\u306b\u7570\u306a\u308b\u30d9\u30af\u30c8\u30eb\u3092\u5b66\u7fd2</li> <li>\u56fa\u5b9a\u5f0f\uff08\u539f\u8ad6\u6587\uff09: sin/cos\u95a2\u6570\u3092\u4f7f\u7528\u3057\u305f\u6570\u5b66\u7684\u30d1\u30bf\u30fc\u30f3</li> </ul> <p>\u5b66\u7fd2\u53ef\u80fd\u306a\u65b9\u5f0f\u306f\u3001\u7279\u5b9a\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u6700\u9069\u5316\u3055\u308c\u308b\u5229\u70b9\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u6700\u5927\u7cfb\u5217\u9577\u304c\u56fa\u5b9a\u3055\u308c\u308b\u3068\u3044\u3046\u5236\u7d04\u304c\u3042\u308a\u307e\u3059\u3002</p>","tags":["GPT","Transformer","Self-Attention","PyTorch","\u8a00\u8a9e\u30e2\u30c7\u30eb","\u6df1\u5c64\u5b66\u7fd2","\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u6a5f\u69cb","\u4f4d\u7f6e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0","\u30c6\u30ad\u30b9\u30c8\u751f\u6210","\u30aa\u30fc\u30c8\u30ea\u30b0\u30ec\u30c3\u30b7\u30d6","ChatGPT"]},{"location":"LLM/05_Let%27s_build_GPT_from_scratch/#6-gpt","title":"6. \u5b8c\u5168\u306aGPT\u30e2\u30c7\u30eb\u306e\u69cb\u7bc9","text":"","tags":["GPT","Transformer","Self-Attention","PyTorch","\u8a00\u8a9e\u30e2\u30c7\u30eb","\u6df1\u5c64\u5b66\u7fd2","\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u6a5f\u69cb","\u4f4d\u7f6e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0","\u30c6\u30ad\u30b9\u30c8\u751f\u6210","\u30aa\u30fc\u30c8\u30ea\u30b0\u30ec\u30c3\u30b7\u30d6","ChatGPT"]},{"location":"LLM/05_Let%27s_build_GPT_from_scratch/#61-gpt","title":"6.1 GPT\u30e2\u30c7\u30eb\u306e\u5b9f\u88c5","text":"<p>\u4ee5\u4e0b\u3067\u306f\u3001\u3053\u308c\u307e\u3067\u5b66\u7fd2\u3057\u305f\u3059\u3079\u3066\u306e\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3092\u7d71\u5408\u3057\u3066GPT\u30e2\u30c7\u30eb\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002</p> <p>\u4e3b\u8981\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8:</p> <ul> <li>\u30c8\u30fc\u30af\u30f3\u57cb\u3081\u8fbc\u307f\uff08Token Embedding\uff09</li> <li>\u4f4d\u7f6e\u57cb\u3081\u8fbc\u307f\uff08Position Embedding\uff09  </li> <li>Multi-Head Self-Attention</li> <li>Feed-Forward Networks</li> <li>Layer Normalization</li> <li>\u6b8b\u5dee\u63a5\u7d9a\uff08Residual Connections\uff09</li> <li>\u9069\u5207\u306a\u91cd\u307f\u521d\u671f\u5316</li> </ul> <p>\u4ee5\u4e0b\u3067\u306f\u3001\u5b9f\u969b\u306eGPT\u30e2\u30c7\u30eb\u306e\u5b9f\u88c5\u3092\u901a\u3057\u3066\u3053\u308c\u3089\u3092\u7d71\u5408\u3057\u3066\u3044\u304d\u307e\u3059\uff1a</p> <pre><code>class GPTLanguageModel(nn.Module):\n\n    def __init__(self):\n        super().__init__()\n        # \u5404\u30c8\u30fc\u30af\u30f3\u306f\u3001\u57cb\u3081\u8fbc\u307f\u5c64\u304b\u3089\u6b21\u306e\u30c8\u30fc\u30af\u30f3\u306e\u30ed\u30b8\u30c3\u30c8\u3092\u76f4\u63a5\u8aad\u307f\u53d6\u308b\n        self.token_embedding_table = nn.Embedding(vocab_size, n_embd)\n        self.position_embbedding_table = nn.Embedding(block_size, n_embd)\n        self.blocks = nn.Sequential(*[Block(n_embd, n_head) for _ in range(n_layer)])\n        self.ln_f = nn.LayerNorm(n_embd) # \u6700\u7d42\u30ec\u30a4\u30e4\u30fc\u6b63\u898f\u5316\n        self.lm_head = nn.Linear(n_embd, vocab_size)\n\n        # \u91cd\u307f\u521d\u671f\u5316\u306f\u8a13\u7df4\u306e\u6210\u529f\u306b\u6975\u3081\u3066\u91cd\u8981\n        self.apply(self._init_weights)\n\n    def _init_weights(self, module):\n        if isinstance(module, nn.Linear):\n            torch.nn.init.normal_(module.weight, mean=0.0, std=0.02)\n            if module.bias is not None:\n                torch.nn.init.zeros_(module.bias)\n        elif isinstance(module, nn.Embedding):\n            torch.nn.init.normal_(module.weight, mean=0.0, std=0.02)\n\n    def forward(self, idx, targets=None):\n        B, T = idx.shape\n\n        # idx\u3068targets\u306f\u3069\u3061\u3089\u3082\u6574\u6570\u306e(B, T)\u30c6\u30f3\u30bd\u30eb\n        tok_emb = self.token_embedding_table(idx) # (B, T, C)\n        pos_emb = self.position_embbedding_table(torch.arange(T, device=device)) # (T, C)\n        x = tok_emb + pos_emb # (B, T, C)\n        x = self.blocks(x) # (B, T, C)\n        x = self.ln_f(x)  # (B, T, C)\n        logits = self.lm_head(x) # (B, T, vocab_size)\n\n        if targets is None:\n            loss = None\n        else:\n            B, T, C = logits.shape\n            logits = logits.view(B*T, C)\n            targets = targets.view(B*T)\n            loss = F.cross_entropy(logits, targets)\n\n        return logits, loss\n\n    def generate(self, idx, max_new_tokens):\n        # idx\u306f\u73fe\u5728\u306e\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e(B, T)\u914d\u5217\n        for _ in range(max_new_tokens):\n            # idx\u3092\u6700\u5f8c\u306eblock_size\u30c8\u30fc\u30af\u30f3\u306b\u30af\u30ed\u30c3\u30d7\n            idx_cond = idx[:, -block_size:]\n            # \u4e88\u6e2c\u3092\u53d6\u5f97\n            logits, loss = self(idx_cond)\n            # \u6700\u5f8c\u306e\u6642\u9593\u30b9\u30c6\u30c3\u30d7\u306b\u306e\u307f\u7126\u70b9\u3092\u5f53\u3066\u308b\n            logits = logits[:, -1, :] # (B, C)\u306b\u306a\u308b\n            # softmax\u3092\u9069\u7528\u3057\u3066\u78ba\u7387\u3092\u53d6\u5f97\n            probs = F.softmax(logits, dim=-1) # (B, C)\n            # \u5206\u5e03\u304b\u3089\u30b5\u30f3\u30d7\u30eb\n            idx_next = torch.multinomial(probs, num_samples=1) # (B, 1)\n            # \u30b5\u30f3\u30d7\u30eb\u3055\u308c\u305f\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u5b9f\u884c\u30b7\u30fc\u30b1\u30f3\u30b9\u306b\u8ffd\u52a0\n            idx = torch.cat((idx, idx_next), dim=1) # (B, T+1)\n        return idx\n</code></pre>","tags":["GPT","Transformer","Self-Attention","PyTorch","\u8a00\u8a9e\u30e2\u30c7\u30eb","\u6df1\u5c64\u5b66\u7fd2","\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u6a5f\u69cb","\u4f4d\u7f6e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0","\u30c6\u30ad\u30b9\u30c8\u751f\u6210","\u30aa\u30fc\u30c8\u30ea\u30b0\u30ec\u30c3\u30b7\u30d6","ChatGPT"]},{"location":"LLM/05_Let%27s_build_GPT_from_scratch/#62","title":"6.2 \u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30eb\u30fc\u30d7\u306e\u69cb\u7bc9","text":"<p>GPT\u30e2\u30c7\u30eb\u304c\u5b8c\u6210\u3057\u305f\u306e\u3067\u3001\u5b9f\u969b\u306b\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u3092\u884c\u3046\u305f\u3081\u306e\u30eb\u30fc\u30d7\u3092\u69cb\u7bc9\u3057\u3066\u3044\u304d\u307e\u3059\u3002\u52b9\u679c\u7684\u306a\u8a13\u7df4\u306b\u306f\u4ee5\u4e0b\u306e\u8981\u7d20\u304c\u5fc5\u8981\u3067\u3059\uff1a</p> <ul> <li>\u640d\u5931\u8a55\u4fa1\u95a2\u6570: \u8a13\u7df4\u30c7\u30fc\u30bf\u3068\u691c\u8a3c\u30c7\u30fc\u30bf\u3067\u306e\u6027\u80fd\u6e2c\u5b9a</li> <li>\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u8a2d\u5b9a: AdamW\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u306b\u3088\u308b\u52fe\u914d\u66f4\u65b0</li> <li>\u8a13\u7df4\u30eb\u30fc\u30d7: \u30d0\u30c3\u30c1\u3054\u3068\u306e\u9806\u4f1d\u64ad\u30fb\u9006\u4f1d\u64ad\u30fb\u91cd\u307f\u66f4\u65b0</li> </ul> <p>\u307e\u305a\u3001\u30e2\u30c7\u30eb\u3092\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3057\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u6570\u3092\u78ba\u8a8d\u3057\u307e\u3059\uff1a <pre><code>```python\nmodel = GPTLanguageModel()\nm = model.to(device)\n# \u30e2\u30c7\u30eb\u5185\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u6570\u3092\u51fa\u529b\nprint(sum(p.numel() for p in m.parameters())/1e6, 'M parameters')\n</code></pre></p> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>0.209729 M parameters\n</code></pre></p>","tags":["GPT","Transformer","Self-Attention","PyTorch","\u8a00\u8a9e\u30e2\u30c7\u30eb","\u6df1\u5c64\u5b66\u7fd2","\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u6a5f\u69cb","\u4f4d\u7f6e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0","\u30c6\u30ad\u30b9\u30c8\u751f\u6210","\u30aa\u30fc\u30c8\u30ea\u30b0\u30ec\u30c3\u30b7\u30d6","ChatGPT"]},{"location":"LLM/05_Let%27s_build_GPT_from_scratch/#_14","title":"\u30d1\u30e9\u30e1\u30fc\u30bf\u6570\u306e\u8a73\u7d30\u5185\u8a33","text":"<p>\u30e2\u30c7\u30eb\u30b5\u30a4\u30ba\u3092\u3088\u308a\u8a73\u3057\u304f\u7406\u89e3\u3059\u308b\u305f\u3081\u306b\u3001\u5404\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u6570\u3092\u8a08\u7b97\u3057\u3066\u307f\u307e\u3059\uff1a</p> <p>\u30d1\u30e9\u30e1\u30fc\u30bf\u6570\u306e\u5185\u8a33\uff08\u8a2d\u5b9a\u4f8b\uff1avocab_size=65, n_embd=64, n_head=4, n_layer=4\uff09</p> <pre><code>Token Embedding:        65 \u00d7 64 = 4,160    \u30d1\u30e9\u30e1\u30fc\u30bf\nPosition Embedding:     32 \u00d7 64 = 2,048    \u30d1\u30e9\u30e1\u30fc\u30bf\n\u5404Transformer Block:             ~49,400   \u30d1\u30e9\u30e1\u30fc\u30bf\n4\u3064\u306eBlock\u5408\u8a08:       49,400 \u00d7 4 = 197,600 \u30d1\u30e9\u30e1\u30fc\u30bf\n\u6700\u7d42\u51fa\u529b\u5c64(lm_head):    64 \u00d7 65 = 4,160    \u30d1\u30e9\u30e1\u30fc\u30bf\nLayer Normalization:           \u5c11\u91cf        \u30d1\u30e9\u30e1\u30fc\u30bf\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\u7dcf\u8a08:                          ~0.21M     \u30d1\u30e9\u30e1\u30fc\u30bf\n</code></pre> <p>Transformer Block\u5185\u306e\u8a73\u7d30\uff1a <pre><code>Multi-Head Attention:\n- Query/Key/Value\u7dda\u5f62\u5c64: 64\u00d764\u00d73 = 12,288\n- \u51fa\u529b\u30d7\u30ed\u30b8\u30a7\u30af\u30b7\u30e7\u30f3: 64\u00d764 = 4,096\nFeed-Forward Network:\n- \u7b2c1\u5c64: 64\u00d7256 = 16,384\n- \u7b2c2\u5c64: 256\u00d764 = 16,384\nLayer Normalization \u00d72: 64\u00d72 = 128\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nBlock\u5408\u8a08:              \u7d0449,400\n</code></pre></p> <p>\u3053\u306e\u8a08\u7b97\u306b\u3088\u308a\u3001\u30e2\u30c7\u30eb\u306e\u30b5\u30a4\u30ba\u304c\u628a\u63e1\u3067\u304d\u3001\u30e1\u30e2\u30ea\u3068GPU\u4f7f\u7528\u91cf\u306e\u76ee\u5b89\u304c\u308f\u304b\u308a\u307e\u3059\u3002</p>","tags":["GPT","Transformer","Self-Attention","PyTorch","\u8a00\u8a9e\u30e2\u30c7\u30eb","\u6df1\u5c64\u5b66\u7fd2","\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u6a5f\u69cb","\u4f4d\u7f6e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0","\u30c6\u30ad\u30b9\u30c8\u751f\u6210","\u30aa\u30fc\u30c8\u30ea\u30b0\u30ec\u30c3\u30b7\u30d6","ChatGPT"]},{"location":"LLM/05_Let%27s_build_GPT_from_scratch/#_15","title":"\u640d\u5931\u8a55\u4fa1\u95a2\u6570\u306e\u5b9f\u88c5","text":"<pre><code>@torch.no_grad()\ndef estimate_loss():\n    out = {}\n    model.eval()\n    for split in ['train', 'val']:\n        losses = torch.zeros(eval_iters)\n        for k in range(eval_iters):\n            X, Y = get_batch(split)\n            logits, loss = model(X, Y)\n            losses[k] = loss.item()\n        out[split] = losses.mean()\n    model.train()\n    return out\n</code></pre>","tags":["GPT","Transformer","Self-Attention","PyTorch","\u8a00\u8a9e\u30e2\u30c7\u30eb","\u6df1\u5c64\u5b66\u7fd2","\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u6a5f\u69cb","\u4f4d\u7f6e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0","\u30c6\u30ad\u30b9\u30c8\u751f\u6210","\u30aa\u30fc\u30c8\u30ea\u30b0\u30ec\u30c3\u30b7\u30d6","ChatGPT"]},{"location":"LLM/05_Let%27s_build_GPT_from_scratch/#_16","title":"\u30e1\u30a4\u30f3\u306e\u8a13\u7df4\u30eb\u30fc\u30d7","text":"<p>\u8a13\u7df4\u30c7\u30fc\u30bf\u3068\u691c\u8a3c\u30c7\u30fc\u30bf\u3067\u5b9a\u671f\u7684\u306b\u640d\u5931\u3092\u8a55\u4fa1\u3057\u306a\u304c\u3089\u3001AdamW\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u3067\u30e2\u30c7\u30eb\u3092\u8a13\u7df4\u3057\u307e\u3059\uff1a</p> <pre><code># PyTorch\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u306e\u4f5c\u6210\noptimizer = torch.optim.AdamW(model.parameters(), lr=learning_rate)\n\nfor iter in range(max_iters):\n    # \u5b9a\u671f\u7684\u306b\u8a13\u7df4\u30bb\u30c3\u30c8\u3068\u691c\u8a3c\u30bb\u30c3\u30c8\u3067\u640d\u5931\u3092\u8a55\u4fa1\n    if iter % eval_interval == 0 or iter == max_iters -1:\n        losses = estimate_loss()\n        print(f\"step {iter}: train loss {losses['train']:.4f}, val loss {losses['val']:.4f}\")\n\n    # \u30c7\u30fc\u30bf\u306e\u30d0\u30c3\u30c1\u3092\u30b5\u30f3\u30d7\u30eb\n    xb, yb = get_batch('train')\n\n    # \u640d\u5931\u3092\u8a55\u4fa1\n    logits, loss = model(xb, yb)\n    optimizer.zero_grad(set_to_none=True)\n    loss.backward()\n    optimizer.step()\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>step 0: train loss 4.1959, val loss 4.1962\nstep 100: train loss 2.6228, val loss 2.6158\nstep 200: train loss 2.4580, val loss 2.4510\nstep 300: train loss 2.3817, val loss 2.3929\nstep 400: train loss 2.3220, val loss 2.3230\nstep 500: train loss 2.2391, val loss 2.2578\nstep 600: train loss 2.1846, val loss 2.2275\nstep 700: train loss 2.1361, val loss 2.1595\nstep 800: train loss 2.1026, val loss 2.1439\nstep 900: train loss 2.0587, val loss 2.1057\nstep 1000: train loss 2.0449, val loss 2.0912\nstep 1100: train loss 2.0026, val loss 2.0696\nstep 1200: train loss 1.9823, val loss 2.0701\nstep 1300: train loss 1.9682, val loss 2.0451\nstep 1400: train loss 1.9421, val loss 2.0375\nstep 1500: train loss 1.9029, val loss 1.9990\nstep 1600: train loss 1.8860, val loss 1.9939\nstep 1700: train loss 1.8778, val loss 1.9785\nstep 1800: train loss 1.8865, val loss 1.9925\nstep 1900: train loss 1.8428, val loss 1.9692\nstep 2000: train loss 1.8349, val loss 1.9544\nstep 2100: train loss 1.8397, val loss 1.9828\nstep 2200: train loss 1.8097, val loss 1.9398\nstep 2300: train loss 1.8034, val loss 1.9342\nstep 2400: train loss 1.7814, val loss 1.9171\nstep 2500: train loss 1.7723, val loss 1.9080\nstep 2600: train loss 1.7570, val loss 1.8970\nstep 2700: train loss 1.7583, val loss 1.9077\nstep 2800: train loss 1.7523, val loss 1.8983\nstep 2900: train loss 1.7405, val loss 1.8941\nstep 3000: train loss 1.7512, val loss 1.8875\nstep 3100: train loss 1.7413, val loss 1.8903\nstep 3200: train loss 1.7300, val loss 1.8864\nstep 3300: train loss 1.7250, val loss 1.8710\nstep 3400: train loss 1.7151, val loss 1.8758\nstep 3500: train loss 1.7164, val loss 1.8638\nstep 3600: train loss 1.7095, val loss 1.8521\nstep 3700: train loss 1.6988, val loss 1.8557\nstep 3800: train loss 1.7032, val loss 1.8610\nstep 3900: train loss 1.6901, val loss 1.8394\nstep 4000: train loss 1.6839, val loss 1.8307\nstep 4100: train loss 1.6743, val loss 1.8447\nstep 4200: train loss 1.6673, val loss 1.8499\nstep 4300: train loss 1.6743, val loss 1.8297\nstep 4400: train loss 1.6674, val loss 1.8384\nstep 4500: train loss 1.6638, val loss 1.8206\nstep 4600: train loss 1.6467, val loss 1.8364\nstep 4700: train loss 1.6564, val loss 1.8121\nstep 4800: train loss 1.6547, val loss 1.8267\nstep 4900: train loss 1.6436, val loss 1.8231\nstep 4999: train loss 1.6491, val loss 1.8256\n</code></pre></p>","tags":["GPT","Transformer","Self-Attention","PyTorch","\u8a00\u8a9e\u30e2\u30c7\u30eb","\u6df1\u5c64\u5b66\u7fd2","\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u6a5f\u69cb","\u4f4d\u7f6e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0","\u30c6\u30ad\u30b9\u30c8\u751f\u6210","\u30aa\u30fc\u30c8\u30ea\u30b0\u30ec\u30c3\u30b7\u30d6","ChatGPT"]},{"location":"LLM/05_Let%27s_build_GPT_from_scratch/#_17","title":"\u8a13\u7df4\u6e08\u307f\u30e2\u30c7\u30eb\u3067\u306e\u30c6\u30ad\u30b9\u30c8\u751f\u6210","text":"<p>\u8a13\u7df4\u304c\u5b8c\u4e86\u3057\u305f\u306e\u3067\u3001\u30e2\u30c7\u30eb\u3092\u4f7f\u3063\u3066\u65b0\u3057\u3044\u30c6\u30ad\u30b9\u30c8\u3092\u751f\u6210\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff1a</p> <pre><code># \u30e2\u30c7\u30eb\u304b\u3089\u751f\u6210\ncontext = torch.zeros((1, 1), dtype=torch.long, device=device)\nprint(decode(m.generate(context, max_new_tokens=1000)[0].tolist()))\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>God, O, that of you: life, whereep, them with\nforce this cordon'd his encleours.\nThou thy enleiter judget lut womal\nTo him; haver core' venray,\nBon the wrights a cause in thisfiend prepossity treak his sound,\nAnd boy pring lack marrougs maste I hand'd naccuse,\nThat that keep reasw the underer you: it\nThat fight thee\nfall Julatest: God! hatt 't a bed's mear acannot.\nNos weld?\n\nDUKE VINCESD IVERS:\nMere folies a gentrefarefien a fawaither wither in bawdel,--sain,\nIn centerfore to hope curce mame court us:\nsell not forf.\n\nPRINCES:\nNob tull teare them one\nOngive me\nWhere pat here appeased Edperate,\nBut thou mean; nastesders home on wletgeedate to frise tense,\nCome a in on this friend \nWith polows\nJulate both our tran in there\nmour worthern: it he sout at I cried!\nBy gent him to the god poors, time same a dal Bowery.\n\nCLAUDIO:\nO, bearech it the is wis to Lorde,\nWhat, he bare he of the bund-heddeige,\nThat laie agg to that you usworld that shall ound to wack.\n\nThat hopose.\n\nWARWICKBERS:\nO, for\n</code></pre></p>","tags":["GPT","Transformer","Self-Attention","PyTorch","\u8a00\u8a9e\u30e2\u30c7\u30eb","\u6df1\u5c64\u5b66\u7fd2","\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u6a5f\u69cb","\u4f4d\u7f6e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0","\u30c6\u30ad\u30b9\u30c8\u751f\u6210","\u30aa\u30fc\u30c8\u30ea\u30b0\u30ec\u30c3\u30b7\u30d6","ChatGPT"]},{"location":"LLM/05_Let%27s_build_GPT_from_scratch/#7","title":"7. \u6700\u7d42\u5b9f\u88c5\u3068\u30c6\u30ad\u30b9\u30c8\u751f\u6210","text":"","tags":["GPT","Transformer","Self-Attention","PyTorch","\u8a00\u8a9e\u30e2\u30c7\u30eb","\u6df1\u5c64\u5b66\u7fd2","\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u6a5f\u69cb","\u4f4d\u7f6e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0","\u30c6\u30ad\u30b9\u30c8\u751f\u6210","\u30aa\u30fc\u30c8\u30ea\u30b0\u30ec\u30c3\u30b7\u30d6","ChatGPT"]},{"location":"LLM/05_Let%27s_build_GPT_from_scratch/#71-gpt","title":"7.1 \u7d71\u5408\u3055\u308c\u305fGPT\u30e2\u30c7\u30eb\u306e\u5b9f\u88c5","text":"<p>\u3053\u3053\u307e\u3067\u3067\u5b66\u7fd2\u3057\u305f\u3059\u3079\u3066\u306e\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3092\u7d71\u5408\u3057\u3001\u5b8c\u5168\u306aGPT\u30e2\u30c7\u30eb\u3092\u69cb\u7bc9\u3057\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u306b\u306f\u3001\u3053\u308c\u307e\u3067\u6bb5\u968e\u7684\u306b\u8aac\u660e\u3057\u3066\u304d\u305f\u5168\u3066\u306e\u8981\u7d20\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\uff1a</p> <ul> <li>\u6587\u5b57\u30ec\u30d9\u30eb\u30c8\u30fc\u30af\u30f3\u5316\u30b7\u30b9\u30c6\u30e0</li> <li>\u30de\u30eb\u30c1\u30d8\u30c3\u30c9\u81ea\u5df1\u6ce8\u610f\u30e1\u30ab\u30cb\u30ba\u30e0</li> <li>\u30d5\u30a3\u30fc\u30c9\u30d5\u30a9\u30ef\u30fc\u30c9\u30cd\u30c3\u30c8\u30ef\u30fc\u30af</li> <li>\u4f4d\u7f6e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0</li> <li>\u6b8b\u5dee\u63a5\u7d9a\u3068Layer Normalization</li> <li>\u9069\u5207\u306a\u91cd\u307f\u521d\u671f\u5316</li> </ul> <pre><code>import torch\nimport torch.nn as nn\nfrom torch.nn import functional as F\n\n# \u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\nbatch_size = 64 # \u4e26\u5217\u51e6\u7406\u3059\u308b\u72ec\u7acb\u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u6570\nblock_size = 256 # \u4e88\u6e2c\u306e\u305f\u3081\u306e\u6700\u5927\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u9577\nmax_iters = 5000\neval_interval = 500\nlearning_rate = 3e-4\ndevice = 'mps' if torch.mps.is_available() else 'cpu'\neval_iters = 200\nn_embd = 384\nn_head = 6\nn_layer = 6\ndropout = 0.2\n# ------------\n\ntorch.manual_seed(1337)\n\n!wget https://raw.githubusercontent.com/karpathy/char-rnn/master/data/tinyshakespeare/input.txt\nwith open('input.txt', 'r', encoding='utf-8') as f:\n    text = f.read()\n\n# \u3053\u306e\u30c6\u30ad\u30b9\u30c8\u306b\u51fa\u73fe\u3059\u308b\u5168\u3066\u306e\u30e6\u30cb\u30fc\u30af\u6587\u5b57\nchars = sorted(list(set(text)))\nvocab_size = len(chars)\n# \u6587\u5b57\u304b\u3089\u6574\u6570\u3078\u306e\u30de\u30c3\u30d4\u30f3\u30b0\u3092\u4f5c\u6210\nstoi = { ch:i for i,ch in enumerate(chars) }\nitos = { i:ch for i,ch in enumerate(chars) }\nencode = lambda s: [stoi[c] for c in s] # \u30a8\u30f3\u30b3\u30fc\u30c0\u30fc: \u6587\u5b57\u5217\u3092\u53d6\u5f97\u3057\u3001\u6574\u6570\u306e\u30ea\u30b9\u30c8\u3092\u51fa\u529b\ndecode = lambda l: ''.join([itos[i] for i in l]) # \u30c7\u30b3\u30fc\u30c0\u30fc: \u6574\u6570\u306e\u30ea\u30b9\u30c8\u3092\u53d6\u5f97\u3057\u3001\u6587\u5b57\u5217\u3092\u51fa\u529b\n\n# \u8a13\u7df4\u30fb\u30c6\u30b9\u30c8\u5206\u5272\ndata = torch.tensor(encode(text), dtype=torch.long)\nn = int(0.9*len(data)) # \u6700\u521d\u306e90%\u304c\u8a13\u7df4\u3001\u6b8b\u308a\u304c\u691c\u8a3c\ntrain_data = data[:n]\nval_data = data[n:]\n\n# \u30c7\u30fc\u30bf\u30ed\u30fc\u30c7\u30a3\u30f3\u30b0\ndef get_batch(split):\n    # \u5165\u529bx\u3068\u30bf\u30fc\u30b2\u30c3\u30c8y\u306e\u5c0f\u3055\u306a\u30c7\u30fc\u30bf\u30d0\u30c3\u30c1\u3092\u751f\u6210\n    data = train_data if split == 'train' else val_data\n    ix = torch.randint(len(data) - block_size, (batch_size,))\n    x = torch.stack([data[i:i+block_size] for i in ix])\n    y = torch.stack([data[i+1:i+block_size+1] for i in ix])\n    x, y = x.to(device), y.to(device)\n    return x, y\n\n@torch.no_grad()\ndef estimate_loss():\n    out = {}\n    model.eval()\n    for split in ['train', 'val']:\n        losses = torch.zeros(eval_iters)\n        for k in range(eval_iters):\n            X, Y = get_batch(split)\n            logits, loss = model(X, Y)\n            losses[k] = loss.item()\n        out[split] = losses.mean()\n    model.train()\n    return out\n\nclass Head(nn.Module):\n    \"\"\" \u4e00\u3064\u306e\u81ea\u5df1\u6ce8\u610f\u30d8\u30c3\u30c9 \"\"\"\n\n    def __init__(self, head_size):\n        super().__init__()\n        self.key = nn.Linear(n_embd, head_size, bias=False)\n        self.query = nn.Linear(n_embd, head_size, bias=False)\n        self.value = nn.Linear(n_embd, head_size, bias=False)\n        self.register_buffer('tril', torch.tril(torch.ones(block_size, block_size)))\n\n        self.dropout = nn.Dropout(dropout)\n\n    def forward(self, x):\n        # \u30b5\u30a4\u30ba(batch, time-step, channels)\u306e\u5165\u529b\n        # \u30b5\u30a4\u30ba(batch, time-step, head size)\u306e\u51fa\u529b\n        B,T,C = x.shape\n        k = self.key(x)   # (B,T,hs)\n        q = self.query(x) # (B,T,hs)\n        # \u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u30b9\u30b3\u30a2\uff08\u300c\u30a2\u30d5\u30a3\u30cb\u30c6\u30a3\u300d\uff09\u3092\u8a08\u7b97\n        wei = q @ k.transpose(-2,-1) * k.shape[-1]**-0.5 # (B, T, hs) @ (B, hs, T) -&gt; (B, T, T)\n        wei = wei.masked_fill(self.tril[:T, :T] == 0, float('-inf')) # (B, T, T)\n        wei = F.softmax(wei, dim=-1) # (B, T, T)\n        wei = self.dropout(wei)\n        # \u30d0\u30ea\u30e5\u30fc\u306e\u91cd\u307f\u4ed8\u304d\u96c6\u7d04\u3092\u5b9f\u884c\n        v = self.value(x) # (B,T,hs)\n        out = wei @ v # (B, T, T) @ (B, T, hs) -&gt; (B, T, hs)\n        return out\n\nclass MultiHeadAttention(nn.Module):\n    \"\"\" \u8907\u6570\u306e\u81ea\u5df1\u6ce8\u610f\u30d8\u30c3\u30c9\u3092\u4e26\u5217\u5b9f\u884c \"\"\"\n\n    def __init__(self, num_heads, head_size):\n        super().__init__()\n        self.heads = nn.ModuleList([Head(head_size) for _ in range(num_heads)])\n        self.proj = nn.Linear(head_size * num_heads, n_embd)\n        self.dropout = nn.Dropout(dropout)\n\n    def forward(self, x):\n        out = torch.cat([h(x) for h in self.heads], dim=-1)\n        out = self.dropout(self.proj(out))\n        return out\n\nclass FeedFoward(nn.Module):\n    \"\"\" \u975e\u7dda\u5f62\u6027\u3092\u4f34\u3046\u30b7\u30f3\u30d7\u30eb\u306a\u7dda\u5f62\u5c64 \"\"\"\n\n    def __init__(self, n_embd):\n        super().__init__()\n        self.net = nn.Sequential(\n            nn.Linear(n_embd, 4 * n_embd),\n            nn.ReLU(),\n            nn.Linear(4 * n_embd, n_embd),\n            nn.Dropout(dropout),\n        )\n\n    def forward(self, x):\n        return self.net(x)\n\nclass Block(nn.Module):\n    \"\"\" Transformer\u30d6\u30ed\u30c3\u30af: \u901a\u4fe1\u306e\u5f8c\u306b\u8a08\u7b97\u3092\u884c\u3046 \"\"\"\n\n    def __init__(self, n_embd, n_head):\n        # n_embd: \u57cb\u3081\u8fbc\u307f\u6b21\u5143, n_head: \u4f7f\u7528\u3057\u305f\u3044\u30d8\u30c3\u30c9\u6570\n        super().__init__()\n        head_size = n_embd // n_head\n        self.sa = MultiHeadAttention(n_head, head_size)\n        self.ffwd = FeedFoward(n_embd)\n        self.ln1 = nn.LayerNorm(n_embd)\n        self.ln2 = nn.LayerNorm(n_embd)\n\n    def forward(self, x):\n        x = x + self.sa(self.ln1(x))\n        x = x + self.ffwd(self.ln2(x))\n        return x\n\nclass GPTLanguageModel(nn.Module):\n\n    def __init__(self):\n        super().__init__()\n        # \u5404\u30c8\u30fc\u30af\u30f3\u306f\u3001\u57cb\u3081\u8fbc\u307f\u5c64\u304b\u3089\u6b21\u306e\u30c8\u30fc\u30af\u30f3\u306e\u30ed\u30b8\u30c3\u30c8\u3092\u76f4\u63a5\u8aad\u307f\u53d6\u308b\n        self.token_embedding_table = nn.Embedding(vocab_size, n_embd)\n        self.position_embedding_table = nn.Embedding(block_size, n_embd)\n        self.blocks = nn.Sequential(*[Block(n_embd, n_head=n_head) for _ in range(n_layer)])\n        self.ln_f = nn.LayerNorm(n_embd) # \u6700\u7d42\u30ec\u30a4\u30e4\u30fc\u6b63\u898f\u5316\n        self.lm_head = nn.Linear(n_embd, vocab_size)\n\n        # \u3088\u308a\u826f\u3044\u521d\u671f\u5316\u3001\u5143\u306eGPT\u30d3\u30c7\u30aa\u3067\u306f\u6271\u308f\u306a\u304b\u3063\u305f\u304c\u91cd\u8981\u3001\u30d5\u30a9\u30ed\u30fc\u30a2\u30c3\u30d7\u30d3\u30c7\u30aa\u3067\u6271\u3046\u4e88\u5b9a\n        self.apply(self._init_weights)\n\n    def _init_weights(self, module):\n        \"\"\"\n        GPT\u5f0f\u91cd\u307f\u521d\u671f\u5316\uff1a\u6a19\u6e96\u504f\u5dee0.02\u306e\u6b63\u898f\u5206\u5e03\u3092\u4f7f\u7528\n        \u3053\u306e\u5024\u306fTransformer\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306b\u6700\u9069\u5316\u3055\u308c\u305f\u7d4c\u9a13\u7684\u7d50\u679c\n        \"\"\"\n        if isinstance(module, nn.Linear):\n            torch.nn.init.normal_(module.weight, mean=0.0, std=0.02)\n            if module.bias is not None:\n                torch.nn.init.zeros_(module.bias)\n        elif isinstance(module, nn.Embedding):\n            torch.nn.init.normal_(module.weight, mean=0.0, std=0.02)\n\n    def forward(self, idx, targets=None):\n        B, T = idx.shape\n\n        # idx\u3068targets\u306f\u3069\u3061\u3089\u3082\u6574\u6570\u306e(B,T)\u30c6\u30f3\u30bd\u30eb\n        tok_emb = self.token_embedding_table(idx) # (B,T,C)\n        pos_emb = self.position_embedding_table(torch.arange(T, device=device)) # (T,C)\n        x = tok_emb + pos_emb # (B,T,C)\n        x = self.blocks(x) # (B,T,C)\n        x = self.ln_f(x) # (B,T,C)\n        logits = self.lm_head(x) # (B,T,vocab_size)\n\n        if targets is None:\n            loss = None\n        else:\n            B, T, C = logits.shape\n            logits = logits.view(B*T, C)\n            targets = targets.view(B*T)\n            loss = F.cross_entropy(logits, targets)\n\n        return logits, loss\n\n    def generate(self, idx, max_new_tokens):\n        # idx\u306f\u73fe\u5728\u306e\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e(B, T)\u914d\u5217\n        for _ in range(max_new_tokens):\n            # idx\u3092\u6700\u5f8c\u306eblock_size\u30c8\u30fc\u30af\u30f3\u306b\u30af\u30ed\u30c3\u30d7\n            idx_cond = idx[:, -block_size:]\n            # \u4e88\u6e2c\u3092\u53d6\u5f97\n            logits, loss = self(idx_cond)\n            # \u6700\u5f8c\u306e\u6642\u9593\u30b9\u30c6\u30c3\u30d7\u306b\u306e\u307f\u7126\u70b9\u3092\u5f53\u3066\u308b\n            logits = logits[:, -1, :] # (B, C)\u306b\u306a\u308b\n            # softmax\u3092\u9069\u7528\u3057\u3066\u78ba\u7387\u3092\u53d6\u5f97\n            probs = F.softmax(logits, dim=-1) # (B, C)\n            # \u5206\u5e03\u304b\u3089\u30b5\u30f3\u30d7\u30eb\n            idx_next = torch.multinomial(probs, num_samples=1) # (B, 1)\n            # \u30b5\u30f3\u30d7\u30eb\u3055\u308c\u305f\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u5b9f\u884c\u30b7\u30fc\u30b1\u30f3\u30b9\u306b\u8ffd\u52a0\n            idx = torch.cat((idx, idx_next), dim=1) # (B, T+1)\n        return idx\nmodel = GPTLanguageModel()\nm = model.to(device)\n# \u30e2\u30c7\u30eb\u5185\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u6570\u3092\u51fa\u529b\nprint(sum(p.numel() for p in m.parameters())/1e6, 'M parameters')\n\n# PyTorch\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u306e\u4f5c\u6210\noptimizer = torch.optim.AdamW(model.parameters(), lr=learning_rate)\n\nfor iter in range(max_iters):\n\n    # \u5b9a\u671f\u7684\u306b\u8a13\u7df4\u30bb\u30c3\u30c8\u3068\u691c\u8a3c\u30bb\u30c3\u30c8\u3067\u640d\u5931\u3092\u8a55\u4fa1\n    if iter % eval_interval == 0 or iter == max_iters - 1:\n        losses = estimate_loss()\n        print(f\"step {iter}: train loss {losses['train']:.4f}, val loss {losses['val']:.4f}\")\n\n    # \u30c7\u30fc\u30bf\u306e\u30d0\u30c3\u30c1\u3092\u30b5\u30f3\u30d7\u30eb\n    xb, yb = get_batch('train')\n\n    # \u640d\u5931\u3092\u8a55\u4fa1\n    logits, loss = model(xb, yb)\n    optimizer.zero_grad(set_to_none=True)\n    loss.backward()\n    optimizer.step()\n\n# \u30e2\u30c7\u30eb\u304b\u3089\u751f\u6210\ncontext = torch.zeros((1, 1), dtype=torch.long, device=device)\nprint(decode(m.generate(context, max_new_tokens=500)[0].tolist()))\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>--2025-08-28 21:14:55--  https://raw.githubusercontent.com/karpathy/char-rnn/master/data/tinyshakespeare/input.txt\nraw.githubusercontent.com (raw.githubusercontent.com) \u3092DNS\u306b\u554f\u3044\u5408\u308f\u305b\u3066\u3044\u307e\u3059... 2606:50c0:8001::154, 2606:50c0:8000::154, 2606:50c0:8003::154, ...\nraw.githubusercontent.com (raw.githubusercontent.com)|2606:50c0:8001::154|:443 \u306b\u63a5\u7d9a\u3057\u3066\u3044\u307e\u3059... \u63a5\u7d9a\u3057\u307e\u3057\u305f\u3002\nHTTP \u306b\u3088\u308b\u63a5\u7d9a\u8981\u6c42\u3092\u9001\u4fe1\u3057\u307e\u3057\u305f\u3001\u5fdc\u7b54\u3092\u5f85\u3063\u3066\u3044\u307e\u3059... 200 OK\n\u9577\u3055: 1115394 (1.1M) [text/plain]\n`input.txt' \u306b\u4fdd\u5b58\u4e2d\n\ninput.txt           100%[===================&gt;]   1.06M  --.-KB/s \u6642\u9593 0.1s       \n\n2025-08-28 21:14:56 (7.62 MB/s) - `input.txt' \u3078\u4fdd\u5b58\u5b8c\u4e86 [1115394/1115394]\n\n10.788929 M parameters\nstep 0: train loss 4.2221, val loss 4.2306\nstep 500: train loss 1.7444, val loss 1.9058\nstep 1000: train loss 1.3914, val loss 1.5998\nstep 1500: train loss 1.2659, val loss 1.5262\nstep 2000: train loss 1.1856, val loss 1.5041\nstep 2500: train loss 1.1206, val loss 1.4968\nstep 3000: train loss 1.0732, val loss 1.4862\nstep 3500: train loss 1.0168, val loss 1.5054\nstep 4000: train loss 0.9598, val loss 1.5148\nstep 4500: train loss 0.9094, val loss 1.5358\nstep 4999: train loss 0.8632, val loss 1.5685\n\na man one of a most wit that; a thousands\nwith a most opiny. And a jest but\nto the fish self-bond, a disesimple; a monster.\n\nShepherd:\nLets for him, he desires and man of dain impojects. I reason\nto them, fell fear out of the sight: the Good take it advantage\nto your agnoly then bitine home. Stand, for for\nmine with Bianca. Powpan, the drink that you onceed his\nstair and the mair people with him: he's a song of this cause\nto live Escalus; he lies and kneel I\nrequire out absen; and ever\nbe a judg\n</code></pre></p>","tags":["GPT","Transformer","Self-Attention","PyTorch","\u8a00\u8a9e\u30e2\u30c7\u30eb","\u6df1\u5c64\u5b66\u7fd2","\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u6a5f\u69cb","\u4f4d\u7f6e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0","\u30c6\u30ad\u30b9\u30c8\u751f\u6210","\u30aa\u30fc\u30c8\u30ea\u30b0\u30ec\u30c3\u30b7\u30d6","ChatGPT"]},{"location":"LLM/05_Let%27s_build_GPT_from_scratch/#72","title":"7.2 \u30c6\u30ad\u30b9\u30c8\u751f\u6210\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u8a73\u7d30\u89e3\u8aac","text":"<p>GPT\u304c\u3069\u306e\u3088\u3046\u306b\u30c6\u30ad\u30b9\u30c8\u3092\u751f\u6210\u3059\u308b\u306e\u304b\u3001\u30b9\u30c6\u30c3\u30d7\u3054\u3068\u306b\u8a73\u3057\u304f\u898b\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002</p>","tags":["GPT","Transformer","Self-Attention","PyTorch","\u8a00\u8a9e\u30e2\u30c7\u30eb","\u6df1\u5c64\u5b66\u7fd2","\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u6a5f\u69cb","\u4f4d\u7f6e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0","\u30c6\u30ad\u30b9\u30c8\u751f\u6210","\u30aa\u30fc\u30c8\u30ea\u30b0\u30ec\u30c3\u30b7\u30d6","ChatGPT"]},{"location":"LLM/05_Let%27s_build_GPT_from_scratch/#gpt","title":"\u306a\u305cGPT\u306f\u30c6\u30ad\u30b9\u30c8\u3092\u751f\u6210\u3067\u304d\u308b\u306e\u304b\uff1f","text":"<p>GPT\u306f\u300c\u6b21\u306b\u6765\u308b\u5358\u8a9e\uff08\u6587\u5b57\uff09\u3092\u4e88\u6e2c\u3059\u308b\u300d\u3088\u3046\u306b\u8a13\u7df4\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u4e88\u6e2c\u80fd\u529b\u3092\u4f7f\u3063\u3066\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u6587\u7ae0\u3092\u751f\u6210\u3057\u307e\u3059\uff1a</p> <p>\u5177\u4f53\u4f8b\u3067\u7406\u89e3\u3059\u308b\u751f\u6210\u30d7\u30ed\u30bb\u30b9\uff1a <pre><code>Step 1: \u5165\u529b\u300cHello, my name is\u300d\u2192 GPT\u304c\u4e88\u6e2c\u300cJohn\u300d\nStep 2: \u5165\u529b\u300cHello, my name is John\u300d\u2192 GPT\u304c\u4e88\u6e2c\u300c.\u300d  \nStep 3: \u5165\u529b\u300cHello, my name is John.\u300d\u2192 GPT\u304c\u4e88\u6e2c\u300cI\u300d\nStep 4: \u5165\u529b\u300cHello, my name is John. I\u300d\u2192 GPT\u304c\u4e88\u6e2c\u300cam\u300d\n...\u3053\u306e\u30d7\u30ed\u30bb\u30b9\u3092\u7e70\u308a\u8fd4\u3059\n</code></pre></p> <p>\u3053\u308c\u3092\u30aa\u30fc\u30c8\u30ea\u30b0\u30ec\u30c3\u30b7\u30d6\u751f\u6210\u3068\u547c\u3073\u307e\u3059\u3002\u300c\u81ea\u5206\u306e\u51fa\u529b\u3092\u6b21\u306e\u5165\u529b\u306b\u4f7f\u3046\u300d\u3068\u3044\u3046\u610f\u5473\u3067\u3059\u3002</p>","tags":["GPT","Transformer","Self-Attention","PyTorch","\u8a00\u8a9e\u30e2\u30c7\u30eb","\u6df1\u5c64\u5b66\u7fd2","\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u6a5f\u69cb","\u4f4d\u7f6e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0","\u30c6\u30ad\u30b9\u30c8\u751f\u6210","\u30aa\u30fc\u30c8\u30ea\u30b0\u30ec\u30c3\u30b7\u30d6","ChatGPT"]},{"location":"LLM/05_Let%27s_build_GPT_from_scratch/#gpt5","title":"GPT\u751f\u6210\u30e1\u30bd\u30c3\u30c9\u306e5\u3064\u306e\u30b9\u30c6\u30c3\u30d7","text":"<p>\u305d\u308c\u3067\u306f\u3001\u5b9f\u969b\u306e\u30b3\u30fc\u30c9\u3092\u898b\u306a\u304c\u3089\u3001GPT\u304c\u3069\u306e\u3088\u3046\u306b1\u3064\u305a\u3064\u6587\u5b57\u3092\u751f\u6210\u3059\u308b\u304b\u3092\u8a73\u3057\u304f\u89e3\u8aac\u3057\u307e\u3059\u3002</p> <p>Step 1: \u5165\u529b\u306e\u9577\u3055\u3092\u5236\u9650\u3059\u308b <pre><code>idx_cond = idx[:, -block_size:]  # \u6700\u65b0\u306eblock_size\u500b\u306e\u30c8\u30fc\u30af\u30f3\u306e\u307f\u4f7f\u7528\n</code></pre></p> <p>\u306a\u305c\u9577\u3055\u3092\u5236\u9650\u3059\u308b\u306e\uff1f</p> <ul> <li>\u30e1\u30e2\u30ea\u306e\u7bc0\u7d04: \u9577\u3044\u6587\u7ae0\u5168\u4f53\u3092\u899a\u3048\u308b\u5fc5\u8981\u304c\u306a\u3044</li> <li>\u51e6\u7406\u901f\u5ea6: \u77ed\u3044\u6587\u7ae0\u306e\u65b9\u304c\u8a08\u7b97\u304c\u901f\u3044</li> <li>\u5b66\u7fd2\u6642\u3068\u540c\u3058\u6761\u4ef6: \u8a13\u7df4\u6642\u3082\u540c\u3058\u9577\u3055\u3067\u5b66\u7fd2\u3057\u305f\u304b\u3089</li> </ul> <p>\u4f8b: \u672c\u304c\u9577\u304f\u3066\u3082\u3001\u6700\u65b0\u306e8\u30da\u30fc\u30b8\u3060\u3051\u8aad\u3093\u3067\u6b21\u3092\u4e88\u6e2c\u3059\u308b\u611f\u3058\u3067\u3059 <pre><code>\u5143\u306e\u6587\u7ae0: [1,2,3,4,5,6,7,8,9,10,11] \uff0811\u6587\u5b57\uff09\n\u2193 block_size=8\u306e\u5834\u5408\n\u4f7f\u7528\u3059\u308b\u90e8\u5206: [4,5,6,7,8,9,10,11] \uff08\u6700\u65b08\u6587\u5b57\u306e\u307f\uff09\n</code></pre></p> <p>Step 2: \u30e2\u30c7\u30eb\u306b\u4e88\u6e2c\u3055\u305b\u308b <pre><code>logits, loss = self(idx_cond)  # GPT\u30e2\u30c7\u30eb\u3067\u4e88\u6e2c\nlogits = logits[:, -1, :]      # \u6700\u5f8c\u306e\u4f4d\u7f6e\u306e\u4e88\u6e2c\u306e\u307f\u53d6\u5f97\n</code></pre></p> <p>GPT\u306e\u4e88\u6e2c\u306e\u4ed5\u7d44\u307f: - GPT\u306f\u5165\u529b\u6587\u5b57\u5217\u306e\u300c\u5404\u4f4d\u7f6e\u300d\u3067\u6b21\u306e\u6587\u5b57\u3092\u4e88\u6e2c\u3057\u307e\u3059 - \u3067\u3082\u751f\u6210\u6642\u306f\u3001\u300c\u6700\u5f8c\u306e\u4f4d\u7f6e\u306e\u4e88\u6e2c\u300d\u3060\u3051\u304c\u5fc5\u8981\u3067\u3059</p> <p>\u4f8b: \u300c\u3053\u3093\u306b\u3061\u300d\u3068\u3044\u3046\u5165\u529b\u306e\u5834\u5408 <pre><code>\u4f4d\u7f6e1: \u300c\u3053\u300d\u2192 \u6b21\u306f\u300c\u3093\u300d\u3092\u4e88\u6e2c\n\u4f4d\u7f6e2: \u300c\u3093\u300d\u2192 \u6b21\u306f\u300c\u306b\u300d\u3092\u4e88\u6e2c  \n\u4f4d\u7f6e3: \u300c\u306b\u300d\u2192 \u6b21\u306f\u300c\u3061\u300d\u3092\u4e88\u6e2c\n\u4f4d\u7f6e4: \u300c\u3061\u300d\u2192 \u6b21\u306f\u300c\u306f\u300d\u3092\u4e88\u6e2c \u2190 \u3053\u308c\u3060\u3051\u304c\u91cd\u8981\uff01\n</code></pre></p> <p>Step 3: \u751f\u30b9\u30b3\u30a2\u3092\u78ba\u7387\u306b\u5909\u63db <pre><code>probs = F.softmax(logits, dim=-1)  # \u78ba\u7387\u306b\u5909\u63db\n</code></pre></p> <p>\u306a\u305c\u78ba\u7387\u306b\u5909\u63db\uff1f GPT\u306e\u51fa\u529b\u306f\u300c\u751f\u30b9\u30b3\u30a2\u300d\uff08\u30ed\u30b8\u30c3\u30c8\uff09\u3067\u3059\u3002\u3053\u308c\u30920\u301c1\u306e\u78ba\u7387\u306b\u5909\u63db\u3057\u307e\u3059\u3002</p> <p>\u4f8b: \u6b21\u306e\u6587\u5b57\u306e\u4e88\u6e2c\u30b9\u30b3\u30a2 <pre><code>\u751f\u30b9\u30b3\u30a2: \u300c\u306f\u300d:8.2, \u300c\u308f\u300d:2.1, \u300c\u3070\u300d:1.5, \u300c\u304c\u300d:0.8\n\u2193 softmax\u3067\u5909\u63db\n\u78ba\u7387: \u300c\u306f\u300d:89%, \u300c\u308f\u300d:7%, \u300c\u3070\u300d:3%, \u300c\u304c\u300d:1%\n</code></pre></p> <p>Step 4: \u78ba\u7387\u306b\u57fa\u3065\u3044\u30661\u3064\u306e\u6587\u5b57\u3092\u9078\u3076 <pre><code>idx_next = torch.multinomial(probs, num_samples=1)  # \u78ba\u7387\u7684\u306b\u9078\u629e\n</code></pre></p> <p>\u306a\u305c\u6700\u3082\u78ba\u7387\u306e\u9ad8\u3044\u6587\u5b57\u3092\u9078\u3070\u306a\u3044\uff1f - \u5275\u9020\u6027: \u6bce\u56de\u540c\u3058\u6587\u7ae0\u306b\u306a\u3089\u306a\u3044 - \u81ea\u7136\u3055: \u4eba\u9593\u3082\u5b8c\u5168\u306b\u4e88\u6e2c\u53ef\u80fd\u3067\u306f\u306a\u3044 - \u591a\u69d8\u6027: \u9762\u767d\u3044\u6587\u7ae0\u304c\u751f\u6210\u3055\u308c\u308b</p> <p>\u4f8b: 89%\u3067\u300c\u306f\u300d\u30017%\u3067\u300c\u308f\u300d\u3092\u9078\u3076\u3002\u305f\u307e\u306b\u300c\u308f\u300d\u304c\u9078\u3070\u308c\u308b\u304b\u3089\u9762\u767d\u3044\uff01</p> <p>Step 5: \u65b0\u3057\u3044\u6587\u5b57\u3092\u6587\u7ae0\u306b\u8ffd\u52a0 <pre><code>idx = torch.cat((idx, idx_next), dim=1)  # \u65b0\u3057\u3044\u6587\u5b57\u3092\u8ffd\u52a0\n</code></pre></p> <p>\u5b8c\u4e86\uff01\u6b21\u306e\u30eb\u30fc\u30d7\u306b\u9032\u3080 <pre><code>\u5143\u306e\u6587\u7ae0: \u300c\u3053\u3093\u306b\u3061\u300d\n\u2193 \u65b0\u3057\u3044\u6587\u5b57\u300c\u306f\u300d\u3092\u8ffd\u52a0  \n\u65b0\u3057\u3044\u6587\u7ae0: \u300c\u3053\u3093\u306b\u3061\u306f\u300d\n\u2193 \u3053\u308c\u304c\u6b21\u306e\u30eb\u30fc\u30d7\u306e\u5165\u529b\u306b\u306a\u308b\n</code></pre></p>","tags":["GPT","Transformer","Self-Attention","PyTorch","\u8a00\u8a9e\u30e2\u30c7\u30eb","\u6df1\u5c64\u5b66\u7fd2","\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u6a5f\u69cb","\u4f4d\u7f6e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0","\u30c6\u30ad\u30b9\u30c8\u751f\u6210","\u30aa\u30fc\u30c8\u30ea\u30b0\u30ec\u30c3\u30b7\u30d6","ChatGPT"]},{"location":"LLM/05_Let%27s_build_GPT_from_scratch/#_18","title":"\u5168\u4f53\u306e\u6d41\u308c\u3092\u307e\u3068\u3081\u3066\u7406\u89e3","text":"<p>1\u56de\u306e\u30eb\u30fc\u30d7\u3067\u8d77\u3053\u308b\u3053\u3068: <pre><code>\u5165\u529b: \u300c\u3053\u3093\u306b\u3061\u300d\nStep 1: \u6700\u65b08\u6587\u5b57\u306b\u5236\u9650 \u2192 \u300c\u3053\u3093\u306b\u3061\u300d\uff088\u6587\u5b57\u4ee5\u4e0b\u306a\u306e\u3067\u305d\u306e\u307e\u307e\uff09  \nStep 2: GPT\u3067\u4e88\u6e2c \u2192 \u5404\u6587\u5b57\u306e\u78ba\u7387\u3092\u8a08\u7b97\nStep 3: \u78ba\u7387\u5909\u63db \u2192 \u306f:89%, \u308f:7%, \u3070:3%, \u304c:1%\nStep 4: \u78ba\u7387\u7684\u9078\u629e \u2192 \u300c\u306f\u300d\u3092\u9078\u629e\nStep 5: \u6587\u7ae0\u66f4\u65b0 \u2192 \u300c\u3053\u3093\u306b\u3061\u306f\u300d\n\n\u6b21\u306e\u30eb\u30fc\u30d7:\n\u5165\u529b: \u300c\u3053\u3093\u306b\u3061\u306f\u300d  \n\u2192 \u540c\u3058\u51e6\u7406\u3092\u7e70\u308a\u8fd4\u3057\u3066\u6b21\u306e\u6587\u5b57\u3092\u751f\u6210...\n</code></pre></p> <p>\u3053\u308c\u3092\u6307\u5b9a\u56de\u6570\uff08\u4f8b\uff1a500\u56de\uff09\u7e70\u308a\u8fd4\u3059\u3053\u3068\u3067\u3001\u9577\u3044\u6587\u7ae0\u3092\u751f\u6210\u3067\u304d\u307e\u3059\uff01</p>","tags":["GPT","Transformer","Self-Attention","PyTorch","\u8a00\u8a9e\u30e2\u30c7\u30eb","\u6df1\u5c64\u5b66\u7fd2","\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u6a5f\u69cb","\u4f4d\u7f6e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0","\u30c6\u30ad\u30b9\u30c8\u751f\u6210","\u30aa\u30fc\u30c8\u30ea\u30b0\u30ec\u30c3\u30b7\u30d6","ChatGPT"]},{"location":"LLM/05_Let%27s_build_GPT_from_scratch/#_19","title":"\u3088\u308a\u826f\u3044\u30c6\u30ad\u30b9\u30c8\u3092\u751f\u6210\u3059\u308b\u306b\u306f\uff1f","text":"<p>1. \u6e29\u5ea6\uff08Temperature\uff09\u306e\u8abf\u6574 - \u4eca\u56de\u306f\u672a\u5b9f\u88c5\u3067\u3059\u304c\u91cd\u8981 <pre><code>logits = logits / temperature  # temperature\u3067\u8abf\u6574\nprobs = F.softmax(logits, dim=-1)\n</code></pre> - \u6e29\u5ea6\u304c\u4f4e\u3044\uff08\u4f8b\uff1a0.3\uff09: \u5b89\u5168\u3067\u4e88\u6e2c\u3057\u3084\u3059\u3044\u6587\u7ae0 - \u6e29\u5ea6\u304c\u9ad8\u3044\uff08\u4f8b\uff1a1.5\uff09: \u5275\u9020\u7684\u3067\u4e88\u6e2c\u3057\u306b\u304f\u3044\u6587\u7ae0</p> <p>2. \u3088\u308a\u9577\u3044\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8 - <code>block_size</code>\u3092\u5927\u304d\u304f\u3059\u308b\u3068\u3001\u3088\u308a\u9577\u3044\u6587\u8108\u3092\u899a\u3048\u3089\u308c\u308b - \u3088\u308a\u4e00\u8cab\u6027\u306e\u3042\u308b\u6587\u7ae0\u304c\u751f\u6210\u3055\u308c\u308b</p> <p>3. \u3088\u308a\u5927\u304d\u306a\u30e2\u30c7\u30eb - \u30d1\u30e9\u30e1\u30fc\u30bf\u6570\u304c\u591a\u3044\u307b\u3069\u3001\u3088\u308a\u8ce2\u3044\u6587\u7ae0\u3092\u751f\u6210 - \u5b9f\u969b\u306eChatGPT\u306f\u6570\u5341\u5104\u301c\u6570\u5343\u5104\u30d1\u30e9\u30e1\u30fc\u30bf</p> <p>4. \u3088\u308a\u591a\u304f\u306e\u8a13\u7df4\u30c7\u30fc\u30bf - \u591a\u69d8\u306a\u6587\u7ae0\u3067\u5b66\u7fd2\u3059\u308b\u307b\u3069\u3001\u591a\u69d8\u306a\u8868\u73fe\u304c\u3067\u304d\u308b</p> <p>\u5b9f\u969b\u306e\u5fdc\u7528\u3067\u306f</p> <p>ChatGPT\u306a\u3069\u3067\u306f\u3001KV-Cache\u3068\u3044\u3046\u9ad8\u901f\u5316\u6280\u8853\u3084\u3001\u3088\u308a\u6d17\u7df4\u3055\u308c\u305f\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u624b\u6cd5\uff08Top-p sampling\u7b49\uff09\u304c\u4f7f\u7528\u3055\u308c\u3066\u3044\u307e\u3059\u3002</p>","tags":["GPT","Transformer","Self-Attention","PyTorch","\u8a00\u8a9e\u30e2\u30c7\u30eb","\u6df1\u5c64\u5b66\u7fd2","\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u6a5f\u69cb","\u4f4d\u7f6e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0","\u30c6\u30ad\u30b9\u30c8\u751f\u6210","\u30aa\u30fc\u30c8\u30ea\u30b0\u30ec\u30c3\u30b7\u30d6","ChatGPT"]},{"location":"LLM/05_Let%27s_build_GPT_from_scratch/#8","title":"8. \u53c2\u8003\u8cc7\u6599","text":"<p>\u4f7f\u7528\u3057\u305f\u30c7\u30fc\u30bf\u30bd\u30fc\u30b9: - Tiny Shakespeare Dataset</p> <p>\u53c2\u8003\u6587\u732e: - Vaswani, A., et al. \"Attention is all you need.\" Advances in neural information processing systems 30 (2017) - Radford, A., et al. \"Language models are unsupervised multitask learners.\" OpenAI blog 1.8 (2019): 9</p> <p>\u95a2\u9023\u30ea\u30f3\u30af: - Andrej Karpathy's YouTube Channel - PyTorch Documentation - Hugging Face Transformers</p>","tags":["GPT","Transformer","Self-Attention","PyTorch","\u8a00\u8a9e\u30e2\u30c7\u30eb","\u6df1\u5c64\u5b66\u7fd2","\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u6a5f\u69cb","\u4f4d\u7f6e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0","\u30c6\u30ad\u30b9\u30c8\u751f\u6210","\u30aa\u30fc\u30c8\u30ea\u30b0\u30ec\u30c3\u30b7\u30d6","ChatGPT"]},{"location":"LLM/06_the_huggingface_datasets_library/","title":"Hugging Face Datasets\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u5b8c\u5168\u30ac\u30a4\u30c9","text":"","tags":["Hugging Face","Datasets","\u6a5f\u68b0\u5b66\u7fd2","\u30c7\u30fc\u30bf\u524d\u51e6\u7406","FAISS","\u610f\u5473\u691c\u7d22","NLP","Python"]},{"location":"LLM/06_the_huggingface_datasets_library/#_1","title":"\u6982\u8981","text":"<p>\u3053\u306e\u8a18\u4e8b\u3067\u306f\u3001Hugging Face Datasets\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u6df1\u304f\u6398\u308a\u4e0b\u3052\u3001\u4ee5\u4e0b\u306e\u91cd\u8981\u306a\u8cea\u554f\u306b\u7b54\u3048\u3066\u3044\u304d\u307e\u3059\uff1a</p> <ul> <li>\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304cHub\u306b\u306a\u3044\u5834\u5408\u306f\u3069\u3046\u3059\u308c\u3070\u3088\u3044\u304b\uff1f</li> <li>\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u3069\u306e\u3088\u3046\u306b\u30b9\u30e9\u30a4\u30b9\u3084\u64cd\u4f5c\u3059\u308b\u304b\uff1f\uff08Pandas\u3092\u4f7f\u3046\u5fc5\u8981\u304c\u3042\u308b\u5834\u5408\u306f\uff1f\uff09</li> <li>\u72ec\u81ea\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u4f5c\u6210\u3059\u308b\u306b\u306f\u3069\u3046\u3059\u308c\u3070\u3088\u3044\u304b\uff1f</li> </ul> <p>\u53c2\u8003\u8cc7\u6599</p> <p>\u672c\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306f Hugging Face LLM Course \u3092\u53c2\u8003\u306b\u3001\u65e5\u672c\u8a9e\u3067\u5b66\u7fd2\u5185\u5bb9\u3092\u307e\u3068\u3081\u305f\u500b\u4eba\u7684\u306a\u5b66\u7fd2\u30ce\u30fc\u30c8\u3067\u3059\u3002\u8a73\u7d30\u306a\u5185\u5bb9\u3084\u6700\u65b0\u60c5\u5831\u306b\u3064\u3044\u3066\u306f\u3001\u539f\u6587\u3082\u4f75\u305b\u3066\u3054\u53c2\u7167\u304f\u3060\u3055\u3044\u3002</p>","tags":["Hugging Face","Datasets","\u6a5f\u68b0\u5b66\u7fd2","\u30c7\u30fc\u30bf\u524d\u51e6\u7406","FAISS","\u610f\u5473\u691c\u7d22","NLP","Python"]},{"location":"LLM/06_the_huggingface_datasets_library/#_2","title":"\u524d\u63d0\u77e5\u8b58","text":"<p>\u3053\u306e\u8a18\u4e8b\u3092\u7406\u89e3\u3059\u308b\u306b\u306f\u3001\u4ee5\u4e0b\u306e\u77e5\u8b58\u304c\u5fc5\u8981\u3067\u3059\uff1a</p> <ul> <li>Python\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u57fa\u672c</li> <li>pandas\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9</li> <li>\u6a5f\u68b0\u5b66\u7fd2\u306e\u57fa\u672c\u6982\u5ff5</li> <li>Hugging Face Transformers\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9</li> </ul>","tags":["Hugging Face","Datasets","\u6a5f\u68b0\u5b66\u7fd2","\u30c7\u30fc\u30bf\u524d\u51e6\u7406","FAISS","\u610f\u5473\u691c\u7d22","NLP","Python"]},{"location":"LLM/06_the_huggingface_datasets_library/#hub","title":"\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304cHub\u306b\u306a\u3044\u5834\u5408\u306e\u5bfe\u51e6\u6cd5","text":"<p>Hugging Face Hub\u304b\u3089\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u65b9\u6cd5\u306f\u65e2\u306b\u5b66\u7fd2\u6e08\u307f\u3067\u3059\u3002\u3057\u304b\u3057\u3001\u5b9f\u969b\u306b\u306f\u30e9\u30c3\u30d7\u30c8\u30c3\u30d7\u3084\u30ea\u30e2\u30fc\u30c8\u30b5\u30fc\u30d0\u30fc\u306b\u4fdd\u5b58\u3055\u308c\u305f\u30c7\u30fc\u30bf\u3092\u6271\u3046\u3053\u3068\u304c\u591a\u3044\u3067\u3057\u3087\u3046\u3002</p> <p>\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u306f\u3001Hugging Face Hub\u3067\u5229\u7528\u3067\u304d\u306a\u3044\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092Hugging Face Datasets\u3067\u8aad\u307f\u8fbc\u3080\u65b9\u6cd5\u3092\u8aac\u660e\u3057\u307e\u3059\u3002</p>","tags":["Hugging Face","Datasets","\u6a5f\u68b0\u5b66\u7fd2","\u30c7\u30fc\u30bf\u524d\u51e6\u7406","FAISS","\u610f\u5473\u691c\u7d22","NLP","Python"]},{"location":"LLM/06_the_huggingface_datasets_library/#_3","title":"\u30ed\u30fc\u30ab\u30eb\u304a\u3088\u3073\u30ea\u30e2\u30fc\u30c8\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u64cd\u4f5c","text":"\u30c7\u30fc\u30bf\u5f62\u5f0f \u30ed\u30fc\u30c7\u30a3\u30f3\u30b0\u30b9\u30af\u30ea\u30d7\u30c8 \u4f8b CSV &amp; TSV <code>csv</code> <code>load_dataset(\"csv\", data_files=\"my_file.csv\")</code> \u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb <code>text</code> <code>load_dataset(\"text\", data_files=\"my_file.txt\")</code> JSON &amp; JSON Lines <code>json</code> <code>load_dataset(\"json\", data_files=\"my_file.jsonl\")</code> Pickle\u5f62\u5f0f\u306eDataFrames <code>pandas</code> <code>load_dataset(\"pandas\", data_files=\"my_dataframe.pkl\")</code> <p>\u4e0a\u306e\u8868\u306b\u793a\u3059\u3088\u3046\u306b\u3001\u5404\u30c7\u30fc\u30bf\u5f62\u5f0f\u306b\u5bfe\u5fdc\u3059\u308b\u65b9\u6cd5\u306f\u975e\u5e38\u306b\u30b7\u30f3\u30d7\u30eb\u3067\u3059\u3002<code>load_dataset()</code>\u95a2\u6570\u3067\u30ed\u30fc\u30c7\u30a3\u30f3\u30b0\u30b9\u30af\u30ea\u30d7\u30c8\u306e\u7a2e\u985e\u3092\u6307\u5b9a\u3057\u3001<code>data_files</code>\u5f15\u6570\u30671\u3064\u307e\u305f\u306f\u8907\u6570\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u3092\u6307\u5b9a\u3059\u308b\u3060\u3051\u3067\u8aad\u307f\u8fbc\u3081\u307e\u3059\u3002\u307e\u305a\u306f\u30ed\u30fc\u30ab\u30eb\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u8aad\u307f\u8fbc\u307f\u3001\u305d\u306e\u5f8c\u30ea\u30e2\u30fc\u30c8\u30d5\u30a1\u30a4\u30eb\u3067\u540c\u3058\u3053\u3068\u3092\u884c\u3046\u65b9\u6cd5\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002</p>","tags":["Hugging Face","Datasets","\u6a5f\u68b0\u5b66\u7fd2","\u30c7\u30fc\u30bf\u524d\u51e6\u7406","FAISS","\u610f\u5473\u691c\u7d22","NLP","Python"]},{"location":"LLM/06_the_huggingface_datasets_library/#_4","title":"\u30ed\u30fc\u30ab\u30eb\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u8aad\u307f\u8fbc\u307f","text":"<p>\u3053\u306e\u4f8b\u3067\u306f\u3001\u30a4\u30bf\u30ea\u30a2\u8a9e\u3067\u306e\u8cea\u554f\u5fdc\u7b54\u306e\u5927\u898f\u6a21\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3067\u3042\u308bSQuAD-it\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002</p> <p>\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u3068\u30c6\u30b9\u30c8\u306e\u5206\u5272\u304cGitHub\u3067\u30db\u30b9\u30c8\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u30b7\u30f3\u30d7\u30eb\u306a<code>wget</code>\u30b3\u30de\u30f3\u30c9\u3067\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3067\u304d\u307e\u3059\uff1a</p> <pre><code># GitHub\u304b\u3089SQuAD-it\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\nwget https://github.com/crux82/squad-it/raw/master/SQuAD_it-train.json.gz\nwget https://github.com/crux82/squad-it/raw/master/SQuAD_it-test.json.gz\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>SQuAD_it-train.json 100%[===================&gt;]   7.37M  6.87MB/s \u6642\u9593 1.1s       \n2025-09-05 20:03:03 (6.87 MB/s) - `SQuAD_it-train.json.gz' \u3078\u4fdd\u5b58\u5b8c\u4e86 [7725286/7725286]\n\nSQuAD_it-test.json. 100%[===================&gt;]   1.00M  3.13MB/s \u6642\u9593 0.3s       \n2025-09-05 20:03:04 (3.13 MB/s) - `SQuAD_it-test.json.gz' \u3078\u4fdd\u5b58\u5b8c\u4e86 [1051245/1051245]\n</code></pre></p> <p>\u3053\u308c\u306b\u3088\u308a\u3001SQuAD_it-train.json.gz\u3068SQuAD_it-test.json.gz\u3068\u3044\u30462\u3064\u306e\u5727\u7e2e\u30d5\u30a1\u30a4\u30eb\u304c\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3055\u308c\u307e\u3059\u3002\u3053\u308c\u3089\u306fLinux\u306e<code>gzip</code>\u30b3\u30de\u30f3\u30c9\u3067\u89e3\u51cd\u3067\u304d\u307e\u3059\uff1a</p> <pre><code># \u5727\u7e2e\u30d5\u30a1\u30a4\u30eb\u3092\u89e3\u51cd\uff08-d: \u89e3\u51cd\u3001-k: \u5143\u30d5\u30a1\u30a4\u30eb\u4fdd\u6301\u3001-v: \u8a73\u7d30\u8868\u793a\uff09\ngzip -dkv SQuAD_it-*.json.gz\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>SQuAD_it-test.json.gz:     87.4% -- replaced with SQuAD_it-test.json\nSQuAD_it-train.json.gz:    82.2% -- replaced with SQuAD_it-train.json\n</code></pre></p> <p>\u5727\u7e2e\u30d5\u30a1\u30a4\u30eb\u304c_SQuAD_it-train.json_\u3068_SQuAD_it-test.json_\u306b\u7f6e\u304d\u63db\u3048\u3089\u308c\u3001\u30c7\u30fc\u30bf\u304cJSON\u5f62\u5f0f\u3067\u4fdd\u5b58\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002</p> <p><code>load_dataset()</code>\u95a2\u6570\u3067JSON\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3080\u306b\u306f\u3001\u901a\u5e38\u306eJSON\uff08\u30cd\u30b9\u30c8\u3057\u305f\u8f9e\u66f8\u306e\u3088\u3046\u306a\uff09\u304bJSON Lines\uff08\u884c\u533a\u5207\u308aJSON\uff09\u306e\u3069\u3061\u3089\u3092\u6271\u3063\u3066\u3044\u308b\u304b\u3092\u77e5\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u591a\u304f\u306e\u8cea\u554f\u5fdc\u7b54\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3068\u540c\u69d8\u306b\u3001SQuAD-it\u306f\u30cd\u30b9\u30c8\u69cb\u9020\u3092\u63a1\u7528\u3057\u3066\u304a\u308a\u3001\u3059\u3079\u3066\u306e\u30c6\u30ad\u30b9\u30c8\u304c<code>data</code>\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u4fdd\u5b58\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u3064\u307e\u308a\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b<code>field</code>\u5f15\u6570\u3092\u6307\u5b9a\u3057\u3066\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u8aad\u307f\u8fbc\u3080\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a</p> <pre><code># Datasets\u30e9\u30a4\u30d6\u30e9\u30ea\u304b\u3089JSON\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u8aad\u307f\u8fbc\u307f\nfrom datasets import load_dataset\n\n# JSON\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u307f\u3001data\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u6307\u5b9a\nsquad_it_dataset = load_dataset(\"json\", data_files=\"SQuAD_it-train.json\", field=\"data\")\n</code></pre> <p>\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u3001\u30ed\u30fc\u30ab\u30eb\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u306f<code>train</code>\u5206\u5272\u3092\u6301\u3064<code>DatasetDict</code>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002<code>squad_it_dataset</code>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u8abf\u3079\u308b\u3053\u3068\u3067\u3053\u308c\u3092\u78ba\u8a8d\u3067\u304d\u307e\u3059\uff1a</p> <pre><code># \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u69cb\u9020\u3092\u78ba\u8a8d\nsquad_it_dataset\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>DatasetDict({\n    train: Dataset({\n        features: ['title', 'paragraphs'],\n        num_rows: 442\n    })\n})\n</code></pre></p> <p>\u3053\u308c\u306b\u3088\u308a\u3001\u884c\u6570\u3068\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30bb\u30c3\u30c8\u306b\u95a2\u9023\u3059\u308b\u5217\u540d\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3057\u3066<code>train</code>\u5206\u5272\u306b\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u4ed8\u3051\u308b\u3053\u3068\u3067\u3001\u4f8b\u306e1\u3064\u3092\u8868\u793a\u3067\u304d\u307e\u3059\uff1a</p> <pre><code># \u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30bb\u30c3\u30c8\u306e\u6700\u521d\u306e\u4f8b\u3092\u8868\u793a\nsquad_it_dataset[\"train\"][0]\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>{\n    \"title\": \"Terremoto del Sichuan del 2008\",\n    \"paragraphs\": [\n        {\n            \"context\": \"Il terremoto del Sichuan del 2008 o il terremoto...\",\n            \"qas\": [\n                {\n                    \"answers\": [{\"answer_start\": 29, \"text\": \"2008\"}],\n                    \"id\": \"56cdca7862d2951400fa6826\",\n                    \"question\": \"In quale anno si \u00e8 verificato il terremoto nel Sichuan?\",\n                },\n                ...\n            ],\n        },\n        ...\n    ],\n}\n</code></pre></p> <p>\u7d20\u6674\u3089\u3057\u3044\uff01\u6700\u521d\u306e\u30ed\u30fc\u30ab\u30eb\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u8aad\u307f\u8fbc\u307f\u307e\u3057\u305f\uff01\u3057\u304b\u3057\u3001\u3053\u308c\u306f\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30bb\u30c3\u30c8\u3067\u306f\u6a5f\u80fd\u3057\u307e\u3057\u305f\u304c\u3001\u5b9f\u969b\u306b\u6b32\u3057\u3044\u306e\u306f\u3001<code>Dataset.map()</code>\u95a2\u6570\u3092\u4e21\u65b9\u306e\u5206\u5272\u306b\u4e00\u5ea6\u306b\u9069\u7528\u3067\u304d\u308b\u3088\u3046\u306b\u3001<code>train</code>\u3068<code>test</code>\u306e\u4e21\u65b9\u306e\u5206\u5272\u3092\u5358\u4e00\u306e<code>DatasetDict</code>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u542b\u3081\u308b\u3053\u3068\u3067\u3059\u3002\u3053\u308c\u3092\u884c\u3046\u306b\u306f\u3001\u5404\u5206\u5272\u540d\u3092\u305d\u306e\u5206\u5272\u306b\u95a2\u9023\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u306b\u30de\u30c3\u30d7\u3059\u308b\u8f9e\u66f8\u3092<code>data_files</code>\u5f15\u6570\u306b\u63d0\u4f9b\u3067\u304d\u307e\u3059\uff1a</p> <pre><code># \u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u542b\u3080\u8f9e\u66f8\u3092\u4f5c\u6210\ndata_files = {\"train\": \"SQuAD_it-train.json\", \"test\": \"SQuAD_it-test.json\"}\nsquad_it_dataset = load_dataset(\"json\", data_files=data_files, field=\"data\")\nsquad_it_dataset\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>DatasetDict({\n    train: Dataset({\n        features: ['title', 'paragraphs'],\n        num_rows: 442\n    })\n    test: Dataset({\n        features: ['title', 'paragraphs'],\n        num_rows: 48\n    })\n})\n</code></pre></p> <p>Hugging Face Datasets\u306e\u30ed\u30fc\u30c7\u30a3\u30f3\u30b0\u30b9\u30af\u30ea\u30d7\u30c8\u306f\u3001\u5b9f\u969b\u306b\u306f\u5165\u529b\u30d5\u30a1\u30a4\u30eb\u306e\u81ea\u52d5\u89e3\u51cd\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u308b\u305f\u3081\u3001\u5727\u7e2e\u30d5\u30a1\u30a4\u30eb\u306b\u76f4\u63a5<code>data_files</code>\u5f15\u6570\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001<code>gzip</code>\u306e\u4f7f\u7528\u3092\u30b9\u30ad\u30c3\u30d7\u3067\u304d\u307e\u3057\u305f\uff1a</p> <pre><code># \u5727\u7e2e\u30d5\u30a1\u30a4\u30eb\u3092\u76f4\u63a5\u6307\u5b9a\uff08\u81ea\u52d5\u89e3\u51cd\u3055\u308c\u308b\uff09\ndata_files = {\"train\": \"SQuAD_it-train.json.gz\", \"test\": \"SQuAD_it-test.json.gz\"}\nsquad_it_dataset = load_dataset(\"json\", data_files=data_files, field=\"data\")\n</code></pre> <p>\u3053\u308c\u306f\u3001\u591a\u304f\u306eGZIP\u30d5\u30a1\u30a4\u30eb\u3092\u624b\u52d5\u3067\u89e3\u51cd\u3057\u305f\u304f\u306a\u3044\u5834\u5408\u306b\u4fbf\u5229\u3067\u3059\u3002\u81ea\u52d5\u89e3\u51cd\u306f\u3001ZIP\u3084TAR\u306a\u3069\u306e\u4ed6\u306e\u4e00\u822c\u7684\u306a\u5f62\u5f0f\u306b\u3082\u9069\u7528\u3055\u308c\u308b\u305f\u3081\u3001\u5727\u7e2e\u30d5\u30a1\u30a4\u30eb\u306b<code>data_files</code>\u3092\u6307\u5b9a\u3059\u308b\u3060\u3051\u3067\u6e96\u5099\u5b8c\u4e86\u3067\u3059\uff01</p>","tags":["Hugging Face","Datasets","\u6a5f\u68b0\u5b66\u7fd2","\u30c7\u30fc\u30bf\u524d\u51e6\u7406","FAISS","\u610f\u5473\u691c\u7d22","NLP","Python"]},{"location":"LLM/06_the_huggingface_datasets_library/#_5","title":"\u30ea\u30e2\u30fc\u30c8\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u8aad\u307f\u8fbc\u307f","text":"<p>\u4f1a\u793e\u3067\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30c6\u30a3\u30b9\u30c8\u3084\u30d7\u30ed\u30b0\u30e9\u30de\u30fc\u3068\u3057\u3066\u50cd\u3044\u3066\u3044\u308b\u5834\u5408\u3001\u5206\u6790\u3057\u305f\u3044\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306f\u30ea\u30e2\u30fc\u30c8\u30b5\u30fc\u30d0\u30fc\u306b\u4fdd\u5b58\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u591a\u3044\u3067\u3057\u3087\u3046\u3002\u5e78\u3044\u306b\u3082\u3001\u30ea\u30e2\u30fc\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u306f\u30ed\u30fc\u30ab\u30eb\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u3068\u540c\u7b49\u306b\u7c21\u5358\u3067\u3059\uff01\u30ed\u30fc\u30ab\u30eb\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u306e\u4ee3\u308f\u308a\u306b\u3001<code>load_dataset()</code>\u306e<code>data_files</code>\u5f15\u6570\u3067\u30ea\u30e2\u30fc\u30c8\u30d5\u30a1\u30a4\u30eb\u304c\u4fdd\u5b58\u3055\u308c\u3066\u3044\u308b1\u3064\u307e\u305f\u306f\u8907\u6570\u306eURL\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001GitHub\u3067\u30db\u30b9\u30c8\u3055\u308c\u3066\u3044\u308bSQuAD-it\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u5834\u5408\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b<code>data_files</code>\u3092_SQuAD_it-*.json.gz_ URL\u306b\u6307\u5b9a\u3067\u304d\u307e\u3059\uff1a</p> <pre><code># \u30ea\u30e2\u30fc\u30c8URL\u304b\u3089\u76f4\u63a5\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u8aad\u307f\u8fbc\u307f\nurl = \"https://github.com/crux82/squad-it/raw/master/\"\ndata_files = {\n    \"train\": url + \"SQuAD_it-train.json.gz\",\n    \"test\": url + \"SQuAD_it-test.json.gz\",\n}\nsquad_it_dataset = load_dataset(\"json\", data_files=data_files, field=\"data\")\n</code></pre> <p>\u3053\u308c\u306f\u4e0a\u8a18\u3067\u53d6\u5f97\u3057\u305f\u306e\u3068\u540c\u3058<code>DatasetDict</code>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u8fd4\u3057\u307e\u3059\u304c\u3001_SQuAD_it-*.json.gz_\u30d5\u30a1\u30a4\u30eb\u3092\u624b\u52d5\u3067\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u89e3\u51cd\u3059\u308b\u30b9\u30c6\u30c3\u30d7\u3092\u7701\u7565\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u3067\u3001Hugging Face Hub\u3067\u30db\u30b9\u30c8\u3055\u308c\u3066\u3044\u306a\u3044\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u8aad\u307f\u8fbc\u3080\u3055\u307e\u3056\u307e\u306a\u65b9\u6cd5\u306e\u63a2\u7d22\u3092\u7d42\u3048\u307e\u3059\u3002\u4f5c\u696d\u306b\u4f7f\u3046\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304c\u3067\u304d\u305f\u306e\u3067\u3001\u3055\u307e\u3056\u307e\u306a\u30c7\u30fc\u30bf\u51e6\u7406\u30c6\u30af\u30cb\u30c3\u30af\u3092\u5b9f\u969b\u306b\u8a66\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff01</p>","tags":["Hugging Face","Datasets","\u6a5f\u68b0\u5b66\u7fd2","\u30c7\u30fc\u30bf\u524d\u51e6\u7406","FAISS","\u610f\u5473\u691c\u7d22","NLP","Python"]},{"location":"LLM/06_the_huggingface_datasets_library/#_6","title":"\u30c7\u30fc\u30bf\u306e\u30b9\u30e9\u30a4\u30b9\u3068\u51e6\u7406","text":"<p>\u307b\u3068\u3093\u3069\u306e\u5834\u5408\u3001\u4f5c\u696d\u3059\u308b\u30c7\u30fc\u30bf\u306f\u30e2\u30c7\u30eb\u306e\u8a13\u7df4\u306b\u5b8c\u74a7\u306b\u6e96\u5099\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u306f\u3001Hugging Face Datasets\u304c\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u30af\u30ea\u30fc\u30f3\u30a2\u30c3\u30d7\u3059\u308b\u305f\u3081\u306b\u63d0\u4f9b\u3059\u308b\u3055\u307e\u3056\u307e\u306a\u6a5f\u80fd\u3092\u63a2\u7d22\u3057\u307e\u3059\u3002</p>","tags":["Hugging Face","Datasets","\u6a5f\u68b0\u5b66\u7fd2","\u30c7\u30fc\u30bf\u524d\u51e6\u7406","FAISS","\u610f\u5473\u691c\u7d22","NLP","Python"]},{"location":"LLM/06_the_huggingface_datasets_library/#_7","title":"\u30c7\u30fc\u30bf\u306e\u30b9\u30e9\u30a4\u30b9\u3068\u51e6\u7406","text":"<p>Pandas\u3068\u540c\u69d8\u306b\u3001Hugging Face Datasets\u306f<code>Dataset</code>\u3068<code>DatasetDict</code>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u5185\u5bb9\u3092\u64cd\u4f5c\u3059\u308b\u305f\u3081\u306e\u3044\u304f\u3064\u304b\u306e\u95a2\u6570\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u306f\u3001\u5229\u7528\u53ef\u80fd\u306a\u305d\u306e\u4ed6\u306e\u95a2\u6570\u306b\u3064\u3044\u3066\u63a2\u7d22\u3057\u307e\u3059\u3002</p> <p>\u3053\u306e\u4f8b\u3067\u306f\u3001UC Irvine\u6a5f\u68b0\u5b66\u7fd2\u30ea\u30dd\u30b8\u30c8\u30ea\u3067\u30db\u30b9\u30c8\u3055\u308c\u3066\u3044\u308bDrug Review Dataset\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u3053\u308c\u306b\u306f\u3001\u6cbb\u7642\u5bfe\u8c61\u306e\u75c7\u72b6\u3068\u60a3\u8005\u306e\u6e80\u8db3\u5ea6\u306e10\u6bb5\u968e\u8a55\u4fa1\u3068\u3068\u3082\u306b\u3001\u3055\u307e\u3056\u307e\u306a\u85ac\u7269\u306b\u95a2\u3059\u308b\u60a3\u8005\u30ec\u30d3\u30e5\u30fc\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002</p> <p>\u307e\u305a\u3001\u30c7\u30fc\u30bf\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u62bd\u51fa\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u306f<code>wget</code>\u3068<code>unzip</code>\u30b3\u30de\u30f3\u30c9\u3067\u5b9f\u884c\u3067\u304d\u307e\u3059\uff1a</p> <pre><code># Drug Review\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3068ZIP\u30d5\u30a1\u30a4\u30eb\u306e\u89e3\u51cd\nwget \"https://archive.ics.uci.edu/ml/machine-learning-databases/00462/drugsCom_raw.zip\"\nunzip drugsCom_raw.zip\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>drugsCom_raw.zip        [        &lt;=&gt;         ]  41.00M  2.88MB/s \u6642\u9593 16s        \n2025-09-05 20:18:09 (2.63 MB/s) - `drugsCom_raw.zip' \u3078\u4fdd\u5b58\u7d42\u4e86 [42989872]\n\nArchive:  drugsCom_raw.zip\n  inflating: drugsComTest_raw.tsv    \n  inflating: drugsComTrain_raw.tsv   \n</code></pre></p> <p>TSV\u306f\u30b3\u30f3\u30de\u3067\u306f\u306a\u304f\u30bf\u30d6\u6587\u5b57\u3092\u533a\u5207\u308a\u6587\u5b57\u3068\u3057\u3066\u4f7f\u7528\u3059\u308bCSV\u306e\u5909\u7a2e\u3067\u3042\u308b\u305f\u3081\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b<code>load_dataset()</code>\u95a2\u6570\u3067<code>csv</code>\u30ed\u30fc\u30c7\u30a3\u30f3\u30b0\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u4f7f\u7528\u3057\u3001<code>delimiter</code>\u5f15\u6570\u3092\u6307\u5b9a\u3057\u3066\u3053\u308c\u3089\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3080\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a</p> <pre><code># Datasets\u30e9\u30a4\u30d6\u30e9\u30ea\u3067TSV\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u307f\nfrom datasets import load_dataset\n\n# \\t\u306fPython\u3067\u306e\u30bf\u30d6\u6587\u5b57\ndata_files = {\"train\": \"drugsComTrain_raw.tsv\", \"test\": \"drugsComTest_raw.tsv\"}\ndrug_dataset = load_dataset(\"csv\", data_files=data_files, delimiter=\"\\t\")\n</code></pre> <p>\u30c7\u30fc\u30bf\u5206\u6790\u3092\u884c\u3046\u969b\u306e\u826f\u3044\u6163\u884c\u306f\u3001\u6271\u3046\u30c7\u30fc\u30bf\u306e\u7279\u6027\u3092\u8fc5\u901f\u306b\u7406\u89e3\u3059\u308b\u305f\u3081\u306b\u5c0f\u3055\u306a\u30e9\u30f3\u30c0\u30e0\u30b5\u30f3\u30d7\u30eb\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u3067\u3059\u3002Hugging Face Datasets\u3067\u306f\u3001<code>Dataset.shuffle()</code>\u3068<code>Dataset.select()</code>\u95a2\u6570\u3092\u9023\u9396\u3055\u305b\u308b\u3053\u3068\u3067\u30e9\u30f3\u30c0\u30e0\u30b5\u30f3\u30d7\u30eb\u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\uff1a</p> <pre><code># \u30e9\u30f3\u30c0\u30e0\u30b5\u30f3\u30d7\u30eb\u3092\u4f5c\u6210\u3057\u3066\u30c7\u30fc\u30bf\u306e\u6700\u521d\u306e\u6570\u4f8b\u3092\u78ba\u8a8d\ndrug_sample = drug_dataset[\"train\"].shuffle(seed=42).select(range(1000))\n# \u6700\u521d\u306e\u6570\u4f8b\u3092\u8997\u3044\u3066\u307f\u308b\ndrug_sample[:3]\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>{'Unnamed: 0': [87571, 178045, 80482],\n 'drugName': ['Naproxen', 'Duloxetine', 'Mobic'],\n 'condition': ['Gout, Acute', 'ibromyalgia', 'Inflammatory Conditions'],\n 'review': ['\"like the previous person mention, I&amp;#039;m a strong believer of aleve, it works faster for my gout than the prescription meds I take. No more going to the doctor for refills.....Aleve works!\"',\n  '\"I have taken Cymbalta for about a year and a half for fibromyalgia pain. It is great\\r\\nas a pain reducer and an anti-depressant, however, the side effects outweighed \\r\\nany benefit I got from it. I had trouble with restlessness, being tired constantly,\\r\\ndizziness, dry mouth, numbness and tingling in my feet, and horrible sweating. I am\\r\\nbeing weaned off of it now. Went from 60 mg to 30mg and now to 15 mg. I will be\\r\\noff completely in about a week. The fibro pain is coming back, but I would rather deal with it than the side effects.\"',\n  '\"I have been taking Mobic for over a year with no side effects other than an elevated blood pressure.  I had severe knee and ankle pain which completely went away after taking Mobic.  I attempted to stop the medication however pain returned after a few days.\"'],\n 'rating': [9.0, 3.0, 10.0],\n 'date': ['September 2, 2015', 'November 7, 2011', 'June 5, 2013'],\n 'usefulCount': [36, 13, 128]}\n</code></pre></p> <p>\u518d\u73fe\u6027\u306e\u305f\u3081\u306b<code>Dataset.shuffle()</code>\u3067\u30b7\u30fc\u30c9\u3092\u56fa\u5b9a\u3057\u3066\u3044\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002<code>Dataset.select()</code>\u306f\u53cd\u5fa9\u53ef\u80fd\u306a\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u671f\u5f85\u3059\u308b\u305f\u3081\u3001\u30b7\u30e3\u30c3\u30d5\u30eb\u3055\u308c\u305f\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304b\u3089\u6700\u521d\u306e1,000\u4f8b\u3092\u53d6\u5f97\u3059\u308b\u305f\u3081\u306b<code>range(1000)</code>\u3092\u6e21\u3057\u307e\u3057\u305f\u3002\u3053\u306e\u30b5\u30f3\u30d7\u30eb\u304b\u3089\u3001\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u306f\u3059\u3067\u306b\u3044\u304f\u3064\u304b\u306e\u7279\u6027\u304c\u3042\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\uff1a</p> <ul> <li><code>Unnamed: 0</code>\u5217\u306f\u5404\u60a3\u8005\u306e\u533f\u540d\u5316ID\u306e\u3088\u3046\u306b\u898b\u3048\u307e\u3059\u3002</li> <li><code>condition</code>\u5217\u306b\u306f\u5927\u6587\u5b57\u3068\u5c0f\u6587\u5b57\u304c\u6df7\u5728\u3057\u305f\u30e9\u30d9\u30eb\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002</li> <li>\u30ec\u30d3\u30e5\u30fc\u306e\u9577\u3055\u306f\u3055\u307e\u3056\u307e\u3067\u3001Python\u306e\u6539\u884c\u533a\u5207\u308a\u6587\u5b57\uff08<code>\\r\\n</code>\uff09\u3084HTML\u6587\u5b57\u30b3\u30fc\u30c9\uff08<code>&amp;#039;</code>\u306a\u3069\uff09\u304c\u6df7\u5728\u3057\u3066\u3044\u307e\u3059\u3002</li> </ul> <p>Hugging Face Datasets\u3092\u4f7f\u7528\u3057\u3066\u3053\u308c\u3089\u306e\u554f\u984c\u306e\u305d\u308c\u305e\u308c\u306b\u5bfe\u51e6\u3059\u308b\u65b9\u6cd5\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002<code>Unnamed: 0</code>\u5217\u306e\u60a3\u8005ID\u4eee\u8aac\u3092\u30c6\u30b9\u30c8\u3059\u308b\u305f\u3081\u306b\u3001<code>Dataset.unique()</code>\u95a2\u6570\u3092\u4f7f\u7528\u3057\u3066\u3001ID\u306e\u6570\u304c\u5404\u5206\u5272\u306e\u884c\u6570\u3068\u4e00\u81f4\u3059\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3067\u304d\u307e\u3059\uff1a</p> <pre><code># \u5404\u5206\u5272\u3067\u30e6\u30cb\u30fc\u30afID\u306e\u6570\u304c\u7dcf\u884c\u6570\u3068\u4e00\u81f4\u3059\u308b\u3053\u3068\u3092\u78ba\u8a8d\nfor split in drug_dataset.keys():\n    assert len(drug_dataset[split]) == len(drug_dataset[split].unique(\"Unnamed: 0\"))\n</code></pre> <p>\u3053\u308c\u3067\u4eee\u8aac\u304c\u78ba\u8a8d\u3055\u308c\u305f\u3088\u3046\u3067\u3059\u3002<code>DatasetDict.rename_column()</code>\u95a2\u6570\u3092\u4f7f\u7528\u3057\u3066\u3001\u5217\u3092\u3088\u308a\u89e3\u91c8\u3057\u3084\u3059\u3044\u3082\u306e\u306b\u540d\u524d\u5909\u66f4\u3057\u3001\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u5c11\u3057\u30af\u30ea\u30fc\u30f3\u30a2\u30c3\u30d7\u3057\u307e\u3057\u3087\u3046\uff1a</p> <pre><code># \u5217\u540d\u3092\u3088\u308a\u610f\u5473\u306e\u3042\u308b\u3082\u306e\u306b\u5909\u66f4\ndrug_dataset = drug_dataset.rename_column(\n    original_column_name=\"Unnamed: 0\", new_column_name=\"patient_id\"\n)\ndrug_dataset\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>DatasetDict({\n    train: Dataset({\n        features: ['patient_id', 'drugName', 'condition', 'review', 'rating', 'date', 'usefulCount'],\n        num_rows: 161297\n    })\n    test: Dataset({\n        features: ['patient_id', 'drugName', 'condition', 'review', 'rating', 'date', 'usefulCount'],\n        num_rows: 53766\n    })\n})\n</code></pre></p> <p>\u6b21\u306b\u3001<code>Dataset.map()</code>\u3092\u4f7f\u7528\u3057\u3066\u3059\u3079\u3066\u306e<code>condition</code>\u30e9\u30d9\u30eb\u3092\u6b63\u898f\u5316\u3057\u307e\u3057\u3087\u3046\u3002<code>drug_dataset</code>\u5185\u306e\u5404\u5206\u5272\u306e\u3059\u3079\u3066\u306e\u884c\u306b\u9069\u7528\u3067\u304d\u308b\u7c21\u5358\u306a\u95a2\u6570\u3092\u5b9a\u7fa9\u3067\u304d\u307e\u3059\uff1a</p> <pre><code># \u75c7\u72b6\u540d\u3092\u5c0f\u6587\u5b57\u306b\u5909\u63db\u3059\u308b\u95a2\u6570\ndef lowercase_condition(example):\n    return {\"condition\": example[\"condition\"].lower()}\n\ndrug_dataset.map(lowercase_condition) # AttributeError: 'NoneType' object has no attribute 'lower'\n</code></pre> <p>\u304a\u3063\u3068\u3001map\u95a2\u6570\u3067\u554f\u984c\u304c\u767a\u751f\u3057\u307e\u3057\u305f\uff01\u30a8\u30e9\u30fc\u304b\u3089\u3001<code>condition</code>\u5217\u306e\u4e00\u90e8\u306e\u30a8\u30f3\u30c8\u30ea\u304c<code>None</code>\u3067\u3042\u308a\u3001\u6587\u5b57\u5217\u3067\u306f\u306a\u3044\u305f\u3081\u5c0f\u6587\u5b57\u306b\u5909\u63db\u3067\u304d\u306a\u3044\u3053\u3068\u304c\u63a8\u6e2c\u3067\u304d\u307e\u3059\u3002<code>Dataset.filter()</code>\u3092\u4f7f\u7528\u3057\u3066\u3053\u308c\u3089\u306e\u884c\u3092\u524a\u9664\u3057\u307e\u3057\u3087\u3046\u3002\u3053\u308c\u306f<code>Dataset.map()</code>\u3068\u540c\u69d8\u306b\u52d5\u4f5c\u3057\u3001\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u5358\u4e00\u306e\u4f8b\u3092\u53d7\u3051\u53d6\u308b\u95a2\u6570\u3092\u671f\u5f85\u3057\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u660e\u793a\u7684\u306a\u95a2\u6570\u3092\u66f8\u304f\u4ee3\u308f\u308a\u306b\uff1a</p> <pre><code># None\u5024\u3092\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3059\u308b\u95a2\u6570\uff08\u660e\u793a\u7684\u30d0\u30fc\u30b8\u30e7\u30f3\uff09\ndef filter_nones(x):\n    return x[\"condition\"] is not None\n</code></pre> <p>\u305d\u3057\u3066<code>drug_dataset.filter(filter_nones)</code>\u3092\u5b9f\u884c\u3059\u308b\u4ee3\u308f\u308a\u306b\u3001_\u30e9\u30e0\u30c0\u95a2\u6570_\u3092\u4f7f\u7528\u3057\u30661\u884c\u3067\u3053\u308c\u3092\u5b9f\u884c\u3067\u304d\u307e\u3059\u3002Python\u3067\u306f\u3001\u30e9\u30e0\u30c0\u95a2\u6570\u306f\u660e\u793a\u7684\u306b\u540d\u524d\u3092\u4ed8\u3051\u308b\u3053\u3068\u306a\u304f\u5b9a\u7fa9\u3067\u304d\u308b\u5c0f\u3055\u306a\u95a2\u6570\u3067\u3059\u3002</p> <pre><code># None\u5024\u3092\u542b\u3080\u884c\u3092\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\ndrug_dataset = drug_dataset.filter(lambda x: x[\"condition\"] is not None)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>Filter: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 160398/160398 [00:01&lt;00:00, 130404.65 examples/s]\nFilter: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 53471/53471 [00:00&lt;00:00, 135494.43 examples/s]\n</code></pre></p> <p><code>None</code>\u30a8\u30f3\u30c8\u30ea\u304c\u524a\u9664\u3055\u308c\u305f\u306e\u3067\u3001<code>condition</code>\u5217\u3092\u6b63\u898f\u5316\u3067\u304d\u307e\u3059\uff1a</p> <pre><code># \u75c7\u72b6\u540d\u3092\u5c0f\u6587\u5b57\u306b\u6b63\u898f\u5316\ndrug_dataset = drug_dataset.map(lowercase_condition)\n# \u5c0f\u6587\u5b57\u5316\u304c\u6a5f\u80fd\u3057\u305f\u3053\u3068\u3092\u78ba\u8a8d\ndrug_dataset[\"train\"][\"condition\"][:3]\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>Map: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 160398/160398 [00:05&lt;00:00, 31554.40 examples/s]\nMap: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 53471/53471 [00:01&lt;00:00, 31674.86 examples/s]\n\n['left ventricular dysfunction', 'adhd', 'birth control']\n</code></pre></p> <p>\u52d5\u4f5c\u3057\u307e\u3057\u305f\uff01\u30e9\u30d9\u30eb\u3092\u30af\u30ea\u30fc\u30f3\u30a2\u30c3\u30d7\u3057\u305f\u306e\u3067\u3001\u6b21\u306f\u30ec\u30d3\u30e5\u30fc\u81ea\u4f53\u3092\u30af\u30ea\u30fc\u30f3\u30a2\u30c3\u30d7\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002</p>","tags":["Hugging Face","Datasets","\u6a5f\u68b0\u5b66\u7fd2","\u30c7\u30fc\u30bf\u524d\u51e6\u7406","FAISS","\u610f\u5473\u691c\u7d22","NLP","Python"]},{"location":"LLM/06_the_huggingface_datasets_library/#_8","title":"\u65b0\u3057\u3044\u5217\u306e\u4f5c\u6210","text":"<p>\u9867\u5ba2\u30ec\u30d3\u30e5\u30fc\u3092\u6271\u3046\u5834\u5408\u3001\u5404\u30ec\u30d3\u30e5\u30fc\u306e\u5358\u8a9e\u6570\u3092\u78ba\u8a8d\u3059\u308b\u3053\u3068\u306f\u826f\u3044\u6163\u884c\u3067\u3059\u3002\u30ec\u30d3\u30e5\u30fc\u306f\u300cGreat!\u300d\u306e\u3088\u3046\u306a\u5358\u4e00\u306e\u5358\u8a9e\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3057\u3001\u6570\u5343\u5358\u8a9e\u306e\u672c\u683c\u7684\u306a\u30a8\u30c3\u30bb\u30a4\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\u30e6\u30fc\u30b9\u30b1\u30fc\u30b9\u306b\u5fdc\u3058\u3066\u3001\u3053\u308c\u3089\u306e\u6975\u7aef\u306a\u30b1\u30fc\u30b9\u3092\u7570\u306a\u3063\u3066\u51e6\u7406\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u5404\u30ec\u30d3\u30e5\u30fc\u306e\u5358\u8a9e\u6570\u3092\u8a08\u7b97\u3059\u308b\u305f\u3081\u306b\u3001\u5404\u30c6\u30ad\u30b9\u30c8\u3092\u7a7a\u767d\u3067\u5206\u5272\u3059\u308b\u3053\u3068\u306b\u57fa\u3065\u304f\u5927\u307e\u304b\u306a\u30d2\u30e5\u30fc\u30ea\u30b9\u30c6\u30a3\u30c3\u30af\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002</p> <p>\u5404\u30ec\u30d3\u30e5\u30fc\u306e\u5358\u8a9e\u6570\u3092\u30ab\u30a6\u30f3\u30c8\u3059\u308b\u7c21\u5358\u306a\u95a2\u6570\u3092\u5b9a\u7fa9\u3057\u307e\u3057\u3087\u3046\uff1a</p> <pre><code># \u30ec\u30d3\u30e5\u30fc\u306e\u5358\u8a9e\u6570\u3092\u8a08\u7b97\u3059\u308b\u95a2\u6570\ndef compute_review_length(example):\n    return {\"review_length\": len(example[\"review\"].split())}\n</code></pre> <p><code>lowercase_condition()</code>\u95a2\u6570\u3068\u306f\u7570\u306a\u308a\u3001<code>compute_review_length()</code>\u306f\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u5217\u540d\u306e1\u3064\u306b\u5bfe\u5fdc\u3057\u306a\u3044\u30ad\u30fc\u3092\u6301\u3064\u8f9e\u66f8\u3092\u8fd4\u3057\u307e\u3059\u3002\u3053\u306e\u5834\u5408\u3001<code>compute_review_length()</code>\u304c<code>Dataset.map()</code>\u306b\u6e21\u3055\u308c\u308b\u3068\u3001\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u3059\u3079\u3066\u306e\u884c\u306b\u9069\u7528\u3055\u308c\u3001\u65b0\u3057\u3044<code>review_length</code>\u5217\u304c\u4f5c\u6210\u3055\u308c\u307e\u3059\uff1a</p> <pre><code># \u30ec\u30d3\u30e5\u30fc\u306e\u9577\u3055\u60c5\u5831\u3092\u542b\u3080\u65b0\u3057\u3044\u5217\u3092\u8ffd\u52a0\ndrug_dataset = drug_dataset.map(compute_review_length)\n# \u6700\u521d\u306e\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u4f8b\u3092\u8abf\u67fb\ndrug_dataset[\"train\"][0]\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>Map: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 160398/160398 [00:04&lt;00:00, 36199.78 examples/s]\nMap: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 53471/53471 [00:01&lt;00:00, 36566.94 examples/s]\n\n{'patient_id': 206461,\n 'drugName': 'Valsartan',\n 'condition': 'left ventricular dysfunction',\n 'review': '\"It has no side effect, I take it in combination of Bystolic 5 Mg and Fish Oil\"',\n 'rating': 9.0,\n 'date': 'May 20, 2012',\n 'usefulCount': 27,\n 'review_length': 17}\n</code></pre></p> <p>\u671f\u5f85\u901a\u308a\u3001<code>review_length</code>\u5217\u304c\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30bb\u30c3\u30c8\u306b\u8ffd\u52a0\u3055\u308c\u305f\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002<code>Dataset.sort()</code>\u3067\u3053\u306e\u65b0\u3057\u3044\u5217\u3092\u30bd\u30fc\u30c8\u3057\u3066\u3001\u6975\u5024\u304c\u3069\u306e\u3088\u3046\u306a\u3082\u306e\u304b\u3092\u78ba\u8a8d\u3067\u304d\u307e\u3059\uff1a</p> <pre><code># \u30ec\u30d3\u30e5\u30fc\u306e\u9577\u3055\u3067\u30bd\u30fc\u30c8\u3057\u3066\u77ed\u3044\u30ec\u30d3\u30e5\u30fc\u3092\u78ba\u8a8d\ndrug_dataset[\"train\"].sort(\"review_length\")[:3]\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>{'patient_id': [111469, 13653, 53602],\n 'drugName': ['Ledipasvir / sofosbuvir',\n  'Amphetamine / dextroamphetamine',\n  'Alesse'],\n 'condition': ['hepatitis c', 'adhd', 'birth control'],\n 'review': ['\"Headache\"', '\"Great\"', '\"Awesome\"'],\n 'rating': [10.0, 10.0, 10.0],\n 'date': ['February 3, 2015', 'October 20, 2009', 'November 23, 2015'],\n 'usefulCount': [41, 3, 0],\n 'review_length': [1, 1, 1]}\n</code></pre></p> <p>\u4e88\u60f3\u901a\u308a\u3001\u4e00\u90e8\u306e\u30ec\u30d3\u30e5\u30fc\u306b\u306f\u5358\u8a9e\u304c1\u3064\u3057\u304b\u542b\u307e\u308c\u3066\u3044\u307e\u305b\u3093\u3002\u3053\u308c\u306f\u611f\u60c5\u5206\u6790\u306b\u306f\u554f\u984c\u306a\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u75c7\u72b6\u3092\u4e88\u6e2c\u3057\u305f\u3044\u5834\u5408\u306f\u60c5\u5831\u306b\u306a\u308a\u307e\u305b\u3093\u3002</p> <p><code>Dataset.filter()</code>\u95a2\u6570\u3092\u4f7f\u7528\u3057\u3066\u300130\u8a9e\u672a\u6e80\u306e\u30ec\u30d3\u30e5\u30fc\u3092\u524a\u9664\u3057\u307e\u3057\u3087\u3046\u3002<code>condition</code>\u5217\u3067\u884c\u3063\u305f\u306e\u3068\u540c\u69d8\u306b\u3001\u30ec\u30d3\u30e5\u30fc\u304c\u3053\u306e\u3057\u304d\u3044\u5024\u3092\u8d85\u3048\u308b\u9577\u3055\u3092\u8981\u6c42\u3059\u308b\u3053\u3068\u3067\u3001\u975e\u5e38\u306b\u77ed\u3044\u30ec\u30d3\u30e5\u30fc\u3092\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3067\u304d\u307e\u3059\uff1a</p> <pre><code># 30\u8a9e\u672a\u6e80\u306e\u77ed\u3044\u30ec\u30d3\u30e5\u30fc\u3092\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\ndrug_dataset = drug_dataset.filter(lambda x: x[\"review_length\"] &gt; 30)\nprint(drug_dataset.num_rows)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>Filter: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 160398/160398 [00:00&lt;00:00, 357531.63 examples/s]\nFilter: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 53471/53471 [00:00&lt;00:00, 374090.52 examples/s]\n{'train': 138514, 'test': 46108}\n</code></pre></p> <p>\u3054\u89a7\u306e\u3068\u304a\u308a\u3001\u3053\u308c\u306b\u3088\u308a\u5143\u306e\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30bb\u30c3\u30c8\u3068\u30c6\u30b9\u30c8\u30bb\u30c3\u30c8\u304b\u3089\u7d0415%\u306e\u30ec\u30d3\u30e5\u30fc\u304c\u524a\u9664\u3055\u308c\u307e\u3057\u305f\u3002</p> <p>\u6700\u5f8c\u306b\u5bfe\u51e6\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u306e\u306f\u3001\u30ec\u30d3\u30e5\u30fc\u306bHTML\u6587\u5b57\u30b3\u30fc\u30c9\u304c\u5b58\u5728\u3059\u308b\u3053\u3068\u3067\u3059\u3002Python\u306e<code>html</code>\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u4f7f\u7528\u3057\u3066\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3053\u308c\u3089\u306e\u6587\u5b57\u3092\u30a2\u30f3\u30a8\u30b9\u30b1\u30fc\u30d7\u3067\u304d\u307e\u3059\uff1a</p> <pre><code># HTML\u6587\u5b57\u30b3\u30fc\u30c9\u3092\u30a2\u30f3\u30a8\u30b9\u30b1\u30fc\u30d7\nimport html\n\ntext = \"I&amp;#039;m a transformer called BERT\"\nhtml.unescape(text)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>\"I'm a transformer called BERT\"\n</code></pre></p> <p><code>Dataset.map()</code>\u3092\u4f7f\u7528\u3057\u3066\u3001\u30b3\u30fc\u30d1\u30b9\u5185\u306e\u3059\u3079\u3066\u306eHTML\u6587\u5b57\u3092\u30a2\u30f3\u30a8\u30b9\u30b1\u30fc\u30d7\u3057\u307e\u3059\uff1a</p> <pre><code># \u3059\u3079\u3066\u306e\u30ec\u30d3\u30e5\u30fc\u306eHTML\u6587\u5b57\u3092\u30a2\u30f3\u30a8\u30b9\u30b1\u30fc\u30d7\ndrug_dataset = drug_dataset.map(lambda x: {\"review\": html.unescape(x[\"review\"])})\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>Map: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 138514/138514 [00:05&lt;00:00, 27595.76 examples/s]\nMap: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 46108/46108 [00:01&lt;00:00, 27529.15 examples/s]\n</code></pre></p> <p>\u3054\u89a7\u306e\u3068\u304a\u308a\u3001<code>Dataset.map()</code>\u30e1\u30bd\u30c3\u30c9\u306f\u30c7\u30fc\u30bf\u51e6\u7406\u306b\u975e\u5e38\u306b\u5f79\u7acb\u3061\u307e\u3059\u3002\u3057\u304b\u3057\u3001\u3067\u304d\u308b\u3053\u3068\u306e\u3059\u3079\u3066\u306b\u306f\u89e6\u308c\u3066\u3044\u307e\u305b\u3093\uff01</p>","tags":["Hugging Face","Datasets","\u6a5f\u68b0\u5b66\u7fd2","\u30c7\u30fc\u30bf\u524d\u51e6\u7406","FAISS","\u610f\u5473\u691c\u7d22","NLP","Python"]},{"location":"LLM/06_the_huggingface_datasets_library/#map","title":"<code>map()</code>\u30e1\u30bd\u30c3\u30c9\u306e\u8d85\u80fd\u529b","text":"<p><code>Dataset.map()</code>\u30e1\u30bd\u30c3\u30c9\u306f<code>batched</code>\u5f15\u6570\u3092\u53d6\u308a\u3001<code>True</code>\u306b\u8a2d\u5b9a\u3059\u308b\u3068\u3001\u4e00\u5ea6\u306b\u4f8b\u306e\u30d0\u30c3\u30c1\u3092map\u95a2\u6570\u306b\u9001\u4fe1\u3057\u307e\u3059\uff08\u30d0\u30c3\u30c1\u30b5\u30a4\u30ba\u306f\u8a2d\u5b9a\u53ef\u80fd\u3067\u3059\u304c\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u306f1,000\u3067\u3059\uff09\u3002\u4f8b\u3048\u3070\u3001\u3059\u3079\u3066\u306eHTML\u3092\u30a2\u30f3\u30a8\u30b9\u30b1\u30fc\u30d7\u3057\u305f\u524d\u306emap\u95a2\u6570\u306f\u5b9f\u884c\u306b\u5c11\u3057\u6642\u9593\u304c\u304b\u304b\u308a\u307e\u3057\u305f\uff08\u9032\u884c\u72b6\u6cc1\u30d0\u30fc\u304b\u3089\u6240\u8981\u6642\u9593\u3092\u8aad\u307f\u53d6\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff09\u3002\u30ea\u30b9\u30c8\u5185\u5305\u8868\u8a18\u3092\u4f7f\u7528\u3057\u3066\u540c\u6642\u306b\u8907\u6570\u306e\u8981\u7d20\u3092\u51e6\u7406\u3059\u308b\u3053\u3068\u3067\u3001\u3053\u308c\u3092\u9ad8\u901f\u5316\u3067\u304d\u307e\u3059\u3002</p> <p><code>batched=True</code>\u3092\u6307\u5b9a\u3059\u308b\u3068\u3001\u95a2\u6570\u306f\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u6301\u3064\u8f9e\u66f8\u3092\u53d7\u3051\u53d6\u308a\u307e\u3059\u304c\u3001\u5404\u5024\u306f\u5358\u4e00\u306e\u5024\u3067\u306f\u306a\u304f\u3001_\u5024\u306e\u30ea\u30b9\u30c8_\u306b\u306a\u308a\u307e\u3059\u3002<code>Dataset.map()</code>\u306e\u623b\u308a\u5024\u3082\u540c\u3058\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff1a\u66f4\u65b0\u307e\u305f\u306f\u8ffd\u52a0\u3057\u305f\u3044\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u6301\u3064\u8f9e\u66f8\u3068\u5024\u306e\u30ea\u30b9\u30c8\u3067\u3059\u3002\u4f8b\u3048\u3070\u3001<code>batched=True</code>\u3092\u4f7f\u7528\u3057\u3066\u3059\u3079\u3066\u306eHTML\u6587\u5b57\u3092\u30a2\u30f3\u30a8\u30b9\u30b1\u30fc\u30d7\u3059\u308b\u5225\u306e\u65b9\u6cd5\u306f\u6b21\u306e\u3068\u304a\u308a\u3067\u3059\uff1a</p> <pre><code># \u30d0\u30c3\u30c1\u51e6\u7406\u3067HTML\u6587\u5b57\u3092\u30a2\u30f3\u30a8\u30b9\u30b1\u30fc\u30d7\uff08\u9ad8\u901f\u5316\uff09\nnew_drug_dataset = drug_dataset.map(\n    lambda x: {\"review\": [html.unescape(o) for o in x[\"review\"]]}, batched=True\n)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>Map: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 138514/138514 [00:00&lt;00:00, 979367.85 examples/s]\nMap: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 46108/46108 [00:00&lt;00:00, 1043782.45 examples/s]\n</code></pre></p> <p>\u30ce\u30fc\u30c8\u30d6\u30c3\u30af\u3067\u3053\u306e\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3057\u3066\u3044\u308b\u5834\u5408\u3001\u3053\u306e\u30b3\u30de\u30f3\u30c9\u304c\u524d\u306e\u3082\u306e\u3088\u308a\u3082\u306f\u308b\u304b\u306b\u9ad8\u901f\u306b\u5b9f\u884c\u3055\u308c\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u30ec\u30d3\u30e5\u30fc\u304c\u65e2\u306bHTML\u30a2\u30f3\u30a8\u30b9\u30b1\u30fc\u30d7\u3055\u308c\u3066\u3044\u308b\u304b\u3089\u3067\u306f\u3042\u308a\u307e\u305b\u3093\uff08<code>batched=True</code>\u306a\u3057\u3067\u524d\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306e\u547d\u4ee4\u3092\u518d\u5b9f\u884c\u3059\u308b\u3068\u3001\u4ee5\u524d\u3068\u540c\u3058\u6642\u9593\u304c\u304b\u304b\u308a\u307e\u3059\uff09\u3002\u3053\u308c\u306f\u3001\u30ea\u30b9\u30c8\u5185\u5305\u8868\u8a18\u304c\u901a\u5e38<code>for</code>\u30eb\u30fc\u30d7\u3067\u540c\u3058\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3059\u308b\u3088\u308a\u3082\u9ad8\u901f\u3067\u3042\u308a\u3001\u4e00\u5ea6\u306b1\u3064\u305a\u3064\u3067\u306f\u306a\u304f\u3001\u540c\u6642\u306b\u591a\u304f\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3053\u3068\u3067\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u304c\u5411\u4e0a\u3059\u308b\u305f\u3081\u3067\u3059\u3002</p> <p><code>batched=True</code>\u3067\u306e<code>Dataset.map()</code>\u306e\u4f7f\u7528\u306f\u3001\u300c\u9ad8\u901f\u300d\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306e\u901f\u5ea6\u3092\u89e3\u653e\u3059\u308b\u305f\u3081\u306b\u4e0d\u53ef\u6b20\u3067\u3059\u3002\u3053\u308c\u3089\u306f\u5927\u304d\u306a\u30c6\u30ad\u30b9\u30c8\u30ea\u30b9\u30c8\u3092\u7d20\u65e9\u304f\u30c8\u30fc\u30af\u30f3\u5316\u3067\u304d\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001\u9ad8\u901f\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3067\u3059\u3079\u3066\u306e\u85ac\u7269\u30ec\u30d3\u30e5\u30fc\u3092\u30c8\u30fc\u30af\u30f3\u5316\u3059\u308b\u306b\u306f\u3001\u3053\u306e\u3088\u3046\u306a\u95a2\u6570\u3092\u4f7f\u7528\u3067\u304d\u307e\u3059\uff1a</p> <pre><code># \u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3092\u4f7f\u7528\u3057\u3066\u30c6\u30ad\u30b9\u30c8\u3092\u30c8\u30fc\u30af\u30f3\u5316\nfrom transformers import AutoTokenizer\n\ntokenizer = AutoTokenizer.from_pretrained(\"bert-base-cased\")\n\ndef tokenize_function(examples):\n    return tokenizer(examples[\"review\"], truncation=True)\n</code></pre> <p>1\u3064\u307e\u305f\u306f\u8907\u6570\u306e\u4f8b\u3092\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306b\u6e21\u3059\u3053\u3068\u304c\u3067\u304d\u308b\u305f\u3081\u3001<code>batched=True</code>\u306e\u6709\u7121\u306b\u304b\u304b\u308f\u3089\u305a\u3053\u306e\u95a2\u6570\u3092\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002\u3053\u306e\u6a5f\u4f1a\u3092\u5229\u7528\u3057\u3066\u3001\u3055\u307e\u3056\u307e\u306a\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3092\u6bd4\u8f03\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u30ce\u30fc\u30c8\u30d6\u30c3\u30af\u3067\u306f\u3001\u6e2c\u5b9a\u3057\u305f\u3044\u30b3\u30fc\u30c9\u884c\u306e\u524d\u306b<code>%time</code>\u3092\u8ffd\u52a0\u3059\u308b\u3053\u3068\u3067\u30011\u884c\u306e\u547d\u4ee4\u306e\u6642\u9593\u3092\u6e2c\u5b9a\u3067\u304d\u307e\u3059\uff1a</p> <pre><code># \u30d0\u30c3\u30c1\u51e6\u7406\u3067\u306e\u30c8\u30fc\u30af\u30f3\u5316\u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u6e2c\u5b9a\n%time tokenized_dataset = drug_dataset.map(tokenize_function, batched=True)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>Map: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 138514/138514 [00:09&lt;00:00, 14578.72 examples/s]\nMap: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 46108/46108 [00:03&lt;00:00, 14226.14 examples/s]\nCPU times: user 1min 59s, sys: 1.65 s, total: 2min\nWall time: 12.7 s\n</code></pre></p> <pre><code># \u5358\u4e00\u51e6\u7406\u3067\u306e\u30c8\u30fc\u30af\u30f3\u5316\u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u6e2c\u5b9a\n%time tokenized_dataset = drug_dataset.map(tokenize_function, batched=False)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>Map: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 138514/138514 [00:28&lt;00:00, 4897.70 examples/s]\nMap: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 46108/46108 [00:09&lt;00:00, 4887.94 examples/s]\nCPU times: user 37.4 s, sys: 356 ms, total: 37.8 s\nWall time: 37.7 s\n</code></pre></p> <p><code>Dataset.map()</code>\u306b\u306f\u72ec\u81ea\u306e\u4e26\u5217\u5316\u6a5f\u80fd\u3082\u3042\u308a\u307e\u3059\u3002Rust\u3067\u30d0\u30c3\u30af\u30a2\u30c3\u30d7\u3055\u308c\u3066\u3044\u306a\u3044\u305f\u3081\u3001\u9045\u3044\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u304c\u9ad8\u901f\u306a\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306b\u8ffd\u3044\u3064\u304f\u3053\u3068\u306f\u3042\u308a\u307e\u305b\u3093\u304c\u3001\u305d\u308c\u3067\u3082\u5f79\u7acb\u3061\u307e\u3059\uff08\u7279\u306b\u9ad8\u901f\u30d0\u30fc\u30b8\u30e7\u30f3\u304c\u306a\u3044\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u5834\u5408\uff09\u3002\u30de\u30eb\u30c1\u30d7\u30ed\u30bb\u30c3\u30b7\u30f3\u30b0\u3092\u6709\u52b9\u306b\u3059\u308b\u306b\u306f\u3001<code>Dataset.map()</code>\u306e\u547c\u3073\u51fa\u3057\u3067<code>num_proc</code>\u5f15\u6570\u3092\u4f7f\u7528\u3057\u3066\u3001\u4f7f\u7528\u3059\u308b\u30d7\u30ed\u30bb\u30b9\u6570\u3092\u6307\u5b9a\u3057\u307e\u3059\uff1a</p> <pre><code># \u9045\u3044\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3067\u30de\u30eb\u30c1\u30d7\u30ed\u30bb\u30c3\u30b7\u30f3\u30b0\u3092\u4f7f\u7528\nslow_tokenizer = AutoTokenizer.from_pretrained(\"bert-base-cased\", use_fast=False)\n\ndef slow_tokenize_function(examples):\n    return slow_tokenizer(examples[\"review\"], truncation=True)\n\ntokenized_dataset = drug_dataset.map(slow_tokenize_function, batched=True, num_proc=8)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>Map (num_proc=8): 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 138514/138514 [00:09&lt;00:00, 14687.58 examples/s]\nMap (num_proc=8): 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 46108/46108 [00:03&lt;00:00, 14247.44 examples/s]\n</code></pre></p> <p>\u4f7f\u7528\u3059\u308b\u6700\u9069\u306a\u30d7\u30ed\u30bb\u30b9\u6570\u3092\u6c7a\u5b9a\u3059\u308b\u305f\u3081\u306b\u5c11\u3057\u5b9f\u9a13\u3057\u3066\u307f\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u79c1\u305f\u3061\u306e\u5834\u5408\u30018\u304c\u6700\u9ad8\u306e\u901f\u5ea6\u5411\u4e0a\u3092\u751f\u307f\u51fa\u3059\u3088\u3046\u3067\u3057\u305f\u3002\u30de\u30eb\u30c1\u30d7\u30ed\u30bb\u30c3\u30b7\u30f3\u30b0\u3042\u308a/\u306a\u3057\u3067\u306e\u6570\u5024\u306f\u6b21\u306e\u3068\u304a\u308a\u3067\u3059\uff1a</p> \u30aa\u30d7\u30b7\u30e7\u30f3 \u9ad8\u901f\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc \u9045\u3044\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc <code>batched=True</code> 10.8s 4min41s <code>batched=False</code> 59.2s 5min3s <code>batched=True</code>, <code>num_proc=8</code> 6.52s 41.3s <code>batched=False</code>, <code>num_proc=8</code> 9.49s 45.2s <p>\u3053\u308c\u3089\u306f\u9045\u3044\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306b\u3068\u3063\u3066\u306f\u308b\u304b\u306b\u5408\u7406\u7684\u306a\u7d50\u679c\u3067\u3059\u304c\u3001\u9ad8\u901f\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3082\u5927\u5e45\u306b\u6539\u5584\u3055\u308c\u307e\u3057\u305f\u3002\u305f\u3060\u3057\u3001\u3053\u308c\u304c\u5e38\u306b\u305d\u3046\u3068\u306f\u9650\u3089\u306a\u3044\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u30028\u4ee5\u5916\u306e<code>num_proc</code>\u5024\u306b\u5bfe\u3057\u3066\u3001\u30c6\u30b9\u30c8\u3067\u306f<code>batched=True</code>\u3092\u305d\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u306a\u3057\u3067\u4f7f\u7528\u3059\u308b\u65b9\u304c\u9ad8\u901f\u3067\u3042\u308b\u3053\u3068\u304c\u793a\u3055\u308c\u307e\u3057\u305f\u3002\u4e00\u822c\u7684\u306b\u3001<code>batched=True</code>\u3067\u9ad8\u901f\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306bPython\u30de\u30eb\u30c1\u30d7\u30ed\u30bb\u30c3\u30b7\u30f3\u30b0\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u306f\u304a\u52e7\u3081\u3057\u307e\u305b\u3093\u3002</p> <p>\u52d5\u4f5c\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\uff01\u3053\u3053\u3067\u306f\u4f8b\u3092\u30c8\u30fc\u30af\u30f3\u5316\u3057\u3001\u6700\u5927\u9577128\u306b\u5207\u308a\u8a70\u3081\u307e\u3059\u304c\u3001\u6700\u521d\u306e1\u3064\u3060\u3051\u3067\u306a\u304f\u3001\u30c6\u30ad\u30b9\u30c8\u306e\u3059\u3079\u3066\u306e\u30c1\u30e3\u30f3\u30af\u3092\u8fd4\u3059\u3088\u3046\u306b\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306b\u8981\u6c42\u3057\u307e\u3059\u3002\u3053\u308c\u306f<code>return_overflowing_tokens=True</code>\u3067\u5b9f\u884c\u3067\u304d\u307e\u3059\uff1a</p> <pre><code># \u30c6\u30ad\u30b9\u30c8\u3092\u5207\u308a\u8a70\u3081\u3066\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\u3059\u308b\u30c8\u30fc\u30af\u30f3\u3082\u8fd4\u3059\u95a2\u6570\ndef tokenize_and_split(examples):\n    return tokenizer(\n        examples[\"review\"],\n        truncation=True,\n        max_length=128,\n        return_overflowing_tokens=True,\n    )\n</code></pre> <p>\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u5168\u4f53\u3067<code>Dataset.map()</code>\u3092\u4f7f\u7528\u3059\u308b\u524d\u306b\u30011\u3064\u306e\u4f8b\u3067\u3053\u308c\u3092\u30c6\u30b9\u30c8\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff1a</p> <pre><code># 1\u3064\u306e\u4f8b\u3067\u30c8\u30fc\u30af\u30f3\u5316\u3092\u30c6\u30b9\u30c8\nresult = tokenize_and_split(drug_dataset[\"train\"][0])\n[len(inp) for inp in result[\"input_ids\"]]\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>[128, 49]\n</code></pre></p> <p>\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30bb\u30c3\u30c8\u306e\u6700\u521d\u306e\u4f8b\u306f\u3001\u6307\u5b9a\u3057\u305f\u6700\u5927\u30c8\u30fc\u30af\u30f3\u6570\u3092\u8d85\u3048\u3066\u30c8\u30fc\u30af\u30f3\u5316\u3055\u308c\u305f\u305f\u3081\u30012\u3064\u306e\u7279\u5fb4\u91cf\u306b\u306a\u308a\u307e\u3057\u305f\uff1a\u9577\u3055128\u306e\u6700\u521d\u306e\u3082\u306e\u3068\u9577\u305549\u306e2\u756a\u76ee\u306e\u3082\u306e\u3067\u3059\u3002\u3067\u306f\u3001\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u5168\u4f53\u3067\u3053\u308c\u3092\u5b9f\u884c\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff01</p> <pre><code># \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u5168\u4f53\u3067\u30c8\u30fc\u30af\u30f3\u5316\u3068\u5206\u5272\u3092\u5b9f\u884c\ntokenized_dataset = drug_dataset.map(tokenize_and_split, batched=True)\n# ArrowInvalid: Column 1 named condition expected length 1463 but got length 1000\n</code></pre> <p>\u3046\u307e\u304f\u3044\u304d\u307e\u305b\u3093\u3067\u3057\u305f\uff01\u306a\u305c\u3067\u3057\u3087\u3046\u304b\uff1f\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u898b\u308b\u3068\u624b\u304c\u304b\u308a\u304c\u5f97\u3089\u308c\u307e\u3059\uff1a\u5217\u306e1\u3064\u3067\u9577\u3055\u306e\u4e0d\u4e00\u81f4\u304c\u3042\u308a\u30011\u3064\u304c1,463\u306e\u9577\u3055\u3067\u3001\u3082\u30461\u3064\u304c1,000\u306e\u9577\u3055\u3067\u3059\u3002<code>Dataset.map()</code>\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u898b\u305f\u3053\u3068\u304c\u3042\u308b\u5834\u5408\u3001\u30de\u30c3\u30d4\u30f3\u30b0\u3057\u3066\u3044\u308b\u95a2\u6570\u306b\u6e21\u3055\u308c\u308b\u30b5\u30f3\u30d7\u30eb\u6570\u3067\u3042\u308b\u3053\u3068\u3092\u601d\u3044\u51fa\u3059\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\u3053\u3053\u3067\u306f\u3001\u3053\u308c\u3089\u306e1,000\u4f8b\u304c1,463\u306e\u65b0\u3057\u3044\u7279\u5fb4\u91cf\u3092\u4e0e\u3048\u3001\u5f62\u72b6\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3057\u305f\u3002</p> <p>\u554f\u984c\u306f\u3001\u7570\u306a\u308b\u30b5\u30a4\u30ba\u306e2\u3064\u306e\u7570\u306a\u308b\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u6df7\u5408\u3057\u3088\u3046\u3068\u3057\u3066\u3044\u308b\u3053\u3068\u3067\u3059\uff1a<code>drug_dataset</code>\u5217\u306b\u306f\u4e00\u5b9a\u6570\u306e\u4f8b\u304c\u3042\u308a\u307e\u3059\uff08\u30a8\u30e9\u30fc\u3067\u306e1,000\uff09\u304c\u3001\u69cb\u7bc9\u3057\u3066\u3044\u308b<code>tokenized_dataset</code>\u306b\u306f\u3088\u308a\u591a\u304f\u3042\u308a\u307e\u3059\uff08\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u306e1,463\uff1b<code>return_overflowing_tokens=True</code>\u3092\u4f7f\u7528\u3057\u3066\u9577\u3044\u30ec\u30d3\u30e5\u30fc\u3092\u8907\u6570\u306e\u4f8b\u306b\u30c8\u30fc\u30af\u30f3\u5316\u3057\u3066\u3044\u308b\u305f\u3081\u30011,000\u3088\u308a\u591a\u304f\u306a\u308a\u307e\u3059\uff09\u3002\u3053\u308c\u306f<code>Dataset</code>\u3067\u306f\u6a5f\u80fd\u3057\u306a\u3044\u305f\u3081\u3001\u53e4\u3044\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304b\u3089\u5217\u3092\u524a\u9664\u3059\u308b\u304b\u3001\u65b0\u3057\u3044\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3068\u540c\u3058\u30b5\u30a4\u30ba\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002<code>remove_columns</code>\u5f15\u6570\u3067\u524d\u8005\u3092\u5b9f\u884c\u3067\u304d\u307e\u3059\uff1a</p> <pre><code># \u53e4\u3044\u5217\u3092\u524a\u9664\u3057\u3066\u30c8\u30fc\u30af\u30f3\u5316\u3092\u5b9f\u884c\ntokenized_dataset = drug_dataset.map(\n    tokenize_and_split, batched=True, remove_columns=drug_dataset[\"train\"].column_names\n)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>Map: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 138514/138514 [00:25&lt;00:00, 5401.52 examples/s]\nMap: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 46108/46108 [00:08&lt;00:00, 5380.35 examples/s]\n</code></pre></p> <p>\u3053\u308c\u3067\u30a8\u30e9\u30fc\u306a\u304f\u52d5\u4f5c\u3057\u307e\u3059\u3002\u65b0\u3057\u3044\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304c\u5143\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3088\u308a\u3082\u306f\u308b\u304b\u306b\u591a\u304f\u306e\u8981\u7d20\u3092\u6301\u3063\u3066\u3044\u308b\u3053\u3068\u3092\u9577\u3055\u3092\u6bd4\u8f03\u3059\u308b\u3053\u3068\u3067\u78ba\u8a8d\u3067\u304d\u307e\u3059\uff1a</p> <pre><code># \u65b0\u65e7\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u30b5\u30a4\u30ba\u6bd4\u8f03\nlen(tokenized_dataset[\"train\"]), len(drug_dataset[\"train\"])\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>(206772, 138514)\n</code></pre></p> <p>\u53e4\u3044\u5217\u3092\u65b0\u3057\u3044\u3082\u306e\u3068\u540c\u3058\u30b5\u30a4\u30ba\u306b\u3059\u308b\u3053\u3068\u3067\u3001\u4e0d\u4e00\u81f4\u306e\u9577\u3055\u554f\u984c\u306b\u5bfe\u51e6\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u308b\u3068\u8ff0\u3079\u307e\u3057\u305f\u3002\u3053\u308c\u3092\u884c\u3046\u306b\u306f\u3001<code>return_overflowing_tokens=True</code>\u3092\u8a2d\u5b9a\u3057\u305f\u3068\u304d\u306b\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u304c\u8fd4\u3059<code>overflow_to_sample_mapping</code>\u30d5\u30a3\u30fc\u30eb\u30c9\u304c\u5fc5\u8981\u3067\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u65b0\u3057\u3044\u7279\u5fb4\u91cf\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304b\u3089\u3001\u305d\u308c\u304c\u767a\u751f\u3057\u305f\u30b5\u30f3\u30d7\u30eb\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3078\u306e\u30de\u30c3\u30d4\u30f3\u30b0\u304c\u63d0\u4f9b\u3055\u308c\u307e\u3059\u3002\u3053\u308c\u3092\u4f7f\u7528\u3057\u3066\u3001\u65b0\u3057\u3044\u7279\u5fb4\u91cf\u3092\u751f\u6210\u3059\u308b\u305f\u3073\u306b\u5404\u4f8b\u306e\u5024\u3092\u7e70\u308a\u8fd4\u3059\u3053\u3068\u3067\u3001\u5143\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u5b58\u5728\u3059\u308b\u5404\u30ad\u30fc\u3092\u9069\u5207\u306a\u30b5\u30a4\u30ba\u306e\u5024\u306e\u30ea\u30b9\u30c8\u306b\u95a2\u9023\u4ed8\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a</p> <pre><code># \u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\u30de\u30c3\u30d4\u30f3\u30b0\u3092\u4f7f\u7528\u3057\u3066\u5143\u306e\u5217\u3082\u4fdd\u6301\ndef tokenize_and_split(examples):\n    result = tokenizer(\n        examples[\"review\"],\n        truncation=True,\n        max_length=128,\n        return_overflowing_tokens=True,\n    )\n    # \u65b0\u65e7\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u9593\u306e\u30de\u30c3\u30d4\u30f3\u30b0\u3092\u62bd\u51fa\n    sample_map = result.pop(\"overflow_to_sample_mapping\")\n    for key, values in examples.items():\n        result[key] = [values[i] for i in sample_map]\n    return result\n</code></pre> <p>\u53e4\u3044\u5217\u3092\u524a\u9664\u3059\u308b\u5fc5\u8981\u306a\u304f\u3001<code>Dataset.map()</code>\u3067\u52d5\u4f5c\u3059\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\uff1a</p> <pre><code># \u5143\u306e\u5217\u3092\u4fdd\u6301\u3057\u305f\u307e\u307e\u30c8\u30fc\u30af\u30f3\u5316\ntokenized_dataset = drug_dataset.map(tokenize_and_split, batched=True)\ntokenized_dataset\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>Map: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 138514/138514 [00:26&lt;00:00, 5299.52 examples/s]\nMap: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 46108/46108 [00:08&lt;00:00, 5344.97 examples/s]\n\nDatasetDict({\n    train: Dataset({\n        features: ['patient_id', 'drugName', 'condition', 'review', 'rating', 'date', 'usefulCount', 'review_length', 'input_ids', 'token_type_ids', 'attention_mask'],\n        num_rows: 206772\n    })\n    test: Dataset({\n        features: ['patient_id', 'drugName', 'condition', 'review', 'rating', 'date', 'usefulCount', 'review_length', 'input_ids', 'token_type_ids', 'attention_mask'],\n        num_rows: 68876\n    })\n})\n</code></pre></p> <p>\u4ee5\u524d\u3068\u540c\u3058\u6570\u306e\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u7279\u5fb4\u91cf\u304c\u5f97\u3089\u308c\u307e\u3059\u304c\u3001\u3053\u3053\u3067\u306f\u3059\u3079\u3066\u306e\u53e4\u3044\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u4fdd\u6301\u3057\u307e\u3057\u305f\u3002\u30e2\u30c7\u30eb\u3092\u9069\u7528\u3057\u305f\u5f8c\u306b\u4f55\u3089\u304b\u306e\u5f8c\u51e6\u7406\u3067\u305d\u308c\u3089\u304c\u5fc5\u8981\u306a\u5834\u5408\u306f\u3001\u3053\u306e\u30a2\u30d7\u30ed\u30fc\u30c1\u3092\u4f7f\u7528\u3057\u305f\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002</p> <p>Hugging Face Datasets\u3092\u3055\u307e\u3056\u307e\u306a\u65b9\u6cd5\u3067\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u524d\u51e6\u7406\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3059\u308b\u65b9\u6cd5\u3092\u898b\u3066\u304d\u307e\u3057\u305f\u3002Hugging Face Datasets\u306e\u51e6\u7406\u95a2\u6570\u306f\u30e2\u30c7\u30eb\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u306e\u30cb\u30fc\u30ba\u306e\u307b\u3068\u3093\u3069\u3092\u30ab\u30d0\u30fc\u3057\u307e\u3059\u304c\u3001<code>DataFrame.groupby()</code>\u3084\u53ef\u8996\u5316\u7528\u306e\u9ad8\u30ec\u30d9\u30ebAPI\u306a\u3069\u3001\u3088\u308a\u5f37\u529b\u306a\u6a5f\u80fd\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u305f\u3081\u306bPandas\u306b\u5207\u308a\u66ff\u3048\u308b\u5fc5\u8981\u304c\u3042\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\u5e78\u3044\u3001Hugging Face Datasets\u306fPandas\u3001NumPy\u3001PyTorch\u3001TensorFlow\u3001JAX\u306a\u3069\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u76f8\u4e92\u904b\u7528\u3067\u304d\u308b\u3088\u3046\u306b\u8a2d\u8a08\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u304c\u3069\u306e\u3088\u3046\u306b\u6a5f\u80fd\u3059\u308b\u304b\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002</p>","tags":["Hugging Face","Datasets","\u6a5f\u68b0\u5b66\u7fd2","\u30c7\u30fc\u30bf\u524d\u51e6\u7406","FAISS","\u610f\u5473\u691c\u7d22","NLP","Python"]},{"location":"LLM/06_the_huggingface_datasets_library/#datasetdataframe","title":"<code>Dataset</code>\u304b\u3089<code>DataFrame</code>\u3078\u306e\u5909\u63db\u3068\u305d\u306e\u9006","text":"<p>\u3055\u307e\u3056\u307e\u306a\u30b5\u30fc\u30c9\u30d1\u30fc\u30c6\u30a3\u30e9\u30a4\u30d6\u30e9\u30ea\u9593\u306e\u5909\u63db\u3092\u53ef\u80fd\u306b\u3059\u308b\u305f\u3081\u306b\u3001Hugging Face Datasets\u306f<code>Dataset.set_format()</code>\u95a2\u6570\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002\u3053\u306e\u95a2\u6570\u306f\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e_\u51fa\u529b\u5f62\u5f0f_\u306e\u307f\u3092\u5909\u66f4\u3059\u308b\u305f\u3081\u3001\u57fa\u76e4\u3068\u306a\u308b_\u30c7\u30fc\u30bf\u5f62\u5f0f_\uff08Apache Arrow\uff09\u306b\u5f71\u97ff\u3092\u4e0e\u3048\u308b\u3053\u3068\u306a\u304f\u3001\u5225\u306e\u5f62\u5f0f\u306b\u7c21\u5358\u306b\u5207\u308a\u66ff\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306f\u30a4\u30f3\u30d7\u30ec\u30fc\u30b9\u3067\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002\u30c7\u30e2\u30f3\u30b9\u30c8\u30ec\u30fc\u30b7\u30e7\u30f3\u3068\u3057\u3066\u3001\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092Pandas\u306b\u5909\u63db\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff1a</p> <pre><code># \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u51fa\u529b\u5f62\u5f0f\u3092Pandas\u306b\u8a2d\u5b9a\ndrug_dataset.set_format(\"pandas\")\n</code></pre> <p>\u3053\u308c\u3067\u3001\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3068\u3001\u8f9e\u66f8\u306e\u4ee3\u308f\u308a\u306b<code>pandas.DataFrame</code>\u304c\u5f97\u3089\u308c\u307e\u3059\uff1a</p> <pre><code># Pandas\u5f62\u5f0f\u3067\u30c7\u30fc\u30bf\u3092\u8868\u793a\ndrug_dataset[\"train\"][:3]\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c:</p> \u30a4\u30f3\u30c7\u30c3\u30af\u30b9 patient_id drugName condition review rating date usefulCount review_length 0 95260 Guanfacine adhd \"My son is halfway through his fourth week of ...\" 8.0 April 27, 2010 192 141 1 92703 Lybrel birth control \"I used to take another oral contraceptive, wh...\" 5.0 December 14, 2009 17 134 2 138000 Ortho Evra birth control \"This is my first time using any form of birth...\" 8.0 November 3, 2015 10 89 <p>\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30bb\u30c3\u30c8\u5168\u4f53\u306e<code>pandas.DataFrame</code>\u3092\u4f5c\u6210\u3059\u308b\u306b\u306f\u3001<code>drug_dataset[\"train\"]</code>\u306e\u3059\u3079\u3066\u306e\u8981\u7d20\u3092\u9078\u629e\u3057\u307e\u3059\uff1a</p> <pre><code># \u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30bb\u30c3\u30c8\u5168\u4f53\u3092DataFrame\u3068\u3057\u3066\u53d6\u5f97\ntrain_df = drug_dataset[\"train\"][:]\n</code></pre> <p>Tip</p> <p>\u5185\u90e8\u7684\u306b\u306f\u3001<code>Dataset.set_format()</code>\u306f\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e<code>__getitem__()</code>\u30c0\u30f3\u30c0\u30fc\u30e1\u30bd\u30c3\u30c9\u306e\u623b\u308a\u5f62\u5f0f\u3092\u5909\u66f4\u3057\u307e\u3059\u3002\u3053\u308c\u306f\u3001<code>\"pandas\"</code>\u5f62\u5f0f\u306e<code>Dataset</code>\u304b\u3089<code>train_df</code>\u306e\u3088\u3046\u306a\u65b0\u3057\u3044\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3057\u305f\u3044\u5834\u5408\u3001<code>pandas.DataFrame</code>\u3092\u53d6\u5f97\u3059\u308b\u305f\u3081\u306b\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u5168\u4f53\u3092\u30b9\u30e9\u30a4\u30b9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3053\u3068\u3092\u610f\u5473\u3057\u307e\u3059\u3002\u51fa\u529b\u5f62\u5f0f\u306b\u95a2\u4fc2\u306a\u304f\u3001<code>drug_dataset[\"train\"]</code>\u306e\u578b\u304c<code>Dataset</code>\u3067\u3042\u308b\u3053\u3068\u3092\u81ea\u5206\u3067\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002</p> <p>\u3053\u3053\u304b\u3089\u3001\u6b32\u3057\u3044\u3059\u3079\u3066\u306ePandas\u6a5f\u80fd\u3092\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001<code>condition</code>\u30a8\u30f3\u30c8\u30ea\u9593\u306e\u30af\u30e9\u30b9\u5206\u5e03\u3092\u8a08\u7b97\u3059\u308b\u305f\u3081\u306b\u30d5\u30a1\u30f3\u30b7\u30fc\u306a\u30c1\u30a7\u30fc\u30f3\u3092\u5b9f\u884c\u3067\u304d\u307e\u3059\uff1a</p> <pre><code># Pandas\u3092\u4f7f\u7528\u3057\u3066\u30af\u30e9\u30b9\u5206\u5e03\u3092\u8a08\u7b97\nfrequencies = (\n    train_df[\"condition\"]\n    .value_counts()\n    .to_frame()\n    .reset_index()\n    .rename(columns={\"index\": \"condition\", \"count\": \"frequency\"})\n)\nfrequencies.head()\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c:</p> \u30a4\u30f3\u30c7\u30c3\u30af\u30b9 condition frequency 0 birth control 27655 1 depression 8023 2 acne 5209 3 anxiety 4991 4 pain 4744 <p>Pandas\u5206\u6790\u304c\u5b8c\u4e86\u3057\u305f\u3089\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b<code>Dataset.from_pandas()</code>\u95a2\u6570\u3092\u4f7f\u7528\u3057\u3066\u3001\u3044\u3064\u3067\u3082\u65b0\u3057\u3044<code>Dataset</code>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\uff1a</p> <pre><code># Pandas\u306eDataFrame\u304b\u3089\u65b0\u3057\u3044Dataset\u3092\u4f5c\u6210\nfrom datasets import Dataset\n\nfreq_dataset = Dataset.from_pandas(frequencies)\nfreq_dataset\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>Dataset({\n    features: ['condition', 'frequency'],\n    num_rows: 819\n})\n</code></pre></p> <p>\u3053\u308c\u3067\u3001Hugging Face Datasets\u3067\u5229\u7528\u53ef\u80fd\u306a\u3055\u307e\u3056\u307e\u306a\u524d\u51e6\u7406\u30c6\u30af\u30cb\u30c3\u30af\u306e\u30c4\u30a2\u30fc\u3092\u7d42\u4e86\u3057\u307e\u3059\u3002\u30bb\u30af\u30b7\u30e7\u30f3\u3092\u7de0\u3081\u304f\u304f\u308b\u305f\u3081\u306b\u3001\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u5206\u985e\u5668\u306e\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u7528\u306b\u6e96\u5099\u3059\u308b\u305f\u3081\u306e\u691c\u8a3c\u30bb\u30c3\u30c8\u3092\u4f5c\u6210\u3057\u307e\u3057\u3087\u3046\u3002\u305d\u306e\u524d\u306b\u3001<code>drug_dataset</code>\u306e\u51fa\u529b\u5f62\u5f0f\u3092<code>\"pandas\"</code>\u304b\u3089<code>\"arrow\"</code>\u306b\u30ea\u30bb\u30c3\u30c8\u3057\u307e\u3059\uff1a</p> <pre><code># \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u5f62\u5f0f\u3092\u30ea\u30bb\u30c3\u30c8\ndrug_dataset.reset_format()\n</code></pre>","tags":["Hugging Face","Datasets","\u6a5f\u68b0\u5b66\u7fd2","\u30c7\u30fc\u30bf\u524d\u51e6\u7406","FAISS","\u610f\u5473\u691c\u7d22","NLP","Python"]},{"location":"LLM/06_the_huggingface_datasets_library/#_9","title":"\u691c\u8a3c\u30bb\u30c3\u30c8\u306e\u4f5c\u6210","text":"<p>\u8a55\u4fa1\u306b\u4f7f\u7528\u3067\u304d\u308b\u30c6\u30b9\u30c8\u30bb\u30c3\u30c8\u306f\u3042\u308a\u307e\u3059\u304c\u3001\u958b\u767a\u4e2d\u306b\u30c6\u30b9\u30c8\u30bb\u30c3\u30c8\u306b\u306f\u624b\u3092\u3064\u3051\u305a\u3001\u5225\u306e\u691c\u8a3c\u30bb\u30c3\u30c8\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u306f\u826f\u3044\u6163\u884c\u3067\u3059\u3002\u691c\u8a3c\u30bb\u30c3\u30c8\u3067\u30e2\u30c7\u30eb\u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306b\u6e80\u8db3\u3057\u305f\u3089\u3001\u30c6\u30b9\u30c8\u30bb\u30c3\u30c8\u3067\u6700\u7d42\u7684\u306a\u5065\u5168\u6027\u30c1\u30a7\u30c3\u30af\u3092\u5b9f\u884c\u3067\u304d\u307e\u3059\u3002\u3053\u306e\u30d7\u30ed\u30bb\u30b9\u306f\u3001\u30c6\u30b9\u30c8\u30bb\u30c3\u30c8\u306b\u904e\u9069\u5408\u3057\u3001\u5b9f\u4e16\u754c\u306e\u30c7\u30fc\u30bf\u3067\u5931\u6557\u3059\u308b\u30e2\u30c7\u30eb\u3092\u30c7\u30d7\u30ed\u30a4\u3059\u308b\u30ea\u30b9\u30af\u3092\u8efd\u6e1b\u3059\u308b\u306e\u306b\u5f79\u7acb\u3061\u307e\u3059\u3002</p> <p>Hugging Face Datasets\u306f\u3001<code>scikit-learn</code>\u306e\u6709\u540d\u306a\u6a5f\u80fd\u306b\u57fa\u3065\u304f<code>Dataset.train_test_split()</code>\u95a2\u6570\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002\u3053\u308c\u3092\u4f7f\u7528\u3057\u3066\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30bb\u30c3\u30c8\u3092<code>train</code>\u3068<code>validation</code>\u5206\u5272\u306b\u5206\u5272\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff08\u518d\u73fe\u6027\u306e\u305f\u3081\u306b<code>seed</code>\u5f15\u6570\u3092\u8a2d\u5b9a\u3057\u307e\u3059\uff09\uff1a</p> <pre><code># \u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30bb\u30c3\u30c8\u3092\u8a13\u7df4\u7528\u3068\u691c\u8a3c\u7528\u306b\u5206\u5272\ndrug_dataset_clean = drug_dataset[\"train\"].train_test_split(train_size=0.8, seed=42)\n# \u30c7\u30d5\u30a9\u30eb\u30c8\u306e\"test\"\u5206\u5272\u3092\"validation\"\u306b\u540d\u524d\u5909\u66f4\ndrug_dataset_clean[\"validation\"] = drug_dataset_clean.pop(\"test\")\n# \"test\"\u30bb\u30c3\u30c8\u3092`DatasetDict`\u306b\u8ffd\u52a0\ndrug_dataset_clean[\"test\"] = drug_dataset[\"test\"]\ndrug_dataset_clean\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>DatasetDict({\n    train: Dataset({\n        features: ['patient_id', 'drugName', 'condition', 'review', 'rating', 'date', 'usefulCount', 'review_length'],\n        num_rows: 110811\n    })\n    validation: Dataset({\n        features: ['patient_id', 'drugName', 'condition', 'review', 'rating', 'date', 'usefulCount', 'review_length'],\n        num_rows: 27703\n    })\n    test: Dataset({\n        features: ['patient_id', 'drugName', 'condition', 'review', 'rating', 'date', 'usefulCount', 'review_length'],\n        num_rows: 46108\n    })\n})\n</code></pre></p>","tags":["Hugging Face","Datasets","\u6a5f\u68b0\u5b66\u7fd2","\u30c7\u30fc\u30bf\u524d\u51e6\u7406","FAISS","\u610f\u5473\u691c\u7d22","NLP","Python"]},{"location":"LLM/06_the_huggingface_datasets_library/#_10","title":"\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u4fdd\u5b58","text":"<p>Hugging Face Datasets\u306f\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3055\u308c\u305f\u3059\u3079\u3066\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3068\u305d\u308c\u306b\u5b9f\u884c\u3055\u308c\u305f\u64cd\u4f5c\u3092\u30ad\u30e3\u30c3\u30b7\u30e5\u3057\u307e\u3059\u304c\u3001\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u30c7\u30a3\u30b9\u30af\u306b\u4fdd\u5b58\u3057\u305f\u3044\u5834\u5408\u304c\u3042\u308a\u307e\u3059\uff08\u4f8b\uff1a\u30ad\u30e3\u30c3\u30b7\u30e5\u304c\u524a\u9664\u3055\u308c\u305f\u5834\u5408\uff09\u3002\u4ee5\u4e0b\u306e\u8868\u306b\u793a\u3059\u3088\u3046\u306b\u3001Hugging Face Datasets\u306f\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u7570\u306a\u308b\u5f62\u5f0f\u3067\u4fdd\u5b58\u3059\u308b\u305f\u3081\u306e3\u3064\u306e\u4e3b\u8981\u306a\u95a2\u6570\u3092\u63d0\u4f9b\u3057\u307e\u3059\uff1a</p> \u30c7\u30fc\u30bf\u5f62\u5f0f \u95a2\u6570 Arrow <code>Dataset.save_to_disk()</code> CSV <code>Dataset.to_csv()</code> JSON <code>Dataset.to_json()</code> <p>\u4f8b\u3048\u3070\u3001\u30af\u30ea\u30fc\u30f3\u30a2\u30c3\u30d7\u3057\u305f\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092Arrow\u5f62\u5f0f\u3067\u4fdd\u5b58\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff1a</p> <pre><code># \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092Arrow\u5f62\u5f0f\u3067\u30c7\u30a3\u30b9\u30af\u306b\u4fdd\u5b58\ndrug_dataset_clean.save_to_disk(\"drug-reviews\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>Saving the dataset (1/1 shards): 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 110811/110811 [00:00&lt;00:00, 249039.27 examples/s]\nSaving the dataset (1/1 shards): 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 27703/27703 [00:00&lt;00:00, 255657.51 examples/s]\nSaving the dataset (1/1 shards): 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 46108/46108 [00:00&lt;00:00, 2614416.04 examples/s]\n</code></pre></p> <p>\u3053\u308c\u306b\u3088\u308a\u3001\u4ee5\u4e0b\u306e\u69cb\u9020\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304c\u4f5c\u6210\u3055\u308c\u307e\u3059\uff1a</p> <pre><code>drug-reviews/\n\u251c\u2500\u2500 dataset_dict.json\n\u251c\u2500\u2500 test\n\u2502   \u251c\u2500\u2500 dataset.arrow\n\u2502   \u251c\u2500\u2500 dataset_info.json\n\u2502   \u2514\u2500\u2500 state.json\n\u251c\u2500\u2500 train\n\u2502   \u251c\u2500\u2500 dataset.arrow\n\u2502   \u251c\u2500\u2500 dataset_info.json\n\u2502   \u251c\u2500\u2500 indices.arrow\n\u2502   \u2514\u2500\u2500 state.json\n\u2514\u2500\u2500 validation\n    \u251c\u2500\u2500 dataset.arrow\n    \u251c\u2500\u2500 dataset_info.json\n    \u251c\u2500\u2500 indices.arrow\n    \u2514\u2500\u2500 state.json\n</code></pre> <p>\u5404\u5206\u5272\u304c\u72ec\u81ea\u306edataset.arrow\u30c6\u30fc\u30d6\u30eb\u306b\u95a2\u9023\u4ed8\u3051\u3089\u308c\u3001dataset_info.json\u3068state.json\u306b\u30e1\u30bf\u30c7\u30fc\u30bf\u304c\u3042\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002Arrow\u5f62\u5f0f\u306f\u3001\u5927\u304d\u306a\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u51e6\u7406\u304a\u3088\u3073\u8ee2\u9001\u3059\u308b\u9ad8\u6027\u80fd\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u69cb\u7bc9\u306b\u6700\u9069\u5316\u3055\u308c\u305f\u3001\u5217\u3068\u884c\u306e\u7d20\u6674\u3089\u3057\u3044\u30c6\u30fc\u30d6\u30eb\u3068\u8003\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p> <p>\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304c\u4fdd\u5b58\u3055\u308c\u305f\u3089\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b<code>load_from_disk()</code>\u95a2\u6570\u3092\u4f7f\u7528\u3057\u3066\u30ed\u30fc\u30c9\u3067\u304d\u307e\u3059\uff1a</p> <pre><code># \u4fdd\u5b58\u3055\u308c\u305f\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u30c7\u30a3\u30b9\u30af\u304b\u3089\u30ed\u30fc\u30c9\nfrom datasets import load_from_disk\n\ndrug_dataset_reloaded = load_from_disk(\"drug-reviews\")\ndrug_dataset_reloaded\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>DatasetDict({\n    train: Dataset({\n        features: ['patient_id', 'drugName', 'condition', 'review', 'rating', 'date', 'usefulCount', 'review_length'],\n        num_rows: 110811\n    })\n    validation: Dataset({\n        features: ['patient_id', 'drugName', 'condition', 'review', 'rating', 'date', 'usefulCount', 'review_length'],\n        num_rows: 27703\n    })\n    test: Dataset({\n        features: ['patient_id', 'drugName', 'condition', 'review', 'rating', 'date', 'usefulCount', 'review_length'],\n        num_rows: 46108\n    })\n})\n</code></pre></p> <p>CSV\u3068JSON\u5f62\u5f0f\u306e\u5834\u5408\u3001\u5404\u5206\u5272\u3092\u5225\u3005\u306e\u30d5\u30a1\u30a4\u30eb\u3068\u3057\u3066\u4fdd\u5b58\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u3092\u884c\u30461\u3064\u306e\u65b9\u6cd5\u306f\u3001<code>DatasetDict</code>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30ad\u30fc\u3068\u5024\u3092\u53cd\u5fa9\u51e6\u7406\u3059\u308b\u3053\u3068\u3067\u3059\uff1a</p> <pre><code># \u5404\u5206\u5272\u3092JSONL\u30d5\u30a1\u30a4\u30eb\u3068\u3057\u3066\u4fdd\u5b58\nfor split, dataset in drug_dataset_clean.items():\n    dataset.to_json(f\"drug-reviews-{split}.jsonl\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>Creating json from Arrow format: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 111/111 [00:00&lt;00:00, 175.11ba/s]\nCreating json from Arrow format: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 28/28 [00:00&lt;00:00, 180.40ba/s]\nCreating json from Arrow format: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 47/47 [00:00&lt;00:00, 382.06ba/s]\n</code></pre></p> <pre><code># \u4fdd\u5b58\u3055\u308c\u305fJSONL\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u518d\u8aad\u307f\u8fbc\u307f\ndata_files = {\n    \"train\": \"drug-reviews-train.jsonl\",\n    \"validation\": \"drug-reviews-validation.jsonl\",\n    \"test\": \"drug-reviews-test.jsonl\",\n}\ndrug_dataset_reloaded = load_dataset(\"json\", data_files=data_files)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>Generating train split: 110811 examples [00:00, 1512530.86 examples/s]\nGenerating validation split: 27703 examples [00:00, 1649252.75 examples/s]\nGenerating test split: 46108 examples [00:00, 1849870.09 examples/s]\n</code></pre></p>","tags":["Hugging Face","Datasets","\u6a5f\u68b0\u5b66\u7fd2","\u30c7\u30fc\u30bf\u524d\u51e6\u7406","FAISS","\u610f\u5473\u691c\u7d22","NLP","Python"]},{"location":"LLM/06_the_huggingface_datasets_library/#_11","title":"\u72ec\u81ea\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u4f5c\u6210","text":"<p>NLP\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u69cb\u7bc9\u3059\u308b\u305f\u3081\u306b\u5fc5\u8981\u306a\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u304c\u3042\u308a\u3001\u81ea\u5206\u3067\u4f5c\u6210\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u306f\u3001GitHub\u30ea\u30dd\u30b8\u30c8\u30ea\u306e\u30d0\u30b0\u3084\u6a5f\u80fd\u3092\u8ffd\u8de1\u3059\u308b\u305f\u3081\u306b\u4e00\u822c\u7684\u306b\u4f7f\u7528\u3055\u308c\u308bGitHub\u30a4\u30b7\u30e5\u30fc\u306e\u30b3\u30fc\u30d1\u30b9\u3092\u4f5c\u6210\u3059\u308b\u65b9\u6cd5\u3092\u793a\u3057\u307e\u3059\u3002\u3053\u306e\u30b3\u30fc\u30d1\u30b9\u306f\u3001\u4ee5\u4e0b\u3092\u542b\u3080\u3055\u307e\u3056\u307e\u306a\u76ee\u7684\u306b\u4f7f\u7528\u3067\u304d\u307e\u3059\uff1a</p> <ul> <li>\u30aa\u30fc\u30d7\u30f3\u30a4\u30b7\u30e5\u30fc\u3084\u30d7\u30eb\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u9589\u3058\u308b\u306e\u306b\u304b\u304b\u308b\u6642\u9593\u306e\u63a2\u7d22</li> <li>\u30a4\u30b7\u30e5\u30fc\u306e\u8aac\u660e\u306b\u57fa\u3065\u3044\u3066\u30a4\u30b7\u30e5\u30fc\u3092\u30e1\u30bf\u30c7\u30fc\u30bf\u3067\u30bf\u30b0\u4ed8\u3051\u3067\u304d\u308b_\u30de\u30eb\u30c1\u30e9\u30d9\u30eb\u5206\u985e\u5668_\u306e\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\uff08\u4f8b\uff1a\u300c\u30d0\u30b0\u300d\u3001\u300c\u62e1\u5f35\u300d\u3001\u300c\u8cea\u554f\u300d\uff09</li> <li>\u30e6\u30fc\u30b6\u30fc\u306e\u30af\u30a8\u30ea\u306b\u4e00\u81f4\u3059\u308b\u30a4\u30b7\u30e5\u30fc\u3092\u898b\u3064\u3051\u308b\u30bb\u30de\u30f3\u30c6\u30a3\u30c3\u30af\u691c\u7d22\u30a8\u30f3\u30b8\u30f3\u306e\u4f5c\u6210</li> </ul> <p>\u3053\u3053\u3067\u306f\u30b3\u30fc\u30d1\u30b9\u306e\u4f5c\u6210\u306b\u7126\u70b9\u3092\u5f53\u3066\u3001\u6b21\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u30bb\u30de\u30f3\u30c6\u30a3\u30c3\u30af\u691c\u7d22\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u53d6\u308a\u7d44\u307f\u307e\u3059\u3002\u30e1\u30bf\u306b\u306a\u308b\u305f\u3081\u306b\u3001\u4eba\u6c17\u306e\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u95a2\u9023\u3059\u308bGitHub\u30a4\u30b7\u30e5\u30fc\u3092\u4f7f\u7528\u3057\u307e\u3059\uff1aHugging Face Datasets\uff01\u3053\u308c\u3089\u306e\u30a4\u30b7\u30e5\u30fc\u3067\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3057\u3001\u542b\u307e\u308c\u308b\u60c5\u5831\u3092\u63a2\u7d22\u3059\u308b\u65b9\u6cd5\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002</p>","tags":["Hugging Face","Datasets","\u6a5f\u68b0\u5b66\u7fd2","\u30c7\u30fc\u30bf\u524d\u51e6\u7406","FAISS","\u610f\u5473\u691c\u7d22","NLP","Python"]},{"location":"LLM/06_the_huggingface_datasets_library/#_12","title":"\u30c7\u30fc\u30bf\u306e\u53d6\u5f97","text":"<p>Hugging Face Datasets\u306e\u3059\u3079\u3066\u306e\u30a4\u30b7\u30e5\u30fc\u306f\u3001\u30ea\u30dd\u30b8\u30c8\u30ea\u306eIssues\u30bf\u30d6\u306b\u79fb\u52d5\u3059\u308b\u3053\u3068\u3067\u898b\u3064\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p> <p></p> <p>\u3053\u308c\u3089\u306e\u30a4\u30b7\u30e5\u30fc\u306e1\u3064\u3092\u30af\u30ea\u30c3\u30af\u3059\u308b\u3068\u3001\u30bf\u30a4\u30c8\u30eb\u3001\u8aac\u660e\u3001\u304a\u3088\u3073\u30a4\u30b7\u30e5\u30fc\u3092\u7279\u5fb4\u4ed8\u3051\u308b\u30e9\u30d9\u30eb\u306e\u30bb\u30c3\u30c8\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002</p> <p>\u30ea\u30dd\u30b8\u30c8\u30ea\u306e\u3059\u3079\u3066\u306e\u30a4\u30b7\u30e5\u30fc\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u306b\u306f\u3001GitHub REST API\u3092\u4f7f\u7528\u3057\u3066<code>Issues</code>\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u30dd\u30fc\u30ea\u30f3\u30b0\u3057\u307e\u3059\u3002\u3053\u306e\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306fJSON\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30ea\u30b9\u30c8\u3092\u8fd4\u3057\u3001\u5404\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u306f\u30bf\u30a4\u30c8\u30eb\u3068\u8aac\u660e\u3001\u304a\u3088\u3073\u30a4\u30b7\u30e5\u30fc\u306e\u30b9\u30c6\u30fc\u30bf\u30b9\u306a\u3069\u306b\u95a2\u3059\u308b\u30e1\u30bf\u30c7\u30fc\u30bf\u3092\u542b\u3080\u591a\u6570\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002</p> <p>\u30a4\u30b7\u30e5\u30fc\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u4fbf\u5229\u306a\u65b9\u6cd5\u306f\u3001Python\u3067HTTP\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u884c\u3046\u6a19\u6e96\u7684\u306a\u65b9\u6cd5\u3067\u3042\u308b<code>requests</code>\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3067\u3059\u3002<code>requests.get()</code>\u95a2\u6570\u3092\u547c\u3073\u51fa\u3059\u3053\u3068\u3067\u3001<code>Issues</code>\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306bGET\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u9001\u4fe1\u3067\u304d\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u3066\u3001\u6700\u521d\u306e\u30da\u30fc\u30b8\u306e\u6700\u521d\u306e\u30a4\u30b7\u30e5\u30fc\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\uff1a</p> <pre><code># GitHub API\u304b\u3089\u30a4\u30b7\u30e5\u30fc\u3092\u53d6\u5f97\nimport requests\n\nurl = \"https://api.github.com/repos/huggingface/datasets/issues?page=1&amp;per_page=1\"\nresponse = requests.get(url)\n</code></pre> <p><code>response</code>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u306f\u3001HTTP\u30b9\u30c6\u30fc\u30bf\u30b9\u30b3\u30fc\u30c9\u3092\u542b\u3080\u3001\u30ea\u30af\u30a8\u30b9\u30c8\u306b\u95a2\u3059\u308b\u591a\u304f\u306e\u6709\u7528\u306a\u60c5\u5831\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\uff1a</p> <pre><code># HTTP\u30b9\u30c6\u30fc\u30bf\u30b9\u30b3\u30fc\u30c9\u3092\u78ba\u8a8d\nresponse.status_code\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>200\n</code></pre></p> <p><code>200</code>\u30b9\u30c6\u30fc\u30bf\u30b9\u306f\u30ea\u30af\u30a8\u30b9\u30c8\u304c\u6210\u529f\u3057\u305f\u3053\u3068\u3092\u610f\u5473\u3057\u307e\u3059\uff08\u53ef\u80fd\u306aHTTP\u30b9\u30c6\u30fc\u30bf\u30b9\u30b3\u30fc\u30c9\u306e\u30ea\u30b9\u30c8\u306f\u3053\u3061\u3089\u3067\u898b\u3064\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff09\u3002\u3057\u304b\u3057\u3001\u5b9f\u969b\u306b\u8208\u5473\u304c\u3042\u308b\u306e\u306f_\u30da\u30a4\u30ed\u30fc\u30c9_\u3067\u3001\u3053\u308c\u306f\u30d0\u30a4\u30c8\u3001\u6587\u5b57\u5217\u3001JSON\u306a\u3069\u306e\u3055\u307e\u3056\u307e\u306a\u5f62\u5f0f\u3067\u30a2\u30af\u30bb\u30b9\u3067\u304d\u307e\u3059\u3002\u30a4\u30b7\u30e5\u30fc\u304cJSON\u5f62\u5f0f\u3067\u3042\u308b\u3053\u3068\u304c\u308f\u304b\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30da\u30a4\u30ed\u30fc\u30c9\u3092\u8abf\u3079\u3066\u307f\u307e\u3057\u3087\u3046\uff1a</p> <pre><code># JSON\u5f62\u5f0f\u3067\u30ec\u30b9\u30dd\u30f3\u30b9\u306e\u30da\u30a4\u30ed\u30fc\u30c9\u3092\u8868\u793a\nresponse.json()\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>[{'url': 'https://api.github.com/repos/huggingface/datasets/issues/7756',\n  'repository_url': 'https://api.github.com/repos/huggingface/datasets',\n  'labels_url': 'https://api.github.com/repos/huggingface/datasets/issues/7756/labels{/name}',\n  'comments_url': 'https://api.github.com/repos/huggingface/datasets/issues/7756/comments',\n  'events_url': 'https://api.github.com/repos/huggingface/datasets/issues/7756/events',\n  'html_url': 'https://github.com/huggingface/datasets/issues/7756',\n  'id': 3387076693,\n  'node_id': 'I_kwDODunzps7J4rBV',\n  'number': 7756,\n  'title': 'datasets.map(f, num_proc=N) hangs with N&gt;1 when run on import',\n  'user': {'login': 'arjunguha',\n   'id': 20065,\n   'node_id': 'MDQ6VXNlcjIwMDY1',\n   'avatar_url': 'https://avatars.githubusercontent.com/u/20065?v=4',\n   'gravatar_id': '',\n   'url': 'https://api.github.com/users/arjunguha',\n   'html_url': 'https://github.com/arjunguha',\n   'followers_url': 'https://api.github.com/users/arjunguha/followers',\n   'following_url': 'https://api.github.com/users/arjunguha/following{/other_user}',\n   'gists_url': 'https://api.github.com/users/arjunguha/gists{/gist_id}',\n   'starred_url': 'https://api.github.com/users/arjunguha/starred{/owner}{/repo}',\n   'subscriptions_url': 'https://api.github.com/users/arjunguha/subscriptions',\n   'organizations_url': 'https://api.github.com/users/arjunguha/orgs',\n   'repos_url': 'https://api.github.com/users/arjunguha/repos',\n   'events_url': 'https://api.github.com/users/arjunguha/events{/privacy}',\n   'received_events_url': 'https://api.github.com/users/arjunguha/received_events',\n   'type': 'User',\n   'user_view_type': 'public',\n   'site_admin': False},\n  'labels': [],\n  'state': 'open',\n  'locked': False,\n  'assignee': None,\n  'assignees': [],\n  'milestone': None,\n  'comments': 0,\n  'created_at': '2025-09-05T10:32:01Z',\n  'updated_at': '2025-09-05T10:32:01Z',\n  'closed_at': None,\n  'author_association': 'NONE',\n  'type': None,\n  'active_lock_reason': None,\n  'sub_issues_summary': {'total': 0, 'completed': 0, 'percent_completed': 0},\n  'issue_dependencies_summary': {'blocked_by': 0,\n   'total_blocked_by': 0,\n   'blocking': 0,\n   'total_blocking': 0},\n  'body': '### Describe the bug\\n\\nIf you `import` a module that runs `datasets.map(f, num_proc=N)` at the top-level, Python hangs.\\n\\n\\n### Steps to reproduce the bug\\n\\n1. Create a file that runs datasets.map at the top-level:\\n\\n```bash\\ncat &lt;&lt;EOF &gt; import_me.py\\nimport datasets\\n\\nthe_dataset = datasets.load_dataset(\"openai/openai_humaneval\")\\nthe_dataset = the_dataset.map(lambda item: item, num_proc=2)\\nEOF\\n```\\n\\n2. Start Python REPL:\\n\\n```bash\\nuv run --python 3.12.3 --with \"datasets==4.0.0\"  python3\\nPython 3.12.3 (main, Aug 14 2025, 17:47:21) [GCC 13.3.0] on linux\\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\\n```\\n\\n3. Import the file:\\n\\n```python\\nimport import_me\\n````\\n\\nObserve hang.\\n\\n### Expected behavior\\n\\nIdeally would not hang, or would fallback to num_proc=1 with a warning.\\n\\n### Environment info\\n\\n\\n- `datasets` version: 4.0.0\\n- Platform: Linux-6.14.0-29-generic-x86_64-with-glibc2.39\\n- Python version: 3.12.3\\n- `huggingface_hub` version: 0.34.4\\n- PyArrow version: 21.0.0\\n- Pandas version: 2.3.2\\n- `fsspec` version: 2025.3.0\\n',\n  'closed_by': None,\n  'reactions': {'url': 'https://api.github.com/repos/huggingface/datasets/issues/7756/reactions',\n   'total_count': 0,\n   '+1': 0,\n   '-1': 0,\n   'laugh': 0,\n   'hooray': 0,\n   'confused': 0,\n   'heart': 0,\n   'rocket': 0,\n   'eyes': 0},\n  'timeline_url': 'https://api.github.com/repos/huggingface/datasets/issues/7756/timeline',\n  'performed_via_github_app': None,\n  'state_reason': None}]\n</code></pre></p> <p>\u305f\u304f\u3055\u3093\u306e\u60c5\u5831\u3067\u3059\u306d\uff01\u30a4\u30b7\u30e5\u30fc\u3092\u8aac\u660e\u3059\u308b<code>title</code>\u3001<code>body</code>\u3001<code>number</code>\u306a\u3069\u306e\u6709\u7528\u306a\u30d5\u30a3\u30fc\u30eb\u30c9\u3084\u3001\u30a4\u30b7\u30e5\u30fc\u3092\u958b\u3044\u305fGitHub\u30e6\u30fc\u30b6\u30fc\u306b\u95a2\u3059\u308b\u60c5\u5831\u304c\u898b\u3048\u307e\u3059\u3002</p> <p>GitHub\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3067\u8aac\u660e\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u306b\u3001\u8a8d\u8a3c\u3055\u308c\u3066\u3044\u306a\u3044\u30ea\u30af\u30a8\u30b9\u30c8\u306f1\u6642\u9593\u3042\u305f\u308a60\u30ea\u30af\u30a8\u30b9\u30c8\u306b\u5236\u9650\u3055\u308c\u3066\u3044\u307e\u3059\u3002<code>per_page</code>\u30af\u30a8\u30ea\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u5897\u3084\u3057\u3066\u884c\u3046\u30ea\u30af\u30a8\u30b9\u30c8\u6570\u3092\u6e1b\u3089\u3059\u3053\u3068\u306f\u3067\u304d\u307e\u3059\u304c\u3001\u6570\u5343\u3092\u8d85\u3048\u308b\u30a4\u30b7\u30e5\u30fc\u3092\u6301\u3064\u30ea\u30dd\u30b8\u30c8\u30ea\u3067\u306f\u3001\u4f9d\u7136\u3068\u3057\u3066\u5236\u9650\u306b\u9054\u3057\u3066\u3057\u307e\u3044\u307e\u3059\u3002\u4ee3\u308f\u308a\u306b\u3001_\u30d1\u30fc\u30bd\u30ca\u30eb\u30a2\u30af\u30bb\u30b9\u30c8\u30fc\u30af\u30f3_\u3092\u4f5c\u6210\u3059\u308bGitHub\u306e\u624b\u9806\u306b\u5f93\u3063\u3066\u3001\u5236\u9650\u30921\u6642\u9593\u3042\u305f\u308a5,000\u30ea\u30af\u30a8\u30b9\u30c8\u307e\u3067\u5897\u3084\u3059\u3079\u304d\u3067\u3059\u3002\u30c8\u30fc\u30af\u30f3\u3092\u53d6\u5f97\u3057\u305f\u3089\u3001\u30ea\u30af\u30a8\u30b9\u30c8\u30d8\u30c3\u30c0\u30fc\u306e\u4e00\u90e8\u3068\u3057\u3066\u542b\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a</p> <pre><code># GitHub\u30c8\u30fc\u30af\u30f3\u3092\u4f7f\u7528\u3057\u305f\u8a8d\u8a3c\u8a2d\u5b9a\nGITHUB_TOKEN = 'xxx'  # GitHub\u30c8\u30fc\u30af\u30f3\u3092\u3053\u3053\u306b\u30b3\u30d4\u30fc\u3057\u3066\u304f\u3060\u3055\u3044\nheaders = {\"Authorization\": f\"token {GITHUB_TOKEN}\"}\n</code></pre> <p>\u30a2\u30af\u30bb\u30b9\u30c8\u30fc\u30af\u30f3\u304c\u3067\u304d\u305f\u306e\u3067\u3001GitHub\u30ea\u30dd\u30b8\u30c8\u30ea\u304b\u3089\u3059\u3079\u3066\u306e\u30a4\u30b7\u30e5\u30fc\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3067\u304d\u308b\u95a2\u6570\u3092\u4f5c\u6210\u3057\u307e\u3057\u3087\u3046\uff1a</p> <pre><code># GitHub\u30a4\u30b7\u30e5\u30fc\u3092\u53d6\u5f97\u3059\u308b\u95a2\u6570\nimport time, requests\nimport math\nfrom pathlib import Path\nimport pandas as pd\nfrom tqdm.notebook import tqdm\n\ndef fetch_issues(\n    owner=\"huggingface\",\n    repo=\"datasets\",\n    num_issues=10_000,\n    rate_limit=5_000,\n    issues_path=Path(\".\"),\n):\n    if not issues_path.is_dir():\n        issues_path.mkdir(exist_ok=True)\n\n    batch = []\n    all_issues = []\n    per_page = 100  # \u30da\u30fc\u30b8\u3042\u305f\u308a\u306e\u30a4\u30b7\u30e5\u30fc\u6570\n    num_pages = math.ceil(num_issues / per_page)\n    base_url = \"https://api.github.com/repos\"\n\n    for page in tqdm(range(num_pages)):\n        # state=all\u3067\u30aa\u30fc\u30d7\u30f3\u3068\u30af\u30ed\u30fc\u30ba\u4e21\u65b9\u306e\u30a4\u30b7\u30e5\u30fc\u3092\u53d6\u5f97\n        query = f\"issues?page={page}&amp;per_page={per_page}&amp;state=all\"\n        issues = requests.get(f\"{base_url}/{owner}/{repo}/{query}\", headers=headers)\n        batch.extend(issues.json())\n\n        if len(batch) &gt; rate_limit and len(all_issues) &lt; num_issues:\n            all_issues.extend(batch)\n            batch = []  # \u6b21\u306e\u6642\u9593\u9593\u9694\u306e\u305f\u3081\u306b\u30d0\u30c3\u30c1\u3092\u30d5\u30e9\u30c3\u30b7\u30e5\n            print(f\"GitHub\u306e\u5236\u9650\u306b\u5230\u9054\u3057\u307e\u3057\u305f\u30021\u6642\u9593\u30b9\u30ea\u30fc\u30d7\u3057\u307e\u3059...\")\n            time.sleep(60 * 60 + 1)\n\n    all_issues.extend(batch)\n    df = pd.DataFrame.from_records(all_issues)\n    df.to_json(f\"{issues_path}/{repo}-issues.jsonl\", orient=\"records\", lines=True)\n    print(\n        f\"{repo}\u306e\u3059\u3079\u3066\u306e\u30a4\u30b7\u30e5\u30fc\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u307e\u3057\u305f\uff01\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306f{issues_path}/{repo}-issues.jsonl\u306b\u4fdd\u5b58\u3055\u308c\u3066\u3044\u307e\u3059\"\n    )\n</code></pre> <p><code>fetch_issues()</code>\u3092\u547c\u3073\u51fa\u3059\u3068\u3001GitHub\u306e1\u6642\u9593\u3042\u305f\u308a\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u6570\u5236\u9650\u3092\u8d85\u3048\u306a\u3044\u3088\u3046\u306b\u30d0\u30c3\u30c1\u3067\u3059\u3079\u3066\u306e\u30a4\u30b7\u30e5\u30fc\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u307e\u3059\u3002\u7d50\u679c\u306f_repository_name-issues.jsonl_\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58\u3055\u308c\u3001\u5404\u884c\u306f\u30a4\u30b7\u30e5\u30fc\u3092\u8868\u3059JSON\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3059\u3002\u3053\u306e\u95a2\u6570\u3092\u4f7f\u7528\u3057\u3066Hugging Face Datasets\u304b\u3089\u3059\u3079\u3066\u306e\u30a4\u30b7\u30e5\u30fc\u3092\u53d6\u5f97\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff1a</p> <pre><code># \u30a4\u30f3\u30bf\u30fc\u30cd\u30c3\u30c8\u63a5\u7d9a\u306b\u3088\u3063\u3066\u306f\u3001\u5b9f\u884c\u306b\u6570\u5206\u304b\u304b\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059...\nfetch_issues()\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>  0%|          | 0/100 [00:00&lt;?, ?it/s]\nGitHub\u306e\u5236\u9650\u306b\u5230\u9054\u3057\u307e\u3057\u305f\u30021\u6642\u9593\u30b9\u30ea\u30fc\u30d7\u3057\u307e\u3059...\ndatasets\u306e\u3059\u3079\u3066\u306e\u30a4\u30b7\u30e5\u30fc\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u307e\u3057\u305f\uff01\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306f./datasets-issues.jsonl\u306b\u4fdd\u5b58\u3055\u308c\u3066\u3044\u307e\u3059\n</code></pre></p> <pre><code># \u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u305f\u30c7\u30fc\u30bf\u3092Dataset\u306b\u5909\u63db\nimport pandas as pd\nfrom datasets import Dataset\n\ndf = pd.read_json(\"datasets-issues.jsonl\", lines=True)\nissues_dataset = Dataset.from_pandas(df)\nissues_dataset\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>Dataset({\n    features: ['url', 'repository_url', 'labels_url', 'comments_url', 'events_url', 'html_url', 'id', 'node_id', 'number', 'title', 'user', 'labels', 'state', 'locked', 'assignee', 'assignees', 'milestone', 'comments', 'created_at', 'updated_at', 'closed_at', 'author_association', 'type', 'active_lock_reason', 'sub_issues_summary', 'issue_dependencies_summary', 'body', 'closed_by', 'reactions', 'timeline_url', 'performed_via_github_app', 'state_reason', 'draft', 'pull_request'],\n    num_rows: 7676\n})\n</code></pre></p>","tags":["Hugging Face","Datasets","\u6a5f\u68b0\u5b66\u7fd2","\u30c7\u30fc\u30bf\u524d\u51e6\u7406","FAISS","\u610f\u5473\u691c\u7d22","NLP","Python"]},{"location":"LLM/06_the_huggingface_datasets_library/#_13","title":"\u30c7\u30fc\u30bf\u306e\u30af\u30ea\u30fc\u30f3\u30a2\u30c3\u30d7","text":"<p>GitHub\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u4e0a\u8a18\u30b9\u30cb\u30da\u30c3\u30c8\u306f\u3001<code>pull_request</code>\u5217\u3092\u4f7f\u7528\u3057\u3066\u30a4\u30b7\u30e5\u30fc\u3068\u30d7\u30eb\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u533a\u5225\u3067\u304d\u308b\u3053\u3068\u3092\u793a\u3057\u3066\u3044\u307e\u3059\u3002\u30e9\u30f3\u30c0\u30e0\u30b5\u30f3\u30d7\u30eb\u3092\u898b\u3066\u3001\u9055\u3044\u304c\u4f55\u304b\u3092\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002<code>Dataset.shuffle()</code>\u3068<code>Dataset.select()</code>\u3092\u9023\u9396\u3055\u305b\u3066\u30e9\u30f3\u30c0\u30e0\u30b5\u30f3\u30d7\u30eb\u3092\u4f5c\u6210\u3057\u3001<code>html_url</code>\u3068<code>pull_request</code>\u5217\u3092\u5727\u7e2e\u3057\u3066\u3055\u307e\u3056\u307e\u306aURL\u3092\u6bd4\u8f03\u3067\u304d\u307e\u3059\uff1a</p> <pre><code># \u30e9\u30f3\u30c0\u30e0\u30b5\u30f3\u30d7\u30eb\u3067\u30a4\u30b7\u30e5\u30fc\u3068\u30d7\u30eb\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u9055\u3044\u3092\u78ba\u8a8d\nsample = issues_dataset.shuffle(seed=666).select(range(3))\n\n# URL\u3068\u30d7\u30eb\u30ea\u30af\u30a8\u30b9\u30c8\u30a8\u30f3\u30c8\u30ea\u3092\u51fa\u529b\nfor url, pr in zip(sample[\"html_url\"], sample[\"pull_request\"]):\n    print(f\"&gt;&gt; URL: {url}\")\n    print(f\"&gt;&gt; \u30d7\u30eb\u30ea\u30af\u30a8\u30b9\u30c8: {pr}\\n\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>&gt;&gt; URL: https://github.com/huggingface/datasets/issues/277\n&gt;&gt; \u30d7\u30eb\u30ea\u30af\u30a8\u30b9\u30c8: None\n\n&gt;&gt; URL: https://github.com/huggingface/datasets/issues/6132\n&gt;&gt; \u30d7\u30eb\u30ea\u30af\u30a8\u30b9\u30c8: None\n\n&gt;&gt; URL: https://github.com/huggingface/datasets/pull/6943\n&gt;&gt; \u30d7\u30eb\u30ea\u30af\u30a8\u30b9\u30c8: {'diff_url': 'https://github.com/huggingface/datasets/pull/6943.diff', 'html_url': 'https://github.com/huggingface/datasets/pull/6943', 'merged_at': '2024-06-03T05:17:40Z', 'patch_url': 'https://github.com/huggingface/datasets/pull/6943.patch', 'url': 'https://api.github.com/repos/huggingface/datasets/pulls/6943'}\n</code></pre></p> <p>\u3053\u3053\u3067\u3001\u5404\u30d7\u30eb\u30ea\u30af\u30a8\u30b9\u30c8\u304c\u3055\u307e\u3056\u307e\u306aURL\u306b\u95a2\u9023\u4ed8\u3051\u3089\u308c\u3066\u3044\u308b\u4e00\u65b9\u3067\u3001\u901a\u5e38\u306e\u30a4\u30b7\u30e5\u30fc\u306b\u306f<code>None</code>\u30a8\u30f3\u30c8\u30ea\u304c\u3042\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\u3053\u306e\u533a\u5225\u3092\u4f7f\u7528\u3057\u3066\u3001<code>pull_request</code>\u30d5\u30a3\u30fc\u30eb\u30c9\u304c<code>None</code>\u304b\u3069\u3046\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u65b0\u3057\u3044<code>is_pull_request</code>\u5217\u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\uff1a</p> <pre><code># \u30d7\u30eb\u30ea\u30af\u30a8\u30b9\u30c8\u304b\u3069\u3046\u304b\u3092\u793a\u3059\u65b0\u3057\u3044\u5217\u3092\u8ffd\u52a0\nissues_dataset = issues_dataset.map(\n    lambda x: {\"is_pull_request\": False if x[\"pull_request\"] is None else True}\n)\n</code></pre> <p>\u4e00\u90e8\u306e\u5217\u3092\u524a\u9664\u307e\u305f\u306f\u540d\u524d\u5909\u66f4\u3057\u3066\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u3055\u3089\u306b\u30af\u30ea\u30fc\u30f3\u30a2\u30c3\u30d7\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u304c\u3001\u4e00\u822c\u7684\u306b\u3001\u3053\u306e\u6bb5\u968e\u3067\u306f\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u300c\u751f\u306e\u300d\u72b6\u614b\u306b\u3067\u304d\u308b\u3060\u3051\u4fdd\u3064\u3053\u3068\u306f\u826f\u3044\u6163\u884c\u3067\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u8907\u6570\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u7c21\u5358\u306b\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002</p>","tags":["Hugging Face","Datasets","\u6a5f\u68b0\u5b66\u7fd2","\u30c7\u30fc\u30bf\u524d\u51e6\u7406","FAISS","\u610f\u5473\u691c\u7d22","NLP","Python"]},{"location":"LLM/06_the_huggingface_datasets_library/#_14","title":"\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u62e1\u5f35","text":"<p>\u4ee5\u4e0b\u306e\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8\u306b\u793a\u3059\u3088\u3046\u306b\u3001\u30a4\u30b7\u30e5\u30fc\u3084\u30d7\u30eb\u30ea\u30af\u30a8\u30b9\u30c8\u306b\u95a2\u9023\u3059\u308b\u30b3\u30e1\u30f3\u30c8\u306f\u3001\u7279\u306b\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u95a2\u3059\u308b\u30e6\u30fc\u30b6\u30fc\u306e\u30af\u30a8\u30ea\u306b\u7b54\u3048\u308b\u691c\u7d22\u30a8\u30f3\u30b8\u30f3\u306e\u69cb\u7bc9\u306b\u8208\u5473\u304c\u3042\u308b\u5834\u5408\u3001\u8c4a\u5bcc\u306a\u60c5\u5831\u6e90\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002</p> <p>GitHub REST API\u306f\u3001\u30a4\u30b7\u30e5\u30fc\u756a\u53f7\u306b\u95a2\u9023\u3059\u308b\u3059\u3079\u3066\u306e\u30b3\u30e1\u30f3\u30c8\u3092\u8fd4\u3059<code>Comments</code>\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u30c6\u30b9\u30c8\u3057\u3066\u3001\u4f55\u3092\u8fd4\u3059\u304b\u3092\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff1a</p> <pre><code># \u7279\u5b9a\u306e\u30a4\u30b7\u30e5\u30fc\u306e\u30b3\u30e1\u30f3\u30c8\u3092\u53d6\u5f97\nissue_number = 2792\nurl = f\"https://api.github.com/repos/huggingface/datasets/issues/{issue_number}/comments\"\nresponse = requests.get(url, headers=headers)\nresponse.json()\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>[{'url': 'https://api.github.com/repos/huggingface/datasets/issues/comments/897594128',\n  'html_url': 'https://github.com/huggingface/datasets/pull/2792#issuecomment-897594128',\n  'issue_url': 'https://api.github.com/repos/huggingface/datasets/issues/2792',\n  'id': 897594128,\n  'node_id': 'IC_kwDODunzps41gDMQ',\n  'user': {'login': 'bhavitvyamalik',\n   'id': 19718818,\n   'node_id': 'MDQ6VXNlcjE5NzE4ODE4',\n   'avatar_url': 'https://avatars.githubusercontent.com/u/19718818?v=4',\n   'gravatar_id': '',\n   'url': 'https://api.github.com/users/bhavitvyamalik',\n   'html_url': 'https://github.com/bhavitvyamalik',\n   'followers_url': 'https://api.github.com/users/bhavitvyamalik/followers',\n   'following_url': 'https://api.github.com/users/bhavitvyamalik/following{/other_user}',\n   'gists_url': 'https://api.github.com/users/bhavitvyamalik/gists{/gist_id}',\n   'starred_url': 'https://api.github.com/users/bhavitvyamalik/starred{/owner}{/repo}',\n   'subscriptions_url': 'https://api.github.com/users/bhavitvyamalik/subscriptions',\n   'organizations_url': 'https://api.github.com/users/bhavitvyamalik/orgs',\n   'repos_url': 'https://api.github.com/users/bhavitvyamalik/repos',\n   'events_url': 'https://api.github.com/users/bhavitvyamalik/events{/privacy}',\n   'received_events_url': 'https://api.github.com/users/bhavitvyamalik/received_events',\n   'type': 'User',\n   'user_view_type': 'public',\n   'site_admin': False},\n  'created_at': '2021-08-12T12:21:52Z',\n  'updated_at': '2021-08-12T12:31:17Z',\n  'author_association': 'CONTRIBUTOR',\n  'body': \"@albertvillanova my tests are failing here:\\r\\n```\\r\\ndataset_name = 'gooaq'\\r\\n\\r\\n    def test_load_dataset(self, dataset_name):\\r\\n        configs = self.dataset_tester.load_all_configs(dataset_name, is_local=True)[:1]\\r\\n&gt;       self.dataset_tester.check_load_dataset(dataset_name, configs, is_local=True, use_local_dummy_data=True)\\r\\n\\r\\ntests/test_dataset_common.py:234: \\r\\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \\r\\ntests/test_dataset_common.py:187: in check_load_dataset\\r\\n    self.parent.assertTrue(len(dataset[split]) &gt; 0)\\r\\nE   AssertionError: False is not true\\r\\n```\\r\\nWhen I try loading dataset on local machine it works fine. Any suggestions on how can I avoid this error?\",\n  'reactions': {'url': 'https://api.github.com/repos/huggingface/datasets/issues/comments/897594128/reactions',\n   'total_count': 0,\n   '+1': 0,\n   '-1': 0,\n   'laugh': 0,\n   'hooray': 0,\n   'confused': 0,\n   'heart': 0,\n   'rocket': 0,\n   'eyes': 0},\n  'performed_via_github_app': None},\n {'url': 'https://api.github.com/repos/huggingface/datasets/issues/comments/898644889',\n  'html_url': 'https://github.com/huggingface/datasets/pull/2792#issuecomment-898644889',\n  'issue_url': 'https://api.github.com/repos/huggingface/datasets/issues/2792',\n  'id': 898644889,\n  'node_id': 'IC_kwDODunzps41kDuZ',\n  'user': {'login': 'bhavitvyamalik',\n   'id': 19718818,\n   'node_id': 'MDQ6VXNlcjE5NzE4ODE4',\n   'avatar_url': 'https://avatars.githubusercontent.com/u/19718818?v=4',\n   'gravatar_id': '',\n   'url': 'https://api.github.com/users/bhavitvyamalik',\n   'html_url': 'https://github.com/bhavitvyamalik',\n   'followers_url': 'https://api.github.com/users/bhavitvyamalik/followers',\n   'following_url': 'https://api.github.com/users/bhavitvyamalik/following{/other_user}',\n   'gists_url': 'https://api.github.com/users/bhavitvyamalik/gists{/gist_id}',\n   'starred_url': 'https://api.github.com/users/bhavitvyamalik/starred{/owner}{/repo}',\n   'subscriptions_url': 'https://api.github.com/users/bhavitvyamalik/subscriptions',\n   'organizations_url': 'https://api.github.com/users/bhavitvyamalik/orgs',\n   'repos_url': 'https://api.github.com/users/bhavitvyamalik/repos',\n   'events_url': 'https://api.github.com/users/bhavitvyamalik/events{/privacy}',\n   'received_events_url': 'https://api.github.com/users/bhavitvyamalik/received_events',\n   'type': 'User',\n   'user_view_type': 'public',\n   'site_admin': False},\n  'created_at': '2021-08-13T18:28:27Z',\n  'updated_at': '2021-08-13T18:28:27Z',\n  'author_association': 'CONTRIBUTOR',\n  'body': 'Thanks for the help, @albertvillanova! All tests are passing now.',\n  'reactions': {'url': 'https://api.github.com/repos/huggingface/datasets/issues/comments/898644889/reactions',\n   'total_count': 0,\n   '+1': 0,\n   '-1': 0,\n   'laugh': 0,\n   'hooray': 0,\n   'confused': 0,\n   'heart': 0,\n   'rocket': 0,\n   'eyes': 0},\n  'performed_via_github_app': None}]\n</code></pre></p> <p>\u30b3\u30e1\u30f3\u30c8\u304c<code>body</code>\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u4fdd\u5b58\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308b\u306e\u3067\u3001<code>response.json()</code>\u306e\u5404\u8981\u7d20\u306e<code>body</code>\u5185\u5bb9\u3092\u53d6\u308a\u51fa\u3059\u3053\u3068\u3067\u3001\u30a4\u30b7\u30e5\u30fc\u306b\u95a2\u9023\u3059\u308b\u3059\u3079\u3066\u306e\u30b3\u30e1\u30f3\u30c8\u3092\u8fd4\u3059\u7c21\u5358\u306a\u95a2\u6570\u3092\u66f8\u304d\u307e\u3057\u3087\u3046\uff1a</p> <pre><code># \u30a4\u30b7\u30e5\u30fc\u306e\u30b3\u30e1\u30f3\u30c8\u3092\u53d6\u5f97\u3059\u308b\u95a2\u6570\ndef get_comments(issue_number):\n    url = f\"https://api.github.com/repos/huggingface/datasets/issues/{issue_number}/comments\"\n    response = requests.get(url, headers=headers)\n    return [r[\"body\"] for r in response.json()]\n</code></pre> <p>\u3053\u308c\u3067\u826f\u3055\u305d\u3046\u306a\u306e\u3067\u3001<code>Dataset.map()</code>\u3092\u4f7f\u7528\u3057\u3066\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u5185\u306e\u5404\u30a4\u30b7\u30e5\u30fc\u306b\u65b0\u3057\u3044<code>comments</code>\u5217\u3092\u8ffd\u52a0\u3057\u307e\u3057\u3087\u3046\uff1a</p> <pre><code># \u30a4\u30f3\u30bf\u30fc\u30cd\u30c3\u30c8\u63a5\u7d9a\u306b\u3088\u3063\u3066\u306f\u3001\u6570\u5206\u304b\u304b\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059...\nissues_with_comments_dataset = issues_dataset.map(\n    lambda x: {\"comments\": get_comments(x[\"number\"])}\n)\n</code></pre> <p>\u3053\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u30ed\u30fc\u30ab\u30eb\u306b\u4fdd\u5b58\u3057\u307e\u3059\u3002</p> <pre><code># \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092JSONL\u5f62\u5f0f\u3067\u4fdd\u5b58\nissues_with_comments_dataset.to_json(\"issues_with_comments-dataset.jsonl\")\n</code></pre>","tags":["Hugging Face","Datasets","\u6a5f\u68b0\u5b66\u7fd2","\u30c7\u30fc\u30bf\u524d\u51e6\u7406","FAISS","\u610f\u5473\u691c\u7d22","NLP","Python"]},{"location":"LLM/06_the_huggingface_datasets_library/#faiss","title":"FAISS\u3092\u4f7f\u3063\u305f\u610f\u5473\u691c\u7d22","text":"","tags":["Hugging Face","Datasets","\u6a5f\u68b0\u5b66\u7fd2","\u30c7\u30fc\u30bf\u524d\u51e6\u7406","FAISS","\u610f\u5473\u691c\u7d22","NLP","Python"]},{"location":"LLM/06_the_huggingface_datasets_library/#_15","title":"\u610f\u5473\u691c\u7d22\u306e\u305f\u3081\u306e\u57cb\u3081\u8fbc\u307f","text":"<p>Transformer\u30d9\u30fc\u30b9\u306e\u8a00\u8a9e\u30e2\u30c7\u30eb\u306f\u3001\u30c6\u30ad\u30b9\u30c8\u306e\u30b9\u30d1\u30f3\u5185\u306e\u5404\u30c8\u30fc\u30af\u30f3\u3092_\u57cb\u3081\u8fbc\u307f\u30d9\u30af\u30c8\u30eb_\u3068\u3057\u3066\u8868\u73fe\u3057\u307e\u3059\u3002\u500b\u3005\u306e\u57cb\u3081\u8fbc\u307f\u30d9\u30af\u30c8\u30eb\u3092\u7d71\u5408\uff08\u30d7\u30fc\u30eb\uff09\u3059\u308b\u3053\u3068\u3067\u3001\u6587\u5168\u4f53\u3001\u6bb5\u843d\u3001\u3055\u3089\u306b\u306f\u6587\u66f8\u5168\u4f53\u306e\u30d9\u30af\u30c8\u30eb\u8868\u73fe\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u3089\u306e\u57cb\u3081\u8fbc\u307f\u306f\u3001\u5404\u57cb\u3081\u8fbc\u307f\u9593\u306e\u30c9\u30c3\u30c8\u7a4d\u985e\u4f3c\u5ea6\uff08\u307e\u305f\u306f\u4ed6\u306e\u985e\u4f3c\u5ea6\u30e1\u30c8\u30ea\u30c3\u30af\uff09\u3092\u8a08\u7b97\u3057\u3001\u6700\u3082\u91cd\u8907\u306e\u5927\u304d\u3044\u6587\u66f8\u3092\u8fd4\u3059\u3053\u3068\u3067\u3001\u30b3\u30fc\u30d1\u30b9\u5185\u306e\u985e\u4f3c\u6587\u66f8\u3092\u898b\u3064\u3051\u308b\u305f\u3081\u306b\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002</p> <p>\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u306f\u3001\u57cb\u3081\u8fbc\u307f\u3092\u4f7f\u7528\u3057\u3066\u610f\u5473\u691c\u7d22\u30a8\u30f3\u30b8\u30f3\u3092\u958b\u767a\u3057\u307e\u3059\u3002\u3053\u308c\u3089\u306e\u691c\u7d22\u30a8\u30f3\u30b8\u30f3\u306f\u3001\u30af\u30a8\u30ea\u5185\u306e\u30ad\u30fc\u30ef\u30fc\u30c9\u3068\u6587\u66f8\u3092\u30de\u30c3\u30c1\u30f3\u30b0\u3059\u308b\u3053\u3068\u306b\u57fa\u3065\u304f\u5f93\u6765\u306e\u30a2\u30d7\u30ed\u30fc\u30c1\u3088\u308a\u3082\u3044\u304f\u3064\u304b\u306e\u5229\u70b9\u304c\u3042\u308a\u307e\u3059\u3002</p>","tags":["Hugging Face","Datasets","\u6a5f\u68b0\u5b66\u7fd2","\u30c7\u30fc\u30bf\u524d\u51e6\u7406","FAISS","\u610f\u5473\u691c\u7d22","NLP","Python"]},{"location":"LLM/06_the_huggingface_datasets_library/#_16","title":"\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u8aad\u307f\u8fbc\u307f\u3068\u6e96\u5099","text":"<p>\u6700\u521d\u306b\u884c\u3046\u5fc5\u8981\u304c\u3042\u308b\u306e\u306f\u3001GitHub\u30a4\u30b7\u30e5\u30fc\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u3053\u3068\u306a\u306e\u3067\u3001\u3044\u3064\u3082\u306e\u3088\u3046\u306b<code>load_dataset()</code>\u95a2\u6570\u3092\u4f7f\u7528\u3057\u307e\u3057\u3087\u3046\uff1a</p> <pre><code># GitHub\u30a4\u30b7\u30e5\u30fc\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u8aad\u307f\u8fbc\u307f\nfrom datasets import load_dataset\n\nissues_dataset = load_dataset(\"lewtun/github-issues\", split=\"train\")\nissues_dataset\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>Repo card metadata block was not found. Setting CardData to empty.\n\nDataset({\n    features: ['url', 'repository_url', 'labels_url', 'comments_url', 'events_url', 'html_url', 'id', 'node_id', 'number', 'title', 'user', 'labels', 'state', 'locked', 'assignee', 'assignees', 'milestone', 'comments', 'created_at', 'updated_at', 'closed_at', 'author_association', 'active_lock_reason', 'pull_request', 'body', 'timeline_url', 'performed_via_github_app', 'is_pull_request'],\n    num_rows: 3019\n})\n</code></pre></p> <p>\u3053\u3053\u3067\u306f<code>load_dataset()</code>\u3067\u30c7\u30d5\u30a9\u30eb\u30c8\u306e<code>train</code>\u5206\u5272\u3092\u6307\u5b9a\u3057\u305f\u306e\u3067\u3001<code>DatasetDict</code>\u3067\u306f\u306a\u304f<code>Dataset</code>\u3092\u8fd4\u3057\u307e\u3059\u3002\u307e\u305a\u6700\u521d\u306b\u30d7\u30eb\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u3089\u306f\u30e6\u30fc\u30b6\u30fc\u30af\u30a8\u30ea\u306b\u7b54\u3048\u308b\u305f\u3081\u306b\u306f\u3081\u3063\u305f\u306b\u4f7f\u7528\u3055\u308c\u305a\u3001\u691c\u7d22\u30a8\u30f3\u30b8\u30f3\u306b\u30ce\u30a4\u30ba\u3092\u5c0e\u5165\u3059\u308b\u305f\u3081\u3067\u3059\u3002\u65e2\u306b\u3088\u304f\u77e5\u3089\u308c\u3066\u3044\u308b\u3088\u3046\u306b\u3001<code>Dataset.filter()</code>\u95a2\u6570\u3092\u4f7f\u7528\u3057\u3066\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u5185\u306e\u3053\u308c\u3089\u306e\u884c\u3092\u9664\u5916\u3067\u304d\u307e\u3059\u3002\u3064\u3044\u3067\u306b\u3001\u30b3\u30e1\u30f3\u30c8\u306e\u306a\u3044\u884c\u3082\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3057\u307e\u3057\u3087\u3046\u3002\u3053\u308c\u3089\u306f\u30e6\u30fc\u30b6\u30fc\u30af\u30a8\u30ea\u306b\u5bfe\u3059\u308b\u56de\u7b54\u3092\u63d0\u4f9b\u3057\u306a\u3044\u305f\u3081\u3067\u3059\uff1a</p> <pre><code># \u30d7\u30eb\u30ea\u30af\u30a8\u30b9\u30c8\u3068\u30b3\u30e1\u30f3\u30c8\u306a\u3057\u306e\u884c\u3092\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\nissues_dataset = issues_dataset.filter(\n    lambda x: (x[\"is_pull_request\"] == False and len(x[\"comments\"]) &gt; 0)\n)\nissues_dataset\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>Dataset({\n    features: ['url', 'repository_url', 'labels_url', 'comments_url', 'events_url', 'html_url', 'id', 'node_id', 'number', 'title', 'user', 'labels', 'state', 'locked', 'assignee', 'assignees', 'milestone', 'comments', 'created_at', 'updated_at', 'closed_at', 'author_association', 'active_lock_reason', 'pull_request', 'body', 'timeline_url', 'performed_via_github_app', 'is_pull_request'],\n    num_rows: 808\n})\n</code></pre></p> <p>\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u306f\u591a\u304f\u306e\u5217\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u691c\u7d22\u30a8\u30f3\u30b8\u30f3\u306e\u69cb\u7bc9\u306b\u5fc5\u8981\u306a\u3082\u306e\u306f\u3054\u304f\u4e00\u90e8\u3067\u3059\u3002\u691c\u7d22\u306e\u89b3\u70b9\u304b\u3089\u3001\u6700\u3082\u60c5\u5831\u4fa1\u5024\u306e\u9ad8\u3044\u5217\u306f<code>title</code>\u3001<code>body</code>\u3001<code>comments</code>\u3067\u3042\u308a\u3001<code>html_url</code>\u306f\u30bd\u30fc\u30b9\u30a4\u30b7\u30e5\u30fc\u3078\u306e\u30ea\u30f3\u30af\u3092\u63d0\u4f9b\u3057\u3066\u304f\u308c\u307e\u3059\u3002<code>Dataset.remove_columns()</code>\u95a2\u6570\u3092\u4f7f\u7528\u3057\u3066\u6b8b\u308a\u3092\u524a\u9664\u3057\u307e\u3057\u3087\u3046\uff1a</p> <pre><code># \u691c\u7d22\u306b\u5fc5\u8981\u306a\u5217\u306e\u307f\u3092\u4fdd\u6301\ncolumns = issues_dataset.column_names\ncolumns_to_keep = [\"title\", \"body\", \"html_url\", \"comments\"]\ncolumns_to_remove = set(columns_to_keep).symmetric_difference(columns)\nissues_dataset = issues_dataset.remove_columns(columns_to_remove)\nissues_dataset\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>Dataset({\n    features: ['html_url', 'title', 'comments', 'body'],\n    num_rows: 808\n})\n</code></pre></p> <p>\u57cb\u3081\u8fbc\u307f\u3092\u4f5c\u6210\u3059\u308b\u305f\u3081\u306b\u3001\u3053\u308c\u3089\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u306f\u6709\u7528\u306a\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u60c5\u5831\u304c\u542b\u307e\u308c\u308b\u3053\u3068\u304c\u591a\u3044\u305f\u3081\u3001\u5404\u30b3\u30e1\u30f3\u30c8\u306b\u30a4\u30b7\u30e5\u30fc\u306e\u30bf\u30a4\u30c8\u30eb\u3068\u672c\u6587\u3092\u62e1\u5f35\u3057\u307e\u3059\u3002<code>comments</code>\u5217\u306f\u73fe\u5728\u5404\u30a4\u30b7\u30e5\u30fc\u306e\u30b3\u30e1\u30f3\u30c8\u306e\u30ea\u30b9\u30c8\u306a\u306e\u3067\u3001\u5404\u884c\u304c<code>(html_url, title, body, comment)</code>\u30bf\u30d7\u30eb\u3067\u69cb\u6210\u3055\u308c\u308b\u3088\u3046\u306b\u5217\u3092\u300c\u5c55\u958b\u300d\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002Pandas\u3067\u306f\u3001\u30ea\u30b9\u30c8\u306e\u3088\u3046\u306a\u5217\u306e\u5404\u8981\u7d20\u306b\u5bfe\u3057\u3066\u65b0\u3057\u3044\u884c\u3092\u4f5c\u6210\u3057\u3001\u4ed6\u306e\u3059\u3079\u3066\u306e\u5217\u306e\u5024\u3092\u8907\u88fd\u3059\u308b<code>DataFrame.explode()</code>\u95a2\u6570\u3067\u3053\u308c\u3092\u5b9f\u884c\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u3092\u5b9f\u969b\u306b\u898b\u308b\u305f\u3081\u306b\u3001\u307e\u305aPandas <code>DataFrame</code>\u5f62\u5f0f\u306b\u5207\u308a\u66ff\u3048\u307e\u3057\u3087\u3046\uff1a</p> <pre><code># Pandas\u5f62\u5f0f\u306b\u5909\u63db\u3057\u3066\u30c7\u30fc\u30bf\u64cd\u4f5c\u3092\u884c\u3046\nissues_dataset.set_format(\"pandas\")\ndf = issues_dataset[:]\n</code></pre> <p>\u3053\u306e<code>DataFrame</code>\u306e\u6700\u521d\u306e\u884c\u3092\u8abf\u3079\u308b\u3068\u3001\u3053\u306e\u30a4\u30b7\u30e5\u30fc\u306b\u95a2\u9023\u3059\u308b4\u3064\u306e\u30b3\u30e1\u30f3\u30c8\u304c\u3042\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\uff1a</p> <pre><code># \u6700\u521d\u306e\u884c\u306e\u30b3\u30e1\u30f3\u30c8\u30ea\u30b9\u30c8\u3092\u78ba\u8a8d\ndf[\"comments\"][0].tolist()\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>['Cool, I think we can do both :)',\n '@lhoestq now the 2 are implemented.\\r\\n\\r\\nPlease note that for the the second protection, finally I have chosen to protect the master branch only from **merge commits** (see update comment above), so no need to disable/re-enable the protection on each release (direct commits, different from merge commits, can be pushed to the remote master branch; and eventually reverted without messing up the repo history).']\n</code></pre></p> <p><code>df</code>\u3092\u5c55\u958b\u3059\u308b\u3068\u3001\u3053\u308c\u3089\u306e\u30b3\u30e1\u30f3\u30c8\u306e\u305d\u308c\u305e\u308c\u306b\u5bfe\u3057\u30661\u884c\u305a\u3064\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u671f\u5f85\u3055\u308c\u307e\u3059\u3002\u305d\u308c\u304c\u5b9f\u969b\u306b\u305d\u3046\u306a\u306e\u304b\u3092\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff1a</p> <pre><code># \u30b3\u30e1\u30f3\u30c8\u3092\u5c55\u958b\u3057\u3066\u5404\u30b3\u30e1\u30f3\u30c8\u3092\u500b\u5225\u306e\u884c\u306b\u3059\u308b\ncomments_df = df.explode(\"comments\", ignore_index=True)\ncomments_df.head(4)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c:</p> \u30a4\u30f3\u30c7\u30c3\u30af\u30b9 html_url title comments body 0 https://github.com/huggingface/datasets/issues... Protect master branch Cool, I think we can do both :) After accidental merge commit (91c55355b634d0d... 1 https://github.com/huggingface/datasets/issues... Protect master branch @lhoestq now the 2 are implemented.\\r\\n\\r\\nPle... After accidental merge commit (91c55355b634d0d... 2 https://github.com/huggingface/datasets/issues... Backwards compatibility broken for cached data... Hi ! I guess the caching mechanism should have... ## Describe the bug\\r\\nAfter upgrading to data... 3 https://github.com/huggingface/datasets/issues... Backwards compatibility broken for cached data... If it's easy enough to implement, then yes ple... ## Describe the bug\\r\\nAfter upgrading to data... <p>\u7d20\u6674\u3089\u3057\u3044\uff01\u884c\u304c\u8907\u88fd\u3055\u308c\u3001<code>comments</code>\u5217\u306b\u500b\u5225\u306e\u30b3\u30e1\u30f3\u30c8\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\uff01Pandas\u3067\u306e\u4f5c\u696d\u304c\u7d42\u308f\u3063\u305f\u306e\u3067\u3001\u30e1\u30e2\u30ea\u5185\u306e<code>DataFrame</code>\u3092\u30ed\u30fc\u30c9\u3057\u3066\u7d20\u65e9\u304f<code>Dataset</code>\u306b\u623b\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a</p> <pre><code># DataFrame\u3092Dataset\u306b\u5909\u63db\nfrom datasets import Dataset\n\ncomments_dataset = Dataset.from_pandas(comments_df)\ncomments_dataset\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>Dataset({\n    features: ['html_url', 'title', 'comments', 'body'],\n    num_rows: 2964\n})\n</code></pre></p> <p>\u30b3\u30e1\u30f3\u30c8\u3054\u3068\u306b1\u884c\u304c\u3067\u304d\u305f\u306e\u3067\u3001\u30b3\u30e1\u30f3\u30c8\u3042\u305f\u308a\u306e\u5358\u8a9e\u6570\u3092\u542b\u3080\u65b0\u3057\u3044<code>comments_length</code>\u5217\u3092\u4f5c\u6210\u3057\u307e\u3057\u3087\u3046\uff1a</p> <pre><code># \u30b3\u30e1\u30f3\u30c8\u306e\u9577\u3055\u3092\u8a08\u7b97\u3059\u308b\u65b0\u3057\u3044\u5217\u3092\u8ffd\u52a0\ncomments_dataset = comments_dataset.map(\n    lambda x: {\"comment_length\": len(x[\"comments\"].split())}\n)\n</code></pre> <p>\u3053\u306e\u65b0\u3057\u3044\u5217\u3092\u4f7f\u7528\u3057\u3066\u77ed\u3044\u30b3\u30e1\u30f3\u30c8\u3092\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u3089\u306b\u306f\u901a\u5e38\u300ccc @lewtun\u300d\u3084\u300cThanks!\u300d\u306a\u3069\u306e\u691c\u7d22\u30a8\u30f3\u30b8\u30f3\u306b\u95a2\u9023\u3057\u306a\u3044\u3082\u306e\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002\u30d5\u30a3\u30eb\u30bf\u306b\u9078\u629e\u3059\u308b\u6b63\u78ba\u306a\u6570\u306f\u3042\u308a\u307e\u305b\u3093\u304c\u300115\u8a9e\u7a0b\u5ea6\u304c\u826f\u3044\u30b9\u30bf\u30fc\u30c8\u306e\u3088\u3046\u3067\u3059\uff1a</p> <pre><code># 15\u8a9e\u672a\u6e80\u306e\u77ed\u3044\u30b3\u30e1\u30f3\u30c8\u3092\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\ncomments_dataset = comments_dataset.filter(lambda x: x[\"comment_length\"] &gt; 15)\ncomments_dataset\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>Filter:   0%|          | 0/2964 [00:00&lt;?, ? examples/s]\n\nDataset({\n    features: ['html_url', 'title', 'comments', 'body', 'comment_length'],\n    num_rows: 2175\n})\n</code></pre></p> <p>\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u5c11\u3057\u30af\u30ea\u30fc\u30f3\u30a2\u30c3\u30d7\u3057\u305f\u306e\u3067\u3001\u30a4\u30b7\u30e5\u30fc\u306e\u30bf\u30a4\u30c8\u30eb\u3001\u8aac\u660e\u3001\u30b3\u30e1\u30f3\u30c8\u3092\u65b0\u3057\u3044<code>text</code>\u5217\u3067\u9023\u7d50\u3057\u307e\u3057\u3087\u3046\u3002\u3044\u3064\u3082\u306e\u3088\u3046\u306b\u3001<code>Dataset.map()</code>\u306b\u6e21\u3059\u3053\u3068\u304c\u3067\u304d\u308b\u7c21\u5358\u306a\u95a2\u6570\u3092\u66f8\u304d\u307e\u3059\uff1a</p> <pre><code># \u30bf\u30a4\u30c8\u30eb\u3001\u672c\u6587\u3001\u30b3\u30e1\u30f3\u30c8\u3092\u9023\u7d50\u3059\u308b\u95a2\u6570\ndef concatenate_text(examples):\n    return {\n        \"text\": examples[\"title\"]\n        + \" \\n \"\n        + examples[\"body\"]\n        + \" \\n \"\n        + examples[\"comments\"]\n    }\n\ncomments_dataset = comments_dataset.map(concatenate_text)\n</code></pre> <p>\u3064\u3044\u306b\u57cb\u3081\u8fbc\u307f\u3092\u4f5c\u6210\u3059\u308b\u6e96\u5099\u304c\u3067\u304d\u307e\u3057\u305f\uff01\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002</p>","tags":["Hugging Face","Datasets","\u6a5f\u68b0\u5b66\u7fd2","\u30c7\u30fc\u30bf\u524d\u51e6\u7406","FAISS","\u610f\u5473\u691c\u7d22","NLP","Python"]},{"location":"LLM/06_the_huggingface_datasets_library/#_17","title":"\u30c6\u30ad\u30b9\u30c8\u57cb\u3081\u8fbc\u307f\u306e\u4f5c\u6210","text":"<p><code>AutoModel</code>\u30af\u30e9\u30b9\u3092\u4f7f\u7528\u3057\u3066\u30c8\u30fc\u30af\u30f3\u57cb\u3081\u8fbc\u307f\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\u30e2\u30c7\u30eb\u3092\u30ed\u30fc\u30c9\u3059\u308b\u305f\u3081\u306e\u9069\u5207\u306a\u30c1\u30a7\u30c3\u30af\u30dd\u30a4\u30f3\u30c8\u3092\u9078\u629e\u3059\u308b\u3060\u3051\u3067\u3059\u3002\u5e78\u3044\u3001\u57cb\u3081\u8fbc\u307f\u306e\u4f5c\u6210\u306b\u7279\u5316\u3057\u305f<code>sentence-transformers</code>\u3068\u3044\u3046\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u3042\u308a\u307e\u3059\u3002\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3067\u8aac\u660e\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u306b\u3001\u79c1\u305f\u3061\u306e\u30e6\u30fc\u30b9\u30b1\u30fc\u30b9\u306f_\u975e\u5bfe\u79f0\u610f\u5473\u691c\u7d22_\u306e\u4f8b\u3067\u3059\u3002\u77ed\u3044\u30af\u30a8\u30ea\u304c\u3042\u308a\u3001\u305d\u306e\u7b54\u3048\u3092\u30a4\u30b7\u30e5\u30fc\u30b3\u30e1\u30f3\u30c8\u306e\u3088\u3046\u306a\u3088\u308a\u9577\u3044\u6587\u66f8\u3067\u898b\u3064\u3051\u305f\u3044\u304b\u3089\u3067\u3059\u3002\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u4fbf\u5229\u306a\u30e2\u30c7\u30eb\u6982\u8981\u8868\u306b\u3088\u308b\u3068\u3001<code>multi-qa-mpnet-base-dot-v1</code>\u30c1\u30a7\u30c3\u30af\u30dd\u30a4\u30f3\u30c8\u304c\u610f\u5473\u691c\u7d22\u3067\u6700\u9ad8\u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3092\u6301\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u305d\u308c\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u540c\u3058\u30c1\u30a7\u30c3\u30af\u30dd\u30a4\u30f3\u30c8\u3092\u4f7f\u7528\u3057\u3066\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3082\u30ed\u30fc\u30c9\u3057\u307e\u3059\uff1a</p> <pre><code># \u610f\u5473\u691c\u7d22\u7528\u306e\u30e2\u30c7\u30eb\u3068\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3092\u30ed\u30fc\u30c9\nfrom transformers import AutoTokenizer, AutoModel\n\nmodel_ckpt = \"sentence-transformers/multi-qa-mpnet-base-dot-v1\"\ntokenizer = AutoTokenizer.from_pretrained(model_ckpt)\nmodel = AutoModel.from_pretrained(model_ckpt)\n</code></pre> <p>\u57cb\u3081\u8fbc\u307f\u30d7\u30ed\u30bb\u30b9\u3092\u9ad8\u901f\u5316\u3059\u308b\u305f\u3081\u3001\u30e2\u30c7\u30eb\u3068\u5165\u529b\u3092GPU\u30c7\u30d0\u30a4\u30b9\u306b\u914d\u7f6e\u3059\u308b\u3068\u5f79\u7acb\u3061\u307e\u3059\u3002\u4eca\u305d\u308c\u3092\u884c\u3044\u307e\u3057\u3087\u3046\uff1a</p> <pre><code># \u30e2\u30c7\u30eb\u3092GPU\u30c7\u30d0\u30a4\u30b9\u306b\u79fb\u52d5\nimport torch\n\ndevice = torch.device(\"mps\")\nmodel.to(device)\n</code></pre> <p>\u524d\u8ff0\u306e\u3088\u3046\u306b\u3001GitHub\u30a4\u30b7\u30e5\u30fc\u30b3\u30fc\u30d1\u30b9\u306e\u5404\u30a8\u30f3\u30c8\u30ea\u3092\u5358\u4e00\u306e\u30d9\u30af\u30c8\u30eb\u3068\u3057\u3066\u8868\u73fe\u3057\u305f\u3044\u306e\u3067\u3001\u30c8\u30fc\u30af\u30f3\u57cb\u3081\u8fbc\u307f\u3092\u4f55\u3089\u304b\u306e\u65b9\u6cd5\u3067\u300c\u30d7\u30fc\u30eb\u300d\u307e\u305f\u306f\u5e73\u5747\u5316\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u4eba\u6c17\u306e\u3042\u308b\u30a2\u30d7\u30ed\u30fc\u30c1\u306e1\u3064\u306f\u3001\u30e2\u30c7\u30eb\u306e\u51fa\u529b\u306b\u5bfe\u3057\u3066CLS\u30d7\u30fc\u30ea\u30f3\u30b0\u3092\u5b9f\u884c\u3059\u308b\u3053\u3068\u3067\u3059\u3002\u3053\u308c\u306f\u3001\u7279\u5225\u306a<code>[CLS]</code>\u30c8\u30fc\u30af\u30f3\u306e\u6700\u5f8c\u306e\u96a0\u308c\u72b6\u614b\u3092\u5358\u7d14\u306b\u53ce\u96c6\u3059\u308b\u3082\u306e\u3067\u3059\u3002\u4ee5\u4e0b\u306e\u95a2\u6570\u304c\u3053\u308c\u3092\u5b9f\u884c\u3057\u3066\u304f\u308c\u307e\u3059\uff1a</p> <pre><code># CLS\u30d7\u30fc\u30ea\u30f3\u30b0\u3092\u5b9f\u884c\u3059\u308b\u95a2\u6570\ndef cls_pooling(model_output):\n    return model_output.last_hidden_state[:, 0]\n</code></pre> <p>\u6b21\u306b\u3001\u6587\u66f8\u306e\u30ea\u30b9\u30c8\u3092\u30c8\u30fc\u30af\u30f3\u5316\u3057\u3001\u30c6\u30f3\u30bd\u30eb\u3092GPU\u306b\u914d\u7f6e\u3057\u3001\u30e2\u30c7\u30eb\u306b\u9001\u308a\u3001\u6700\u5f8c\u306b\u51fa\u529b\u306bCLS\u30d7\u30fc\u30ea\u30f3\u30b0\u3092\u9069\u7528\u3059\u308b\u30d8\u30eb\u30d1\u30fc\u95a2\u6570\u3092\u4f5c\u6210\u3057\u307e\u3059\uff1a</p> <pre><code># \u57cb\u3081\u8fbc\u307f\u3092\u53d6\u5f97\u3059\u308b\u30d8\u30eb\u30d1\u30fc\u95a2\u6570\ndef get_embeddings(text_list):\n    encoded_input = tokenizer(\n        text_list, padding=True, truncation=True, return_tensors=\"pt\"\n    )\n    encoded_input = {k: v.to(device) for k, v in encoded_input.items()}\n    model_output = model(**encoded_input)\n    return cls_pooling(model_output)\n</code></pre> <p>\u30b3\u30fc\u30d1\u30b9\u306e\u6700\u521d\u306e\u30c6\u30ad\u30b9\u30c8\u30a8\u30f3\u30c8\u30ea\u3092\u6e21\u3057\u3066\u51fa\u529b\u5f62\u72b6\u3092\u8abf\u3079\u308b\u3053\u3068\u3067\u3001\u95a2\u6570\u304c\u52d5\u4f5c\u3059\u308b\u3053\u3068\u3092\u30c6\u30b9\u30c8\u3067\u304d\u307e\u3059\uff1a</p> <pre><code># \u57cb\u3081\u8fbc\u307f\u95a2\u6570\u3092\u30c6\u30b9\u30c8\nembedding = get_embeddings(comments_dataset[\"text\"][0])\nembedding.shape\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>torch.Size([1, 768])\n</code></pre></p> <p>\u7d20\u6674\u3089\u3057\u3044\uff01\u30b3\u30fc\u30d1\u30b9\u306e\u6700\u521d\u306e\u30a8\u30f3\u30c8\u30ea\u3092768\u6b21\u5143\u30d9\u30af\u30c8\u30eb\u306b\u5909\u63db\u3057\u307e\u3057\u305f\uff01<code>Dataset.map()</code>\u3092\u4f7f\u7528\u3057\u3066<code>get_embeddings()</code>\u95a2\u6570\u3092\u30b3\u30fc\u30d1\u30b9\u306e\u5404\u884c\u306b\u9069\u7528\u3067\u304d\u308b\u306e\u3067\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u65b0\u3057\u3044<code>embeddings</code>\u5217\u3092\u4f5c\u6210\u3057\u307e\u3057\u3087\u3046\uff1a</p> <pre><code># \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u5168\u4f53\u306e\u57cb\u3081\u8fbc\u307f\u3092\u4f5c\u6210\nembeddings_dataset = comments_dataset.map(\n    lambda x: {\"embeddings\": get_embeddings(x[\"text\"]).detach().cpu().numpy()[0]}\n)\n</code></pre> <p>\u57cb\u3081\u8fbc\u307f\u3092NumPy\u914d\u5217\u306b\u5909\u63db\u3057\u3066\u3044\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u3053\u308c\u306f\u3001FAISS\u3067\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u4ed8\u3051\u3088\u3046\u3068\u3059\u308b\u3068\u304d\u306bHugging Face Datasets\u304c\u3053\u306e\u5f62\u5f0f\u3092\u8981\u6c42\u3059\u308b\u305f\u3081\u3067\u3059\u3002\u6b21\u306b\u3053\u308c\u3092\u884c\u3044\u307e\u3059\u3002</p>","tags":["Hugging Face","Datasets","\u6a5f\u68b0\u5b66\u7fd2","\u30c7\u30fc\u30bf\u524d\u51e6\u7406","FAISS","\u610f\u5473\u691c\u7d22","NLP","Python"]},{"location":"LLM/06_the_huggingface_datasets_library/#faiss_1","title":"\u52b9\u7387\u7684\u306a\u985e\u4f3c\u5ea6\u691c\u7d22\u306e\u305f\u3081\u306eFAISS","text":"<p>\u57cb\u3081\u8fbc\u307f\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304c\u3067\u304d\u305f\u306e\u3067\u3001\u305d\u308c\u3089\u3092\u691c\u7d22\u3059\u308b\u65b9\u6cd5\u304c\u5fc5\u8981\u3067\u3059\u3002\u3053\u308c\u3092\u884c\u3046\u305f\u3081\u306b\u3001Hugging Face Datasets\u306e_FAISS\u30a4\u30f3\u30c7\u30c3\u30af\u30b9_\u3068\u547c\u3070\u308c\u308b\u7279\u5225\u306a\u30c7\u30fc\u30bf\u69cb\u9020\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002FAISS\uff08Facebook AI Similarity Search\u306e\u7565\uff09\u306f\u3001\u57cb\u3081\u8fbc\u307f\u30d9\u30af\u30c8\u30eb\u3092\u7d20\u65e9\u304f\u691c\u7d22\u304a\u3088\u3073\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3059\u308b\u305f\u3081\u306e\u52b9\u7387\u7684\u306a\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u63d0\u4f9b\u3059\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002</p> <p>FAISS\u306e\u80cc\u5f8c\u306b\u3042\u308b\u57fa\u672c\u7684\u306a\u30a2\u30a4\u30c7\u30a2\u306f\u3001\u5165\u529b\u57cb\u3081\u8fbc\u307f\u3068\u985e\u4f3c\u3057\u3066\u3044\u308b\u57cb\u3081\u8fbc\u307f\u3092\u898b\u3064\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u308b_\u30a4\u30f3\u30c7\u30c3\u30af\u30b9_\u3068\u547c\u3070\u308c\u308b\u7279\u5225\u306a\u30c7\u30fc\u30bf\u69cb\u9020\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u3067\u3059\u3002Hugging Face Datasets\u3067FAISS\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u4f5c\u6210\u3059\u308b\u306e\u306f\u7c21\u5358\u3067\u3059\u3002<code>Dataset.add_faiss_index()</code>\u95a2\u6570\u3092\u4f7f\u7528\u3057\u3001\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u3069\u306e\u5217\u3092\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u5316\u3057\u305f\u3044\u304b\u3092\u6307\u5b9a\u3057\u307e\u3059\uff1a</p> <pre><code># FAISS\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u4f5c\u6210\nembeddings_dataset.add_faiss_index(column=\"embeddings\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>Dataset({\n    features: ['html_url', 'title', 'comments', 'body', 'comment_length', 'text', 'embeddings'],\n    num_rows: 2175\n})\n</code></pre></p> <p><code>Dataset.get_nearest_examples()</code>\u95a2\u6570\u3067\u6700\u8fd1\u508d\u691c\u7d22\u3092\u884c\u3046\u3053\u3068\u3067\u3001\u3053\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3067\u30af\u30a8\u30ea\u3092\u5b9f\u884c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\u307e\u305a\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u8cea\u554f\u3092\u57cb\u3081\u8fbc\u3080\u3053\u3068\u3067\u3053\u308c\u3092\u30c6\u30b9\u30c8\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff1a</p> <pre><code># \u8cea\u554f\u3092\u57cb\u3081\u8fbc\u307f\u30d9\u30af\u30c8\u30eb\u306b\u5909\u63db\nquestion = \"How can I load a dataset offline?\"\nquestion_embedding = get_embeddings([question]).cpu().detach().numpy()\nquestion_embedding.shape\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>(1, 768)\n</code></pre></p> <p>\u6587\u66f8\u3068\u540c\u69d8\u306b\u3001\u30af\u30a8\u30ea\u3092\u8868\u3059768\u6b21\u5143\u30d9\u30af\u30c8\u30eb\u304c\u3067\u304d\u307e\u3057\u305f\u3002\u3053\u308c\u3092\u30b3\u30fc\u30d1\u30b9\u5168\u4f53\u3068\u6bd4\u8f03\u3057\u3066\u6700\u3082\u985e\u4f3c\u3057\u305f\u57cb\u3081\u8fbc\u307f\u3092\u898b\u3064\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a</p> <pre><code># \u6700\u3082\u985e\u4f3c\u3057\u305f\u4f8b\u3092\u691c\u7d22\nscores, samples = embeddings_dataset.get_nearest_examples(\n    \"embeddings\", question_embedding, k=5\n)\n</code></pre> <p><code>Dataset.get_nearest_examples()</code>\u95a2\u6570\u306f\u3001\u30af\u30a8\u30ea\u3068\u6587\u66f8\u9593\u306e\u91cd\u8907\u3092\u30e9\u30f3\u30af\u4ed8\u3051\u3059\u308b\u30b9\u30b3\u30a2\u3068\u3001\u5bfe\u5fdc\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u30bb\u30c3\u30c8\uff08\u3053\u3053\u3067\u306f\u4e0a\u4f4d5\u3064\u306e\u30de\u30c3\u30c1\uff09\u306e\u30bf\u30d7\u30eb\u3092\u8fd4\u3057\u307e\u3059\u3002\u3053\u308c\u3089\u3092<code>pandas.DataFrame</code>\u306b\u96c6\u3081\u3066\u7c21\u5358\u306b\u30bd\u30fc\u30c8\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u3087\u3046\uff1a</p> <pre><code># \u7d50\u679c\u3092DataFrame\u306b\u6574\u7406\nimport pandas as pd\n\nsamples_df = pd.DataFrame.from_dict(samples)\nsamples_df[\"scores\"] = scores\nsamples_df.sort_values(\"scores\", ascending=False, inplace=True)\n</code></pre> <p>\u6700\u521d\u306e\u6570\u884c\u3092\u53cd\u5fa9\u51e6\u7406\u3057\u3066\u3001\u30af\u30a8\u30ea\u304c\u5229\u7528\u53ef\u80fd\u306a\u30b3\u30e1\u30f3\u30c8\u3068\u3069\u306e\u7a0b\u5ea6\u3046\u307e\u304f\u30de\u30c3\u30c1\u3057\u305f\u304b\u3092\u78ba\u8a8d\u3067\u304d\u307e\u3059\uff1a</p> <pre><code># \u691c\u7d22\u7d50\u679c\u3092\u8868\u793a\nfor _, row in samples_df.iterrows():\n    print(f\"\u30b3\u30e1\u30f3\u30c8: {row.comments}\")\n    print(f\"\u30b9\u30b3\u30a2: {row.scores}\")\n    print(f\"\u30bf\u30a4\u30c8\u30eb: {row.title}\")\n    print(f\"URL: {row.html_url}\")\n    print(\"=\" * 50)\n    print()\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>    COMMENT: Requiring online connection is a deal breaker in some cases unfortunately so it'd be great if offline mode is added similar to how `transformers` loads models offline fine.\n\n    @mandubian's second bullet point suggests that there's a workaround allowing you to use your offline (custom?) dataset with `datasets`. Could you please elaborate on how that should look like?\n    SCORE: 25.50501251220703\n    TITLE: Discussion using datasets in offline mode\n    URL: https://github.com/huggingface/datasets/issues/824\n    ==================================================\n\n    COMMENT: The local dataset builders (csv, text , json and pandas) are now part of the `datasets` package since #1726 :)\n    You can now use them offline\n    ```python\n    datasets = load_dataset('text', data_files=data_files)\n    ```\n\n    We'll do a new release soon\n    SCORE: 24.55551528930664\n    TITLE: Discussion using datasets in offline mode\n    URL: https://github.com/huggingface/datasets/issues/824\n    ==================================================\n\n    COMMENT: I opened a PR that allows to reload modules that have already been loaded once even if there's no internet.\n\n    Let me know if you know other ways that can make the offline mode experience better. I'd be happy to add them :) \n\n    I already note the \"freeze\" modules option, to prevent local modules updates. It would be a cool feature.\n\n    ----------\n\n    &gt; @mandubian's second bullet point suggests that there's a workaround allowing you to use your offline (custom?) dataset with `datasets`. Could you please elaborate on how that should look like?\n\n    Indeed `load_dataset` allows to load remote dataset script (squad, glue, etc.) but also you own local ones.\n    For example if you have a dataset script at `./my_dataset/my_dataset.py` then you can do\n    ```python\n    load_dataset(\"./my_dataset\")\n    ```\n    and the dataset script will generate your dataset once and for all.\n\n    ----------\n\n    About I'm looking into having `csv`, `json`, `text`, `pandas` dataset builders already included in the `datasets` package, so that they are available offline by default, as opposed to the other datasets that require the script to be downloaded.\n    cf #1724 \n    SCORE: 24.14898681640625\n    TITLE: Discussion using datasets in offline mode\n    URL: https://github.com/huggingface/datasets/issues/824\n    ==================================================\n\n    COMMENT: &gt; here is my way to load a dataset offline, but it **requires** an online machine\n    &gt; \n    &gt; 1. (online machine)\n    &gt; \n    &gt; ```\n    &gt; \n    &gt; import datasets\n    &gt; \n    &gt; data = datasets.load_dataset(...)\n    &gt; \n    &gt; data.save_to_disk(/YOUR/DATASET/DIR)\n    &gt; \n    &gt; ```\n    &gt; \n    &gt; 2. copy the dir from online to the offline machine\n    &gt; \n    &gt; 3. (offline machine)\n    &gt; \n    &gt; ```\n    &gt; \n    &gt; import datasets\n    &gt; \n    &gt; data = datasets.load_from_disk(/SAVED/DATA/DIR)\n    &gt; \n    &gt; ```\n    &gt; \n    &gt; \n    &gt; \n    &gt; HTH.\n\n\n    SCORE: 22.894004821777344\n    TITLE: Discussion using datasets in offline mode\n    URL: https://github.com/huggingface/datasets/issues/824\n    ==================================================\n\n    COMMENT: here is my way to load a dataset offline, but it **requires** an online machine\n    1. (online machine)\n    ```\n    import datasets\n    data = datasets.load_dataset(...)\n    data.save_to_disk(/YOUR/DATASET/DIR)\n    ```\n    2. copy the dir from online to the offline machine\n    3. (offline machine)\n    ```\n    import datasets\n    data = datasets.load_from_disk(/SAVED/DATA/DIR)\n    ```\n\n    HTH.\n    SCORE: 22.406654357910156\n    TITLE: Discussion using datasets in offline mode\n    URL: https://github.com/huggingface/datasets/issues/824\n    ==================================================\n</code></pre></p> <p>\u60aa\u304f\u3042\u308a\u307e\u305b\u3093\uff012\u756a\u76ee\u306e\u30d2\u30c3\u30c8\u304c\u30af\u30a8\u30ea\u306b\u30de\u30c3\u30c1\u3057\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002</p>","tags":["Hugging Face","Datasets","\u6a5f\u68b0\u5b66\u7fd2","\u30c7\u30fc\u30bf\u524d\u51e6\u7406","FAISS","\u610f\u5473\u691c\u7d22","NLP","Python"]},{"location":"LLM/06_the_huggingface_datasets_library/#_18","title":"\u307e\u3068\u3081","text":"<p>\u3053\u306e\u8a18\u4e8b\u3067\u306f\u3001Hugging Face Datasets\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u5305\u62ec\u7684\u306a\u4f7f\u7528\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3057\u305f\u3002\u4e3b\u306a\u5b66\u7fd2\u30dd\u30a4\u30f3\u30c8\u3092\u632f\u308a\u8fd4\u3063\u3066\u307f\u307e\u3057\u3087\u3046\uff1a</p> <p>\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u8aad\u307f\u8fbc\u307f\u3068\u64cd\u4f5c - \u30ed\u30fc\u30ab\u30eb\u304a\u3088\u3073\u30ea\u30e2\u30fc\u30c8\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u8aad\u307f\u8fbc\u307f\u65b9\u6cd5 - CSV\u3001JSON\u3001TSV\u3001Pandas\u306a\u3069\u69d8\u3005\u306a\u5f62\u5f0f\u3078\u306e\u5bfe\u5fdc - \u81ea\u52d5\u89e3\u51cd\u6a5f\u80fd\u306b\u3088\u308b\u52b9\u7387\u7684\u306a\u30d5\u30a1\u30a4\u30eb\u51e6\u7406</p> <p>\u30c7\u30fc\u30bf\u306e\u524d\u51e6\u7406\u3068\u30af\u30ea\u30fc\u30cb\u30f3\u30b0 - <code>Dataset.map()</code>\u3092\u4f7f\u7528\u3057\u305f\u52b9\u7387\u7684\u306a\u30c7\u30fc\u30bf\u5909\u63db - \u30d0\u30c3\u30c1\u51e6\u7406\u3068\u30de\u30eb\u30c1\u30d7\u30ed\u30bb\u30c3\u30b7\u30f3\u30b0\u306b\u3088\u308b\u9ad8\u901f\u5316 - Pandas\u3068\u306e\u76f8\u4e92\u904b\u7528\u6027\u306b\u3088\u308b\u9ad8\u5ea6\u306a\u30c7\u30fc\u30bf\u64cd\u4f5c</p> <p>\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u4fdd\u5b58\u3068\u7ba1\u7406 - Arrow\u3001CSV\u3001JSON\u5f62\u5f0f\u3067\u306e\u4fdd\u5b58\u30aa\u30d7\u30b7\u30e7\u30f3 - \u691c\u8a3c\u30bb\u30c3\u30c8\u306e\u4f5c\u6210\u306b\u3088\u308b\u9069\u5207\u306a\u30e2\u30c7\u30eb\u8a55\u4fa1\u4f53\u5236\u306e\u69cb\u7bc9 - \u30e1\u30e2\u30ea\u52b9\u7387\u7684\u306a\u30c7\u30fc\u30bf\u7ba1\u7406\u624b\u6cd5</p> <p>\u5b9f\u8df5\u7684\u306a\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3 - GitHub API\u3092\u4f7f\u7528\u3057\u305f\u72ec\u81ea\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u4f5c\u6210 - FAISS\u3092\u6d3b\u7528\u3057\u305f\u9ad8\u901f\u306a\u610f\u5473\u691c\u7d22\u30b7\u30b9\u30c6\u30e0\u306e\u69cb\u7bc9 - \u30c8\u30e9\u30f3\u30b9\u30d5\u30a9\u30fc\u30de\u30fc\u30e2\u30c7\u30eb\u306b\u3088\u308b\u30c6\u30ad\u30b9\u30c8\u57cb\u3081\u8fbc\u307f\u306e\u751f\u6210</p>","tags":["Hugging Face","Datasets","\u6a5f\u68b0\u5b66\u7fd2","\u30c7\u30fc\u30bf\u524d\u51e6\u7406","FAISS","\u610f\u5473\u691c\u7d22","NLP","Python"]},{"location":"LLM/06_the_huggingface_datasets_library/#_19","title":"\u6b21\u306e\u30b9\u30c6\u30c3\u30d7","text":"<p>\u3053\u306e\u8a18\u4e8b\u3067\u5b66\u3093\u3060\u6280\u8853\u3092\u6d3b\u7528\u3057\u3066\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u767a\u5c55\u7684\u306a\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u53d6\u308a\u7d44\u3080\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a</p> <ul> <li>\u3088\u308a\u5927\u898f\u6a21\u306a\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3067\u306e\u5206\u6563\u51e6\u7406</li> <li>\u30ab\u30b9\u30bf\u30e0\u57cb\u3081\u8fbc\u307f\u30e2\u30c7\u30eb\u306e\u4f5c\u6210\u3068\u6700\u9069\u5316</li> <li>\u30de\u30eb\u30c1\u30e2\u30fc\u30c0\u30eb\u691c\u7d22\u30b7\u30b9\u30c6\u30e0\u306e\u69cb\u7bc9</li> <li>\u30b9\u30c8\u30ea\u30fc\u30df\u30f3\u30b0\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u51e6\u7406</li> </ul>","tags":["Hugging Face","Datasets","\u6a5f\u68b0\u5b66\u7fd2","\u30c7\u30fc\u30bf\u524d\u51e6\u7406","FAISS","\u610f\u5473\u691c\u7d22","NLP","Python"]},{"location":"LLM/06_the_huggingface_datasets_library/#_20","title":"\u53c2\u8003\u8cc7\u6599","text":"<ul> <li>Hugging Face Datasets\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8</li> <li>FAISS\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8</li> <li>Sentence Transformers\u30e9\u30a4\u30d6\u30e9\u30ea</li> <li>Apache Arrow\u4ed5\u69d8</li> <li>GitHub REST API\u4ed5\u69d8</li> </ul>","tags":["Hugging Face","Datasets","\u6a5f\u68b0\u5b66\u7fd2","\u30c7\u30fc\u30bf\u524d\u51e6\u7406","FAISS","\u610f\u5473\u691c\u7d22","NLP","Python"]},{"location":"LLM/ClassicalNLP/71_token_classification/","title":"Transformers\u3092\u4f7f\u3063\u305f\u30c8\u30fc\u30af\u30f3\u5206\u985e\uff1a\u56fa\u6709\u8868\u73fe\u8a8d\u8b58\uff08NER\uff09\u306e\u5b9f\u8df5\u30ac\u30a4\u30c9","text":"","tags":["\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","BERT","\u56fa\u6709\u8868\u73fe\u8a8d\u8b58","HuggingFace","Transformers"]},{"location":"LLM/ClassicalNLP/71_token_classification/#_1","title":"\u6982\u8981","text":"<p>\u3053\u306e\u8a18\u4e8b\u3067\u306f\u3001\u30c8\u30fc\u30af\u30f3\u5206\u985e\uff08Token Classification\uff09\u306b\u3064\u3044\u3066\u8a73\u3057\u304f\u89e3\u8aac\u3057\u307e\u3059\u3002\u7279\u306b\u56fa\u6709\u8868\u73fe\u8a8d\u8b58\uff08Named Entity Recognition, NER\uff09\u306b\u7126\u70b9\u3092\u5f53\u3066\u3001HuggingFace\u306eTransformers\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3063\u3066BERT\u30e2\u30c7\u30eb\u3092\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3059\u308b\u65b9\u6cd5\u3092\u5b9f\u8df5\u7684\u306b\u5b66\u7fd2\u3057\u307e\u3059\u3002</p> <p>\u53c2\u8003\u8cc7\u6599</p> <p>\u672c\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306f Hugging Face LLM Course \u3092\u53c2\u8003\u306b\u3001\u65e5\u672c\u8a9e\u3067\u5b66\u7fd2\u5185\u5bb9\u3092\u307e\u3068\u3081\u305f\u500b\u4eba\u7684\u306a\u5b66\u7fd2\u30ce\u30fc\u30c8\u3067\u3059\u3002\u8a73\u7d30\u306a\u5185\u5bb9\u3084\u6700\u65b0\u60c5\u5831\u306b\u3064\u3044\u3066\u306f\u3001\u539f\u6587\u3082\u4f75\u305b\u3066\u3054\u53c2\u7167\u304f\u3060\u3055\u3044\u3002</p>","tags":["\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","BERT","\u56fa\u6709\u8868\u73fe\u8a8d\u8b58","HuggingFace","Transformers"]},{"location":"LLM/ClassicalNLP/71_token_classification/#_2","title":"\u524d\u63d0\u77e5\u8b58","text":"<ul> <li>Python\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u57fa\u790e\u77e5\u8b58</li> <li>\u6a5f\u68b0\u5b66\u7fd2\u306e\u57fa\u672c\u6982\u5ff5</li> <li>Transformers\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306e\u57fa\u790e\u7406\u89e3</li> <li>PyTorch\u306e\u57fa\u672c\u7684\u306a\u4f7f\u7528\u65b9\u6cd5</li> </ul>","tags":["\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","BERT","\u56fa\u6709\u8868\u73fe\u8a8d\u8b58","HuggingFace","Transformers"]},{"location":"LLM/ClassicalNLP/71_token_classification/#_3","title":"\u30c8\u30fc\u30af\u30f3\u5206\u985e\u3068\u306f","text":"<p>\u30c8\u30fc\u30af\u30f3\u5206\u985e\u306f\u3001\u300c\u6587\u4e2d\u306e\u5404\u30c8\u30fc\u30af\u30f3\u306b\u30e9\u30d9\u30eb\u3092\u5272\u308a\u5f53\u3066\u308b\u300d\u554f\u984c\u3068\u3057\u3066\u5b9a\u7fa9\u3055\u308c\u308b\u6c4e\u7528\u7684\u306a\u30bf\u30b9\u30af\u3067\u3059\u3002\u4e3b\u306a\u5fdc\u7528\u4f8b\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\uff1a</p> <ul> <li>\u56fa\u6709\u8868\u73fe\u8a8d\u8b58\uff08Named Entity Recognition, NER\uff09: \u6587\u4e2d\u306e\u5b9f\u4f53\uff08\u4eba\u540d\u3001\u5730\u540d\u3001\u7d44\u7e54\u540d\u306a\u3069\uff09\u3092\u7279\u5b9a\u3057\u307e\u3059\u3002\u3053\u308c\u306f\u5404\u30c8\u30fc\u30af\u30f3\u306b\u5bfe\u3057\u3066\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u30af\u30e9\u30b9\u307e\u305f\u306f\u300c\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u306a\u3057\u300d\u306e\u30e9\u30d9\u30eb\u3092\u5272\u308a\u5f53\u3066\u308b\u3053\u3068\u3067\u5b9f\u73fe\u3055\u308c\u307e\u3059\u3002</li> <li>\u54c1\u8a5e\u30bf\u30b0\u4ed8\u3051\uff08Part-of-Speech Tagging, POS\uff09: \u6587\u4e2d\u306e\u5404\u5358\u8a9e\u3092\u7279\u5b9a\u306e\u54c1\u8a5e\uff08\u540d\u8a5e\u3001\u52d5\u8a5e\u3001\u5f62\u5bb9\u8a5e\u306a\u3069\uff09\u306b\u5206\u985e\u3057\u307e\u3059\u3002</li> <li>\u30c1\u30e3\u30f3\u30ad\u30f3\u30b0\uff08Chunking\uff09: \u540c\u3058\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u306b\u5c5e\u3059\u308b\u30c8\u30fc\u30af\u30f3\u306e\u30b0\u30eb\u30fc\u30d7\u3092\u8b58\u5225\u3057\u307e\u3059\u3002\u3053\u306e\u30bf\u30b9\u30af\u306f\u3001\u30c1\u30e3\u30f3\u30af\u306e\u958b\u59cb\u3092\u793a\u3059\u30e9\u30d9\u30eb\uff08\u901a\u5e38<code>B-</code>\uff09\u3001\u30c1\u30e3\u30f3\u30af\u5185\u90e8\u3092\u793a\u3059\u30e9\u30d9\u30eb\uff08\u901a\u5e38<code>I-</code>\uff09\u3001\u3069\u306e\u30c1\u30e3\u30f3\u30af\u306b\u3082\u5c5e\u3055\u306a\u3044\u30c8\u30fc\u30af\u30f3\u3092\u793a\u3059\u30e9\u30d9\u30eb\uff08\u901a\u5e38<code>O</code>\uff09\u3092\u5272\u308a\u5f53\u3066\u308b\u3053\u3068\u3067\u5b9f\u73fe\u3055\u308c\u307e\u3059\u3002</li> </ul>","tags":["\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","BERT","\u56fa\u6709\u8868\u73fe\u8a8d\u8b58","HuggingFace","Transformers"]},{"location":"LLM/ClassicalNLP/71_token_classification/#_4","title":"\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u6e96\u5099","text":"","tags":["\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","BERT","\u56fa\u6709\u8868\u73fe\u8a8d\u8b58","HuggingFace","Transformers"]},{"location":"LLM/ClassicalNLP/71_token_classification/#conll-2003","title":"CoNLL-2003\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8","text":"<p>\u307e\u305a\u3001\u30c8\u30fc\u30af\u30f3\u5206\u985e\u30bf\u30b9\u30af\u306b\u9069\u3057\u305f\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u6e96\u5099\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u4eca\u56de\u306f\u3001\u30ed\u30a4\u30bf\u30fc\u901a\u4fe1\u306e\u30cb\u30e5\u30fc\u30b9\u8a18\u4e8b\u3092\u542b\u3080CoNLL-2003\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002</p> <p>HuggingFace Datasets\u30e9\u30a4\u30d6\u30e9\u30ea\u306e<code>load_dataset()</code>\u95a2\u6570\u3092\u4f7f\u3063\u3066CoNLL-2003\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u8aad\u307f\u8fbc\u307f\u307e\u3059\uff1a</p> <pre><code>from datasets import load_dataset\n\n# CoNLL-2003\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u8aad\u307f\u8fbc\u307f\nraw_datasets = load_dataset(\"eriktks/conll2003\", revision=\"convert/parquet\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>DatasetDict({\n    train: Dataset({\n        features: ['id', 'tokens', 'pos_tags', 'chunk_tags', 'ner_tags'],\n        num_rows: 14041\n    })\n    validation: Dataset({\n        features: ['id', 'tokens', 'pos_tags', 'chunk_tags', 'ner_tags'],\n        num_rows: 3250\n    })\n    test: Dataset({\n        features: ['id', 'tokens', 'pos_tags', 'chunk_tags', 'ner_tags'],\n        num_rows: 3453\n    })\n})\n</code></pre></p> <p>\u3053\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u306f\u3001\u5148\u307b\u3069\u8aac\u660e\u3057\u305f3\u3064\u306e\u30bf\u30b9\u30af\uff08NER\u3001POS\u3001\u30c1\u30e3\u30f3\u30ad\u30f3\u30b0\uff09\u306e\u30e9\u30d9\u30eb\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002</p> <p>\u4ed6\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3068\u306e\u5927\u304d\u306a\u9055\u3044\u306f\u3001\u5165\u529b\u30c6\u30ad\u30b9\u30c8\u304c\u6587\u3084\u6587\u66f8\u3068\u3057\u3066\u63d0\u793a\u3055\u308c\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u5358\u8a9e\u306e\u30ea\u30b9\u30c8\uff08\u4e8b\u524d\u306b\u30c8\u30fc\u30af\u30f3\u5316\u3055\u308c\u305f\u5165\u529b\uff09\u3068\u3057\u3066\u63d0\u4f9b\u3055\u308c\u308b\u70b9\u3067\u3059\u3002</p> <p>\u8a13\u7df4\u30bb\u30c3\u30c8\u306e\u6700\u521d\u306e\u8981\u7d20\u3092\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff1a</p> <pre><code># \u6700\u521d\u306e\u30b5\u30f3\u30d7\u30eb\u306e\u30c8\u30fc\u30af\u30f3\u3092\u8868\u793a\nraw_datasets[\"train\"][0][\"tokens\"]\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>['EU', 'rejects', 'German', 'call', 'to', 'boycott', 'British', 'lamb', '.']\n</code></pre></p> <p>\u56fa\u6709\u8868\u73fe\u8a8d\u8b58\u3092\u5b9f\u884c\u3057\u305f\u3044\u306e\u3067\u3001NER\u30bf\u30b0\u3092\u78ba\u8a8d\u3057\u307e\u3059\uff1a</p> <pre><code># \u5bfe\u5fdc\u3059\u308bNER\u30bf\u30b0\u3092\u8868\u793a\nraw_datasets[\"train\"][0][\"ner_tags\"]\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>[3, 0, 7, 0, 0, 0, 7, 0, 0]\n</code></pre></p> <p>\u3053\u308c\u3089\u306f\u8a13\u7df4\u7528\u306e\u6574\u6570\u30e9\u30d9\u30eb\u3067\u3059\u304c\u3001\u30c7\u30fc\u30bf\u3092\u78ba\u8a8d\u3059\u308b\u969b\u306b\u306f\u3042\u307e\u308a\u7406\u89e3\u3057\u3084\u3059\u304f\u3042\u308a\u307e\u305b\u3093\u3002\u30c6\u30ad\u30b9\u30c8\u5206\u985e\u3068\u540c\u69d8\u306b\u3001\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e<code>features</code>\u5c5e\u6027\u3092\u8abf\u3079\u308b\u3053\u3068\u3067\u3001\u3053\u308c\u3089\u306e\u6574\u6570\u3068\u30e9\u30d9\u30eb\u540d\u306e\u5bfe\u5fdc\u95a2\u4fc2\u3092\u78ba\u8a8d\u3067\u304d\u307e\u3059\uff1a</p> <pre><code># NER\u30bf\u30b0\u306e\u7279\u5fb4\u91cf\u60c5\u5831\u3092\u53d6\u5f97\nner_feature = raw_datasets[\"train\"].features[\"ner_tags\"]\nprint(ner_feature)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>List(ClassLabel(names=['O', 'B-PER', 'I-PER', 'B-ORG', 'I-ORG', 'B-LOC', 'I-LOC', 'B-MISC', 'I-MISC']))\n</code></pre></p> <p>\u3053\u306e\u5217\u306e\u8981\u7d20\u306f<code>ClassLabel</code>\u306e\u30b7\u30fc\u30b1\u30f3\u30b9\u3067\u3059\u3002\u30e9\u30d9\u30eb\u540d\u306e\u30ea\u30b9\u30c8\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u307e\u3059\uff1a</p> <pre><code># \u30e9\u30d9\u30eb\u540d\u306e\u30ea\u30b9\u30c8\u3092\u53d6\u5f97\nlabel_names = ner_feature.feature.names\nprint(label_names)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>['O', 'B-PER', 'I-PER', 'B-ORG', 'I-ORG', 'B-LOC', 'I-LOC', 'B-MISC', 'I-MISC']\n</code></pre></p> <p>\u3053\u306e\u30e9\u30d9\u30ea\u30f3\u30b0\u65b9\u5f0f\u306fBIO\u30bf\u30b0\u3068\u547c\u3070\u308c\u3001\u5404\u30e9\u30d9\u30eb\u306e\u610f\u5473\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\uff1a</p> <ul> <li><code>O</code>\uff1a\u5358\u8a9e\u304c\u3069\u306e\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u306b\u3082\u5bfe\u5fdc\u3057\u306a\u3044</li> <li><code>B-PER</code>/<code>I-PER</code>\uff1a\u5358\u8a9e\u304c\u4eba\u540d\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u306e\u958b\u59cb/\u5185\u90e8\u306b\u5bfe\u5fdc</li> <li><code>B-ORG</code>/<code>I-ORG</code>\uff1a\u5358\u8a9e\u304c\u7d44\u7e54\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u306e\u958b\u59cb/\u5185\u90e8\u306b\u5bfe\u5fdc</li> <li><code>B-LOC</code>/<code>I-LOC</code>\uff1a\u5358\u8a9e\u304c\u5730\u540d\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u306e\u958b\u59cb/\u5185\u90e8\u306b\u5bfe\u5fdc</li> <li><code>B-MISC</code>/<code>I-MISC</code>\uff1a\u5358\u8a9e\u304c\u305d\u306e\u4ed6\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u306e\u958b\u59cb/\u5185\u90e8\u306b\u5bfe\u5fdc</li> </ul> <p>\u5148\u307b\u3069\u78ba\u8a8d\u3057\u305f\u30e9\u30d9\u30eb\u3092\u30c7\u30b3\u30fc\u30c9\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff1a</p> <pre><code># \u30e9\u30d9\u30eb\u3068\u30c8\u30fc\u30af\u30f3\u3092\u6574\u5217\u8868\u793a\u3059\u308b\u95a2\u6570\nwords = raw_datasets[\"train\"][0][\"tokens\"]\nlabels = raw_datasets[\"train\"][0][\"ner_tags\"]\nline1 = \"\"\nline2 = \"\"\nfor word, label in zip(words, labels):\n    full_label = label_names[label]\n    max_length = max(len(word), len(full_label))\n    line1 += word + \" \" * (max_length - len(word) + 1)\n    line2 += full_label + \" \" * (max_length - len(full_label) + 1)\n\nprint(line1)\nprint(line2)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>EU    rejects German call to boycott British lamb . \nB-ORG O       B-MISC O    O  O       B-MISC  O    O \n</code></pre></p> <p><code>B-</code>\u3068<code>I-</code>\u30e9\u30d9\u30eb\u304c\u6df7\u5728\u3059\u308b\u4f8b\u3068\u3057\u3066\u3001\u8a13\u7df4\u30bb\u30c3\u30c8\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b94\u306e\u8981\u7d20\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\uff1a</p> <pre><code># \u30a4\u30f3\u30c7\u30c3\u30af\u30b94\u306e\u4f8b\u3092\u8868\u793a\nwords = raw_datasets[\"train\"][4][\"tokens\"]\nlabels = raw_datasets[\"train\"][4][\"ner_tags\"]\nline1 = \"\"\nline2 = \"\"\nfor word, label in zip(words, labels):\n    full_label = label_names[label]\n    max_length = max(len(word), len(full_label))\n    line1 += word + \" \" * (max_length - len(word) + 1)\n    line2 += full_label + \" \" * (max_length - len(full_label) + 1)\n\nprint(line1)\nprint(line2)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>Germany 's representative to the European Union 's veterinary committee Werner Zwingmann said on Wednesday consumers should buy sheepmeat from countries other than Britain until the scientific advice was clearer . \nB-LOC   O  O              O  O   B-ORG    I-ORG O  O          O         B-PER  I-PER     O    O  O         O         O      O   O         O    O         O     O    B-LOC   O     O   O          O      O   O       O \n</code></pre></p>","tags":["\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","BERT","\u56fa\u6709\u8868\u73fe\u8a8d\u8b58","HuggingFace","Transformers"]},{"location":"LLM/ClassicalNLP/71_token_classification/#poschunking","title":"\u305d\u306e\u4ed6\u306e\u30e9\u30d9\u30eb\uff08POS\u3001Chunking\uff09","text":"<p>\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u306f\u4ed6\u306b\u3082\u54c1\u8a5e\u30bf\u30b0\u4ed8\u3051\uff08POS\uff09\u3068\u30c1\u30e3\u30f3\u30ad\u30f3\u30b0\u306e\u30e9\u30d9\u30eb\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002</p> <p>\u54c1\u8a5e\u30bf\u30b0\uff08POS Tags\uff09\uff1a</p> <pre><code># POS\u30bf\u30b0\u306e\u30e9\u30d9\u30eb\u540d\u3092\u78ba\u8a8d\npos_label_names = raw_datasets[\"train\"].features[\"pos_tags\"].feature.names\nprint(pos_label_names)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>['\"', \"''\", '#', '$', '(', ')', ',', '.', ':', '``', 'CC', 'CD', 'DT', 'EX', 'FW', 'IN', 'JJ', 'JJR', 'JJS', 'LS', 'MD', 'NN', 'NNP', 'NNPS', 'NNS', 'NN|SYM', 'PDT', 'POS', 'PRP', 'PRP$', 'RB', 'RBR', 'RBS', 'RP', 'SYM', 'TO', 'UH', 'VB', 'VBD', 'VBG', 'VBN', 'VBP', 'VBZ', 'WDT', 'WP', 'WP$', 'WRB']\n</code></pre></p> <pre><code># \u6700\u521d\u306e\u30b5\u30f3\u30d7\u30eb\u306ePOS\u30bf\u30b0\u3092\u8868\u793a\nwords = raw_datasets[\"train\"][0][\"tokens\"]\npos_labels = raw_datasets[\"train\"][0][\"pos_tags\"]\nline1 = \"\"\nline2 = \"\"\nfor word, label in zip(words, pos_labels):\n    full_label = pos_label_names[label]\n    max_length = max(len(word), len(full_label))\n    line1 += word + \" \" * (max_length - len(word) + 1)\n    line2 += full_label + \" \" * (max_length - len(full_label) + 1)\n\nprint(line1)\nprint(line2)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>EU  rejects German call to boycott British lamb . \nNNP VBZ     JJ     NN   TO VB      JJ      NN   . \n</code></pre></p> <p>\u30c1\u30e3\u30f3\u30af\u30bf\u30b0\uff08Chunk Tags\uff09\uff1a</p> <pre><code># \u30c1\u30e3\u30f3\u30af\u30bf\u30b0\u306e\u30e9\u30d9\u30eb\u540d\u3092\u78ba\u8a8d\nchunk_label_names = raw_datasets[\"train\"].features[\"chunk_tags\"].feature.names\nprint(chunk_label_names)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>['O', 'B-ADJP', 'I-ADJP', 'B-ADVP', 'I-ADVP', 'B-CONJP', 'I-CONJP', 'B-INTJ', 'I-INTJ', 'B-LST', 'I-LST', 'B-NP', 'I-NP', 'B-PP', 'I-PP', 'B-PRT', 'I-PRT', 'B-SBAR', 'I-SBAR', 'B-UCP', 'I-UCP', 'B-VP', 'I-VP']\n</code></pre></p> <pre><code># \u6700\u521d\u306e\u30b5\u30f3\u30d7\u30eb\u306e\u30c1\u30e3\u30f3\u30af\u30bf\u30b0\u3092\u8868\u793a\nwords = raw_datasets[\"train\"][0][\"tokens\"]\nchunk_labels = raw_datasets[\"train\"][0][\"chunk_tags\"]\nline1 = \"\"\nline2 = \"\"\nfor word, label in zip(words, chunk_labels):\n    full_label = chunk_label_names[label]\n    max_length = max(len(word), len(full_label))\n    line1 += word + \" \" * (max_length - len(word) + 1)\n    line2 += full_label + \" \" * (max_length - len(full_label) + 1)\n\nprint(line1)\nprint(line2)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>EU   rejects German call to   boycott British lamb . \nB-NP B-VP    B-NP   I-NP B-VP I-VP    B-NP    I-NP O \n</code></pre></p>","tags":["\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","BERT","\u56fa\u6709\u8868\u73fe\u8a8d\u8b58","HuggingFace","Transformers"]},{"location":"LLM/ClassicalNLP/71_token_classification/#_5","title":"\u30c7\u30fc\u30bf\u306e\u524d\u51e6\u7406","text":"<p>\u901a\u5e38\u306e\u30bf\u30b9\u30af\u3068\u540c\u69d8\u306b\u3001\u30e2\u30c7\u30eb\u304c\u7406\u89e3\u3067\u304d\u308b\u3088\u3046\u306b\u30c6\u30ad\u30b9\u30c8\u3092\u30c8\u30fc\u30af\u30f3ID\u306b\u5909\u63db\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u30c8\u30fc\u30af\u30f3\u5206\u985e\u30bf\u30b9\u30af\u306e\u7279\u5fb4\u306f\u3001\u4e8b\u524d\u306b\u30c8\u30fc\u30af\u30f3\u5316\u3055\u308c\u305f\u5165\u529b\u304c\u4e0e\u3048\u3089\u308c\u308b\u3053\u3068\u3067\u3059\u3002\u5e78\u3044\u3001tokenizer\u306eAPI\u306f\u7279\u5225\u306a\u30d5\u30e9\u30b0\u3092\u4f7f\u3063\u3066\u7c21\u5358\u306b\u5bfe\u51e6\u3067\u304d\u307e\u3059\u3002</p> <p>\u307e\u305a\u3001<code>tokenizer</code>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002BERT\u306e\u4e8b\u524d\u8a13\u7df4\u6e08\u307f\u30e2\u30c7\u30eb\u3092\u4f7f\u7528\u3059\u308b\u306e\u3067\u3001\u95a2\u9023\u3059\u308btokenizer\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u30ad\u30e3\u30c3\u30b7\u30e5\u3057\u307e\u3059\uff1a</p> <pre><code>from transformers import AutoTokenizer\n\n# \u4f7f\u7528\u3059\u308b\u30e2\u30c7\u30eb\u306e\u30c1\u30a7\u30c3\u30af\u30dd\u30a4\u30f3\u30c8\u3092\u6307\u5b9a\nmodel_checkpoint = \"bert-base-cased\"\ntokenizer = AutoTokenizer.from_pretrained(model_checkpoint)\n</code></pre> <p><code>model_checkpoint</code>\u306fHugging Face Hub\u306e\u4efb\u610f\u306e\u30e2\u30c7\u30eb\u306b\u5909\u66f4\u3057\u305f\u308a\u3001\u4e8b\u524d\u8a13\u7df4\u6e08\u307f\u30e2\u30c7\u30eb\u3068tokenizer\u3092\u4fdd\u5b58\u3057\u305f\u30ed\u30fc\u30ab\u30eb\u30d5\u30a9\u30eb\u30c0\u306e\u30d1\u30b9\u306b\u5909\u66f4\u3057\u305f\u308a\u3067\u304d\u307e\u3059\u3002\u552f\u4e00\u306e\u5236\u7d04\u306f\u3001tokenizer\u304cHuggingFace Tokenizers\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u3088\u3063\u3066\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u308b\u5fc5\u8981\u304c\u3042\u308b\u3053\u3068\u3067\u3059\u3002</p> <p>tokenizer\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u5b9f\u969b\u306bHuggingFace Tokenizers\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u3088\u3063\u3066\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u308b\uff08Fast Tokenizer\u3067\u3042\u308b\uff09\u304b\u306f\u3001<code>is_fast</code>\u5c5e\u6027\u3067\u78ba\u8a8d\u3067\u304d\u307e\u3059\uff1a</p> <pre><code># Fasttokenizer\u304b\u3069\u3046\u304b\u3092\u78ba\u8a8d\nprint(tokenizer.is_fast)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>True\n</code></pre></p> <p>\u4e8b\u524d\u306b\u30c8\u30fc\u30af\u30f3\u5316\u3055\u308c\u305f\u5165\u529b\u3092\u30c8\u30fc\u30af\u30f3\u5316\u3059\u308b\u306b\u306f\u3001\u901a\u5e38\u901a\u308atokenizer\u3092\u4f7f\u7528\u3057\u3001<code>is_split_into_words=True</code>\u3092\u8ffd\u52a0\u3057\u307e\u3059\uff1a</p> <pre><code># \u4e8b\u524d\u30c8\u30fc\u30af\u30f3\u5316\u3055\u308c\u305f\u5165\u529b\u3092\u30c8\u30fc\u30af\u30f3\u5316\ninputs = tokenizer(raw_datasets[\"train\"][0][\"tokens\"], is_split_into_words=True)\nprint(inputs.tokens())\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>['[CLS]', 'EU', 'rejects', 'German', 'call', 'to', 'boycott', 'British', 'la', '##mb', '.', '[SEP]']\n</code></pre></p> <p>\u3054\u89a7\u306e\u3068\u304a\u308a\u3001tokenizer\u306f\u30e2\u30c7\u30eb\u3067\u4f7f\u7528\u3059\u308b\u7279\u6b8a\u30c8\u30fc\u30af\u30f3\uff08\u6700\u521d\u306e<code>[CLS]</code>\u3068\u6700\u5f8c\u306e<code>[SEP]</code>\uff09\u3092\u8ffd\u52a0\u3057\u3001\u307b\u3068\u3093\u3069\u306e\u5358\u8a9e\u306f\u305d\u306e\u307e\u307e\u6b8b\u3057\u307e\u3057\u305f\u3002</p> <p>\u3057\u304b\u3057\u3001<code>lamb</code>\u3068\u3044\u3046\u5358\u8a9e\u306f<code>la</code>\u3068<code>##mb</code>\u306e2\u3064\u306e\u30b5\u30d6\u30ef\u30fc\u30c9\u306b\u30c8\u30fc\u30af\u30f3\u5316\u3055\u308c\u307e\u3057\u305f\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u5165\u529b\u3068\u30e9\u30d9\u30eb\u306e\u9593\u306b\u4e0d\u4e00\u81f4\u304c\u751f\u3058\u307e\u3059\u3002\u30e9\u30d9\u30eb\u306e\u30ea\u30b9\u30c8\u306f9\u3064\u306e\u8981\u7d20\u3057\u304b\u3042\u308a\u307e\u305b\u3093\u304c\u3001\u5165\u529b\u306f12\u306e\u30c8\u30fc\u30af\u30f3\u306b\u306a\u308a\u307e\u3057\u305f\u3002</p> <p>\u7279\u6b8a\u30c8\u30fc\u30af\u30f3\u306f\u4f4d\u7f6e\u304c\u660e\u78ba\u306a\u305f\u3081\u7c21\u5358\u306b\u51e6\u7406\u3067\u304d\u307e\u3059\u304c\u3001\u3059\u3079\u3066\u306e\u30e9\u30d9\u30eb\u3092\u9069\u5207\u306a\u5358\u8a9e\u3068\u6574\u5217\u3055\u305b\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002</p> <p>\u5e78\u3044\u3001Fast Tokenizer\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u306e\u3067\u3001HuggingFace Tokenizers\u306e\u5f37\u529b\u306a\u6a5f\u80fd\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u3001\u5404\u30c8\u30fc\u30af\u30f3\u3092\u5bfe\u5fdc\u3059\u308b\u5358\u8a9e\u306b\u7c21\u5358\u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3067\u304d\u307e\u3059\uff1a</p> <pre><code># \u5404\u30c8\u30fc\u30af\u30f3\u306e\u5bfe\u5fdc\u3059\u308b\u5358\u8a9eID\u3092\u78ba\u8a8d\nprint(inputs.word_ids())\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>[None, 0, 1, 2, 3, 4, 5, 6, 7, 7, 8, None]\n</code></pre></p> <p>\u5c11\u3057\u306e\u5de5\u592b\u3067\u3001\u30e9\u30d9\u30eb\u30ea\u30b9\u30c8\u3092\u30c8\u30fc\u30af\u30f3\u306b\u5bfe\u5fdc\u3059\u308b\u3088\u3046\u306b\u62e1\u5f35\u3067\u304d\u307e\u3059\u3002</p> <p>\u9069\u7528\u3059\u308b\u30eb\u30fc\u30eb\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\uff1a 1. \u7279\u6b8a\u30c8\u30fc\u30af\u30f3\uff1a<code>-100</code>\u306e\u30e9\u30d9\u30eb\u3092\u4e0e\u3048\u308b\uff08\u640d\u5931\u95a2\u6570\u3067\u7121\u8996\u3055\u308c\u308b\u305f\u3081\uff09 2. \u5358\u8a9e\u306e\u6700\u521d\u306e\u30c8\u30fc\u30af\u30f3\uff1a\u5143\u306e\u5358\u8a9e\u306e\u30e9\u30d9\u30eb\u3092\u305d\u306e\u307e\u307e\u4f7f\u7528 3. \u5358\u8a9e\u5185\u306e\u5f8c\u7d9a\u30c8\u30fc\u30af\u30f3\uff1a<code>B-</code>\u3092<code>I-</code>\u306b\u5909\u66f4\uff08\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u306e\u958b\u59cb\u3067\u306f\u306a\u3044\u305f\u3081\uff09</p> <pre><code>def align_labels_with_tokens(labels, word_ids):\n    \"\"\"\u30e9\u30d9\u30eb\u3092\u30c8\u30fc\u30af\u30f3\u306b\u6574\u5217\u3055\u305b\u308b\u95a2\u6570\"\"\"\n    new_labels = []\n    current_word = None\n    for word_id in word_ids:\n        if word_id != current_word:\n            # \u65b0\u3057\u3044\u5358\u8a9e\u306e\u958b\u59cb\n            current_word = word_id\n            label = -100 if word_id is None else labels[word_id]\n            new_labels.append(label)\n        elif word_id is None:\n            # \u7279\u6b8a\u30c8\u30fc\u30af\u30f3\n            new_labels.append(-100)\n        else:\n            # \u524d\u306e\u30c8\u30fc\u30af\u30f3\u3068\u540c\u3058\u5358\u8a9e\n            label = labels[word_id]\n            # \u30e9\u30d9\u30eb\u304cB-XXX\u306e\u5834\u5408\u3001I-XXX\u306b\u5909\u66f4\n            if label % 2 == 1:\n                label += 1\n            new_labels.append(label)\n\n    return new_labels\n</code></pre> <p>\u3053\u306e\u95a2\u6570\u3092\u30c6\u30b9\u30c8\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff1a</p> <pre><code># \u30e9\u30d9\u30eb\u6574\u5217\u306e\u30c6\u30b9\u30c8\nlabels = raw_datasets[\"train\"][0][\"ner_tags\"]\nword_ids = inputs.word_ids()\nprint(\"\u5143\u306e\u30e9\u30d9\u30eb:\", labels)\nprint(\"\u6574\u5217\u5f8c\u30e9\u30d9\u30eb:\", align_labels_with_tokens(labels, word_ids))\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>\u5143\u306e\u30e9\u30d9\u30eb: [3, 0, 7, 0, 0, 0, 7, 0, 0]\n\u6574\u5217\u5f8c\u30e9\u30d9\u30eb: [-100, 3, 0, 7, 0, 0, 0, 7, 0, 0, 0, -100]\n</code></pre></p> <p>\u3054\u89a7\u306e\u3068\u304a\u308a\u3001\u95a2\u6570\u306f\u6700\u521d\u3068\u6700\u5f8c\u306e2\u3064\u306e\u7279\u6b8a\u30c8\u30fc\u30af\u30f3\u306b<code>-100</code>\u3092\u8ffd\u52a0\u3057\u30012\u3064\u306e\u30c8\u30fc\u30af\u30f3\u306b\u5206\u5272\u3055\u308c\u305f\u5358\u8a9e\u306b\u65b0\u3057\u3044<code>0</code>\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f\u3002</p>","tags":["\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","BERT","\u56fa\u6709\u8868\u73fe\u8a8d\u8b58","HuggingFace","Transformers"]},{"location":"LLM/ClassicalNLP/71_token_classification/#_6","title":"\u4ee3\u66ff\u7684\u306a\u30a2\u30d7\u30ed\u30fc\u30c1","text":"<p>\u4e00\u90e8\u306e\u7814\u7a76\u8005\u306f\u3001\u5358\u8a9e\u3054\u3068\u306b1\u3064\u306e\u30e9\u30d9\u30eb\u306e\u307f\u3092\u5272\u308a\u5f53\u3066\u3001\u305d\u306e\u5358\u8a9e\u5185\u306e\u4ed6\u306e\u30b5\u30d6\u30c8\u30fc\u30af\u30f3\u306b<code>-100</code>\u3092\u5272\u308a\u5f53\u3066\u308b\u624b\u6cd5\u3092\u597d\u307f\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u591a\u304f\u306e\u30b5\u30d6\u30c8\u30fc\u30af\u30f3\u306b\u5206\u5272\u3055\u308c\u308b\u9577\u3044\u5358\u8a9e\u304c\u640d\u5931\u8a08\u7b97\u306b\u904e\u5ea6\u306b\u5f71\u97ff\u3059\u308b\u3053\u3068\u3092\u907f\u3051\u308b\u305f\u3081\u3067\u3059\u3002</p> <p>\u3053\u306e\u898f\u5247\u306b\u5f93\u3063\u3066\u30e9\u30d9\u30eb\u3092\u5165\u529bID\u306b\u6574\u5217\u3055\u305b\u308b\u95a2\u6570\u306e\u4ee3\u66ff\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u4ee5\u4e0b\u306b\u793a\u3057\u307e\u3059\uff1a</p> <pre><code>def align_labels_with_tokens_v2(labels, word_ids):\n    \"\"\"\u5358\u8a9e\u3054\u3068\u306b1\u3064\u306e\u30e9\u30d9\u30eb\u306e\u307f\u3092\u5272\u308a\u5f53\u3066\u308b\u4ee3\u66ff\u30d0\u30fc\u30b8\u30e7\u30f3\"\"\"\n    new_labels = []\n    current_word = None\n    for word_id in word_ids:\n        if word_id != current_word:\n            # \u65b0\u3057\u3044\u5358\u8a9e\u306e\u958b\u59cb\n            current_word = word_id\n            label = -100 if word_id is None else labels[word_id]\n            new_labels.append(label)\n        elif word_id is None:\n            # \u7279\u6b8a\u30c8\u30fc\u30af\u30f3\n            new_labels.append(-100)\n        else:\n            # \u524d\u306e\u30c8\u30fc\u30af\u30f3\u3068\u540c\u3058\u5358\u8a9e\uff08\u30b5\u30d6\u30c8\u30fc\u30af\u30f3\uff09\n            new_labels.append(-100)\n\n    return new_labels\n</code></pre> <pre><code># \u4ee3\u66ff\u30d0\u30fc\u30b8\u30e7\u30f3\u306e\u30c6\u30b9\u30c8\nlabels = raw_datasets[\"train\"][0][\"ner_tags\"]\nword_ids = inputs.word_ids()\nprint(\"\u5143\u306e\u30e9\u30d9\u30eb:\", labels)\nprint(\"\u4ee3\u66ff\u6574\u5217:\", align_labels_with_tokens_v2(labels, word_ids))\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>\u5143\u306e\u30e9\u30d9\u30eb: [3, 0, 7, 0, 0, 0, 7, 0, 0]\n\u4ee3\u66ff\u6574\u5217: [-100, 3, 0, 7, 0, 0, 0, 7, 0, -100, 0, -100]\n</code></pre></p> <p>\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u5168\u4f53\u3092\u524d\u51e6\u7406\u3059\u308b\u306b\u306f\u3001\u3059\u3079\u3066\u306e\u5165\u529b\u3092\u30c8\u30fc\u30af\u30f3\u5316\u3057\u3001\u3059\u3079\u3066\u306e\u30e9\u30d9\u30eb\u306b<code>align_labels_with_tokens()</code>\u95a2\u6570\u3092\u9069\u7528\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002</p> <p>Fast Tokenizer\u306e\u901f\u5ea6\u3092\u6d3b\u7528\u3059\u308b\u305f\u3081\u3001\u4e00\u5ea6\u306b\u591a\u6570\u306e\u30c6\u30ad\u30b9\u30c8\u3092\u30c8\u30fc\u30af\u30f3\u5316\u3059\u308b\u95a2\u6570\u3092\u4f5c\u6210\u3057\u3001<code>batched=True</code>\u30aa\u30d7\u30b7\u30e7\u30f3\u3067<code>Dataset.map()</code>\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u4ee5\u524d\u306e\u4f8b\u3068\u306e\u9055\u3044\u306f\u3001tokenizer\u3078\u306e\u5165\u529b\u304c\u30c6\u30ad\u30b9\u30c8\u306e\u30ea\u30b9\u30c8\uff08\u4eca\u56de\u306e\u5834\u5408\u306f\u5358\u8a9e\u306e\u30ea\u30b9\u30c8\u306e\u30ea\u30b9\u30c8\uff09\u306e\u5834\u5408\u3001<code>word_ids()</code>\u95a2\u6570\u306b\u5358\u8a9eID\u3092\u53d6\u5f97\u3057\u305f\u3044\u4f8b\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u6e21\u3059\u5fc5\u8981\u304c\u3042\u308b\u3053\u3068\u3067\u3059\uff1a</p> <pre><code>def tokenize_and_align_labels(examples):\n    \"\"\"\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u5168\u4f53\u3092\u30c8\u30fc\u30af\u30f3\u5316\u3057\u3066\u30e9\u30d9\u30eb\u3092\u6574\u5217\u3055\u305b\u308b\u95a2\u6570\"\"\"\n    tokenized_inputs = tokenizer(\n        examples[\"tokens\"], truncation=True, is_split_into_words=True\n    )\n    all_labels = examples[\"ner_tags\"]\n    new_labels = []\n    for i, labels in enumerate(all_labels):\n        word_ids = tokenized_inputs.word_ids(i)\n        new_labels.append(align_labels_with_tokens(labels, word_ids))\n\n    tokenized_inputs[\"labels\"] = new_labels\n    return tokenized_inputs\n</code></pre> <p>\u306a\u304a\u3001\u3053\u306e\u6bb5\u968e\u3067\u306f\u5165\u529b\u3092\u30d1\u30c7\u30a3\u30f3\u30b0\u3057\u3066\u3044\u307e\u305b\u3093\u3002\u5f8c\u3067\u30c7\u30fc\u30bf\u30b3\u30ec\u30fc\u30bf\u30fc\uff08Data Collator\uff09\u3092\u4f7f\u7528\u3057\u3066\u30d0\u30c3\u30c1\u3092\u4f5c\u6210\u3059\u308b\u969b\u306b\u30d1\u30c7\u30a3\u30f3\u30b0\u3092\u884c\u3044\u307e\u3059\u3002</p> <p>\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u4ed6\u306e\u5206\u5272\u306b\u5bfe\u3057\u3066\u3001\u3053\u306e\u524d\u51e6\u7406\u3092\u307e\u3068\u3081\u3066\u9069\u7528\u3067\u304d\u307e\u3059\uff1a</p> <pre><code># \u5168\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u524d\u51e6\u7406\u3092\u9069\u7528\ntokenized_datasets = raw_datasets.map(\n    tokenize_and_align_labels,\n    batched=True,\n    remove_columns=raw_datasets[\"train\"].column_names\n)\nprint(tokenized_datasets)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>DatasetDict({\n    train: Dataset({\n        features: ['input_ids', 'token_type_ids', 'attention_mask', 'labels'],\n        num_rows: 14041\n    })\n    validation: Dataset({\n        features: ['input_ids', 'token_type_ids', 'attention_mask', 'labels'],\n        num_rows: 3250\n    })\n    test: Dataset({\n        features: ['input_ids', 'token_type_ids', 'attention_mask', 'labels'],\n        num_rows: 3453\n    })\n})\n</code></pre></p>","tags":["\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","BERT","\u56fa\u6709\u8868\u73fe\u8a8d\u8b58","HuggingFace","Transformers"]},{"location":"LLM/ClassicalNLP/71_token_classification/#trainer-api","title":"Trainer API\u3092\u4f7f\u7528\u3057\u305f\u30e2\u30c7\u30eb\u306e\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","text":"<p><code>Trainer</code>\u3092\u4f7f\u7528\u3057\u305f\u5b9f\u969b\u306e\u30b3\u30fc\u30c9\u306f\u57fa\u672c\u7684\u306b\u4ee5\u524d\u3068\u540c\u3058\u3067\u3059\u3002\u4e3b\u306a\u5909\u66f4\u70b9\u306f\u3001\u30c7\u30fc\u30bf\u3092\u30d0\u30c3\u30c1\u306b\u307e\u3068\u3081\u308b\u65b9\u6cd5\u3068\u8a55\u4fa1\u6307\u6a19\u8a08\u7b97\u95a2\u6570\u306e\u307f\u3067\u3059\u3002</p>","tags":["\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","BERT","\u56fa\u6709\u8868\u73fe\u8a8d\u8b58","HuggingFace","Transformers"]},{"location":"LLM/ClassicalNLP/71_token_classification/#_7","title":"\u30c7\u30fc\u30bf\u306e\u7167\u5408","text":"<p>\u7b2c3\u7ae0\u306e<code>DataCollatorWithPadding</code>\u306f\u4f7f\u7528\u3067\u304d\u307e\u305b\u3093\u3002\u305d\u308c\u306f\u5165\u529b\uff08\u5165\u529bID\u3001\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u30de\u30b9\u30af\u3001\u30c8\u30fc\u30af\u30f3\u30bf\u30a4\u30d7ID\uff09\u306e\u307f\u3092\u30d1\u30c7\u30a3\u30f3\u30b0\u3059\u308b\u305f\u3081\u3067\u3059\u3002</p> <p>\u30c8\u30fc\u30af\u30f3\u5206\u985e\u3067\u306f\u3001\u30e9\u30d9\u30eb\u3082\u5165\u529b\u3068\u540c\u3058\u65b9\u6cd5\u3067\u30d1\u30c7\u30a3\u30f3\u30b0\u3057\u3001\u540c\u3058\u30b5\u30a4\u30ba\u3092\u7dad\u6301\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u5bfe\u5fdc\u3059\u308b\u4e88\u6e2c\u304c\u640d\u5931\u8a08\u7b97\u3067\u7121\u8996\u3055\u308c\u308b\u3088\u3046\u306b\u3001\u30d1\u30c7\u30a3\u30f3\u30b0\u5024\u3068\u3057\u3066<code>-100</code>\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002</p> <p>\u3053\u308c\u3089\u306e\u51e6\u7406\u306f\u3059\u3079\u3066<code>DataCollatorForTokenClassification</code>\u306b\u3088\u3063\u3066\u81ea\u52d5\u7684\u306b\u884c\u308f\u308c\u307e\u3059\u3002<code>DataCollatorWithPadding</code>\u3068\u540c\u69d8\u306b\u3001\u5165\u529b\u306e\u524d\u51e6\u7406\u306b\u4f7f\u7528\u3057\u305f<code>tokenizer</code>\u3092\u6e21\u3057\u307e\u3059\uff1a</p> <pre><code>from transformers import DataCollatorForTokenClassification\n\n# \u30c8\u30fc\u30af\u30f3\u5206\u985e\u7528\u306e\u30c7\u30fc\u30bf\u30b3\u30ec\u30fc\u30bf\u30fc\u3092\u4f5c\u6210\ndata_collator = DataCollatorForTokenClassification(tokenizer=tokenizer)\n</code></pre> <p>\u3053\u308c\u3092\u3044\u304f\u3064\u304b\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u30c6\u30b9\u30c8\u3059\u308b\u305f\u3081\u3001\u30c8\u30fc\u30af\u30f3\u5316\u6e08\u307f\u8a13\u7df4\u30bb\u30c3\u30c8\u304b\u3089\u306e\u4f8b\u306e\u30ea\u30b9\u30c8\u3067\u547c\u3073\u51fa\u3057\u307e\u3059\uff1a</p> <pre><code># \u30c7\u30fc\u30bf\u30b3\u30ec\u30fc\u30bf\u30fc\u3092\u30c6\u30b9\u30c8\nbatch = data_collator([tokenized_datasets[\"train\"][i] for i in range(2)])\nprint(batch[\"labels\"])\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>tensor([[-100,    3,    0,    7,    0,    0,    0,    7,    0,    0,    0, -100],\n        [-100,    1,    2, -100, -100, -100, -100, -100, -100, -100, -100, -100]])\n</code></pre></p> <p>\u3053\u308c\u3092\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u5185\u306e\u6700\u521d\u30682\u756a\u76ee\u306e\u8981\u7d20\u306e\u30e9\u30d9\u30eb\u3068\u6bd4\u8f03\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff1a</p> <pre><code># \u5143\u306e\u30e9\u30d9\u30eb\u3068\u6bd4\u8f03\nfor i in range(2):\n    print(tokenized_datasets[\"train\"][i][\"labels\"])\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>[-100, 3, 0, 7, 0, 0, 0, 7, 0, 0, 0, -100]\n[-100, 1, 2, -100]\n</code></pre></p> <p>\u3054\u89a7\u306e\u3068\u304a\u308a\u3001\u77ed\u3044\u65b9\u306e2\u756a\u76ee\u306e\u30e9\u30d9\u30eb\u30bb\u30c3\u30c8\u306f<code>-100</code>\u3092\u4f7f\u7528\u3057\u3066\u6700\u521d\u306e\u30e9\u30d9\u30eb\u30bb\u30c3\u30c8\u306e\u9577\u3055\u306b\u30d1\u30c7\u30a3\u30f3\u30b0\u3055\u308c\u3066\u3044\u307e\u3059\u3002</p>","tags":["\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","BERT","\u56fa\u6709\u8868\u73fe\u8a8d\u8b58","HuggingFace","Transformers"]},{"location":"LLM/ClassicalNLP/71_token_classification/#_8","title":"\u8a55\u4fa1\u6307\u6a19","text":"<p><code>Trainer</code>\u304c\u30a8\u30dd\u30c3\u30af\u3054\u3068\u306b\u8a55\u4fa1\u6307\u6a19\u3092\u8a08\u7b97\u3059\u308b\u305f\u3081\u306b\u3001\u4e88\u6e2c\u3068\u30e9\u30d9\u30eb\u306e\u914d\u5217\u3092\u53d7\u3051\u53d6\u308a\u3001\u8a55\u4fa1\u6307\u6a19\u540d\u3068\u5024\u3092\u542b\u3080\u8f9e\u66f8\u3092\u8fd4\u3059<code>compute_metrics()</code>\u95a2\u6570\u3092\u5b9a\u7fa9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002</p> <p>\u30c8\u30fc\u30af\u30f3\u5206\u985e\u4e88\u6e2c\u3092\u8a55\u4fa1\u3059\u308b\u305f\u3081\u306b\u5e83\u304f\u4f7f\u7528\u3055\u308c\u3066\u3044\u308b\u8a55\u4fa1\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306fseqeval\u3067\u3059\u3002</p> <pre><code># seqeval\u8a55\u4fa1\u6307\u6a19\u3092\u8aad\u307f\u8fbc\u307f\nimport evaluate\n\nmetric = evaluate.load(\"seqeval\")\n</code></pre> <p>\u3053\u306e\u8a55\u4fa1\u6307\u6a19\u306f\u6a19\u6e96\u7684\u306a\u7cbe\u5ea6\u8a08\u7b97\u3068\u306f\u7570\u306a\u308b\u52d5\u4f5c\u3092\u3057\u307e\u3059\u3002\u6574\u6570\u3067\u306f\u306a\u304f\u6587\u5b57\u5217\u3068\u3057\u3066\u30e9\u30d9\u30eb\u306e\u30ea\u30b9\u30c8\u3092\u53d7\u3051\u53d6\u308b\u305f\u3081\u3001\u8a55\u4fa1\u6307\u6a19\u306b\u6e21\u3059\u524d\u306b\u4e88\u6e2c\u3068\u30e9\u30d9\u30eb\u3092\u5b8c\u5168\u306b\u30c7\u30b3\u30fc\u30c9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002</p> <p>\u52d5\u4f5c\u3092\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u307e\u305a\u3001\u6700\u521d\u306e\u8a13\u7df4\u4f8b\u306e\u30e9\u30d9\u30eb\u3092\u53d6\u5f97\u3057\u307e\u3059\uff1a</p> <pre><code># \u6700\u521d\u306e\u8a13\u7df4\u4f8b\u306e\u30e9\u30d9\u30eb\u3092\u6587\u5b57\u5217\u306b\u5909\u63db\nlabels = raw_datasets[\"train\"][0][\"ner_tags\"]\nlabel_names = raw_datasets[\"train\"].features[\"ner_tags\"].feature.names\nlabels = [label_names[i] for i in labels]\nprint(labels)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>['B-ORG', 'O', 'B-MISC', 'O', 'O', 'O', 'B-MISC', 'O', 'O']\n</code></pre></p> <p>\u6b21\u306b\u3001\u30a4\u30f3\u30c7\u30c3\u30af\u30b92\u306e\u5024\u3092\u5909\u66f4\u3057\u3066\u507d\u306e\u4e88\u6e2c\u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\uff1a</p> <pre><code># \u507d\u306e\u4e88\u6e2c\u3092\u4f5c\u6210\u3057\u3066\u30e1\u30c8\u30ea\u30af\u30b9\u3092\u30c6\u30b9\u30c8\npredictions = labels.copy()\npredictions[2] = \"O\"\nresult = metric.compute(predictions=[predictions], references=[labels])\nprint(result)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>{'MISC': {'precision': 1.0,\n  'recall': 0.5,\n  'f1': 0.6666666666666666,\n  'number': 2},\n 'ORG': {'precision': 1.0, 'recall': 1.0, 'f1': 1.0, 'number': 1},\n 'overall_precision': 1.0,\n 'overall_recall': 0.6666666666666666,\n 'overall_f1': 0.8,\n 'overall_accuracy': 0.8888888888888888}\n</code></pre></p> <p>\u8c4a\u5bcc\u306a\u8a55\u4fa1\u60c5\u5831\u304c\u8fd4\u3055\u308c\u307e\u3059\uff01\u5404\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u30bf\u30a4\u30d7\u5225\u306e\u7cbe\u5ea6\uff08precision\uff09\u3001\u518d\u73fe\u7387\uff08recall\uff09\u3001F1\u30b9\u30b3\u30a2\u3001\u304a\u3088\u3073\u5168\u4f53\u7684\u306a\u30b9\u30b3\u30a2\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002</p> <p>\u5b9f\u969b\u306e\u30e2\u30c7\u30eb\u4e88\u6e2c\u3092\u4f7f\u7528\u3057\u3066\u30b9\u30b3\u30a2\u3092\u8a08\u7b97\u3059\u308b\u6e96\u5099\u304c\u6574\u3044\u307e\u3057\u305f\u3002\u8a55\u4fa1\u6642\u306e\u4e88\u6e2c\u7d50\u679c\u3092\u51e6\u7406\u3059\u308b\u305f\u3081\u306e<code>compute_metrics</code>\u95a2\u6570\u3092\u5b9a\u7fa9\u3057\u307e\u3059\uff1a</p> <pre><code>import numpy as np\n\ndef compute_metrics(eval_preds):\n    \"\"\"\u8a55\u4fa1\u6307\u6a19\u3092\u8a08\u7b97\u3059\u308b\u95a2\u6570\"\"\"\n    logits, labels = eval_preds\n    predictions = np.argmax(logits, axis=-1)\n\n    # \u7121\u8996\u3055\u308c\u308b\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\uff08\u7279\u6b8a\u30c8\u30fc\u30af\u30f3\uff09\u3092\u524a\u9664\u3057\u3066\u30e9\u30d9\u30eb\u306b\u5909\u63db\n    true_labels = [[label_names[l] for l in label if l != -100] for label in labels]\n    true_predictions = [\n        [label_names[p] for (p, l) in zip(prediction, label) if l != -100]\n        for prediction, label in zip(predictions, labels)\n    ]\n\n    # seqeval\u30e1\u30c8\u30ea\u30af\u30b9\u3092\u8a08\u7b97\n    all_metrics = metric.compute(predictions=true_predictions, references=true_labels)\n    return {\n        \"precision\": all_metrics[\"overall_precision\"],\n        \"recall\": all_metrics[\"overall_recall\"],\n        \"f1\": all_metrics[\"overall_f1\"],\n        \"accuracy\": all_metrics[\"overall_accuracy\"],\n    }\n</code></pre>","tags":["\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","BERT","\u56fa\u6709\u8868\u73fe\u8a8d\u8b58","HuggingFace","Transformers"]},{"location":"LLM/ClassicalNLP/71_token_classification/#_9","title":"\u30e2\u30c7\u30eb\u306e\u5b9a\u7fa9","text":"<p>\u30c8\u30fc\u30af\u30f3\u5206\u985e\u554f\u984c\u306b\u53d6\u308a\u7d44\u3093\u3067\u3044\u308b\u305f\u3081\u3001<code>AutoModelForTokenClassification</code>\u30af\u30e9\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002</p> <p>\u3053\u306e\u30e2\u30c7\u30eb\u3092\u5b9a\u7fa9\u3059\u308b\u969b\u306e\u91cd\u8981\u306a\u30dd\u30a4\u30f3\u30c8\u306f\u3001\u30e9\u30d9\u30eb\u6570\u306e\u60c5\u5831\u3092\u6e21\u3059\u3053\u3068\u3067\u3059\u3002\u6700\u3082\u7c21\u5358\u306a\u65b9\u6cd5\u306f<code>num_labels</code>\u5f15\u6570\u3067\u305d\u306e\u6570\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3059\u304c\u3001\u63a8\u8ad6\u30a6\u30a3\u30b8\u30a7\u30c3\u30c8\u304c\u9069\u5207\u306b\u6a5f\u80fd\u3059\u308b\u3088\u3046\u306b\u3059\u308b\u306b\u306f\u3001\u30e9\u30d9\u30eb\u306e\u5bfe\u5fdc\u95a2\u4fc2\u3092\u660e\u793a\u7684\u306b\u8a2d\u5b9a\u3059\u308b\u65b9\u304c\u826f\u3044\u3067\u3057\u3087\u3046\u3002</p> <p>\u3053\u308c\u306f\u3001ID\u304b\u3089\u30e9\u30d9\u30eb\u3078\u306e\u30de\u30c3\u30d4\u30f3\u30b0\u3068\u305d\u306e\u9006\u65b9\u5411\u306e\u30de\u30c3\u30d4\u30f3\u30b0\u3092\u542b\u30802\u3064\u306e\u8f9e\u66f8<code>id2label</code>\u3068<code>label2id</code>\u306b\u3088\u3063\u3066\u8a2d\u5b9a\u3057\u307e\u3059\uff1a</p> <pre><code># \u30e9\u30d9\u30eb\u30de\u30c3\u30d4\u30f3\u30b0\u8f9e\u66f8\u3092\u4f5c\u6210\nid2label = {i: label for i, label in enumerate(label_names)}\nlabel2id = {v: k for k, v in id2label.items()}\nprint(f\"id2label: {id2label}\")\nprint(f\"label2id: {label2id}\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>id2label: {0: 'O', 1: 'B-PER', 2: 'I-PER', 3: 'B-ORG', 4: 'I-ORG', 5: 'B-LOC', 6: 'I-LOC', 7: 'B-MISC', 8: 'I-MISC'}\nlabel2id: {'O': 0, 'B-PER': 1, 'I-PER': 2, 'B-ORG': 3, 'I-ORG': 4, 'B-LOC': 5, 'I-LOC': 6, 'B-MISC': 7, 'I-MISC': 8}\n</code></pre></p> <p>\u3053\u308c\u3089\u306e\u8f9e\u66f8\u3092<code>AutoModelForTokenClassification.from_pretrained()</code>\u30e1\u30bd\u30c3\u30c9\u306b\u6e21\u3059\u3053\u3068\u3067\u3001\u30e2\u30c7\u30eb\u306e\u8a2d\u5b9a\u306b\u53cd\u6620\u3055\u308c\u307e\u3059\uff1a</p> <pre><code>from transformers import AutoModelForTokenClassification\n\n# \u30c8\u30fc\u30af\u30f3\u5206\u985e\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\nmodel = AutoModelForTokenClassification.from_pretrained(\n    model_checkpoint,\n    id2label=id2label,\n    label2id=label2id\n)\n\n# \u30e9\u30d9\u30eb\u6570\u3092\u78ba\u8a8d\nprint(f\"\u30e9\u30d9\u30eb\u6570: {model.config.num_labels}\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>Some weights of BertForTokenClassification were not initialized from the model checkpoint at bert-base-cased and are newly initialized: ['classifier.bias', 'classifier.weight']\nYou should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n\u30e9\u30d9\u30eb\u6570: 9\n</code></pre></p>","tags":["\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","BERT","\u56fa\u6709\u8868\u73fe\u8a8d\u8b58","HuggingFace","Transformers"]},{"location":"LLM/ClassicalNLP/71_token_classification/#_10","title":"\u30e2\u30c7\u30eb\u306e\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","text":"<p>\u3053\u308c\u3067\u30e2\u30c7\u30eb\u3092\u8a13\u7df4\u3059\u308b\u6e96\u5099\u304c\u6574\u3044\u307e\u3057\u305f\uff01\u307e\u305a\u3001\u8a13\u7df4\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u5b9a\u7fa9\u3057\u307e\u3059\uff1a</p> <pre><code>from transformers import TrainingArguments\n\n# \u8a13\u7df4\u5f15\u6570\u3092\u8a2d\u5b9a\nargs = TrainingArguments(\n    \"bert-finetuned-ner\",           # \u51fa\u529b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\n    eval_strategy=\"epoch\",          # \u30a8\u30dd\u30c3\u30af\u3054\u3068\u306b\u8a55\u4fa1\n    save_strategy=\"epoch\",          # \u30a8\u30dd\u30c3\u30af\u3054\u3068\u306b\u4fdd\u5b58\n    learning_rate=2e-5,            # \u5b66\u7fd2\u7387\n    num_train_epochs=3,            # \u8a13\u7df4\u30a8\u30dd\u30c3\u30af\u6570\n    weight_decay=0.01,             # \u91cd\u307f\u6e1b\u8870\n    push_to_hub=False,             # Hub\u306b\u30d7\u30c3\u30b7\u30e5\u3057\u306a\u3044\n)\n</code></pre> <p>\u6700\u5f8c\u306b\u3001\u3059\u3079\u3066\u306e\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3092<code>Trainer</code>\u306b\u6e21\u3057\u3066\u8a13\u7df4\u3092\u958b\u59cb\u3057\u307e\u3059\uff1a</p> <pre><code>from transformers import Trainer\n\n# Trainer\u3092\u4f5c\u6210\ntrainer = Trainer(\n    model=model,\n    args=args,\n    train_dataset=tokenized_datasets[\"train\"],\n    eval_dataset=tokenized_datasets[\"validation\"],\n    data_collator=data_collator,\n    compute_metrics=compute_metrics,\n    processing_class=tokenizer\n)\n\n# \u8a13\u7df4\u3092\u5b9f\u884c\uff08\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\uff09\n# trainer.train()\n</code></pre>","tags":["\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","BERT","\u56fa\u6709\u8868\u73fe\u8a8d\u8b58","HuggingFace","Transformers"]},{"location":"LLM/ClassicalNLP/71_token_classification/#_11","title":"\u30ab\u30b9\u30bf\u30e0\u8a13\u7df4\u30eb\u30fc\u30d7","text":"<p>\u3088\u308a\u7d30\u304b\u3044\u5236\u5fa1\u304c\u5fc5\u8981\u306a\u5834\u5408\u306b\u5099\u3048\u3066\u3001\u5b8c\u5168\u306a\u8a13\u7df4\u30eb\u30fc\u30d7\u306e\u5b9f\u88c5\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002</p>","tags":["\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","BERT","\u56fa\u6709\u8868\u73fe\u8a8d\u8b58","HuggingFace","Transformers"]},{"location":"LLM/ClassicalNLP/71_token_classification/#_12","title":"\u8a13\u7df4\u306e\u6e96\u5099","text":"<p>\u307e\u305a\u3001\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304b\u3089<code>DataLoader</code>\u3092\u69cb\u7bc9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002<code>data_collator</code>\u3092<code>collate_fn</code>\u3068\u3057\u3066\u518d\u5229\u7528\u3057\u3001\u8a13\u7df4\u30bb\u30c3\u30c8\u3092\u30b7\u30e3\u30c3\u30d5\u30eb\u3057\u307e\u3059\u304c\u3001\u691c\u8a3c\u30bb\u30c3\u30c8\u306f\u30b7\u30e3\u30c3\u30d5\u30eb\u3057\u307e\u305b\u3093\uff1a</p> <pre><code>from torch.utils.data import DataLoader\n\n# \u30c7\u30fc\u30bf\u30ed\u30fc\u30c0\u30fc\u3092\u4f5c\u6210\ntrain_dataloader = DataLoader(\n    tokenized_datasets[\"train\"],\n    shuffle=True,\n    collate_fn=data_collator,\n    batch_size=8\n)\n\neval_dataloader = DataLoader(\n    tokenized_datasets[\"validation\"],\n    collate_fn=data_collator,\n    batch_size=8\n)\n</code></pre> <p>\u6b21\u306b\u3001\u30e2\u30c7\u30eb\u3092\u518d\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3057\u3066\u3001\u4ee5\u524d\u306e\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u7d50\u679c\u304b\u3089\u7d99\u7d9a\u3059\u308b\u306e\u3067\u306f\u306a\u304f\u3001BERT\u4e8b\u524d\u8a13\u7df4\u6e08\u307f\u30e2\u30c7\u30eb\u304b\u3089\u65b0\u305f\u306b\u958b\u59cb\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3059\uff1a</p> <pre><code># \u30e2\u30c7\u30eb\u3092\u518d\u4f5c\u6210\uff08\u65b0\u3057\u3044\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\uff09\nmodel = AutoModelForTokenClassification.from_pretrained(\n    model_checkpoint,\n    id2label=id2label,\n    label2id=label2id\n)\n</code></pre> <p>\u6b21\u306b\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u30fc\u304c\u5fc5\u8981\u3067\u3059\u3002\u91cd\u307f\u6e1b\u8870\u306e\u9069\u7528\u65b9\u6cd5\u304c\u6539\u826f\u3055\u308c\u305f<code>Adam</code>\u3067\u3042\u308b<code>AdamW</code>\u3092\u4f7f\u7528\u3057\u307e\u3059\uff1a</p> <pre><code>from torch.optim import AdamW\n\n# \u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u30fc\u3092\u4f5c\u6210\noptimizer = AdamW(model.parameters(), lr=2e-5)\n</code></pre> <p>\u3053\u308c\u3089\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u3059\u3079\u3066\u63c3\u3063\u305f\u3089\u3001<code>accelerator.prepare()</code>\u30e1\u30bd\u30c3\u30c9\u306b\u9001\u4fe1\u3067\u304d\u307e\u3059\uff1a</p> <pre><code>from accelerate import Accelerator\n\n# Accelerator\u3092\u521d\u671f\u5316\u3057\u3066\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6e96\u5099\naccelerator = Accelerator()\nmodel, optimizer, train_dataloader, eval_dataloader = accelerator.prepare(\n    model, optimizer, train_dataloader, eval_dataloader\n)\n</code></pre> <p><code>train_dataloader</code>\u3092<code>accelerator.prepare()</code>\u306b\u6e21\u3057\u305f\u306e\u3067\u3001\u305d\u306e\u9577\u3055\u3092\u4f7f\u7528\u3057\u3066\u8a13\u7df4\u30b9\u30c6\u30c3\u30d7\u6570\u3092\u8a08\u7b97\u3067\u304d\u307e\u3059\u3002</p> <p>\u91cd\u8981: \u30c7\u30fc\u30bf\u30ed\u30fc\u30c0\u30fc\u3092\u6e96\u5099\u3057\u305f\u5f8c\u306b\u9577\u3055\u3092\u8a08\u7b97\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002<code>prepare()</code>\u30e1\u30bd\u30c3\u30c9\u304c\u30c7\u30fc\u30bf\u30ed\u30fc\u30c0\u30fc\u306e\u9577\u3055\u3092\u5909\u66f4\u3059\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u305f\u3081\u3067\u3059\u3002\u5b66\u7fd2\u7387\u3092\u7dda\u5f62\u306b\u30bc\u30ed\u307e\u3067\u6e1b\u8870\u3055\u305b\u308b\u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u30fc\u3092\u4f7f\u7528\u3057\u307e\u3059\uff1a</p> <pre><code>from transformers import get_scheduler\n\n# \u5b66\u7fd2\u7387\u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u30fc\u3092\u8a2d\u5b9a\nnum_train_epochs = 3\nnum_update_steps_per_epoch = len(train_dataloader)\nnum_training_steps = num_train_epochs * num_update_steps_per_epoch\n\nlr_scheduler = get_scheduler(\n    \"linear\",\n    optimizer=optimizer,\n    num_warmup_steps=0,\n    num_training_steps=num_training_steps\n)\n</code></pre>","tags":["\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","BERT","\u56fa\u6709\u8868\u73fe\u8a8d\u8b58","HuggingFace","Transformers"]},{"location":"LLM/ClassicalNLP/71_token_classification/#_13","title":"\u8a13\u7df4\u30eb\u30fc\u30d7","text":"<p>\u5b8c\u5168\u306a\u8a13\u7df4\u30eb\u30fc\u30d7\u3092\u66f8\u304f\u6e96\u5099\u304c\u6574\u3044\u307e\u3057\u305f\u3002\u8a55\u4fa1\u90e8\u5206\u3092\u7c21\u6f54\u306b\u3059\u308b\u305f\u3081\u3001\u4e88\u6e2c\u3068\u30e9\u30d9\u30eb\u3092\u53d7\u3051\u53d6\u308a\u3001<code>metric</code>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u671f\u5f85\u3059\u308b\u6587\u5b57\u5217\u306e\u30ea\u30b9\u30c8\u306b\u5909\u63db\u3059\u308b<code>postprocess()</code>\u95a2\u6570\u3092\u5b9a\u7fa9\u3057\u307e\u3059\uff1a</p> <pre><code>def postprocess(predictions, labels):\n    \"\"\"\u5f8c\u51e6\u7406\u95a2\u6570\uff1a\u4e88\u6e2c\u3068\u30e9\u30d9\u30eb\u3092\u6587\u5b57\u5217\u30ea\u30b9\u30c8\u306b\u5909\u63db\"\"\"\n    predictions = predictions.detach().cpu().clone().numpy()\n    labels = labels.detach().cpu().clone().numpy()\n\n    # \u7121\u8996\u3055\u308c\u308b\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u524a\u9664\u3057\u3066\u30e9\u30d9\u30eb\u306b\u5909\u63db\n    true_labels = [[label_names[l] for l in label if l != -100] for label in labels]\n    true_predictions = [\n        [label_names[p] for (p, l) in zip(prediction, label) if l != -100]\n        for prediction, label in zip(predictions, labels)\n    ]\n    return true_labels, true_predictions\n</code></pre> <p>\u6b21\u306b\u8a13\u7df4\u30eb\u30fc\u30d7\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\u8a13\u7df4\u306e\u9032\u884c\u72b6\u6cc1\u3092\u8ffd\u8de1\u3059\u308b\u30d7\u30ed\u30b0\u30ec\u30b9\u30d0\u30fc\u3092\u5b9a\u7fa9\u3057\u305f\u5f8c\u3001\u30eb\u30fc\u30d7\u306f3\u3064\u306e\u4e3b\u8981\u306a\u90e8\u5206\u304b\u3089\u69cb\u6210\u3055\u308c\u307e\u3059\uff1a</p> <ol> <li>\u8a13\u7df4\u30d5\u30a7\u30fc\u30ba: <code>train_dataloader</code>\u306e\u901a\u5e38\u306e\u53cd\u5fa9\u51e6\u7406\u3001\u30e2\u30c7\u30eb\u3092\u901a\u3057\u305f\u9806\u4f1d\u64ad\u3001\u9006\u4f1d\u64ad\u3068\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u30fc\u30b9\u30c6\u30c3\u30d7</li> <li>\u8a55\u4fa1\u30d5\u30a7\u30fc\u30ba: \u30e2\u30c7\u30eb\u306e\u30d0\u30c3\u30c1\u51fa\u529b\u3092\u53d6\u5f97\u3057\u305f\u5f8c\u3001\u8907\u6570\u306e\u30d7\u30ed\u30bb\u30b9\u9593\u3067\u7570\u306a\u308b\u5f62\u72b6\u306b\u5165\u529b\u3068\u30e9\u30d9\u30eb\u304c\u30d1\u30c7\u30a3\u30f3\u30b0\u3055\u308c\u3066\u3044\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u305f\u3081\u3001<code>gather()</code>\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3059\u524d\u306b<code>accelerator.pad_across_processes()</code>\u3092\u4f7f\u7528\u3057\u3066\u4e88\u6e2c\u3068\u30e9\u30d9\u30eb\u3092\u540c\u3058\u5f62\u72b6\u306b\u63c3\u3048\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059</li> <li>\u4fdd\u5b58\u30d5\u30a7\u30fc\u30ba: \u30e2\u30c7\u30eb\u3068tokenizer\u3092\u4fdd\u5b58\u3057\u307e\u3059</li> </ol> <p>\u5b8c\u5168\u306a\u8a13\u7df4\u30eb\u30fc\u30d7\u306e\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\uff1a</p> <pre><code>from tqdm import tqdm\nimport torch\n\n# \u8a13\u7df4\u30eb\u30fc\u30d7\u3092\u5b9f\u884c\nprogress_bar = tqdm(range(num_training_steps))\noutput_dir = \"bert-finetuned-ner-accelerate\"\n\nfor epoch in range(num_train_epochs):\n    # \u8a13\u7df4\u30d5\u30a7\u30fc\u30ba\n    model.train()\n    for batch in train_dataloader:\n        # \u9806\u4f1d\u64ad\n        outputs = model(**batch)\n        loss = outputs.loss\n\n        # \u9006\u4f1d\u64ad\n        accelerator.backward(loss)\n\n        # \u30d1\u30e9\u30e1\u30fc\u30bf\u66f4\u65b0\n        optimizer.step()\n        lr_scheduler.step()\n        optimizer.zero_grad()\n        progress_bar.update(1)\n\n    # \u8a55\u4fa1\u30d5\u30a7\u30fc\u30ba\n    model.eval()\n    for batch in eval_dataloader:\n        with torch.no_grad():\n            outputs = model(**batch)\n\n        predictions = outputs.logits.argmax(dim=-1)\n        labels = batch[\"labels\"]\n\n        # \u4e88\u6e2c\u3068\u30e9\u30d9\u30eb\u3092\u53ce\u96c6\u306e\u305f\u3081\u306b\u30d1\u30c7\u30a3\u30f3\u30b0\n        predictions = accelerator.pad_across_processes(predictions, dim=1, pad_index=-100)\n        labels = accelerator.pad_across_processes(labels, dim=1, pad_index=-100)\n\n        predictions_gathered = accelerator.gather(predictions)\n        labels_gathered = accelerator.gather(labels)\n\n        true_predictions, true_labels = postprocess(predictions_gathered, labels_gathered)\n        metric.add_batch(predictions=true_predictions, references=true_labels)\n\n    # \u8a55\u4fa1\u6307\u6a19\u3092\u8a08\u7b97\u30fb\u8868\u793a\n    results = metric.compute()\n    print(\n        f\"epoch {epoch}:\",\n        {\n            key: results[f\"overall_{key}\"] \n            for key in [\"precision\", \"recall\", \"f1\", \"accuracy\"]\n        }\n    )\n\n    # \u30e2\u30c7\u30eb\u3068tokenizer\u3092\u4fdd\u5b58\n    accelerator.wait_for_everyone()\n    unwrapped_model = accelerator.unwrap_model(model)\n    unwrapped_model.save_pretrained(output_dir, save_function=accelerator.save)\n    if accelerator.is_main_process:\n        tokenizer.save_pretrained(output_dir)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>5%|\u258c         | 281/5268 [00:47&lt;07:22, 11.28it/s]\n</code></pre></p> <p>HuggingFace Accelerate\u3067\u30e2\u30c7\u30eb\u3092\u4fdd\u5b58\u3059\u308b\u306e\u304c\u521d\u3081\u3066\u306e\u5834\u5408\u306f\u3001\u95a2\u9023\u3059\u308b3\u884c\u306e\u30b3\u30fc\u30c9\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\uff1a</p> <pre><code># \u5168\u30d7\u30ed\u30bb\u30b9\u306e\u540c\u671f\u3092\u5f85\u3064\naccelerator.wait_for_everyone()\n# \u30d9\u30fc\u30b9\u30e2\u30c7\u30eb\u3092\u53d6\u5f97\nunwrapped_model = accelerator.unwrap_model(model)\n# \u30e2\u30c7\u30eb\u3092\u4fdd\u5b58\nunwrapped_model.save_pretrained(output_dir, save_function=accelerator.save)\n</code></pre> <p>1\u884c\u76ee: \u5168\u30d7\u30ed\u30bb\u30b9\u306e\u540c\u671f\u3092\u5f85\u6a5f\u3057\u307e\u3059\u3002\u4fdd\u5b58\u524d\u306b\u3059\u3079\u3066\u306e\u30d7\u30ed\u30bb\u30b9\u304c\u3053\u306e\u6bb5\u968e\u306b\u5230\u9054\u3059\u308b\u306e\u3092\u5f85\u3061\u307e\u3059\u3002</p> <p>2\u884c\u76ee: \u5143\u306e\u30e2\u30c7\u30eb\uff08<code>unwrapped_model</code>\uff09\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002<code>accelerator.prepare()</code>\u30e1\u30bd\u30c3\u30c9\u306f\u5206\u6563\u8a13\u7df4\u7528\u306b\u30e2\u30c7\u30eb\u3092\u5909\u66f4\u3059\u308b\u305f\u3081\u3001<code>save_pretrained()</code>\u30e1\u30bd\u30c3\u30c9\u304c\u30a2\u30af\u30bb\u30b9\u3067\u304d\u306a\u304f\u306a\u308a\u307e\u3059\u3002<code>accelerator.unwrap_model()</code>\u30e1\u30bd\u30c3\u30c9\u3067\u3053\u306e\u5909\u66f4\u3092\u5143\u306b\u623b\u3057\u307e\u3059\u3002</p> <p>3\u884c\u76ee: <code>save_pretrained()</code>\u3092\u547c\u3073\u51fa\u3057\u307e\u3059\u304c\u3001\u6a19\u6e96\u306e<code>torch.save()</code>\u306e\u4ee3\u308f\u308a\u306b<code>accelerator.save()</code>\u3092\u4f7f\u7528\u3059\u308b\u3088\u3046\u306b\u6307\u5b9a\u3057\u307e\u3059\u3002</p> <p>\u3053\u308c\u304c\u5b8c\u4e86\u3059\u308b\u3068\u3001<code>Trainer</code>\u3067\u8a13\u7df4\u3057\u305f\u30e2\u30c7\u30eb\u3068\u975e\u5e38\u306b\u4f3c\u305f\u7d50\u679c\u3092\u5f97\u3089\u308c\u308b\u306f\u305a\u3067\u3059\u3002\u3053\u306e\u30b3\u30fc\u30c9\u3092\u4f7f\u7528\u3057\u3066\u8a13\u7df4\u3057\u305f\u30e2\u30c7\u30eb\u306e\u4f8b\u306fhuggingface-course/bert-finetuned-ner-accelerate\u3067\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002</p> <p>\u8a13\u7df4\u30eb\u30fc\u30d7\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3057\u305f\u3044\u5834\u5408\u306f\u3001\u4e0a\u8a18\u306e\u30b3\u30fc\u30c9\u3092\u7de8\u96c6\u3057\u3066\u72ec\u81ea\u306e\u5b9f\u88c5\u3092\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff01</p>","tags":["\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","BERT","\u56fa\u6709\u8868\u73fe\u8a8d\u8b58","HuggingFace","Transformers"]},{"location":"LLM/ClassicalNLP/71_token_classification/#_14","title":"\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3057\u305f\u30e2\u30c7\u30eb\u306e\u4f7f\u7528","text":"<p>\u30ed\u30fc\u30ab\u30eb\u74b0\u5883\u3067<code>pipeline</code>\u3092\u4f7f\u7528\u3059\u308b\u306b\u306f\u3001\u9069\u5207\u306a\u30e2\u30c7\u30eb\u8b58\u5225\u5b50\u3092\u6307\u5b9a\u3059\u308b\u3060\u3051\u3067\u3059\uff1a</p> <pre><code>from transformers import pipeline\n\n# \u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3057\u305f\u30e2\u30c7\u30eb\u3067\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u3092\u4f5c\u6210\n# (\u5b9f\u969b\u306e\u30c1\u30a7\u30c3\u30af\u30dd\u30a4\u30f3\u30c8\u306b\u7f6e\u304d\u63db\u3048\u3066\u304f\u3060\u3055\u3044)\nmodel_checkpoint = \"bert-finetuned-ner-accelerate\"\ntoken_classifier = pipeline(\n    \"token-classification\", \n    model=model_checkpoint, \n    aggregation_strategy=\"simple\"\n)\n\n# \u30e2\u30c7\u30eb\u3092\u30c6\u30b9\u30c8\nresult = token_classifier(\"My name is Sylvain and I work at Hugging Face in Brooklyn.\")\nprint(result)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>Device set to use mps:0\n[{'entity_group': 'PER', 'score': 0.9961755, 'word': 'Sylvain', 'start': 11, 'end': 18}, \n{'entity_group': 'ORG', 'score': 0.98193836, 'word': 'Hugging Face', 'start': 33, 'end': 45}, \n{'entity_group': 'LOC', 'score': 0.99809605, 'word': 'Brooklyn', 'start': 49, 'end': 57}]\n</code></pre></p> <p>\u7d20\u6674\u3089\u3057\u3044\u7d50\u679c\u3067\u3059\uff01\u30e2\u30c7\u30eb\u306f\u6587\u4e2d\u306e3\u3064\u306e\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u3092\u6b63\u78ba\u306b\u8b58\u5225\u3057\u307e\u3057\u305f\uff1a</p> <ul> <li>\"Sylvain\"\u3092\u4eba\u540d\uff08PER\uff09\u3068\u3057\u3066</li> <li>\"Hugging Face\"\u3092\u7d44\u7e54\u540d\uff08ORG\uff09\u3068\u3057\u3066  </li> <li>\"Brooklyn\"\u3092\u5730\u540d\uff08LOC\uff09\u3068\u3057\u3066</li> </ul>","tags":["\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","BERT","\u56fa\u6709\u8868\u73fe\u8a8d\u8b58","HuggingFace","Transformers"]},{"location":"LLM/ClassicalNLP/71_token_classification/#_15","title":"\u53c2\u8003\u8cc7\u6599","text":"<ul> <li>CoNLL-2003\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8</li> <li>HuggingFace Transformers\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8</li> <li>seqeval\u8a55\u4fa1\u30e9\u30a4\u30d6\u30e9\u30ea</li> <li>HuggingFace Accelerate\u30e9\u30a4\u30d6\u30e9\u30ea</li> <li>\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u6e08\u307f\u30e2\u30c7\u30eb</li> </ul>","tags":["\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u6a5f\u68b0\u5b66\u7fd2","BERT","\u56fa\u6709\u8868\u73fe\u8a8d\u8b58","HuggingFace","Transformers"]},{"location":"LLM/ClassicalNLP/72_masked_language_modeling/","title":"\u30de\u30b9\u30af\u8a00\u8a9e\u30e2\u30c7\u30eb\u306e\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","text":"","tags":["\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","BERT","DistilBERT","\u30de\u30b9\u30af\u8a00\u8a9e\u30e2\u30c7\u30ea\u30f3\u30b0"]},{"location":"LLM/ClassicalNLP/72_masked_language_modeling/#_2","title":"\u6982\u8981","text":"<p>\u3053\u306e\u8a18\u4e8b\u3067\u306f\u3001Transformer\u30e2\u30c7\u30eb\u306e\u30de\u30b9\u30af\u8a00\u8a9e\u30e2\u30c7\u30ea\u30f3\u30b0\uff08Masked Language Modeling\uff09\u3092\u4f7f\u3063\u305f\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u306b\u3064\u3044\u3066\u5b66\u7fd2\u3057\u307e\u3059\u3002\u7279\u306b\u3001\u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u306eDistilBERT\u30e2\u30c7\u30eb\u3092\u6620\u753b\u30ec\u30d3\u30e5\u30fc\u30c7\u30fc\u30bf\u3067\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3057\u3001\u30c9\u30e1\u30a4\u30f3\u9069\u5fdc\uff08Domain Adaptation\uff09\u3092\u5b9f\u73fe\u3059\u308b\u624b\u6cd5\u3092\u5b9f\u8df5\u7684\u306b\u89e3\u8aac\u3057\u307e\u3059\u3002</p> <p>\u53c2\u8003\u8cc7\u6599</p> <p>\u672c\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306f Hugging Face LLM Course \u3092\u53c2\u8003\u306b\u3001\u65e5\u672c\u8a9e\u3067\u5b66\u7fd2\u5185\u5bb9\u3092\u307e\u3068\u3081\u305f\u500b\u4eba\u7684\u306a\u5b66\u7fd2\u30ce\u30fc\u30c8\u3067\u3059\u3002\u8a73\u7d30\u306a\u5185\u5bb9\u3084\u6700\u65b0\u60c5\u5831\u306b\u3064\u3044\u3066\u306f\u3001\u539f\u6587\u3082\u4f75\u305b\u3066\u3054\u53c2\u7167\u304f\u3060\u3055\u3044\u3002</p>","tags":["\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","BERT","DistilBERT","\u30de\u30b9\u30af\u8a00\u8a9e\u30e2\u30c7\u30ea\u30f3\u30b0"]},{"location":"LLM/ClassicalNLP/72_masked_language_modeling/#_3","title":"\u524d\u63d0\u77e5\u8b58","text":"<ul> <li>Python\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u57fa\u790e\u77e5\u8b58</li> <li>\u6a5f\u68b0\u5b66\u7fd2\u3068\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0\u306e\u57fa\u672c\u6982\u5ff5</li> <li>Transformer\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306e\u7406\u89e3</li> <li>PyTorch\u307e\u305f\u306fTensorFlow\u306e\u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9</li> </ul>","tags":["\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","BERT","DistilBERT","\u30de\u30b9\u30af\u8a00\u8a9e\u30e2\u30c7\u30ea\u30f3\u30b0"]},{"location":"LLM/ClassicalNLP/72_masked_language_modeling/#_4","title":"\u30c9\u30e1\u30a4\u30f3\u9069\u5fdc\u306e\u5fc5\u8981\u6027","text":"<p>\u591a\u304f\u306eNLP\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u306f\u3001Hugging Face Hub\u306e\u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u3092\u76f4\u63a5\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3059\u308b\u3060\u3051\u3067\u826f\u3044\u7d50\u679c\u304c\u5f97\u3089\u308c\u307e\u3059\u3002\u3057\u304b\u3057\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u5834\u5408\u306b\u306f\u3001\u307e\u305a\u8a00\u8a9e\u30e2\u30c7\u30eb\u3092\u30c9\u30e1\u30a4\u30f3\u56fa\u6709\u306e\u30c7\u30fc\u30bf\u3067\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3057\u3066\u304b\u3089\u3001\u30bf\u30b9\u30af\u56fa\u6709\u306e\u30d8\u30c3\u30c9\u3092\u5b66\u7fd2\u3055\u305b\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002</p> <ul> <li>\u6cd5\u5f8b\u6587\u66f8: \u6cd5\u7684\u5c02\u9580\u7528\u8a9e\u304c\u591a\u304f\u542b\u307e\u308c\u3066\u3044\u308b</li> <li>\u79d1\u5b66\u8ad6\u6587: \u5c02\u9580\u7684\u306a\u5b66\u8853\u7528\u8a9e\u304c\u983b\u51fa\u3057\u3066\u3044\u308b</li> <li>\u533b\u7642\u8a18\u9332: \u533b\u7642\u56fa\u6709\u306e\u7565\u8a9e\u3084\u7528\u8a9e\u304c\u4f7f\u7528\u3055\u308c\u3066\u3044\u308b</li> </ul> <p>\u3053\u306e\u3088\u3046\u306a\u5834\u5408\u3001BERT\u306e\u3088\u3046\u306a\u6c4e\u7528Transformer\u30e2\u30c7\u30eb\u306f\u3001\u30c9\u30e1\u30a4\u30f3\u56fa\u6709\u306e\u5358\u8a9e\u3092\u7a00\u5c11\u30c8\u30fc\u30af\u30f3\uff08rare tokens\uff09\u3068\u3057\u3066\u6271\u3044\u3001\u671f\u5f85\u3059\u308b\u6027\u80fd\u304c\u5f97\u3089\u308c\u306a\u3044\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002</p> <p>\u30c9\u30e1\u30a4\u30f3\u5185\u30c7\u30fc\u30bf\u3067\u8a00\u8a9e\u30e2\u30c7\u30eb\u3092\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3059\u308b\u3053\u3068\u3067\u3001\u591a\u304f\u306e\u4e0b\u6d41\u30bf\u30b9\u30af\u306e\u6027\u80fd\u3092\u5411\u4e0a\u3055\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u3001\u901a\u5e38\u3053\u306e\u51e6\u7406\u306f\u4e00\u5ea6\u3060\u3051\u5b9f\u884c\u3059\u308c\u3070\u6e08\u307f\u307e\u3059\u3002</p> <p>\u3053\u306e\u624b\u6cd5\u306f\u30c9\u30e1\u30a4\u30f3\u9069\u5fdc\u3068\u547c\u3070\u308c\u30012018\u5e74\u306bULMFiT\u306b\u3088\u3063\u3066\u666e\u53ca\u3057\u307e\u3057\u305f\u3002ULMFiT\u306f\u3001NLP\u306b\u304a\u3051\u308b\u8ee2\u79fb\u5b66\u7fd2\u3092\u5b9f\u7528\u5316\u3057\u305f\u6700\u521d\u306e\u30cb\u30e5\u30fc\u30e9\u30eb\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\uff08LSTM\u57fa\u76e4\uff09\u306e\u4e00\u3064\u3067\u3057\u305f\u3002</p>","tags":["\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","BERT","DistilBERT","\u30de\u30b9\u30af\u8a00\u8a9e\u30e2\u30c7\u30ea\u30f3\u30b0"]},{"location":"LLM/ClassicalNLP/72_masked_language_modeling/#_5","title":"\u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u306e\u9078\u629e","text":"<p>\u30de\u30b9\u30af\u8a00\u8a9e\u30e2\u30c7\u30ea\u30f3\u30b0\u7528\u306e\u9069\u5207\u306a\u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u3092\u9078\u629e\u3057\u307e\u3057\u3087\u3046\u3002Hugging Face Hub\u3067\u306f\u3001\u300cFill-Mask\u300d\u30d5\u30a3\u30eb\u30bf\u30fc\u3092\u9069\u7528\u3059\u308b\u3053\u3068\u3067\u5019\u88dc\u3092\u898b\u3064\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p> <p>BERT\u3084RoBERTa\u30d5\u30a1\u30df\u30ea\u306e\u30e2\u30c7\u30eb\u304c\u6700\u3082\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u4eca\u56de\u306fDistilBERT\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u3053\u306e\u30e2\u30c7\u30eb\u306f\u3001\u4e0b\u6d41\u30bf\u30b9\u30af\u3067\u306e\u6027\u80fd\u3092\u307b\u3068\u3093\u3069\u640d\u306a\u3046\u3053\u3068\u306a\u304f\u3001\u306f\u308b\u304b\u306b\u9ad8\u901f\u306b\u5b66\u7fd2\u3067\u304d\u307e\u3059\u3002</p>","tags":["\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","BERT","DistilBERT","\u30de\u30b9\u30af\u8a00\u8a9e\u30e2\u30c7\u30ea\u30f3\u30b0"]},{"location":"LLM/ClassicalNLP/72_masked_language_modeling/#distilbert","title":"DistilBERT\u306e\u7279\u5fb4","text":"<p>DistilBERT\u306f\u77e5\u8b58\u84b8\u7559\uff08Knowledge Distillation\uff09\u3068\u3044\u3046\u7279\u5225\u306a\u6280\u8853\u3092\u4f7f\u3063\u3066\u8a13\u7df4\u3055\u308c\u307e\u3057\u305f\u3002</p> <ul> <li>\u6559\u5e2b\u30e2\u30c7\u30eb: BERT\uff08\u5927\u898f\u6a21\u30e2\u30c7\u30eb\uff09</li> <li>\u751f\u5f92\u30e2\u30c7\u30eb: DistilBERT\uff08\u30d1\u30e9\u30e1\u30fc\u30bf\u6570\u304c\u5927\u5e45\u306b\u524a\u6e1b\u3055\u308c\u305f\u30e2\u30c7\u30eb\uff09</li> <li>\u7d50\u679c: \u6027\u80fd\u3092\u307b\u307c\u7dad\u6301\u3057\u306a\u304c\u3089\u3001\u7d042\u500d\u306e\u9ad8\u901f\u5316\u3092\u5b9f\u73fe\u3057\u3066\u3044\u308b</li> </ul> <p>\u307e\u305a\u3001<code>AutoModelForMaskedLM</code>\u30af\u30e9\u30b9\u3092\u4f7f\u3063\u3066DistilBERT\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u307e\u3057\u3087\u3046\u3002</p> <pre><code>from transformers import AutoModelForMaskedLM\n\n# DistilBERT\u306e\u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u3092\u8aad\u307f\u8fbc\u307f\nmodel_checkpoint = \"distilbert-base-uncased\"\nmodel = AutoModelForMaskedLM.from_pretrained(model_checkpoint)\n</code></pre> <p>\u30e2\u30c7\u30eb\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u6570\u3092\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002</p> <pre><code># \u30e2\u30c7\u30eb\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u6570\u3092\u8a08\u7b97\uff08\u767e\u4e07\u5358\u4f4d\uff09\ndistilbert_num_parameters = model.num_parameters() / 1_000_000\nprint(f\"'&gt;&gt;&gt; DistilBERT \u30d1\u30e9\u30e1\u30fc\u30bf\u6570: {round(distilbert_num_parameters)}M'\")\nprint(f\"'&gt;&gt;&gt; BERT \u30d1\u30e9\u30e1\u30fc\u30bf\u6570: 110M'\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>'&gt;&gt;&gt; DistilBERT \u30d1\u30e9\u30e1\u30fc\u30bf\u6570: 67M'\n'&gt;&gt;&gt; BERT \u30d1\u30e9\u30e1\u30fc\u30bf\u6570: 110M'\n</code></pre></p> <p>\u7d046700\u4e07\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6301\u3064DistilBERT\u306f\u3001BERT\u30d9\u30fc\u30b9\u30e2\u30c7\u30eb\u306e\u7d042\u5206\u306e1\u306e\u30b5\u30a4\u30ba\u3067\u3001\u5b66\u7fd2\u6642\u9593\u3082\u7d042\u500d\u9ad8\u901f\u5316\u3055\u308c\u307e\u3059\u3002</p>","tags":["\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","BERT","DistilBERT","\u30de\u30b9\u30af\u8a00\u8a9e\u30e2\u30c7\u30ea\u30f3\u30b0"]},{"location":"LLM/ClassicalNLP/72_masked_language_modeling/#_6","title":"\u30de\u30b9\u30af\u4e88\u6e2c\u306e\u30c6\u30b9\u30c8","text":"<p>DistilBERT\u304c\u3069\u306e\u3088\u3046\u306a\u30c8\u30fc\u30af\u30f3\u3092\u4e88\u6e2c\u3059\u308b\u304b\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002</p> <pre><code># \u30c6\u30b9\u30c8\u7528\u306e\u30b5\u30f3\u30d7\u30eb\u30c6\u30ad\u30b9\u30c8\ntext = \"This is a great [MASK].\"\n</code></pre> <p>\u4eba\u9593\u304c\u8003\u3048\u308b\u3068\u3001<code>[MASK]</code>\u306e\u4f4d\u7f6e\u306b\u306f\u300cday\u300d\u3001\u300cride\u300d\u3001\u300cpainting\u300d\u306a\u3069\u69d8\u3005\u306a\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002\u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u306e\u4e88\u6e2c\u306f\u3001\u5b66\u7fd2\u306b\u4f7f\u7528\u3055\u308c\u305f\u30b3\u30fc\u30d1\u30b9\u306b\u4f9d\u5b58\u3057\u307e\u3059\u3002DistilBERT\u306f\u3001BERT\u3068\u540c\u69d8\u306b\u82f1\u8a9eWikipedia\u304a\u3088\u3073 BookCorpus\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3067\u4e8b\u524d\u5b66\u7fd2\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3001\u3053\u308c\u3089\u306e\u30c9\u30e1\u30a4\u30f3\u3092\u53cd\u6620\u3057\u305f\u4e88\u6e2c\u304c\u671f\u5f85\u3055\u308c\u307e\u3059\u3002</p> <p>\u30de\u30b9\u30af\u3092\u4e88\u6e2c\u3059\u308b\u305f\u3081\u306b\u306f\u3001DistilBERT\u306e\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3082\u5fc5\u8981\u3067\u3059\u3002</p> <pre><code>from transformers import AutoTokenizer\n\n# \u5bfe\u5fdc\u3059\u308b\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3092\u8aad\u307f\u8fbc\u307f\ntokenizer = AutoTokenizer.from_pretrained(model_checkpoint)\n</code></pre> <p>\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3068\u30e2\u30c7\u30eb\u3092\u4f7f\u3063\u3066\u3001\u4e0a\u4f4d5\u3064\u306e\u5019\u88dc\u3092\u4e88\u6e2c\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002</p> <pre><code>import torch\n\n# \u30c6\u30ad\u30b9\u30c8\u3092\u30c8\u30fc\u30af\u30f3\u5316\u3057\u3066\u30e2\u30c7\u30eb\u306b\u5165\u529b\ninputs = tokenizer(text, return_tensors=\"pt\")\ntoken_logits = model(**inputs).logits\n\n# [MASK]\u30c8\u30fc\u30af\u30f3\u306e\u4f4d\u7f6e\u3092\u7279\u5b9a\u3057\u3001\u305d\u306e\u30ed\u30b8\u30c3\u30c8\u3092\u62bd\u51fa\nmask_token_index = torch.where(inputs[\"input_ids\"] == tokenizer.mask_token_id)[1]\nmask_token_logits = token_logits[0, mask_token_index, :]\n\n# \u6700\u3082\u9ad8\u3044\u30ed\u30b8\u30c3\u30c8\u3092\u6301\u3064\u4e0a\u4f4d5\u3064\u306e[MASK]\u5019\u88dc\u3092\u53d6\u5f97\ntop_5_tokens = torch.topk(mask_token_logits, 5, dim=1).indices[0].tolist()\n\n# \u7d50\u679c\u3092\u8868\u793a\nfor token in top_5_tokens:\n    print(f\"'&gt;&gt;&gt; {text.replace(tokenizer.mask_token, tokenizer.decode([token]))}'\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>'&gt;&gt;&gt; This is a great deal.'\n'&gt;&gt;&gt; This is a great success.'\n'&gt;&gt;&gt; This is a great adventure.'\n'&gt;&gt;&gt; This is a great idea.'\n'&gt;&gt;&gt; This is a great feat.'\n</code></pre></p> <p>\u51fa\u529b\u304b\u3089\u5206\u304b\u308b\u3088\u3046\u306b\u3001\u30e2\u30c7\u30eb\u306e\u4e88\u6e2c\u306f\u65e5\u5e38\u7684\u306a\u7528\u8a9e\u3092\u53cd\u6620\u3057\u3066\u304a\u308a\u3001\u3053\u308c\u306f\u82f1\u8a9eWikipedia\u3068\u3044\u3046\u57fa\u76e4\u3092\u8003\u3048\u308b\u3068\u9a5a\u304f\u3053\u3068\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u6b21\u306b\u3001\u3053\u306e\u30c9\u30e1\u30a4\u30f3\u3092\u3088\u308a\u7279\u5316\u3057\u305f\u3082\u306e\uff08\u6975\u3081\u3066\u504f\u3063\u305f\u6620\u753b\u30ec\u30d3\u30e5\u30fc\uff09\u306b\u5909\u66f4\u3059\u308b\u65b9\u6cd5\u3092\u898b\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002</p>","tags":["\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","BERT","DistilBERT","\u30de\u30b9\u30af\u8a00\u8a9e\u30e2\u30c7\u30ea\u30f3\u30b0"]},{"location":"LLM/ClassicalNLP/72_masked_language_modeling/#_7","title":"\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u6e96\u5099","text":"<p>\u30c9\u30e1\u30a4\u30f3\u9069\u5fdc\u3092\u5b9f\u6f14\u3059\u308b\u305f\u3081\u306b\u3001\u6709\u540d\u306aLarge Movie Review Dataset\uff08IMDb\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\uff09\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u3053\u308c\u306f\u6620\u753b\u30ec\u30d3\u30e5\u30fc\u306e\u30b3\u30fc\u30d1\u30b9\u3067\u3001\u611f\u60c5\u5206\u6790\u30e2\u30c7\u30eb\u306e\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u306b\u3088\u304f\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002</p> <p>\u3053\u306e\u30b3\u30fc\u30d1\u30b9\u3067DistilBERT\u3092\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3059\u308b\u3053\u3068\u3067\u3001\u8a00\u8a9e\u30e2\u30c7\u30eb\u304c\u4e8b\u524d\u5b66\u7fd2\u3067\u4f7f\u7528\u3057\u305fWikipedia\u306e\u4e8b\u5b9f\u7684\u30c7\u30fc\u30bf\u304b\u3089\u3001\u6620\u753b\u30ec\u30d3\u30e5\u30fc\u306e\u3088\u308a\u4e3b\u89b3\u7684\u306a\u8981\u7d20\u3078\u3068\u8a9e\u5f59\u3092\u9069\u5fdc\u3055\u305b\u308b\u3053\u3068\u304c\u671f\u5f85\u3055\u308c\u307e\u3059\u3002</p> <p>Hugging Face Hub\u304b\u3089\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3057\u307e\u3057\u3087\u3046\u3002</p> <pre><code>from datasets import load_dataset\n\n# IMDb\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u8aad\u307f\u8fbc\u307f\nimdb_dataset = load_dataset(\"imdb\")\nimdb_dataset\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>DatasetDict({\n    train: Dataset({\n        features: ['text', 'label'],\n        num_rows: 25000\n    })\n    test: Dataset({\n        features: ['text', 'label'],\n        num_rows: 25000\n    })\n    unsupervised: Dataset({\n        features: ['text', 'label'],\n        num_rows: 50000\n    })\n})\n</code></pre></p> <p><code>train</code>\u3068<code>test</code>\u5206\u5272\u306b\u306f\u305d\u308c\u305e\u308c25,000\u4ef6\u306e\u30ec\u30d3\u30e5\u30fc\u304c\u542b\u307e\u308c\u3001<code>unsupervised</code>\u3068\u3044\u3046\u540d\u524d\u306e\u30e9\u30d9\u30eb\u306a\u3057\u5206\u5272\u306b\u306f50,000\u4ef6\u306e\u30ec\u30d3\u30e5\u30fc\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002</p> <p>\u30c7\u30fc\u30bf\u306e\u5185\u5bb9\u3092\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002</p> <pre><code># \u30e9\u30f3\u30c0\u30e0\u306b3\u3064\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u9078\u629e\nsample = imdb_dataset[\"train\"].shuffle(seed=42).select(range(3))\n\nfor row in sample:\n    print(f\"\\n'&gt;&gt;&gt; \u30ec\u30d3\u30e5\u30fc: {row['text']}'\")\n    print(f\"'&gt;&gt;&gt; \u30e9\u30d9\u30eb: {row['label']}'\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>'&gt;&gt;&gt; \u30ec\u30d3\u30e5\u30fc: There is no relation at all between Fortier and Profiler but the fact that both are police series about violent crimes. Profiler looks crispy, Fortier looks classic. Profiler plots are quite simple. Fortier's plot are far more complicated... Fortier looks more like Prime Suspect, if we have to spot similarities... The main character is weak and weirdo, but have \"clairvoyance\". People like to compare, to judge, to evaluate. How about just enjoying? Funny thing too, people writing Fortier looks American but, on the other hand, arguing they prefer American series (!!!). Maybe it's the language, or the spirit, but I think this series is more English than American. By the way, the actors are really good and funny. The acting is not superficial at all...'\n'&gt;&gt;&gt; \u30e9\u30d9\u30eb: 1'\n\n'&gt;&gt;&gt; \u30ec\u30d3\u30e5\u30fc: This movie is a great. The plot is very true to the book which is a classic written by Mark Twain. The movie starts of with a scene where Hank sings a song with a bunch of kids called \"when you stub your toe on the moon\" It reminds me of Sinatra's song High Hopes, it is fun and inspirational. The Music is great throughout and my favorite song is sung by the King, Hank (bing Crosby) and Sir \"Saggy\" Sagamore. OVerall a great family movie or even a great Date movie. This is a movie you can watch over and over again. The princess played by Rhonda Fleming is gorgeous. I love this movie!! If you liked Danny Kaye in the Court Jester then you will definitely like this movie.'\n'&gt;&gt;&gt; \u30e9\u30d9\u30eb: 1'\n\n'&gt;&gt;&gt; \u30ec\u30d3\u30e5\u30fc: George P. Cosmatos' \"Rambo: First Blood Part II\" is pure wish-fulfillment. The United States clearly didn't win the war in Vietnam. They caused damage to this country beyond the imaginable and this movie continues the fairy story of the oh-so innocent soldiers. The only bad guys were the leaders of the nation, who made this war happen. The character of Rambo is perfect to notice this. He is extremely patriotic, bemoans that US-Americans didn't appreciate and celebrate the achievements of the single soldier, but has nothing but distrust for leading officers and politicians. Like every film that defends the war (e.g. \"We Were Soldiers\") also this one avoids the need to give a comprehensible reason for the engagement in South Asia. And for that matter also the reason for every single US-American soldier that was there. Instead, Rambo gets to take revenge for the wounds of a whole nation. It would have been better to work on how to deal with the memories, rather than suppressing them. \"Do we get to win this time?\" Yes, you do.'\n'&gt;&gt;&gt; \u30e9\u30d9\u30eb: 0'\n</code></pre></p> <p>\u3053\u308c\u3089\u306f\u78ba\u5b9f\u306b\u6620\u753b\u30ec\u30d3\u30e5\u30fc\u3067\u3059\u3002\u8a00\u8a9e\u30e2\u30c7\u30ea\u30f3\u30b0\u306b\u306f\u30e9\u30d9\u30eb\u306f\u5fc5\u8981\u3042\u308a\u307e\u305b\u3093\u304c\u3001<code>0</code>\u304c\u30cd\u30ac\u30c6\u30a3\u30d6\u30ec\u30d3\u30e5\u30fc\u3001<code>1</code>\u304c\u30dd\u30b8\u30c6\u30a3\u30d6\u30ec\u30d3\u30e5\u30fc\u3092\u8868\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3059\u3002</p>","tags":["\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","BERT","DistilBERT","\u30de\u30b9\u30af\u8a00\u8a9e\u30e2\u30c7\u30ea\u30f3\u30b0"]},{"location":"LLM/ClassicalNLP/72_masked_language_modeling/#_8","title":"\u30c7\u30fc\u30bf\u306e\u524d\u51e6\u7406","text":"<p>\u81ea\u52d5\u56de\u5e30\u8a00\u8a9e\u30e2\u30c7\u30ea\u30f3\u30b0\u3068\u30de\u30b9\u30af\u8a00\u8a9e\u30e2\u30c7\u30ea\u30f3\u30b0\u306e\u4e21\u65b9\u306b\u304a\u3044\u3066\u3001\u4e00\u822c\u7684\u306a\u524d\u51e6\u7406\u30b9\u30c6\u30c3\u30d7\u306f\u3001\u3059\u3079\u3066\u306e\u4f8b\u3092\u9023\u7d50\u3057\u3066\u304b\u3089\u3001\u5168\u4f53\u306e\u30b3\u30fc\u30d1\u30b9\u3092\u7b49\u3057\u3044\u30b5\u30a4\u30ba\u306e\u30c1\u30e3\u30f3\u30af\u306b\u5206\u5272\u3059\u308b\u3053\u3068\u3067\u3059\u3002\u3053\u308c\u306f\u3001\u5358\u7d14\u306b\u500b\u5225\u306e\u4f8b\u3092\u30c8\u30fc\u30af\u30f3\u5316\u3059\u308b\u901a\u5e38\u306e\u30a2\u30d7\u30ed\u30fc\u30c1\u3068\u306f\u5927\u304d\u304f\u7570\u306a\u308a\u307e\u3059\u3002</p> <p>\u306a\u305c\u3059\u3079\u3066\u3092\u9023\u7d50\u3059\u308b\u306e\u3067\u3057\u3087\u3046\u304b\u3002\u500b\u5225\u306e\u4f8b\u304c\u9577\u3059\u304e\u308b\u3068\u5207\u308a\u6368\u3066\u3089\u308c\u3001\u8a00\u8a9e\u30e2\u30c7\u30ea\u30f3\u30b0\u30bf\u30b9\u30af\u306b\u6709\u7528\u306a\u60c5\u5831\u304c\u5931\u308f\u308c\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u305f\u3081\u3067\u3059\u3002</p>","tags":["\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","BERT","DistilBERT","\u30de\u30b9\u30af\u8a00\u8a9e\u30e2\u30c7\u30ea\u30f3\u30b0"]},{"location":"LLM/ClassicalNLP/72_masked_language_modeling/#_9","title":"\u30c8\u30fc\u30af\u30f3\u5316\u306e\u5b9f\u88c5","text":"<p>\u307e\u305a\u3001\u30b3\u30fc\u30d1\u30b9\u3092\u901a\u5e38\u901a\u308a\u30c8\u30fc\u30af\u30f3\u5316\u3057\u307e\u3059\u304c\u3001\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3067<code>truncation=True</code>\u30aa\u30d7\u30b7\u30e7\u30f3\u306f\u8a2d\u5b9a\u3057\u307e\u305b\u3093\u3002\u5f8c\u3067\u5168\u5358\u8a9e\u30de\u30b9\u30ad\u30f3\u30b0\u306b\u5fc5\u8981\u306aword ID\u3082\u53d6\u5f97\u3057\u307e\u3059\uff1a</p> <pre><code>def tokenize_function(examples):\n    # \u30c6\u30ad\u30b9\u30c8\u3092\u30c8\u30fc\u30af\u30f3\u5316\uff08\u5207\u308a\u6368\u3066\u306a\u3057\uff09\n    result = tokenizer(examples[\"text\"])\n    # \u9ad8\u901f\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306e\u5834\u5408\u3001word IDs\u3092\u53d6\u5f97\n    if tokenizer.is_fast:\n        result[\"word_ids\"] = [result.word_ids(i) for i in range(len(result[\"input_ids\"]))]\n    return result\n\n# \u9ad8\u901f\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u51e6\u7406\u3092\u6709\u52b9\u5316\ntokenized_datasets = imdb_dataset.map(\n    tokenize_function, batched=True, remove_columns=[\"text\", \"label\"]\n)\ntokenized_datasets\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>DatasetDict({\n    train: Dataset({\n        features: ['input_ids', 'attention_mask', 'word_ids'],\n        num_rows: 25000\n    })\n    test: Dataset({\n        features: ['input_ids', 'attention_mask', 'word_ids'],\n        num_rows: 25000\n    })\n    unsupervised: Dataset({\n        features: ['input_ids', 'attention_mask', 'word_ids'],\n        num_rows: 50000\n    })\n})\n</code></pre></p> <p>DistilBERT\u306fBERT\u7cfb\u30e2\u30c7\u30eb\u306a\u306e\u3067\u3001\u30a8\u30f3\u30b3\u30fc\u30c9\u3055\u308c\u305f\u30c6\u30ad\u30b9\u30c8\u306f<code>input_ids</code>\u3001<code>attention_mask</code>\u3001\u304a\u3088\u3073\u8ffd\u52a0\u3057\u305f<code>word_ids</code>\u304b\u3089\u69cb\u6210\u3055\u308c\u3066\u3044\u307e\u3059\u3002</p>","tags":["\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","BERT","DistilBERT","\u30de\u30b9\u30af\u8a00\u8a9e\u30e2\u30c7\u30ea\u30f3\u30b0"]},{"location":"LLM/ClassicalNLP/72_masked_language_modeling/#_10","title":"\u30c1\u30e3\u30f3\u30af\u30b5\u30a4\u30ba\u306e\u6c7a\u5b9a","text":"<p>\u6620\u753b\u30ec\u30d3\u30e5\u30fc\u3092\u30c8\u30fc\u30af\u30f3\u5316\u3057\u305f\u306e\u3067\u3001\u6b21\u306b\u305d\u308c\u3089\u3092\u3059\u3079\u3066\u30b0\u30eb\u30fc\u30d7\u5316\u3057\u3001\u7d50\u679c\u3092\u30c1\u30e3\u30f3\u30af\u306b\u5206\u5272\u3057\u307e\u3059\u3002\u30c1\u30e3\u30f3\u30af\u306e\u30b5\u30a4\u30ba\u306f\u3069\u306e\u7a0b\u5ea6\u306b\u3059\u3079\u304d\u3067\u3057\u3087\u3046\u304b\u3002\u3053\u308c\u306f\u6700\u7d42\u7684\u306b\u5229\u7528\u53ef\u80fd\u306aGPU\u30e1\u30e2\u30ea\u91cf\u306b\u3088\u3063\u3066\u6c7a\u307e\u308a\u307e\u3059\u304c\u3001\u826f\u3044\u51fa\u767a\u70b9\u306f\u30e2\u30c7\u30eb\u306e\u6700\u5927\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u30b5\u30a4\u30ba\u3092\u78ba\u8a8d\u3059\u308b\u3053\u3068\u3067\u3059\u3002</p> <pre><code># \u30e2\u30c7\u30eb\u306e\u6700\u5927\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u30b5\u30a4\u30ba\u3092\u78ba\u8a8d\ntokenizer.model_max_length\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>512\n</code></pre></p> <p>\u3053\u306e\u5024\u306f\u3001\u30c1\u30a7\u30c3\u30af\u30dd\u30a4\u30f3\u30c8\u306b\u95a2\u9023\u4ed8\u3051\u3089\u308c\u305ftokenizer_config.json\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u53d6\u5f97\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u5834\u5408\u3001BERT\u3068\u540c\u69d8\u306b\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u30b5\u30a4\u30ba\u304c512\u30c8\u30fc\u30af\u30f3\u3067\u3042\u308b\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3059\u3002</p>","tags":["\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","BERT","DistilBERT","\u30de\u30b9\u30af\u8a00\u8a9e\u30e2\u30c7\u30ea\u30f3\u30b0"]},{"location":"LLM/ClassicalNLP/72_masked_language_modeling/#_11","title":"\u9023\u7d50\u51e6\u7406\u306e\u30c7\u30e2\u30f3\u30b9\u30c8\u30ec\u30fc\u30b7\u30e7\u30f3","text":"<p>\u9023\u7d50\u304c\u3069\u306e\u3088\u3046\u306b\u6a5f\u80fd\u3059\u308b\u304b\u3092\u793a\u3059\u305f\u3081\u306b\u3001\u30c8\u30fc\u30af\u30f3\u5316\u3055\u308c\u305f\u8a13\u7df4\u30bb\u30c3\u30c8\u304b\u3089\u3044\u304f\u3064\u304b\u306e\u30ec\u30d3\u30e5\u30fc\u3092\u53d6\u5f97\u3057\u3001\u30ec\u30d3\u30e5\u30fc\u3054\u3068\u306e\u30c8\u30fc\u30af\u30f3\u6570\u3092\u51fa\u529b\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002</p> <pre><code># \u30b9\u30e9\u30a4\u30b7\u30f3\u30b0\u306b\u3088\u308a\u5404\u7279\u5fb4\u306e\u30ea\u30b9\u30c8\u306e\u30ea\u30b9\u30c8\u3092\u751f\u6210\ntokenized_samples = tokenized_datasets[\"train\"][:3]\n\nfor idx, sample in enumerate(tokenized_samples[\"input_ids\"]):\n    print(f\"'&gt;&gt;&gt; \u30ec\u30d3\u30e5\u30fc {idx} \u306e\u9577\u3055: {len(sample)}'\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>'&gt;&gt;&gt; \u30ec\u30d3\u30e5\u30fc 0 \u306e\u9577\u3055: 363'\n'&gt;&gt;&gt; \u30ec\u30d3\u30e5\u30fc 1 \u306e\u9577\u3055: 304'\n'&gt;&gt;&gt; \u30ec\u30d3\u30e5\u30fc 2 \u306e\u9577\u3055: 133'\n</code></pre></p> <p>\u3053\u308c\u3089\u3059\u3079\u3066\u306e\u4f8b\u3092\u3001\u6b21\u306e\u3088\u3046\u306a\u5358\u7d14\u306a\u8f9e\u66f8\u5185\u5305\u8868\u8a18\u3067\u9023\u7d50\u3067\u304d\u307e\u3059\u3002</p> <pre><code># \u3059\u3079\u3066\u306e\u4f8b\u3092\u9023\u7d50\nconcatenated_examples = {\n    k: sum(tokenized_samples[k], []) for k in tokenized_samples.keys()\n}\ntotal_length = len(concatenated_examples[\"input_ids\"])\nprint(f\"'&gt;&gt;&gt; \u9023\u7d50\u3055\u308c\u305f\u30ec\u30d3\u30e5\u30fc\u306e\u9577\u3055: {total_length}'\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>'&gt;&gt;&gt; \u9023\u7d50\u3055\u308c\u305f\u30ec\u30d3\u30e5\u30fc\u306e\u9577\u3055: 800'\n</code></pre></p> <p>\u7d20\u6674\u3089\u3057\u3044\u3067\u3059\u3002\u7dcf\u9577\u3055\u304c\u5408\u3063\u3066\u3044\u307e\u3059\u3002\u6b21\u306b\u3001\u9023\u7d50\u3055\u308c\u305f\u30ec\u30d3\u30e5\u30fc\u3092<code>chunk_size</code>\u3067\u6307\u5b9a\u3055\u308c\u305f\u30b5\u30a4\u30ba\u306e\u30c1\u30e3\u30f3\u30af\u306b\u5206\u5272\u3057\u307e\u3057\u3087\u3046\u3002</p> <pre><code># \u30c1\u30e3\u30f3\u30af\u30b5\u30a4\u30ba\u3092\u8a2d\u5b9a\nchunk_size = 128\n\n# \u9023\u7d50\u3055\u308c\u305f\u4f8b\u306e\u7279\u5fb4\u3054\u3068\u306b\u30c1\u30e3\u30f3\u30af\u3092\u4f5c\u6210\nchunks = {\n    k: [t[i : i + chunk_size] for i in range(0, total_length, chunk_size)]\n    for k, t in concatenated_examples.items()\n}\n\n# \u5404\u30c1\u30e3\u30f3\u30af\u306e\u9577\u3055\u3092\u78ba\u8a8d\nfor chunk in chunks[\"input_ids\"]:\n    print(f\"'&gt;&gt;&gt; \u30c1\u30e3\u30f3\u30af\u9577: {len(chunk)}'\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>'&gt;&gt;&gt; \u30c1\u30e3\u30f3\u30af\u9577: 128'\n'&gt;&gt;&gt; \u30c1\u30e3\u30f3\u30af\u9577: 128'\n'&gt;&gt;&gt; \u30c1\u30e3\u30f3\u30af\u9577: 128'\n'&gt;&gt;&gt; \u30c1\u30e3\u30f3\u30af\u9577: 128'\n'&gt;&gt;&gt; \u30c1\u30e3\u30f3\u30af\u9577: 128'\n'&gt;&gt;&gt; \u30c1\u30e3\u30f3\u30af\u9577: 128'\n'&gt;&gt;&gt; \u30c1\u30e3\u30f3\u30af\u9577: 32'\n</code></pre></p> <p>\u3053\u306e\u4f8b\u3067\u898b\u3089\u308c\u308b\u3088\u3046\u306b\u3001\u6700\u5f8c\u306e\u30c1\u30e3\u30f3\u30af\u306f\u901a\u5e38\u3001\u6700\u5927\u30c1\u30e3\u30f3\u30af\u30b5\u30a4\u30ba\u3088\u308a\u3082\u5c0f\u3055\u304f\u306a\u308a\u307e\u3059\u3002\u3053\u308c\u306b\u5bfe\u51e6\u3059\u308b\u4e3b\u306a\u6226\u7565\u306f2\u3064\u3042\u308a\u307e\u3059\u3002</p> <ol> <li>\u524a\u9664: \u6700\u5f8c\u306e\u30c1\u30e3\u30f3\u30af\u304c<code>chunk_size</code>\u3088\u308a\u5c0f\u3055\u3044\u5834\u5408\u306f\u524a\u9664\u3059\u308b</li> <li>\u30d1\u30c7\u30a3\u30f3\u30b0: \u6700\u5f8c\u306e\u30c1\u30e3\u30f3\u30af\u306e\u9577\u3055\u304c<code>chunk_size</code>\u3068\u7b49\u3057\u304f\u306a\u308b\u307e\u3067\u30d1\u30c7\u30a3\u30f3\u30b0\u3059\u308b</li> </ol> <p>\u3053\u3053\u3067\u306f\u6700\u521d\u306e\u30a2\u30d7\u30ed\u30fc\u30c1\u3092\u63a1\u7528\u3057\u307e\u3059\u3002\u4e0a\u8a18\u306e\u30ed\u30b8\u30c3\u30af\u3092\u3059\u3079\u3066\u4e00\u3064\u306e\u95a2\u6570\u306b\u307e\u3068\u3081\u3066\u3001\u30c8\u30fc\u30af\u30f3\u5316\u3055\u308c\u305f\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u9069\u7528\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u3087\u3046\u3002</p> <pre><code>def group_texts(examples):\n    # \u3059\u3079\u3066\u306e\u30c6\u30ad\u30b9\u30c8\u3092\u9023\u7d50\n    concatenated_examples = {k: sum(examples[k], []) for k in examples.keys()}\n    # \u9023\u7d50\u3055\u308c\u305f\u30c6\u30ad\u30b9\u30c8\u306e\u9577\u3055\u3092\u8a08\u7b97\n    total_length = len(concatenated_examples[list(examples.keys())[0]])\n    # \u6700\u5f8c\u306e\u30c1\u30e3\u30f3\u30af\u304cchunk_size\u3088\u308a\u5c0f\u3055\u3044\u5834\u5408\u306f\u524a\u9664\n    total_length = (total_length // chunk_size) * chunk_size\n    # max_len\u306e\u30c1\u30e3\u30f3\u30af\u306b\u5206\u5272\n    result = {\n        k: [t[i : i + chunk_size] for i in range(0, total_length, chunk_size)]\n        for k, t in concatenated_examples.items()\n    }\n    # \u65b0\u3057\u3044labels\u30ab\u30e9\u30e0\u3092\u4f5c\u6210\n    result[\"labels\"] = result[\"input_ids\"].copy()\n    return result\n</code></pre> <p><code>group_texts()</code>\u306e\u6700\u5f8c\u306e\u30b9\u30c6\u30c3\u30d7\u3067\u3001<code>input_ids</code>\u306e\u30b3\u30d4\u30fc\u3067\u3042\u308b\u65b0\u3057\u3044<code>labels</code>\u30ab\u30e9\u30e0\u3092\u4f5c\u6210\u3057\u3066\u3044\u308b\u3053\u3068\u306b\u6ce8\u76ee\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u3053\u308c\u306f\u3001\u30de\u30b9\u30af\u8a00\u8a9e\u30e2\u30c7\u30ea\u30f3\u30b0\u3067\u306f\u3001\u5165\u529b\u30d0\u30c3\u30c1\u5185\u306e\u30e9\u30f3\u30c0\u30e0\u306b\u30de\u30b9\u30af\u3055\u308c\u305f\u30c8\u30fc\u30af\u30f3\u3092\u4e88\u6e2c\u3059\u308b\u3053\u3068\u304c\u76ee\u7684\u3067\u3042\u308a\u3001<code>labels</code>\u30ab\u30e9\u30e0\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u3067\u3001\u8a00\u8a9e\u30e2\u30c7\u30eb\u304c\u5b66\u7fd2\u3059\u308b\u305f\u3081\u306e\u6b63\u89e3\u3092\u63d0\u4f9b\u3059\u308b\u305f\u3081\u3067\u3059\u3002</p> <p>\u4fe1\u983c\u3067\u304d\u308b<code>Dataset.map()</code>\u95a2\u6570\u3092\u4f7f\u7528\u3057\u3066\u3001<code>group_texts()</code>\u3092\u30c8\u30fc\u30af\u30f3\u5316\u3055\u308c\u305f\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u9069\u7528\u3057\u307e\u3057\u3087\u3046\uff1a</p> <pre><code># \u30b0\u30eb\u30fc\u30d7\u5316\u3055\u308c\u305f\u30c6\u30ad\u30b9\u30c8\u306b\u5909\u63db\nlm_datasets = tokenized_datasets.map(group_texts, batched=True)\nlm_datasets\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>DatasetDict({\n    train: Dataset({\n        features: ['input_ids', 'attention_mask', 'word_ids', 'labels'],\n        num_rows: 61291\n    })\n    test: Dataset({\n        features: ['input_ids', 'attention_mask', 'word_ids', 'labels'],\n        num_rows: 59904\n    })\n    unsupervised: Dataset({\n        features: ['input_ids', 'attention_mask', 'word_ids', 'labels'],\n        num_rows: 122957\n    })\n})\n</code></pre></p> <p>\u30c6\u30ad\u30b9\u30c8\u3092\u30b0\u30eb\u30fc\u30d7\u5316\u3057\u3066\u304b\u3089\u30c1\u30e3\u30f3\u30af\u5316\u3059\u308b\u3053\u3068\u3067\u3001\u5143\u306e<code>train</code>\u304a\u3088\u3073<code>test</code>\u5206\u5272\u306e25,000\u3088\u308a\u3082\u306f\u308b\u304b\u306b\u591a\u304f\u306e\u4f8b\u304c\u751f\u6210\u3055\u308c\u307e\u3057\u305f\u3002\u3053\u308c\u306f\u3001\u5143\u306e\u30b3\u30fc\u30d1\u30b9\u306e\u8907\u6570\u306e\u4f8b\u306b\u307e\u305f\u304c\u308b\u9023\u7d9a\u3059\u308b\u30c8\u30fc\u30af\u30f3\u3092\u542b\u3080\u4f8b\u304c\u3067\u304d\u305f\u305f\u3081\u3067\u3059\u3002</p> <p>\u30c1\u30e3\u30f3\u30af\u306e\u4e00\u3064\u3067\u7279\u5225\u306a<code>[SEP]</code>\u3068<code>[CLS]</code>\u30c8\u30fc\u30af\u30f3\u3092\u63a2\u3059\u3053\u3068\u3067\u3001\u3053\u308c\u3092\u660e\u793a\u7684\u306b\u78ba\u8a8d\u3067\u304d\u307e\u3059\uff1a</p> <pre><code># \u30c1\u30e3\u30f3\u30af\u306e\u5185\u5bb9\u3092\u78ba\u8a8d\ntokenizer.decode(lm_datasets[\"train\"][1][\"input_ids\"])\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>\"as the vietnam war and race issues in the united states. in between asking politicians and ordinary denizens of stockholm about their opinions on politics, she has sex with her drama teacher, classmates, and married men. &lt; br / &gt; &lt; br / &gt; what kills me about i am curious - yellow is that 40 years ago, this was considered pornographic. really, the sex and nudity scenes are few and far between, even then it ' s not shot like some cheaply made porno. while my countrymen mind find it shocking, in reality sex and nudity are a major staple in swedish cinema. even ingmar bergman,\"\n</code></pre></p> <p>\u3053\u306e\u4f8b\u3067\u306f\u3001\u9ad8\u6821\u6620\u753b\u306b\u95a2\u3059\u308b\u30ec\u30d3\u30e5\u30fc\u3068\u30db\u30fc\u30e0\u30ec\u30b9\u306b\u95a2\u3059\u308b\u30ec\u30d3\u30e5\u30fc\u3068\u3044\u3046\u30012\u3064\u306e\u91cd\u8907\u3059\u308b\u6620\u753b\u30ec\u30d3\u30e5\u30fc\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002</p> <p>\u30de\u30b9\u30af\u8a00\u8a9e\u30e2\u30c7\u30ea\u30f3\u30b0\u7528\u306e\u30e9\u30d9\u30eb\u304c\u3069\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u304b\u3082\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff1a</p> <pre><code># \u30e9\u30d9\u30eb\u306e\u5185\u5bb9\u3092\u78ba\u8a8d\ntokenizer.decode(lm_datasets[\"train\"][1][\"labels\"])\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>\"as the vietnam war and race issues in the united states. in between asking politicians and ordinary denizens of stockholm about their opinions on politics, she has sex with her drama teacher, classmates, and married men. &lt; br / &gt; &lt; br / &gt; what kills me about i am curious - yellow is that 40 years ago, this was considered pornographic. really, the sex and nudity scenes are few and far between, even then it ' s not shot like some cheaply made porno. while my countrymen mind find it shocking, in reality sex and nudity are a major staple in swedish cinema. even ingmar bergman,\"\n</code></pre></p> <p>\u4e0a\u8a18\u306e<code>group_texts()</code>\u95a2\u6570\u304b\u3089\u671f\u5f85\u3055\u308c\u308b\u3088\u3046\u306b\u3001\u3053\u308c\u306f\u30c7\u30b3\u30fc\u30c9\u3055\u308c\u305f<code>input_ids</code>\u3068\u540c\u3058\u306b\u898b\u3048\u307e\u3059\u3002\u3057\u304b\u3057\u3001\u3069\u3046\u3084\u3063\u3066\u30e2\u30c7\u30eb\u304c\u4f55\u304b\u3092\u5b66\u7fd2\u3067\u304d\u308b\u306e\u3067\u3057\u3087\u3046\u304b\uff1f\u91cd\u8981\u306a\u30b9\u30c6\u30c3\u30d7\u304c\u6b20\u3051\u3066\u3044\u307e\u3059\uff1a\u5165\u529b\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u4f4d\u7f6e\u306b<code>[MASK]</code>\u30c8\u30fc\u30af\u30f3\u3092\u633f\u5165\u3059\u308b\u3053\u3068\u3067\u3059\uff01\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u4e2d\u306b\u7279\u5225\u306a\u30c7\u30fc\u30bf\u30b3\u30ec\u30fc\u30bf\u30fc\u3092\u4f7f\u7528\u3057\u3066\u3053\u308c\u3092\u305d\u306e\u5834\u3067\u884c\u3046\u65b9\u6cd5\u3092\u898b\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002</p>","tags":["\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","BERT","DistilBERT","\u30de\u30b9\u30af\u8a00\u8a9e\u30e2\u30c7\u30ea\u30f3\u30b0"]},{"location":"LLM/ClassicalNLP/72_masked_language_modeling/#trainer-apidistilbert","title":"Trainer API\u3092\u4f7f\u3063\u305fDistilBERT\u306e\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","text":"<p>\u30de\u30b9\u30af\u8a00\u8a9e\u30e2\u30c7\u30eb\u306e\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u306f\u3001\u7b2c3\u7ae0\u3067\u884c\u3063\u305f\u7cfb\u5217\u5206\u985e\u30e2\u30c7\u30eb\u306e\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3068\u307b\u307c\u540c\u3058\u3067\u3059\u3002\u552f\u4e00\u306e\u9055\u3044\u306f\u3001\u5404\u30c6\u30ad\u30b9\u30c8\u30d0\u30c3\u30c1\u3067\u3044\u304f\u3064\u304b\u306e\u30c8\u30fc\u30af\u30f3\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u30de\u30b9\u30af\u3067\u304d\u308b\u7279\u5225\u306a\u30c7\u30fc\u30bf\u30b3\u30ec\u30fc\u30bf\u30fc\u304c\u5fc5\u8981\u306a\u3053\u3068\u3067\u3059\u3002</p> <p>\u5e78\u3044\u3001Hugging Face Transformers\u306b\u306f\u3001\u307e\u3055\u306b\u3053\u306e\u30bf\u30b9\u30af\u7528\u306e\u5c02\u7528<code>DataCollatorForLanguageModeling</code>\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3068\u3001\u30de\u30b9\u30af\u3059\u308b\u30c8\u30fc\u30af\u30f3\u306e\u5272\u5408\u3092\u6307\u5b9a\u3059\u308b<code>mlm_probability</code>\u5f15\u6570\u3092\u6e21\u3059\u3060\u3051\u3067\u3059\u3002BERT\u3067\u4f7f\u7528\u3055\u308c\u3001\u6587\u732e\u3067\u3082\u4e00\u822c\u7684\u306a15%\u3092\u9078\u629e\u3057\u307e\u3059\uff1a</p> <pre><code>from transformers import DataCollatorForLanguageModeling\n\n# \u30de\u30b9\u30af\u8a00\u8a9e\u30e2\u30c7\u30ea\u30f3\u30b0\u7528\u306e\u30c7\u30fc\u30bf\u30b3\u30ec\u30fc\u30bf\u30fc\u3092\u4f5c\u6210\n# 15%\u306e\u78ba\u7387\u3067\u30c8\u30fc\u30af\u30f3\u3092\u30de\u30b9\u30af\ndata_collator = DataCollatorForLanguageModeling(tokenizer=tokenizer, mlm_probability=0.15)\n</code></pre>","tags":["\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","BERT","DistilBERT","\u30de\u30b9\u30af\u8a00\u8a9e\u30e2\u30c7\u30ea\u30f3\u30b0"]},{"location":"LLM/ClassicalNLP/72_masked_language_modeling/#_12","title":"\u30e9\u30f3\u30c0\u30e0\u30de\u30b9\u30ad\u30f3\u30b0\u306e\u52d5\u4f5c\u78ba\u8a8d","text":"<p>\u30e9\u30f3\u30c0\u30e0\u30de\u30b9\u30ad\u30f3\u30b0\u304c\u3069\u306e\u3088\u3046\u306b\u6a5f\u80fd\u3059\u308b\u304b\u3092\u78ba\u8a8d\u3059\u308b\u305f\u3081\u306b\u3001\u3044\u304f\u3064\u304b\u306e\u4f8b\u3092\u30c7\u30fc\u30bf\u30b3\u30ec\u30fc\u30bf\u30fc\u306b\u4f9b\u7d66\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u3053\u308c\u306f<code>dict</code>\u306e\u30ea\u30b9\u30c8\u3092\u671f\u5f85\u3057\u3001\u5404<code>dict</code>\u306f\u9023\u7d9a\u3059\u308b\u30c6\u30ad\u30b9\u30c8\u306e\u5358\u4e00\u306e\u30c1\u30e3\u30f3\u30af\u3092\u8868\u3057\u307e\u3059\u3002\u3053\u306e\u30c7\u30fc\u30bf\u30b3\u30ec\u30fc\u30bf\u30fc\u306f<code>\"word_ids\"</code>\u30ad\u30fc\u3092\u671f\u5f85\u3057\u306a\u3044\u305f\u3081\u3001\u524a\u9664\u3057\u3066\u304b\u3089\u30d0\u30c3\u30c1\u3092\u30b3\u30ec\u30fc\u30bf\u30fc\u306b\u4f9b\u7d66\u3057\u307e\u3059\uff1a</p> <pre><code># \u30b5\u30f3\u30d7\u30eb\u30c7\u30fc\u30bf\u3092\u6e96\u5099\nsamples = [lm_datasets[\"train\"][i] for i in range(2)]\nfor sample in samples:\n    _ = sample.pop(\"word_ids\")\n\n# \u30c7\u30fc\u30bf\u30b3\u30ec\u30fc\u30bf\u30fc\u3092\u9069\u7528\u3057\u3066\u30de\u30b9\u30ad\u30f3\u30b0\u7d50\u679c\u3092\u78ba\u8a8d\nfor chunk in data_collator(samples)[\"input_ids\"]:\n    print(f\"\\n'&gt;&gt;&gt; {tokenizer.decode(chunk)}'\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>'&gt;&gt;&gt; [CLS] i rented i am curious - yellow from my [MASK] store because of all the controversy that surrounded it when it was first released in 1967. i also heard that at first it was [MASK] by\u00c2\u00b2 1915 s. customs if [MASK] ever tried to enter this country [MASK] therefore [MASK] heiress fan of films considered \" controversial \" i [MASK] had to see this for myself. &lt; br collier &gt; [MASK] br / &gt; the plot [MASK] centered around a [MASK] swedish drama student named lena who wants to learn everything she can about life. in [MASK] she wants to focus her attention 407 to [MASK] some sort of documentary on what the [MASK] totalede thought about certain political issues such'\n\n'&gt;&gt;&gt; as the vietnam war and race issues in the united states. in between asking politicians and [MASK] den [MASK]ns of stockholm about [MASK] opinions on politics, she namesake sex with her drama teacher, classmates, and married men. &lt; br / &gt; &lt; br / [MASK] [MASK] kills me [MASK] i am [MASK] - yellow is that 40 years ago, this was considered pornographic. really, the [MASK] and nudity scenes are few and far between, even then it [MASK] s not [MASK] like some cheaply made porno. while my countrymen [MASK] find [MASK] shocking, in reality [MASK] and nudity are a major staple in swedish [MASK]. even ing caucasian bergman,'\n</code></pre></p> <p>\u7d20\u6674\u3089\u3057\u3044\uff01\u3046\u307e\u304f\u6a5f\u80fd\u3057\u3066\u3044\u307e\u3059\u3002<code>[MASK]</code>\u30c8\u30fc\u30af\u30f3\u304c\u30c6\u30ad\u30b9\u30c8\u306e\u69d8\u3005\u306a\u5834\u6240\u306b\u30e9\u30f3\u30c0\u30e0\u306b\u633f\u5165\u3055\u308c\u3066\u3044\u308b\u306e\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u3089\u304c\u3001\u8a13\u7df4\u4e2d\u306b\u30e2\u30c7\u30eb\u304c\u4e88\u6e2c\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u30c8\u30fc\u30af\u30f3\u306b\u306a\u308a\u307e\u3059\u3002\u30c7\u30fc\u30bf\u30b3\u30ec\u30fc\u30bf\u30fc\u306e\u7f8e\u3057\u3055\u306f\u3001\u3059\u3079\u3066\u306e\u30d0\u30c3\u30c1\u3067<code>[MASK]</code>\u306e\u633f\u5165\u3092\u30e9\u30f3\u30c0\u30e0\u5316\u3059\u308b\u3053\u3068\u3067\u3059\uff01</p>","tags":["\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","BERT","DistilBERT","\u30de\u30b9\u30af\u8a00\u8a9e\u30e2\u30c7\u30ea\u30f3\u30b0"]},{"location":"LLM/ClassicalNLP/72_masked_language_modeling/#whole-word-masking","title":"\u5168\u5358\u8a9e\u30de\u30b9\u30ad\u30f3\u30b0\uff08Whole Word Masking\uff09","text":"<p>\u30de\u30b9\u30af\u8a00\u8a9e\u30e2\u30c7\u30ea\u30f3\u30b0\u3067\u4f7f\u7528\u3067\u304d\u308b\u4e00\u3064\u306e\u6280\u8853\u306f\u3001\u500b\u5225\u306e\u30c8\u30fc\u30af\u30f3\u3067\u306f\u306a\u304f\u3001\u5358\u8a9e\u5168\u4f53\u3092\u4e00\u7dd2\u306b\u30de\u30b9\u30af\u3059\u308b\u3053\u3068\u3067\u3059\u3002\u3053\u306e\u30a2\u30d7\u30ed\u30fc\u30c1\u306f\u5168\u5358\u8a9e\u30de\u30b9\u30ad\u30f3\u30b0\u3068\u547c\u3070\u308c\u307e\u3059\u3002</p> <p>\u5168\u5358\u8a9e\u30de\u30b9\u30ad\u30f3\u30b0\u3092\u4f7f\u7528\u3057\u305f\u3044\u5834\u5408\u306f\u3001\u30c7\u30fc\u30bf\u30b3\u30ec\u30fc\u30bf\u30fc\u3092\u81ea\u5206\u3067\u69cb\u7bc9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u30c7\u30fc\u30bf\u30b3\u30ec\u30fc\u30bf\u30fc\u306f\u3001\u30b5\u30f3\u30d7\u30eb\u306e\u30ea\u30b9\u30c8\u3092\u53d7\u3051\u53d6\u3063\u3066\u30d0\u30c3\u30c1\u306b\u5909\u63db\u3059\u308b\u95a2\u6570\u3067\u3059\uff1a</p> <pre><code>import collections\nimport numpy as np\nfrom transformers import default_data_collator\n\n# \u5168\u5358\u8a9e\u30de\u30b9\u30ad\u30f3\u30b0\u306e\u78ba\u7387\nwwm_probability = 0.2\n\ndef whole_word_masking_data_collator(features):\n    for feature in features:\n        word_ids = feature.pop(\"word_ids\")\n\n        # \u5358\u8a9e\u3068\u5bfe\u5fdc\u3059\u308b\u30c8\u30fc\u30af\u30f3\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u9593\u306e\u30de\u30c3\u30d7\u3092\u4f5c\u6210\n        mapping = collections.defaultdict(list)\n        current_word_index = -1\n        current_word = None\n        for idx, word_id in enumerate(word_ids):\n            if word_id is not None:\n                if word_id != current_word:\n                    current_word = word_id\n                    current_word_index += 1\n                mapping[current_word_index].append(idx)\n\n        # \u5358\u8a9e\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u30de\u30b9\u30af\n        mask = np.random.binomial(1, wwm_probability, (len(mapping),))\n        input_ids = feature[\"input_ids\"]\n        labels = feature[\"labels\"]\n        new_labels = [-100] * len(labels)\n        for word_id in np.where(mask)[0]:\n            word_id = word_id.item()\n            for idx in mapping[word_id]:\n                new_labels[idx] = labels[idx]\n                input_ids[idx] = tokenizer.mask_token_id\n        feature[\"labels\"] = new_labels\n\n    return default_data_collator(features)\n</code></pre> <p>\u6b21\u306b\u3001\u524d\u3068\u540c\u3058\u30b5\u30f3\u30d7\u30eb\u3067\u8a66\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff1a</p> <pre><code># \u5168\u5358\u8a9e\u30de\u30b9\u30ad\u30f3\u30b0\u306e\u52d5\u4f5c\u78ba\u8a8d\nsamples = [lm_datasets[\"train\"][i] for i in range(2)]\nbatch = whole_word_masking_data_collator(samples)\n\nfor chunk in batch[\"input_ids\"]:\n    print(f\"\\n'&gt;&gt;&gt; {tokenizer.decode(chunk)}'\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>'&gt;&gt;&gt; [CLS] i [MASK] i am curious - yellow from [MASK] video store because [MASK] all the controversy that surrounded it [MASK] [MASK] [MASK] first [MASK] in 1967 [MASK] [MASK] [MASK] heard that at first [MASK] [MASK] seized by u [MASK] s. [MASK] if it ever [MASK] [MASK] enter this country, therefore being a fan [MASK] films considered \" controversial [MASK] i really [MASK] to see this for [MASK]. [MASK] br / &gt; &lt; [MASK] / &gt; [MASK] plot is [MASK] around a young swedish drama student named lena [MASK] wants to [MASK] everything [MASK] can [MASK] life. in particular she wants to focus her attentions to making some sort of documentary on what the average [MASK] [MASK] thought about certain political issues [MASK]'\n\n'&gt;&gt;&gt; as [MASK] vietnam [MASK] and race issues in the united states. in between asking [MASK] and ordinary denizens of [MASK] about [MASK] opinions on politics, she has sex with her drama teacher, classmates, and [MASK] men. &lt; [MASK] / &gt; [MASK] br / &gt; [MASK] kills me [MASK] [MASK] am curious - [MASK] [MASK] that 40 years ago, this was considered pornographic. really, the sex and nudity scenes are few and [MASK] between, even then it [MASK] [MASK] not shot like some cheaply made [MASK] [MASK]. while my countrymen [MASK] find it shocking, [MASK] [MASK] sex and nudity are a major staple in [MASK] cinema. even ingmar [MASK],'\n</code></pre></p>","tags":["\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","BERT","DistilBERT","\u30de\u30b9\u30af\u8a00\u8a9e\u30e2\u30c7\u30ea\u30f3\u30b0"]},{"location":"LLM/ClassicalNLP/72_masked_language_modeling/#_13","title":"\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u30c0\u30a6\u30f3\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0","text":"<p>2\u3064\u306e\u30c7\u30fc\u30bf\u30b3\u30ec\u30fc\u30bf\u30fc\u304c\u3067\u304d\u305f\u306e\u3067\u3001\u6b8b\u308a\u306e\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u30b9\u30c6\u30c3\u30d7\u306f\u6a19\u6e96\u7684\u3067\u3059\u3002\u5fc3\u914d\u3057\u306a\u3044\u3067\u304f\u3060\u3055\u3044\u3001\u305d\u308c\u3067\u3082\u304b\u306a\u308a\u826f\u3044\u8a00\u8a9e\u30e2\u30c7\u30eb\u304c\u5f97\u3089\u308c\u307e\u3059\uff01</p> <p>Hugging Face Datasets\u3067\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u30c0\u30a6\u30f3\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3059\u308b\u7c21\u5358\u306a\u65b9\u6cd5\u306f\u3001<code>Dataset.train_test_split()</code>\u95a2\u6570\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3067\u3059\uff1a</p> <pre><code># \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u30b5\u30a4\u30ba\u3092\u8a2d\u5b9a\ntrain_size = 10_000\ntest_size = int(0.1 * train_size)\n\n# \u30c0\u30a6\u30f3\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3092\u5b9f\u884c\ndownsampled_dataset = lm_datasets[\"train\"].train_test_split(\n    train_size=train_size, test_size=test_size, seed=42\n)\ndownsampled_dataset\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>DatasetDict({\n    train: Dataset({\n        features: ['input_ids', 'attention_mask', 'word_ids', 'labels'],\n        num_rows: 10000\n    })\n    test: Dataset({\n        features: ['input_ids', 'attention_mask', 'word_ids', 'labels'],\n        num_rows: 1000\n    })\n})\n</code></pre></p> <p>\u3053\u308c\u306b\u3088\u308a\u3001\u8a13\u7df4\u30bb\u30c3\u30c8\u306e\u30b5\u30a4\u30ba\u304c10,000\u4f8b\u3001\u691c\u8a3c\u30bb\u30c3\u30c8\u304c1,000\u4f8b\u306b\u8a2d\u5b9a\u3055\u308c\u305f\u65b0\u3057\u3044<code>train</code>\u3068<code>test</code>\u5206\u5272\u304c\u81ea\u52d5\u7684\u306b\u4f5c\u6210\u3055\u308c\u307e\u3057\u305f\u3002</p>","tags":["\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","BERT","DistilBERT","\u30de\u30b9\u30af\u8a00\u8a9e\u30e2\u30c7\u30ea\u30f3\u30b0"]},{"location":"LLM/ClassicalNLP/72_masked_language_modeling/#_14","title":"\u8a13\u7df4\u5f15\u6570\u306e\u8a2d\u5b9a","text":"<pre><code>from transformers import TrainingArguments\n\nbatch_size = 64\n# \u30a8\u30dd\u30c3\u30af\u3054\u3068\u306b\u8a13\u7df4\u640d\u5931\u3092\u8868\u793a\nlogging_steps = len(downsampled_dataset[\"train\"]) // batch_size\nmodel_name = model_checkpoint.split(\"/\")[-1]\n\ntraining_args = TrainingArguments(\n    output_dir=f\"{model_name}-finetuned-imdb\",\n    overwrite_output_dir=True,\n    eval_strategy=\"epoch\",\n    learning_rate=2e-5,\n    weight_decay=0.01,\n    per_device_train_batch_size=batch_size,\n    per_device_eval_batch_size=batch_size,\n    push_to_hub=False,\n    logging_steps=logging_steps,\n)\n</code></pre> <p>\u3053\u3053\u3067\u306f\u3001\u30a8\u30dd\u30c3\u30af\u3054\u3068\u306b\u8a13\u7df4\u640d\u5931\u3092\u8ffd\u8de1\u3059\u308b\u305f\u3081\u306b<code>logging_steps</code>\u3092\u542b\u3081\u3001\u3044\u304f\u3064\u304b\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u8abf\u6574\u3057\u307e\u3057\u305f\u3002</p>","tags":["\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","BERT","DistilBERT","\u30de\u30b9\u30af\u8a00\u8a9e\u30e2\u30c7\u30ea\u30f3\u30b0"]},{"location":"LLM/ClassicalNLP/72_masked_language_modeling/#trainer","title":"Trainer\u306e\u521d\u671f\u5316\u3068\u5b9f\u884c","text":"<p>\u5fc5\u8981\u306a\u6750\u6599\u304c\u3059\u3079\u3066\u63c3\u3063\u305f\u306e\u3067\u3001<code>Trainer</code>\u3092\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3067\u304d\u307e\u3059\u3002\u3053\u3053\u3067\u306f\u6a19\u6e96\u306e<code>data_collator</code>\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u6f14\u7fd2\u3068\u3057\u3066\u5168\u5358\u8a9e\u30de\u30b9\u30ad\u30f3\u30b0\u30b3\u30ec\u30fc\u30bf\u30fc\u3092\u8a66\u3057\u3066\u7d50\u679c\u3092\u6bd4\u8f03\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\uff1a</p> <pre><code>from transformers import Trainer\n\ntrainer = Trainer(\n    model=model,\n    args=training_args,\n    train_dataset=downsampled_dataset[\"train\"],\n    eval_dataset=downsampled_dataset[\"test\"],\n    data_collator=data_collator,\n    processing_class=tokenizer,\n)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\nTo disable this warning, you can either:\n    - Avoid using `tokenizers` before the fork if possible\n    - Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\nhuggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\nTo disable this warning, you can either:\n    - Avoid using `tokenizers` before the fork if possible\n    - Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\n</code></pre></p>","tags":["\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","BERT","DistilBERT","\u30de\u30b9\u30af\u8a00\u8a9e\u30e2\u30c7\u30ea\u30f3\u30b0"]},{"location":"LLM/ClassicalNLP/72_masked_language_modeling/#perplexity","title":"\u8a00\u8a9e\u30e2\u30c7\u30eb\u306e\u56f0\u60d1\u5ea6\uff08Perplexity\uff09\u8a55\u4fa1","text":"<p>\u30c6\u30ad\u30b9\u30c8\u5206\u985e\u3084\u8cea\u554f\u5fdc\u7b54\u306e\u3088\u3046\u306a\u4ed6\u306e\u30bf\u30b9\u30af\u3068\u306f\u7570\u306a\u308a\u3001\u8a00\u8a9e\u30e2\u30c7\u30ea\u30f3\u30b0\u3067\u306f\u30e9\u30d9\u30eb\u4ed8\u304d\u30b3\u30fc\u30d1\u30b9\u304c\u4e0e\u3048\u3089\u308c\u307e\u305b\u3093\u3002\u3067\u306f\u3001\u826f\u3044\u8a00\u8a9e\u30e2\u30c7\u30eb\u3068\u306f\u4f55\u3092\u6c7a\u5b9a\u3059\u308b\u306e\u3067\u3057\u3087\u3046\u304b\uff1f</p> <p>\u30b9\u30de\u30fc\u30c8\u30d5\u30a9\u30f3\u306e\u81ea\u52d5\u4fee\u6b63\u6a5f\u80fd\u306e\u3088\u3046\u306b\u3001\u826f\u3044\u8a00\u8a9e\u30e2\u30c7\u30eb\u306f\u6587\u6cd5\u7684\u306b\u6b63\u3057\u3044\u6587\u306b\u9ad8\u3044\u78ba\u7387\u3092\u5272\u308a\u5f53\u3066\u3001\u610f\u5473\u306e\u306a\u3044\u6587\u306b\u4f4e\u3044\u78ba\u7387\u3092\u5272\u308a\u5f53\u3066\u308b\u3082\u306e\u3067\u3059\u3002\u3053\u308c\u3092\u3088\u308a\u826f\u304f\u7406\u89e3\u3059\u308b\u305f\u3081\u306b\u3001\u30aa\u30f3\u30e9\u30a4\u30f3\u3067\u300c\u81ea\u52d5\u4fee\u6b63\u306e\u5931\u6557\u300d\u306e\u30bb\u30c3\u30c8\u5168\u4f53\u3092\u898b\u3064\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u3001\u4eba\u306e\u96fb\u8a71\u306e\u30e2\u30c7\u30eb\u304c\u304b\u306a\u308a\u9762\u767d\u3044\uff08\u305d\u3057\u3066\u3057\u3070\u3057\u3070\u4e0d\u9069\u5207\u306a\uff09\u88dc\u5b8c\u3092\u751f\u6210\u3057\u305f\u4f8b\u304c\u793a\u3055\u308c\u3066\u3044\u307e\u3059\u3002</p> <p>\u30c6\u30b9\u30c8\u30bb\u30c3\u30c8\u304c\u4e3b\u306b\u6587\u6cd5\u7684\u306b\u6b63\u3057\u3044\u6587\u3067\u69cb\u6210\u3055\u308c\u3066\u3044\u308b\u3068\u4eee\u5b9a\u3059\u308b\u3068\u3001\u8a00\u8a9e\u30e2\u30c7\u30eb\u306e\u54c1\u8cea\u3092\u6e2c\u5b9a\u3059\u308b\u4e00\u3064\u306e\u65b9\u6cd5\u306f\u3001\u30c6\u30b9\u30c8\u30bb\u30c3\u30c8\u5185\u306e\u3059\u3079\u3066\u306e\u6587\u306e\u6b21\u306e\u5358\u8a9e\u306b\u5272\u308a\u5f53\u3066\u308b\u78ba\u7387\u3092\u8a08\u7b97\u3059\u308b\u3053\u3068\u3067\u3059\u3002</p> <p>\u9ad8\u3044\u78ba\u7387\u306f\u3001\u30e2\u30c7\u30eb\u304c\u672a\u898b\u306e\u4f8b\u306b\u5bfe\u3057\u3066\u300c\u9a5a\u3044\u3066\u3044\u306a\u3044\u300d\u307e\u305f\u306f\u300c\u56f0\u60d1\u3057\u3066\u3044\u306a\u3044\u300d\u3053\u3068\u3092\u793a\u3057\u3001\u8a00\u8a9e\u306e\u57fa\u672c\u7684\u306a\u6587\u6cd5\u30d1\u30bf\u30fc\u30f3\u3092\u5b66\u7fd2\u3057\u3066\u3044\u308b\u3053\u3068\u3092\u793a\u5506\u3057\u307e\u3059\u3002</p> <p>\u56f0\u60d1\u5ea6\u306b\u306f\u69d8\u3005\u306a\u6570\u5b66\u7684\u5b9a\u7fa9\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u3053\u3053\u3067\u4f7f\u7528\u3059\u308b\u3082\u306e\u306f\u30af\u30ed\u30b9\u30a8\u30f3\u30c8\u30ed\u30d4\u30fc\u640d\u5931\u306e\u6307\u6570\u3068\u3057\u3066\u5b9a\u7fa9\u3055\u308c\u307e\u3059\u3002\u3057\u305f\u304c\u3063\u3066\u3001<code>Trainer.evaluate()</code>\u95a2\u6570\u3092\u4f7f\u7528\u3057\u3066\u30c6\u30b9\u30c8\u30bb\u30c3\u30c8\u3067\u30af\u30ed\u30b9\u30a8\u30f3\u30c8\u30ed\u30d4\u30fc\u640d\u5931\u3092\u8a08\u7b97\u3057\u3001\u305d\u306e\u7d50\u679c\u306e\u6307\u6570\u3092\u53d6\u308b\u3053\u3068\u3067\u3001\u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u306e\u56f0\u60d1\u5ea6\u3092\u8a08\u7b97\u3067\u304d\u307e\u3059\uff1a</p> <pre><code>import math\n\n# \u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u306e\u56f0\u60d1\u5ea6\u3092\u8a55\u4fa1\n# eval_results = trainer.evaluate()\n# print(f\"&gt;&gt;&gt; \u56f0\u60d1\u5ea6: {math.exp(eval_results['eval_loss']):.2f}\")\n# &gt;&gt;&gt; \u56f0\u60d1\u5ea6: 21.75\n</code></pre> <p>\u56f0\u60d1\u5ea6\u30b9\u30b3\u30a2\u304c\u4f4e\u3044\u307b\u3069\u3001\u8a00\u8a9e\u30e2\u30c7\u30eb\u304c\u512a\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u610f\u5473\u3057\u307e\u3059\u3002\u3053\u3053\u3067\u306f\u3001\u958b\u59cb\u30e2\u30c7\u30eb\u304c\u3084\u3084\u5927\u304d\u306a\u5024\u3092\u6301\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3059\u3002\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u306b\u3088\u3063\u3066\u3053\u308c\u3092\u4e0b\u3052\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u304b\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002</p> <p>\u307e\u305a\u3001\u8a13\u7df4\u30eb\u30fc\u30d7\u3092\u5b9f\u884c\u3057\u307e\u3059\uff1a</p> <pre><code># \u8a13\u7df4\u306e\u5b9f\u884c\n# trainer.train()\n</code></pre> <p>\u305d\u306e\u5f8c\u3001\u524d\u3068\u540c\u69d8\u306b\u30c6\u30b9\u30c8\u30bb\u30c3\u30c8\u3067\u7d50\u679c\u306e\u56f0\u60d1\u5ea6\u3092\u8a08\u7b97\u3057\u307e\u3059\uff1a</p> <pre><code># \u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u5f8c\u306e\u56f0\u60d1\u5ea6\u3092\u8a55\u4fa1\n# eval_results = trainer.evaluate()\n# print(f\"&gt;&gt;&gt; \u56f0\u60d1\u5ea6: {math.exp(eval_results['eval_loss']):.2f}\")\n# &gt;&gt;&gt; \u56f0\u60d1\u5ea6: 11.32\n</code></pre> <p>\u7d20\u6674\u3089\u3057\u3044\u3067\u3059\u3002\u3053\u308c\u306f\u56f0\u60d1\u5ea6\u306e\u5927\u5e45\u306a\u524a\u6e1b\u3067\u3001\u30e2\u30c7\u30eb\u304c\u6620\u753b\u30ec\u30d3\u30e5\u30fc\u306e\u30c9\u30e1\u30a4\u30f3\u306b\u3064\u3044\u3066\u4f55\u304b\u3092\u5b66\u7fd2\u3057\u305f\u3053\u3068\u3092\u793a\u3057\u3066\u3044\u307e\u3059\u3002</p>","tags":["\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","BERT","DistilBERT","\u30de\u30b9\u30af\u8a00\u8a9e\u30e2\u30c7\u30ea\u30f3\u30b0"]},{"location":"LLM/ClassicalNLP/72_masked_language_modeling/#hugging-face-acceleratedistilbert","title":"Hugging Face Accelerate\u3092\u4f7f\u3063\u305fDistilBERT\u306e\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","text":"<p><code>Trainer</code>\u3067\u898b\u305f\u3088\u3046\u306b\u3001\u30de\u30b9\u30af\u8a00\u8a9e\u30e2\u30c7\u30eb\u306e\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u306f\u3001\u7b2c3\u7ae0\u306e\u30c6\u30ad\u30b9\u30c8\u5206\u985e\u4f8b\u3068\u975e\u5e38\u306b\u4f3c\u3066\u3044\u307e\u3059\u3002\u5b9f\u969b\u3001\u552f\u4e00\u306e\u5fae\u5999\u306a\u70b9\u306f\u7279\u5225\u306a\u30c7\u30fc\u30bf\u30b3\u30ec\u30fc\u30bf\u30fc\u306e\u4f7f\u7528\u3067\u3042\u308a\u3001\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306e\u524d\u534a\u3067\u65e2\u306b\u305d\u308c\u3092\u30ab\u30d0\u30fc\u3057\u307e\u3057\u305f\uff01</p> <p>\u3057\u304b\u3057\u3001<code>DataCollatorForLanguageModeling</code>\u306f\u5404\u8a55\u4fa1\u3067\u3082\u30e9\u30f3\u30c0\u30e0\u30de\u30b9\u30ad\u30f3\u30b0\u3092\u9069\u7528\u3059\u308b\u305f\u3081\u3001\u5404\u8a13\u7df4\u5b9f\u884c\u3067\u56f0\u60d1\u5ea6\u30b9\u30b3\u30a2\u306b\u3044\u304f\u3089\u304b\u306e\u5909\u52d5\u304c\u898b\u3089\u308c\u307e\u3057\u305f\u3002</p> <p>\u3053\u306e\u30e9\u30f3\u30c0\u30e0\u6027\u306e\u6e90\u3092\u6392\u9664\u3059\u308b\u4e00\u3064\u306e\u65b9\u6cd5\u306f\u3001\u30c6\u30b9\u30c8\u30bb\u30c3\u30c8\u5168\u4f53\u306b\u4e00\u5ea6\u30de\u30b9\u30ad\u30f3\u30b0\u3092\u9069\u7528\u3057\u3001\u8a55\u4fa1\u4e2d\u306bHugging Face Transformers\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u30c7\u30fc\u30bf\u30b3\u30ec\u30fc\u30bf\u30fc\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3067\u3059\u3002</p>","tags":["\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","BERT","DistilBERT","\u30de\u30b9\u30af\u8a00\u8a9e\u30e2\u30c7\u30ea\u30f3\u30b0"]},{"location":"LLM/ClassicalNLP/72_masked_language_modeling/#_15","title":"\u56fa\u5b9a\u30de\u30b9\u30ad\u30f3\u30b0\u95a2\u6570\u306e\u5b9f\u88c5","text":"<p>\u3053\u308c\u304c\u3069\u306e\u3088\u3046\u306b\u6a5f\u80fd\u3059\u308b\u304b\u3092\u78ba\u8a8d\u3059\u308b\u305f\u3081\u306b\u3001<code>DataCollatorForLanguageModeling</code>\u3068\u306e\u6700\u521d\u306e\u906d\u9047\u306b\u4f3c\u305f\u3001\u30d0\u30c3\u30c1\u306b\u30de\u30b9\u30ad\u30f3\u30b0\u3092\u9069\u7528\u3059\u308b\u7c21\u5358\u306a\u95a2\u6570\u3092\u5b9f\u88c5\u3057\u307e\u3057\u3087\u3046\uff1a</p> <pre><code>def insert_random_mask(batch):\n    features = [dict(zip(batch, t)) for t in zip(*batch.values())]\n    masked_inputs = data_collator(features)\n    # \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u5404\u30ab\u30e9\u30e0\u306b\u65b0\u3057\u3044\u300cmasked\u300d\u30ab\u30e9\u30e0\u3092\u4f5c\u6210\n    return {\"masked_\" + k: v.numpy() for k, v in masked_inputs.items()}\n</code></pre> <p>\u6b21\u306b\u3001\u3053\u306e\u95a2\u6570\u3092\u30c6\u30b9\u30c8\u30bb\u30c3\u30c8\u306b\u9069\u7528\u3057\u3001\u30de\u30b9\u30af\u3055\u308c\u3066\u3044\u306a\u3044\u30ab\u30e9\u30e0\u3092\u524a\u9664\u3057\u3066\u30de\u30b9\u30af\u3055\u308c\u305f\u3082\u306e\u306b\u7f6e\u304d\u63db\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u5168\u5358\u8a9e\u30de\u30b9\u30ad\u30f3\u30b0\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\u306f\u3001\u4e0a\u8a18\u306e<code>data_collator</code>\u3092\u9069\u5207\u306a\u3082\u306e\u306b\u7f6e\u304d\u63db\u3048\u3001\u3053\u3053\u3067\u6700\u521d\u306e\u884c\u3092\u524a\u9664\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff1a</p> <pre><code># \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304b\u3089word_ids\u30ab\u30e9\u30e0\u3092\u524a\u9664\ndownsampled_dataset = downsampled_dataset.remove_columns([\"word_ids\"])\n\n# \u30c6\u30b9\u30c8\u30bb\u30c3\u30c8\u306b\u56fa\u5b9a\u30de\u30b9\u30ad\u30f3\u30b0\u3092\u9069\u7528\neval_dataset = downsampled_dataset[\"test\"].map(\n    insert_random_mask,\n    batched=True,\n    remove_columns=downsampled_dataset[\"test\"].column_names,\n)\n\n# \u30ab\u30e9\u30e0\u540d\u3092\u5909\u66f4\u3057\u3066\u30de\u30b9\u30af\u3055\u308c\u305f\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u6a19\u6e96\u540d\u306b\neval_dataset = eval_dataset.rename_columns(\n    {\n        \"masked_input_ids\": \"input_ids\",\n        \"masked_attention_mask\": \"attention_mask\",\n        \"masked_labels\": \"labels\",\n    }\n)\n</code></pre>","tags":["\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","BERT","DistilBERT","\u30de\u30b9\u30af\u8a00\u8a9e\u30e2\u30c7\u30ea\u30f3\u30b0"]},{"location":"LLM/ClassicalNLP/72_masked_language_modeling/#_16","title":"\u30c7\u30fc\u30bf\u30ed\u30fc\u30c0\u30fc\u306e\u8a2d\u5b9a","text":"<p>\u901a\u5e38\u901a\u308a\u30c7\u30fc\u30bf\u30ed\u30fc\u30c0\u30fc\u3092\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u304c\u3001\u8a55\u4fa1\u30bb\u30c3\u30c8\u306b\u306f Hugging Face Transformers\u306e<code>default_data_collator</code>\u3092\u4f7f\u7528\u3057\u307e\u3059\uff1a</p> <pre><code>from torch.utils.data import DataLoader\nfrom transformers import default_data_collator\n\nbatch_size = 64\n\n# \u8a13\u7df4\u7528\u30c7\u30fc\u30bf\u30ed\u30fc\u30c0\u30fc\uff08\u30e9\u30f3\u30c0\u30e0\u30de\u30b9\u30ad\u30f3\u30b0\u4ed8\u304d\uff09\ntrain_dataloader = DataLoader(\n    downsampled_dataset[\"train\"],\n    shuffle=True,\n    batch_size=batch_size,\n    collate_fn=data_collator,\n)\n\n# \u8a55\u4fa1\u7528\u30c7\u30fc\u30bf\u30ed\u30fc\u30c0\u30fc\uff08\u56fa\u5b9a\u30de\u30b9\u30ad\u30f3\u30b0\uff09\neval_dataloader = DataLoader(\n    eval_dataset, batch_size=batch_size, collate_fn=default_data_collator\n)\n</code></pre>","tags":["\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","BERT","DistilBERT","\u30de\u30b9\u30af\u8a00\u8a9e\u30e2\u30c7\u30ea\u30f3\u30b0"]},{"location":"LLM/ClassicalNLP/72_masked_language_modeling/#_17","title":"\u30e2\u30c7\u30eb\u3068\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u30fc\u306e\u6e96\u5099","text":"<p>\u3053\u3053\u304b\u3089\u3001Hugging Face Accelerate\u3092\u4f7f\u3063\u305f\u6a19\u6e96\u7684\u306a\u30b9\u30c6\u30c3\u30d7\u306b\u5f93\u3044\u307e\u3059\u3002\u307e\u305a\u3001\u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u306e\u65b0\u3057\u3044\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u8aad\u307f\u8fbc\u307f\u307e\u3059\uff1a</p> <pre><code># \u65b0\u3057\u3044\u30e2\u30c7\u30eb\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u8aad\u307f\u8fbc\u307f\nmodel = AutoModelForMaskedLM.from_pretrained(model_checkpoint)\n</code></pre> <p>\u6b21\u306b\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u30fc\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u6a19\u6e96\u7684\u306a<code>AdamW</code>\u3092\u4f7f\u7528\u3057\u307e\u3059\uff1a</p> <pre><code>from torch.optim import AdamW\n\n# \u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u30fc\u3092\u8a2d\u5b9a\noptimizer = AdamW(model.parameters(), lr=5e-5)\n</code></pre> <p>\u3053\u308c\u3089\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f7f\u3063\u3066\u3001<code>Accelerator</code>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u8a13\u7df4\u306e\u305f\u3081\u306e\u3059\u3079\u3066\u3092\u6e96\u5099\u3067\u304d\u307e\u3059\uff1a</p> <pre><code>from accelerate import Accelerator\n\n# Accelerator\u3092\u521d\u671f\u5316\u3057\u3001\u3059\u3079\u3066\u306e\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3092\u6e96\u5099\naccelerator = Accelerator()\nmodel, optimizer, train_dataloader, eval_dataloader = accelerator.prepare(\n    model, optimizer, train_dataloader, eval_dataloader\n)\n</code></pre>","tags":["\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","BERT","DistilBERT","\u30de\u30b9\u30af\u8a00\u8a9e\u30e2\u30c7\u30ea\u30f3\u30b0"]},{"location":"LLM/ClassicalNLP/72_masked_language_modeling/#_18","title":"\u5b66\u7fd2\u7387\u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u30fc\u306e\u8a2d\u5b9a","text":"<p>\u30e2\u30c7\u30eb\u3001\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u30fc\u3001\u30c7\u30fc\u30bf\u30ed\u30fc\u30c0\u30fc\u304c\u8a2d\u5b9a\u3055\u308c\u305f\u306e\u3067\u3001\u5b66\u7fd2\u7387\u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u30fc\u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u6307\u5b9a\u3067\u304d\u307e\u3059\uff1a</p> <pre><code>from transformers import get_scheduler\n\n# \u8a13\u7df4\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8a2d\u5b9a\nnum_train_epochs = 3\nnum_update_steps_per_epoch = len(train_dataloader)\nnum_training_steps = num_train_epochs * num_update_steps_per_epoch\n\n# \u7dda\u5f62\u5b66\u7fd2\u7387\u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u30fc\u3092\u8a2d\u5b9a\nlr_scheduler = get_scheduler(\n    \"linear\",\n    optimizer=optimizer,\n    num_warmup_steps=0,\n    num_training_steps=num_training_steps,\n)\n</code></pre>","tags":["\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","BERT","DistilBERT","\u30de\u30b9\u30af\u8a00\u8a9e\u30e2\u30c7\u30ea\u30f3\u30b0"]},{"location":"LLM/ClassicalNLP/72_masked_language_modeling/#_19","title":"\u5b8c\u5168\u306a\u8a13\u7df4\u30fb\u8a55\u4fa1\u30eb\u30fc\u30d7","text":"<pre><code>from tqdm.auto import tqdm\nimport torch\nimport math\n\n# \u30d7\u30ed\u30b0\u30ec\u30b9\u30d0\u30fc\u3068\u51fa\u529b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u8a2d\u5b9a\nprogress_bar = tqdm(range(num_training_steps))\noutput_dir = \"distilbert-base-uncased-finetuned-imdb-accelerate\"\n\nfor epoch in range(num_train_epochs):\n    # \u8a13\u7df4\u30d5\u30a7\u30fc\u30ba\n    model.train()\n    for batch in train_dataloader:\n        # \u9806\u4f1d\u64ad\n        outputs = model(**batch)\n        loss = outputs.loss\n        # \u9006\u4f1d\u64ad\n        accelerator.backward(loss)\n\n        # \u30d1\u30e9\u30e1\u30fc\u30bf\u66f4\u65b0\n        optimizer.step()\n        lr_scheduler.step()\n        optimizer.zero_grad()\n        progress_bar.update(1)\n\n    # \u8a55\u4fa1\u30d5\u30a7\u30fc\u30ba\n    model.eval()\n    losses = []\n    for step, batch in enumerate(eval_dataloader):\n        with torch.no_grad():\n            outputs = model(**batch)\n\n        loss = outputs.loss\n        losses.append(accelerator.gather(loss.repeat(batch_size)))\n\n    # \u56f0\u60d1\u5ea6\u306e\u8a08\u7b97\n    losses = torch.cat(losses)\n    losses = losses[: len(eval_dataset)]\n    try:\n        perplexity = math.exp(torch.mean(losses))\n    except OverflowError:\n        perplexity = float(\"inf\")\n\n    print(f\"&gt;&gt;&gt; \u30a8\u30dd\u30c3\u30af {epoch}: \u56f0\u60d1\u5ea6: {perplexity}\")\n\n    # \u30e2\u30c7\u30eb\u306e\u4fdd\u5b58\u3068\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\n    accelerator.wait_for_everyone()\n    unwrapped_model = accelerator.unwrap_model(model)\n    unwrapped_model.save_pretrained(output_dir, save_function=accelerator.save)\n    if accelerator.is_main_process:\n        tokenizer.save_pretrained(output_dir)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>&gt;&gt;&gt; \u30a8\u30dd\u30c3\u30af 0: \u56f0\u60d1\u5ea6: 11.560117477655108\n&gt;&gt;&gt; \u30a8\u30dd\u30c3\u30af 1: \u56f0\u60d1\u5ea6: 11.106818026989123\n&gt;&gt;&gt; \u30a8\u30dd\u30c3\u30af 2: \u56f0\u60d1\u5ea6: 10.901680692261271\n</code></pre></p>","tags":["\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","BERT","DistilBERT","\u30de\u30b9\u30af\u8a00\u8a9e\u30e2\u30c7\u30ea\u30f3\u30b0"]},{"location":"LLM/ClassicalNLP/72_masked_language_modeling/#_20","title":"\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u6e08\u307f\u30e2\u30c7\u30eb\u306e\u4f7f\u7528","text":"<p>\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u6e08\u307f\u30e2\u30c7\u30eb\u306f\u3001Hub\u306e\u30a6\u30a3\u30b8\u30a7\u30c3\u30c8\u3092\u4f7f\u7528\u3059\u308b\u304b\u3001Hugging Face Transformers\u306e<code>pipeline</code>\u3092\u4f7f\u7528\u3057\u3066\u30ed\u30fc\u30ab\u30eb\u3067\u64cd\u4f5c\u3067\u304d\u307e\u3059\u3002\u5f8c\u8005\u3092\u4f7f\u7528\u3057\u3066\u3001<code>fill-mask</code>\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u3067\u30e2\u30c7\u30eb\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u307e\u3057\u3087\u3046\uff1a</p> <pre><code>from transformers import pipeline\n\n# \u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u6e08\u307f\u30e2\u30c7\u30eb\u3067\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u3092\u4f5c\u6210\nmask_filler = pipeline(\n    \"fill-mask\", model=\"distilbert-base-uncased-finetuned-imdb-accelerate\"\n)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>Device set to use mps:0\n</code></pre></p> <p>\u300cThis is a great [MASK]\u300d\u3068\u3044\u3046\u30b5\u30f3\u30d7\u30eb\u30c6\u30ad\u30b9\u30c8\u3092\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306b\u4f9b\u7d66\u3057\u3001\u4e0a\u4f4d5\u3064\u306e\u4e88\u6e2c\u3092\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff1a</p> <pre><code># \u30de\u30b9\u30af\u4e88\u6e2c\u3092\u5b9f\u884c\npreds = mask_filler(text)\n\nfor pred in preds:\n    print(f\"&gt;&gt;&gt; {pred['sequence']}\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>&gt;&gt;&gt; this is a great film.\n&gt;&gt;&gt; this is a great movie.\n&gt;&gt;&gt; this is a great idea.\n&gt;&gt;&gt; this is a great one.\n&gt;&gt;&gt; this is a great show.\n</code></pre></p> <p>\u7d20\u6674\u3089\u3057\u3044\u3067\u3059\u3002\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u524d\u306f\u300cdeal\u300d\u3001\u300csuccess\u300d\u3001\u300cadventure\u300d\u306a\u3069\u306e\u4e00\u822c\u7684\u306a\u7528\u8a9e\u304c\u4e88\u6e2c\u3055\u308c\u3066\u3044\u307e\u3057\u305f\u304c\u3001\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u5f8c\u306f\u300cfilm\u300d\u3001\u300cmovie\u300d\u3001\u300cshow\u300d\u3068\u3044\u3063\u305f\u6620\u753b\u30ec\u30d3\u30e5\u30fc\u306e\u30c9\u30e1\u30a4\u30f3\u306b\u7279\u5316\u3057\u305f\u7528\u8a9e\u304c\u4e88\u6e2c\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\u3053\u308c\u306f\u3001\u30c9\u30e1\u30a4\u30f3\u9069\u5fdc\u304c\u6210\u529f\u3057\u305f\u3053\u3068\u3092\u660e\u78ba\u306b\u793a\u3057\u3066\u3044\u307e\u3059\u3002</p>","tags":["\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","BERT","DistilBERT","\u30de\u30b9\u30af\u8a00\u8a9e\u30e2\u30c7\u30ea\u30f3\u30b0"]},{"location":"LLM/ClassicalNLP/72_masked_language_modeling/#_21","title":"\u53c2\u8003\u8cc7\u6599","text":"<ul> <li>Hugging Face Transformers Documentation</li> <li>DistilBERT: a distilled version of BERT</li> <li>Universal Language Model Fine-tuning for Text Classification (ULMFiT)</li> <li>IMDb Dataset</li> <li>Natural Language Processing with Transformers</li> </ul>","tags":["\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","BERT","DistilBERT","\u30de\u30b9\u30af\u8a00\u8a9e\u30e2\u30c7\u30ea\u30f3\u30b0"]},{"location":"LLM/ClassicalNLP/73_translation/","title":"\u6a5f\u68b0\u7ffb\u8a33\u30e2\u30c7\u30eb\u306e\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","text":"","tags":["\u6a5f\u68b0\u7ffb\u8a33","Transformers","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","NLP","Python","\u82f1\u65e5\u7ffb\u8a33"]},{"location":"LLM/ClassicalNLP/73_translation/#_2","title":"\u6982\u8981","text":"<p>\u3053\u306e\u8a18\u4e8b\u3067\u306f\u3001sequence-to-sequence\uff08\u7cfb\u5217\u5bfe\u7cfb\u5217\uff09 \u30bf\u30b9\u30af\u306e\u4e00\u3064\u3067\u3042\u308b\u6a5f\u68b0\u7ffb\u8a33\u306b\u3064\u3044\u3066\u5b66\u7fd2\u3057\u307e\u3059\u3002\u6a5f\u68b0\u7ffb\u8a33\u306f\u3001\u3042\u308b\u8a00\u8a9e\u306e\u6587\u7ae0\u3092\u5225\u306e\u8a00\u8a9e\u306b\u5909\u63db\u3059\u308b\u554f\u984c\u3067\u3001\u8981\u7d04\u554f\u984c\u3068\u540c\u69d8\u306e\u30a2\u30d7\u30ed\u30fc\u30c1\u304c\u9069\u7528\u3067\u304d\u307e\u3059\u3002</p> <p>\u672c\u8a18\u4e8b\u3067\u5b66\u7fd2\u3059\u308b\u5185\u5bb9\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u4ed6\u306e\u7cfb\u5217\u5bfe\u7cfb\u5217\u554f\u984c\u306b\u3082\u5fdc\u7528\u53ef\u80fd\u3067\u3059\uff1a</p> <ul> <li>\u30b9\u30bf\u30a4\u30eb\u5909\u63db: \u3042\u308b\u30b9\u30bf\u30a4\u30eb\u3067\u66f8\u304b\u308c\u305f\u30c6\u30ad\u30b9\u30c8\u3092\u5225\u306e\u30b9\u30bf\u30a4\u30eb\u306b\u5909\u63db\u3059\u308b\u30e2\u30c7\u30eb\uff08\u4f8b\uff1a\u30d5\u30a9\u30fc\u30de\u30eb\u306a\u6587\u7ae0\u3092\u30ab\u30b8\u30e5\u30a2\u30eb\u306b\u3001\u30b7\u30a7\u30a4\u30af\u30b9\u30d4\u30a2\u82f1\u8a9e\u3092\u73fe\u4ee3\u82f1\u8a9e\u306b\uff09</li> <li>\u751f\u6210\u7684\u8cea\u554f\u5fdc\u7b54: \u6587\u8108\u3092\u4e0e\u3048\u3089\u308c\u305f\u8cea\u554f\u306b\u5bfe\u3059\u308b\u56de\u7b54\u3092\u751f\u6210\u3059\u308b\u30e2\u30c7\u30eb</li> </ul> <p>\u53c2\u8003\u8cc7\u6599</p> <p>\u672c\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306f Hugging Face LLM Course \u3092\u53c2\u8003\u306b\u3001\u65e5\u672c\u8a9e\u3067\u5b66\u7fd2\u5185\u5bb9\u3092\u307e\u3068\u3081\u305f\u500b\u4eba\u7684\u306a\u5b66\u7fd2\u30ce\u30fc\u30c8\u3067\u3059\u3002\u8a73\u7d30\u306a\u5185\u5bb9\u3084\u6700\u65b0\u60c5\u5831\u306b\u3064\u3044\u3066\u306f\u3001\u539f\u6587\u3082\u4f75\u305b\u3066\u3054\u53c2\u7167\u304f\u3060\u3055\u3044\u3002</p>","tags":["\u6a5f\u68b0\u7ffb\u8a33","Transformers","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","NLP","Python","\u82f1\u65e5\u7ffb\u8a33"]},{"location":"LLM/ClassicalNLP/73_translation/#_3","title":"\u524d\u63d0\u77e5\u8b58","text":"<p>\u3053\u306e\u8a18\u4e8b\u3092\u7406\u89e3\u3059\u308b\u305f\u3081\u306b\u5fc5\u8981\u306a\u77e5\u8b58\uff1a</p> <ul> <li>Python \u306e\u57fa\u672c\u7684\u306a\u6587\u6cd5</li> <li>Transformers \u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9</li> <li>\u6a5f\u68b0\u5b66\u7fd2\u306e\u57fa\u790e\u6982\u5ff5\uff08\u5b66\u7fd2\u3001\u8a55\u4fa1\u3001\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\uff09</li> <li>PyTorch \u306e\u57fa\u672c\u7684\u306a\u64cd\u4f5c</li> </ul>","tags":["\u6a5f\u68b0\u7ffb\u8a33","Transformers","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","NLP","Python","\u82f1\u65e5\u7ffb\u8a33"]},{"location":"LLM/ClassicalNLP/73_translation/#_4","title":"\u30c7\u30fc\u30bf\u306e\u6e96\u5099","text":"<p>\u6a5f\u68b0\u7ffb\u8a33\u30e2\u30c7\u30eb\u3092\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u307e\u305f\u306f\u30bc\u30ed\u304b\u3089\u5b66\u7fd2\u3059\u308b\u306b\u306f\u3001\u30bf\u30b9\u30af\u306b\u9069\u3057\u305f\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304c\u5fc5\u8981\u3067\u3059\u3002\u3053\u306e\u8a18\u4e8b\u3067\u306f opus-100 dataset \u3092\u4f7f\u7528\u3057\u307e\u3059\u304c\u3001\u7ffb\u8a33\u3057\u305f\u3044\u8a00\u8a9e\u30da\u30a2\u306e\u6587\u7ae0\u304c\u3042\u308c\u3070\u3001\u30b3\u30fc\u30c9\u3092\u7c21\u5358\u306b\u9069\u5fdc\u3055\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p>","tags":["\u6a5f\u68b0\u7ffb\u8a33","Transformers","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","NLP","Python","\u82f1\u65e5\u7ffb\u8a33"]},{"location":"LLM/ClassicalNLP/73_translation/#opus-100","title":"opus-100 \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8","text":"<p>\u3044\u3064\u3082\u306e\u3088\u3046\u306b\u3001<code>load_dataset()</code> \u95a2\u6570\u3092\u4f7f\u7528\u3057\u3066\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u307e\u3059\u3002</p> <pre><code>from datasets import load_dataset\n\n# \u82f1\u65e5\u7ffb\u8a33\u7528\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u8aad\u307f\u8fbc\u307f\nsplit_datasets = load_dataset(\"Helsinki-NLP/opus-100\", \"en-ja\")\nsplit_datasets\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>DatasetDict({\n    test: Dataset({\n        features: ['translation'],\n        num_rows: 2000\n    })\n    train: Dataset({\n        features: ['translation'],\n        num_rows: 1000000\n    })\n    validation: Dataset({\n        features: ['translation'],\n        num_rows: 2000\n    })\n})\n</code></pre></p> <p>\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u8981\u7d20\u3092\u4e00\u3064\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002</p> <pre><code># \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u78ba\u8a8d\nsplit_datasets[\"train\"][1][\"translation\"]\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>{'en': \"I'm being held in a basement. I've been abducted with two other girls.\",\n 'ja': '\u3044\u307e\u5730\u4e0b\u306b\u5c45\u307e\u3059 \u4ed6\u306e2\u4eba\u3068\u4e00\u7dd2\u306b\u8a98\u62d0\u3055\u308c\u305f\u3093\u3067\u3059\uff01'}\n</code></pre></p> <p>\u30ea\u30af\u30a8\u30b9\u30c8\u3057\u305f\u8a00\u8a9e\u30da\u30a2\u306e2\u3064\u306e\u6587\u7ae0\u3092\u542b\u3080\u8f9e\u66f8\u304c\u5f97\u3089\u308c\u307e\u3059\u3002</p> <p>\u4e8b\u524d\u8a13\u7df4\u6e08\u307f\u30e2\u30c7\u30eb\u3092\u4f7f\u3063\u3066\u7ffb\u8a33\u3092\u8a66\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u3053\u306e\u30e2\u30c7\u30eb\u306f\u3001\u3088\u308a\u5927\u304d\u306a\u30d5\u30e9\u30f3\u30b9\u8a9e\u3068\u82f1\u8a9e\u306e\u6587\u7ae0\u30b3\u30fc\u30d1\u30b9\u3067\u4e8b\u524d\u8a13\u7df4\u3055\u308c\u3066\u304a\u308a\u3001\u7c21\u5358\u306a\u7ffb\u8a33\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002</p> <pre><code>from transformers import pipeline\n\n# \u82f1\u65e5\u7ffb\u8a33\u7528\u306e\u4e8b\u524d\u8a13\u7df4\u6e08\u307f\u30e2\u30c7\u30eb\u3092\u8aad\u307f\u8fbc\u307f\nmodel_checkpoint = \"Helsinki-NLP/opus-mt-en-jap\"\ntranslator = pipeline(\"translation\", model=model_checkpoint)\ntranslator(\"I'm being held in a basement. I've been abducted with two other girls.\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>Device set to use mps:0\n\n[{'translation_text': '\u3042\u305f\u3057 \u306f \u4e0d\u5e73 \u3092 \u8ca0\u3046 \u8005 \u3068 \u306a \u308a , \u307b\u304b \u306e \u3075\u305f\u308a \u306e \u5973 \u3068 \u5a5a\u7d04 \u3057 \u305f \u3053\u3068 \u304c \u3042\u308b \u304c ,'}]\n</code></pre></p>","tags":["\u6a5f\u68b0\u7ffb\u8a33","Transformers","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","NLP","Python","\u82f1\u65e5\u7ffb\u8a33"]},{"location":"LLM/ClassicalNLP/73_translation/#_5","title":"\u30c7\u30fc\u30bf\u306e\u524d\u51e6\u7406","text":"<p>\u304a\u99b4\u67d3\u307f\u306e\u624b\u9806\u3067\u3059\u304c\u3001\u3059\u3079\u3066\u306e\u30c6\u30ad\u30b9\u30c8\u3092\u30c8\u30fc\u30af\u30f3ID\u306e\u30bb\u30c3\u30c8\u306b\u5909\u63db\u3057\u3066\u3001\u30e2\u30c7\u30eb\u304c\u7406\u89e3\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u306e\u30bf\u30b9\u30af\u3067\u306f\u3001\u5165\u529b\u3068\u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u4e21\u65b9\u3092\u30c8\u30fc\u30af\u30f3\u5316\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u6700\u521d\u306e\u30bf\u30b9\u30af\u306f\u3001<code>tokenizer</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u3067\u3059\u3002\u524d\u8ff0\u306e\u3068\u304a\u308a\u3001Marian\u82f1\u65e5\u4e8b\u524d\u8a13\u7df4\u6e08\u307f\u30e2\u30c7\u30eb\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u5225\u306e\u8a00\u8a9e\u30da\u30a2\u3067\u3053\u306e\u30b3\u30fc\u30c9\u3092\u8a66\u3059\u5834\u5408\u306f\u3001\u30e2\u30c7\u30eb\u30c1\u30a7\u30c3\u30af\u30dd\u30a4\u30f3\u30c8\u3092\u9069\u5fdc\u3055\u305b\u3066\u304f\u3060\u3055\u3044\u3002Helsinki-NLP \u7d44\u7e54\u3067\u306f\u3001\u8907\u6570\u8a00\u8a9e\u30671000\u4ee5\u4e0a\u306e\u30e2\u30c7\u30eb\u3092\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\u3002</p> <pre><code>from transformers import AutoTokenizer\n\n# \u82f1\u65e5\u7ffb\u8a33\u30e2\u30c7\u30eb\u306eTokenizer\u3092\u521d\u671f\u5316\nmodel_checkpoint = \"Helsinki-NLP/opus-mt-en-jap\"\ntokenizer = AutoTokenizer.from_pretrained(model_checkpoint, return_tensors = \"pt\")\n</code></pre> <p>\u30c7\u30fc\u30bf\u306e\u6e96\u5099\u306f\u975e\u5e38\u306b\u7c21\u5358\u3067\u3059\u3002\u899a\u3048\u3066\u304a\u304f\u3079\u304d\u3053\u3068\u304c\u4e00\u3064\u3042\u308a\u307e\u3059\uff1atokenizer\u304c\u51fa\u529b\u8a00\u8a9e\uff08\u3053\u3053\u3067\u306f\u65e5\u672c\u8a9e\uff09\u3067\u30bf\u30fc\u30b2\u30c3\u30c8\u3092\u51e6\u7406\u3059\u308b\u3053\u3068\u3092\u78ba\u5b9f\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u306f\u3001tokenizer\u306e <code>__call__</code> \u30e1\u30bd\u30c3\u30c9\u306e <code>text_targets</code> \u5f15\u6570\u306b\u30bf\u30fc\u30b2\u30c3\u30c8\u3092\u6e21\u3059\u3053\u3068\u3067\u884c\u3048\u307e\u3059\u3002</p> <p>\u3053\u306e\u4ed5\u7d44\u307f\u3092\u78ba\u8a8d\u3059\u308b\u305f\u3081\u306b\u3001\u8a13\u7df4\u30bb\u30c3\u30c8\u304b\u3089\u5404\u8a00\u8a9e\u306e\u30b5\u30f3\u30d7\u30eb\u30921\u3064\u305a\u3064\u51e6\u7406\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002</p> <pre><code># \u82f1\u8a9e\u3068\u65e5\u672c\u8a9e\u306e\u6587\u7ae0\u3092\u53d6\u5f97\nen_sentence = split_datasets[\"train\"][1][\"translation\"][\"en\"]\nja_sentence = split_datasets[\"train\"][1][\"translation\"][\"ja\"]\n\n# \u5165\u529b\u6587\u7ae0\u3068\u30bf\u30fc\u30b2\u30c3\u30c8\u6587\u7ae0\u3092\u30c8\u30fc\u30af\u30f3\u5316\ninputs = tokenizer(en_sentence, text_target=ja_sentence)\ninputs\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>{'input_ids': [31, 62, 2315, 616, 2513, 20, 33, 3761, 6359, 4, 31, 62, 9099, 428, 1, 44823, 203, 48, 253, 422, 24303, 4, 0], 'attention_mask': [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 'labels': [2249, 18925, 115, 14755, 652, 6, 2338, 1, 570, 2666, 4550, 1, 1382, 1845, 572, 315, 0]}\n</code></pre></p> <p>\u3054\u89a7\u306e\u3068\u304a\u308a\u3001\u51fa\u529b\u306b\u306f\u82f1\u8a9e\u306e\u6587\u7ae0\u306b\u95a2\u9023\u4ed8\u3051\u3089\u308c\u305f\u5165\u529bID\u304c\u542b\u307e\u308c\u3001\u65e5\u672c\u8a9e\u306b\u95a2\u9023\u4ed8\u3051\u3089\u308c\u305fID\u306f <code>labels</code> \u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u683c\u7d0d\u3055\u308c\u307e\u3059\u3002\u30e9\u30d9\u30eb\u3092\u30c8\u30fc\u30af\u30f3\u5316\u3057\u3066\u3044\u308b\u3053\u3068\u3092\u793a\u3059\u306e\u3092\u5fd8\u308c\u308b\u3068\u3001\u5165\u529btokenizer\u306b\u3088\u3063\u3066\u30c8\u30fc\u30af\u30f3\u5316\u3055\u308c\u308b\u3053\u3068\u306b\u306a\u308a\u3001Marian\u30e2\u30c7\u30eb\u306e\u5834\u5408\u306f\u3046\u307e\u304f\u3044\u304d\u307e\u305b\u3093\uff1a</p> <pre><code># \u9593\u9055\u3063\u305f\u65b9\u6cd5\uff1a\u65e5\u672c\u8a9e\u6587\u7ae0\u3092\u82f1\u8a9etokenizer\u3067\u51e6\u7406\nwrong_targets = tokenizer(ja_sentence)\nprint(tokenizer.convert_ids_to_tokens(wrong_targets[\"input_ids\"]))\nprint(tokenizer.convert_ids_to_tokens(inputs[\"labels\"]))\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>['\u2581', '&lt;unk&gt;', '\u2581', '\u00e4\u00bb\u2013\u00e3\u00ae', '&lt;unk&gt;', '&lt;unk&gt;', '!', '&lt;/s&gt;']\n['\u2581\u3044\u307e', '\u5730\u4e0b', '\u306b', '\u5c45', '\u307e\u3059', '\u2581', '\u00e4\u00bb\u2013\u00e3\u00ae', '&lt;unk&gt;', '\u4eba', '\u3068\u4e00\u7dd2\u306b', '\u8a98', '&lt;unk&gt;', '\u3055\u308c\u305f', '\u3093\u3067', '\u3059', '!', '&lt;/s&gt;']\n</code></pre></p> <p>\u3054\u89a7\u306e\u3068\u304a\u308a\u3001\u82f1\u8a9etokenizer\u3092\u4f7f\u3063\u3066\u30d5\u30e9\u30f3\u30b9\u8a9e\uff08\u65e5\u672c\u8a9e\uff09\u306e\u6587\u7ae0\u3092\u524d\u51e6\u7406\u3059\u308b\u3068\u3001tokenizer\u304c\u65e5\u672c\u8a9e\u306e\u5358\u8a9e\u3092\u77e5\u3089\u306a\u3044\u305f\u3081\uff08\u82f1\u8a9e\u306b\u3082\u73fe\u308c\u308b\u5358\u8a9e\u3092\u9664\u3044\u3066\u3001\u4f8b\u3048\u3070\u300cdiscussion\u300d\u306a\u3069\uff09\u3001\u306f\u308b\u304b\u306b\u591a\u304f\u306e\u30c8\u30fc\u30af\u30f3\u304c\u751f\u6210\u3055\u308c\u307e\u3059\u3002</p> <p><code>inputs</code> \u306f\u901a\u5e38\u306e\u30ad\u30fc\uff08\u5165\u529bID\u3001attention mask \u306a\u3069\uff09\u3092\u6301\u3064\u8f9e\u66f8\u306a\u306e\u3067\u3001\u6700\u5f8c\u306e\u30b9\u30c6\u30c3\u30d7\u306f\u3001\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u9069\u7528\u3059\u308b\u524d\u51e6\u7406\u95a2\u6570\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u3067\u3059\uff1a</p> <pre><code># \u6700\u5927\u9577\u3092\u8a2d\u5b9a\nmax_length = 128\n\ndef preprocess_function(examples):\n    # \u82f1\u8a9e\u3068\u65e5\u672c\u8a9e\u306e\u6587\u7ae0\u3092\u5206\u96e2\n    inputs = [ex[\"en\"] for ex in examples[\"translation\"]]\n    targets = [ex[\"ja\"] for ex in examples[\"translation\"]]\n\n    # \u5165\u529b\u3068\u30bf\u30fc\u30b2\u30c3\u30c8\u3092\u540c\u6642\u306b\u30c8\u30fc\u30af\u30f3\u5316\n    model_inputs = tokenizer(\n        inputs, text_target=targets, max_length=max_length, truncation=True\n    )\n    return model_inputs\n</code></pre> <p>\u5165\u529b\u3068\u51fa\u529b\u306b\u540c\u3058\u6700\u5927\u9577\u3092\u8a2d\u5b9a\u3057\u3066\u3044\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u6271\u3063\u3066\u3044\u308b\u30c6\u30ad\u30b9\u30c8\u306f\u975e\u5e38\u306b\u77ed\u3044\u3088\u3046\u306a\u306e\u3067\u3001128\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002</p> <p>\ud83d\udca1 \u6ce8\u610f\u70b9:</p> <p>\u30bf\u30fc\u30b2\u30c3\u30c8\u306eattention mask\u306b\u306f\u6ce8\u610f\u3092\u6255\u3044\u307e\u305b\u3093\u3002\u4ee3\u308f\u308a\u306b\u3001\u30d1\u30c7\u30a3\u30f3\u30b0\u30c8\u30fc\u30af\u30f3\u306b\u5bfe\u5fdc\u3059\u308b\u30e9\u30d9\u30eb\u306f\u3001\u640d\u5931\u8a08\u7b97\u3067\u7121\u8996\u3055\u308c\u308b\u3088\u3046\u306b <code>-100</code> \u306b\u8a2d\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u52d5\u7684\u30d1\u30c7\u30a3\u30f3\u30b0\u3092\u9069\u7528\u3057\u3066\u3044\u308b\u305f\u3081\u3001\u5f8c\u3067\u30c7\u30fc\u30bf\u30b3\u30ec\u30af\u30bf\u30fc\u306b\u3088\u3063\u3066\u884c\u308f\u308c\u307e\u3059\u304c\u3001\u3053\u3053\u3067\u30d1\u30c7\u30a3\u30f3\u30b0\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\u306f\u3001\u30d1\u30c7\u30a3\u30f3\u30b0\u30c8\u30fc\u30af\u30f3\u306b\u5bfe\u5fdc\u3059\u308b\u3059\u3079\u3066\u306e\u30e9\u30d9\u30eb\u3092 <code>-100</code> \u306b\u8a2d\u5b9a\u3059\u308b\u3088\u3046\u306b\u524d\u51e6\u7406\u95a2\u6570\u3092\u9069\u5fdc\u3055\u305b\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002</p> <p>\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u3059\u3079\u3066\u306e\u5206\u5272\u3067\u524d\u51e6\u7406\u3092\u4e00\u5ea6\u306b\u9069\u7528\u3067\u304d\u307e\u3059\u3002</p> <pre><code># \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u5168\u4f53\u306b\u524d\u51e6\u7406\u3092\u9069\u7528\ntokenized_datasets = split_datasets.map(\n    preprocess_function,\n    batched=True,\n    remove_columns=split_datasets[\"train\"].column_names\n)\n</code></pre> <p>\u30c7\u30fc\u30bf\u304c\u524d\u51e6\u7406\u3055\u308c\u305f\u306e\u3067\u3001\u4e8b\u524d\u8a13\u7df4\u6e08\u307f\u30e2\u30c7\u30eb\u3092\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3059\u308b\u6e96\u5099\u304c\u6574\u3044\u307e\u3057\u305f\u3002</p>","tags":["\u6a5f\u68b0\u7ffb\u8a33","Transformers","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","NLP","Python","\u82f1\u65e5\u7ffb\u8a33"]},{"location":"LLM/ClassicalNLP/73_translation/#trainer-api","title":"Trainer API \u3092\u4f7f\u7528\u3057\u305f\u30e2\u30c7\u30eb\u306e\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","text":"<p><code>Trainer</code> \u3092\u4f7f\u7528\u3057\u305f\u5b9f\u969b\u306e\u30b3\u30fc\u30c9\u306f\u4ee5\u524d\u3068\u540c\u3058\u3067\u3001\u5c0f\u3055\u306a\u5909\u66f4\u304c\u4e00\u3064\u3060\u3051\u3042\u308a\u307e\u3059\uff1a\u3053\u3053\u3067\u306f <code>Seq2SeqTrainer</code> \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u3053\u308c\u306f <code>Trainer</code> \u306e\u30b5\u30d6\u30af\u30e9\u30b9\u3067\u3001<code>generate()</code> \u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3057\u3066\u5165\u529b\u304b\u3089\u51fa\u529b\u3092\u4e88\u6e2c\u3059\u308b\u3053\u3068\u3067\u3001\u8a55\u4fa1\u3092\u9069\u5207\u306b\u51e6\u7406\u3067\u304d\u307e\u3059\u3002\u30e1\u30c8\u30ea\u30c3\u30af\u8a08\u7b97\u306b\u3064\u3044\u3066\u8a71\u3059\u3068\u304d\u306b\u3001\u3053\u308c\u306b\u3064\u3044\u3066\u3088\u308a\u8a73\u7d30\u306b\u8aac\u660e\u3057\u307e\u3059\u3002</p> <p>\u307e\u305a\u7b2c\u4e00\u306b\u3001\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3059\u308b\u5b9f\u969b\u306e\u30e2\u30c7\u30eb\u304c\u5fc5\u8981\u3067\u3059\u3002\u901a\u5e38\u306e <code>AutoModel</code> API \u3092\u4f7f\u7528\u3057\u307e\u3059\uff1a</p> <pre><code>from transformers import AutoModelForSeq2SeqLM\nimport torch\n\n# Sequence-to-Sequence \u5b66\u7fd2\u7528\u30e2\u30c7\u30eb\u3092\u8aad\u307f\u8fbc\u307f\nmodel = AutoModelForSeq2SeqLM.from_pretrained(model_checkpoint)\n\n# \u30c7\u30d0\u30a4\u30b9\u306e\u8a2d\u5b9a\uff08MPS, GPU, CPU\u306e\u9806\u3067\u5229\u7528\u53ef\u80fd\u306a\u3082\u306e\u3092\u4f7f\u7528\uff09\nif torch.backends.mps.is_available():\n    device = torch.device(\"mps\")\nelse:\n    device = torch.device(\"cpu\")\n\nmodel = model.to(device)\n</code></pre>","tags":["\u6a5f\u68b0\u7ffb\u8a33","Transformers","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","NLP","Python","\u82f1\u65e5\u7ffb\u8a33"]},{"location":"LLM/ClassicalNLP/73_translation/#_6","title":"\u30c7\u30fc\u30bf\u30b3\u30ec\u30af\u30b7\u30e7\u30f3","text":"<p>\u52d5\u7684\u30d0\u30c3\u30c1\u51e6\u7406\u306e\u30d1\u30c7\u30a3\u30f3\u30b0\u3092\u51e6\u7406\u3059\u308b\u305f\u3081\u306b\u3001\u30c7\u30fc\u30bf\u30b3\u30ec\u30af\u30bf\u30fc\u304c\u5fc5\u8981\u3067\u3059\u3002<code>DataCollatorWithPadding</code> \u3060\u3051\u306f\u4f7f\u7528\u3067\u304d\u307e\u305b\u3093\u3002\u3053\u308c\u306f\u5165\u529b\uff08\u5165\u529bID\u3001attention mask\u3001\u30c8\u30fc\u30af\u30f3\u30bf\u30a4\u30d7ID\uff09\u306e\u307f\u3092\u30d1\u30c3\u30c9\u3059\u308b\u304b\u3089\u3067\u3059\u3002\u30e9\u30d9\u30eb\u3082\u3001\u30e9\u30d9\u30eb\u5185\u3067\u906d\u9047\u3057\u305f\u6700\u5927\u9577\u306b\u30d1\u30c3\u30c9\u3055\u308c\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u305d\u3057\u3066\u3001\u524d\u8ff0\u306e\u3068\u304a\u308a\u3001\u30e9\u30d9\u30eb\u3092\u30d1\u30c3\u30c9\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3055\u308c\u308b\u30d1\u30c7\u30a3\u30f3\u30b0\u5024\u306f\u3001\u640d\u5931\u8a08\u7b97\u3067\u30d1\u30c3\u30c9\u3055\u308c\u305f\u5024\u304c\u7121\u8996\u3055\u308c\u308b\u3088\u3046\u306b\u3001tokenizer\u306e\u30d1\u30c7\u30a3\u30f3\u30b0\u30c8\u30fc\u30af\u30f3\u3067\u306f\u306a\u304f <code>-100</code> \u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002</p> <p>\u3053\u308c\u306f\u3059\u3079\u3066 <code>DataCollatorForSeq2Seq</code> \u306b\u3088\u3063\u3066\u884c\u308f\u308c\u307e\u3059\u3002<code>DataCollatorWithPadding</code> \u3068\u540c\u69d8\u306b\u3001\u5165\u529b\u3092\u524d\u51e6\u7406\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3055\u308c\u308b <code>tokenizer</code> \u3092\u53d6\u308a\u307e\u3059\u304c\u3001<code>model</code> \u3082\u53d6\u308a\u307e\u3059\u3002\u3053\u306e\u30c7\u30fc\u30bf\u30b3\u30ec\u30af\u30bf\u30fc\u306f\u3001\u7279\u5225\u306a\u30c8\u30fc\u30af\u30f3\u3092\u5148\u982d\u306b\u6301\u3064\u30e9\u30d9\u30eb\u306e\u30b7\u30d5\u30c8\u30d0\u30fc\u30b8\u30e7\u30f3\u3067\u3042\u308b\u30c7\u30b3\u30fc\u30c0\u30fc\u5165\u529bID\u306e\u6e96\u5099\u3082\u62c5\u5f53\u3059\u308b\u304b\u3089\u3067\u3059\u3002\u3053\u306e\u30b7\u30d5\u30c8\u306f\u7570\u306a\u308b\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3067\u82e5\u5e72\u7570\u306a\u3063\u3066\u884c\u308f\u308c\u308b\u305f\u3081\u3001<code>DataCollatorForSeq2Seq</code> \u306f <code>model</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u77e5\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff1a</p> <pre><code>from transformers import DataCollatorForSeq2Seq\n\n# Seq2Seq\u7528\u306e\u30c7\u30fc\u30bf\u30b3\u30ec\u30af\u30bf\u30fc\u3092\u521d\u671f\u5316\ndata_collator = DataCollatorForSeq2Seq(tokenizer, model=model)\n</code></pre> <p>\u3044\u304f\u3064\u304b\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u30c6\u30b9\u30c8\u3059\u308b\u305f\u3081\u306b\u3001\u30c8\u30fc\u30af\u30f3\u5316\u3055\u308c\u305f\u8a13\u7df4\u30bb\u30c3\u30c8\u306e\u30b5\u30f3\u30d7\u30eb\u30ea\u30b9\u30c8\u3067\u547c\u3073\u51fa\u3057\u307e\u3059\u3002</p> <pre><code># \u30c7\u30fc\u30bf\u30b3\u30ec\u30af\u30bf\u30fc\u306e\u30c6\u30b9\u30c8\u5b9f\u884c\nbatch = data_collator([tokenized_datasets[\"train\"][i] for i in range(1, 3)])\n</code></pre> <p>\u30e9\u30d9\u30eb\u304c\u30d0\u30c3\u30c1\u306e\u6700\u5927\u9577\u306b\u30d1\u30c3\u30c9\u3055\u308c\u3001<code>-100</code> \u304c\u4f7f\u7528\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002</p> <pre><code># \u30d1\u30c7\u30a3\u30f3\u30b0\u3055\u308c\u305f\u30e9\u30d9\u30eb\u3092\u78ba\u8a8d\nbatch[\"labels\"]\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>tensor([[ 2249, 18925,   115, 14755,   652,     6,  2338,     1,   570,  2666,\n          4550,     1,  1382,  1845,   572,   315,     0],\n        [    6,  1695,   621,   261,   315,     0,  -100,  -100,  -100,  -100,\n          -100,  -100,  -100,  -100,  -100,  -100,  -100]])\n</code></pre></p> <p>\u307e\u305f\u3001\u30c7\u30b3\u30fc\u30c0\u30fc\u5165\u529bID\u3092\u898b\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u3089\u304c\u30e9\u30d9\u30eb\u306e\u30b7\u30d5\u30c8\u3055\u308c\u305f\u30d0\u30fc\u30b8\u30e7\u30f3\u3067\u3042\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002</p> <pre><code># \u30c7\u30b3\u30fc\u30c0\u30fc\u5165\u529bID\u3092\u78ba\u8a8d\nbatch[\"decoder_input_ids\"]\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>tensor([[46275,  2249, 18925,   115, 14755,   652,     6,  2338,     1,   570,\n          2666,  4550,     1,  1382,  1845,   572,   315],\n        [46275,     6,  1695,   621,   261,   315,     0, 46275, 46275, 46275,\n         46275, 46275, 46275, 46275, 46275, 46275, 46275]])\n</code></pre></p> <p>\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u6700\u521d\u30682\u756a\u76ee\u306e\u8981\u7d20\u306e\u30e9\u30d9\u30eb\u306f\u6b21\u306e\u3068\u304a\u308a\u3067\u3059\u3002</p> <pre><code># \u5143\u306e\u30e9\u30d9\u30eb\u3092\u78ba\u8a8d\nfor i in range(1, 3):\n    print(tokenized_datasets[\"train\"][i][\"labels\"])\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>[2249, 18925, 115, 14755, 652, 6, 2338, 1, 570, 2666, 4550, 1, 1382, 1845, 572, 315, 0]\n[6, 1695, 621, 261, 315, 0]\n</code></pre></p> <p>\u3053\u306e <code>data_collator</code> \u3092 <code>Seq2SeqTrainer</code> \u306b\u6e21\u3057\u307e\u3059\u3002\u6b21\u306b\u3001\u30e1\u30c8\u30ea\u30c3\u30af\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002</p>","tags":["\u6a5f\u68b0\u7ffb\u8a33","Transformers","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","NLP","Python","\u82f1\u65e5\u7ffb\u8a33"]},{"location":"LLM/ClassicalNLP/73_translation/#_7","title":"\u8a55\u4fa1\u30e1\u30c8\u30ea\u30c3\u30af","text":"<p><code>Seq2SeqTrainer</code> \u304c\u30b9\u30fc\u30d1\u30fc\u30af\u30e9\u30b9 <code>Trainer</code> \u306b\u8ffd\u52a0\u3059\u308b\u6a5f\u80fd\u306f\u3001\u8a55\u4fa1\u3084\u4e88\u6e2c\u4e2d\u306b <code>generate()</code> \u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3059\u308b\u80fd\u529b\u3067\u3059\u3002\u8a13\u7df4\u4e2d\u3001\u30e2\u30c7\u30eb\u306f\u4e88\u6e2c\u3057\u3088\u3046\u3068\u3057\u3066\u3044\u308b\u30c8\u30fc\u30af\u30f3\u306e\u5f8c\u306e\u30c8\u30fc\u30af\u30f3\u3092\u4f7f\u7528\u3057\u306a\u3044\u3088\u3046\u306b\u3059\u308battention mask\u3092\u6301\u3064 <code>decoder_input_ids</code> \u3092\u4f7f\u7528\u3057\u3066\u3001\u8a13\u7df4\u3092\u9ad8\u901f\u5316\u3057\u307e\u3059\u3002\u63a8\u8ad6\u4e2d\u306f\u30e9\u30d9\u30eb\u304c\u306a\u3044\u305f\u3081\u3001\u3053\u308c\u3089\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u306a\u3044\u306e\u3067\u3001\u540c\u3058\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u3067\u30e2\u30c7\u30eb\u3092\u8a55\u4fa1\u3059\u308b\u3053\u3068\u306f\u826f\u3044\u30a2\u30a4\u30c7\u30a2\u3067\u3059\u3002</p> <p>\u30c7\u30b3\u30fc\u30c0\u30fc\u306f\u3001\u4e00\u5ea6\u306b\u4e00\u3064\u305a\u3064\u30c8\u30fc\u30af\u30f3\u3092\u4e88\u6e2c\u3059\u308b\u3053\u3068\u3067\u63a8\u8ad6\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\u3053\u308c\u306f\u3001Hugging Face Transformers\u306e <code>generate()</code> \u30e1\u30bd\u30c3\u30c9\u306b\u3088\u3063\u3066\u821e\u53f0\u88cf\u3067\u5b9f\u88c5\u3055\u308c\u3066\u3044\u307e\u3059\u3002<code>Seq2SeqTrainer</code> \u3067\u306f\u3001<code>predict_with_generate=True</code> \u3092\u8a2d\u5b9a\u3059\u308b\u3068\u3001\u8a55\u4fa1\u306b\u305d\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002</p> <p>\u7ffb\u8a33\u306b\u4f7f\u7528\u3055\u308c\u308b\u4f1d\u7d71\u7684\u306a\u30e1\u30c8\u30ea\u30c3\u30af\u306f\u3001Kishore Papineni \u3089\u306b\u3088\u308b 2002\u5e74\u306e\u8ad6\u6587 \u3067\u7d39\u4ecb\u3055\u308c\u305f BLEU \u30b9\u30b3\u30a2 \u3067\u3059\u3002BLEU\u30b9\u30b3\u30a2\u306f\u3001\u7ffb\u8a33\u304c\u30e9\u30d9\u30eb\u306b\u3069\u308c\u3060\u3051\u8fd1\u3044\u304b\u3092\u8a55\u4fa1\u3057\u307e\u3059\u3002\u30e2\u30c7\u30eb\u304c\u751f\u6210\u3057\u305f\u51fa\u529b\u306e\u7406\u89e3\u53ef\u80fd\u6027\u3084\u6587\u6cd5\u7684\u6b63\u78ba\u6027\u3092\u6e2c\u5b9a\u3059\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u7d71\u8a08\u7684\u30eb\u30fc\u30eb\u3092\u4f7f\u7528\u3057\u3066\u3001\u751f\u6210\u3055\u308c\u305f\u51fa\u529b\u5185\u306e\u3059\u3079\u3066\u306e\u5358\u8a9e\u304c\u30bf\u30fc\u30b2\u30c3\u30c8\u5185\u306b\u3082\u73fe\u308c\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002\u3055\u3089\u306b\u3001\u30bf\u30fc\u30b2\u30c3\u30c8\u3067\u3082\u7e70\u308a\u8fd4\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306b\u540c\u3058\u5358\u8a9e\u306e\u7e70\u308a\u8fd4\u3057\u3092\u7f70\u3059\u308b\u30eb\u30fc\u30eb\uff08\u30e2\u30c7\u30eb\u304c <code>\"the the the the the\"</code> \u306e\u3088\u3046\u306a\u6587\u7ae0\u3092\u51fa\u529b\u3059\u308b\u3053\u3068\u3092\u907f\u3051\u308b\u305f\u3081\uff09\u3068\u3001\u30bf\u30fc\u30b2\u30c3\u30c8\u5185\u306e\u3082\u306e\u3088\u308a\u77ed\u3044\u51fa\u529b\u6587\u7ae0\u3092\u7f70\u3059\u308b\u30eb\u30fc\u30eb\uff08\u30e2\u30c7\u30eb\u304c <code>\"the\"</code> \u306e\u3088\u3046\u306a\u6587\u7ae0\u3092\u51fa\u529b\u3059\u308b\u3053\u3068\u3092\u907f\u3051\u308b\u305f\u3081\uff09\u304c\u3042\u308a\u307e\u3059\u3002</p> <p>BLEU\u306e\u5f31\u70b9\u306e\u4e00\u3064\u306f\u3001\u30c6\u30ad\u30b9\u30c8\u304c\u65e2\u306b\u30c8\u30fc\u30af\u30f3\u5316\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u671f\u5f85\u3059\u308b\u3053\u3068\u3067\u3001\u7570\u306a\u308btokenizer\u3092\u4f7f\u7528\u3059\u308b\u30e2\u30c7\u30eb\u9593\u3067\u30b9\u30b3\u30a2\u3092\u6bd4\u8f03\u3059\u308b\u3053\u3068\u304c\u56f0\u96e3\u306b\u306a\u308a\u307e\u3059\u3002\u305d\u306e\u305f\u3081\u3001\u4eca\u65e5\u306e\u7ffb\u8a33\u30e2\u30c7\u30eb\u306e\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u306b\u6700\u3082\u3088\u304f\u4f7f\u7528\u3055\u308c\u308b\u30e1\u30c8\u30ea\u30c3\u30af\u306f SacreBLEU \u3067\u3059\u3002\u3053\u308c\u306f\u30c8\u30fc\u30af\u30f3\u5316\u30b9\u30c6\u30c3\u30d7\u3092\u6a19\u6e96\u5316\u3059\u308b\u3053\u3068\u3067\u3001\u3053\u306e\u5f31\u70b9\uff08\u304a\u3088\u3073\u4ed6\u306e\u5f31\u70b9\uff09\u3092\u5bfe\u51e6\u3057\u307e\u3059\u3002\u3053\u306e\u30e1\u30c8\u30ea\u30c3\u30af\u3092\u4f7f\u7528\u3059\u308b\u306b\u306f\u3001\u307e\u305aSacreBLEU\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff1a</p> <pre><code># !pip install sacrebleu\n</code></pre> <p>\u305d\u306e\u5f8c\u3001<code>evaluate.load()</code> \u3092\u4ecb\u3057\u3066\u8aad\u307f\u8fbc\u3080\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p> <pre><code>import evaluate\n\n# SacreBLEU\u30e1\u30c8\u30ea\u30c3\u30af\u3092\u8aad\u307f\u8fbc\u307f\nmetric = evaluate.load(\"sacrebleu\")\n</code></pre> <p>\u3053\u306e\u30e1\u30c8\u30ea\u30c3\u30af\u306f\u3001\u5165\u529b\u3068\u30bf\u30fc\u30b2\u30c3\u30c8\u3068\u3057\u3066\u30c6\u30ad\u30b9\u30c8\u3092\u53d7\u3051\u53d6\u308a\u307e\u3059\u3002\u8907\u6570\u306e\u53d7\u3051\u5165\u308c\u53ef\u80fd\u306a\u30bf\u30fc\u30b2\u30c3\u30c8\u3092\u53d7\u3051\u5165\u308c\u308b\u3088\u3046\u306b\u8a2d\u8a08\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u540c\u3058\u6587\u7ae0\u306b\u5bfe\u3057\u3066\u8907\u6570\u306e\u53d7\u3051\u5165\u308c\u53ef\u80fd\u306a\u7ffb\u8a33\u304c\u3042\u308b\u3053\u3068\u304c\u591a\u3044\u304b\u3089\u3067\u3059\u3002\u4f7f\u7528\u3057\u3066\u3044\u308b\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306f1\u3064\u3057\u304b\u63d0\u4f9b\u3057\u3066\u3044\u307e\u305b\u3093\u304c\u3001NLP\u3067\u30e9\u30d9\u30eb\u3068\u3057\u3066\u8907\u6570\u306e\u6587\u7ae0\u3092\u63d0\u4f9b\u3059\u308b\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u898b\u3064\u3051\u308b\u3053\u3068\u306f\u73cd\u3057\u304f\u3042\u308a\u307e\u305b\u3093\u3002\u3057\u305f\u304c\u3063\u3066\u3001\u4e88\u6e2c\u306f\u6587\u7ae0\u306e\u30ea\u30b9\u30c8\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u53c2\u7167\u306f\u6587\u7ae0\u306e\u30ea\u30b9\u30c8\u306e\u30ea\u30b9\u30c8\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002</p> <pre><code># BLEU\u30b9\u30b3\u30a2\u306e\u8a08\u7b97\u4f8b\npredictions = [\n    \"This plugin lets you translate web pages between several languages automatically.\"\n]\nreferences = [\n    [\n        \"This plugin allows you to automatically translate web pages between several languages.\"\n    ]\n]\nmetric.compute(predictions=predictions, references=references)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>{'score': 46.750469682990186,\n 'counts': [11, 6, 4, 3],\n 'totals': [12, 11, 10, 9],\n 'precisions': [91.66666666666667,\n  54.54545454545455,\n  40.0,\n  33.333333333333336],\n 'bp': 0.9200444146293233,\n 'sys_len': 12,\n 'ref_len': 13}\n</code></pre></p> <p>\u3053\u308c\u306f46.75\u306eBLEU\u30b9\u30b3\u30a2\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\u3053\u308c\u306f\u975e\u5e38\u306b\u826f\u3044\u30b9\u30b3\u30a2\u3067\u3059\u3002\u53c2\u8003\u3068\u3057\u3066\u3001\"Attention Is All You Need\" \u8ad6\u6587 \u306e\u5143\u306eTransformer\u30e2\u30c7\u30eb\u306f\u3001\u82f1\u8a9e\u3068\u30d5\u30e9\u30f3\u30b9\u8a9e\u9593\u306e\u540c\u69d8\u306e\u7ffb\u8a33\u30bf\u30b9\u30af\u306741.8\u306eBLEU\u30b9\u30b3\u30a2\u3092\u9054\u6210\u3057\u307e\u3057\u305f\uff01\uff08<code>counts</code> \u3084 <code>bp</code> \u306a\u3069\u306e\u500b\u5225\u306e\u30e1\u30c8\u30ea\u30c3\u30af\u306e\u8a73\u7d30\u306b\u3064\u3044\u3066\u306f\u3001SacreBLEU \u30ea\u30dd\u30b8\u30c8\u30ea \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\uff09</p> <p>\u4e00\u65b9\u3001\u7ffb\u8a33\u30e2\u30c7\u30eb\u304b\u3089\u3088\u304f\u51fa\u3066\u304f\u308b2\u3064\u306e\u60aa\u3044\u30bf\u30a4\u30d7\u306e\u4e88\u6e2c\uff08\u5927\u91cf\u306e\u7e70\u308a\u8fd4\u3057\u3084\u77ed\u3059\u304e\u308b\u3082\u306e\uff09\u3092\u8a66\u3059\u3068\u3001\u304b\u306a\u308a\u60aa\u3044BLEU\u30b9\u30b3\u30a2\u304c\u5f97\u3089\u308c\u307e\u3059\uff1a</p> <pre><code># \u60aa\u3044\u4e88\u6e2c\u4f8b1\uff1a\u7e70\u308a\u8fd4\u3057\u304c\u591a\u3044\u5834\u5408\npredictions = [\"This This This This\"]\nreferences = [\n    [\n        \"This plugin allows you to automatically translate web pages between several languages.\"\n    ]\n]\nmetric.compute(predictions=predictions, references=references)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>{'score': 1.683602693167689,\n 'counts': [1, 0, 0, 0],\n 'totals': [4, 3, 2, 1],\n 'precisions': [25.0, 16.666666666666668, 12.5, 12.5],\n 'bp': 0.10539922456186433,\n 'sys_len': 4,\n 'ref_len': 13}\n</code></pre></p> <pre><code># \u60aa\u3044\u4e88\u6e2c\u4f8b2\uff1a\u77ed\u3059\u304e\u308b\u5834\u5408\npredictions = [\"This plugin\"]\nreferences = [\n    [\n        \"This plugin allows you to automatically translate web pages between several languages.\"\n    ]\n]\nmetric.compute(predictions=predictions, references=references)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>{'score': 0.0,\n 'counts': [2, 1, 0, 0],\n 'totals': [2, 1, 0, 0],\n 'precisions': [100.0, 100.0, 0.0, 0.0],\n 'bp': 0.004086771438464067,\n 'sys_len': 2,\n 'ref_len': 13}\n</code></pre></p> <p>\u30b9\u30b3\u30a2\u306f0\u304b\u3089100\u306e\u7bc4\u56f2\u3067\u3001\u9ad8\u3044\u307b\u3069\u826f\u3044\u3067\u3059\u3002</p> <p>\u30e2\u30c7\u30eb\u306e\u51fa\u529b\u304b\u3089\u30e1\u30c8\u30ea\u30c3\u30af\u304c\u4f7f\u7528\u3067\u304d\u308b\u30c6\u30ad\u30b9\u30c8\u306b\u5909\u63db\u3059\u308b\u306b\u306f\u3001<code>tokenizer.batch_decode()</code> \u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u30e9\u30d9\u30eb\u5185\u306e\u3059\u3079\u3066\u306e <code>-100</code> \u3092\u30af\u30ea\u30fc\u30f3\u30a2\u30c3\u30d7\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff08tokenizer\u306f\u30d1\u30c7\u30a3\u30f3\u30b0\u30c8\u30fc\u30af\u30f3\u306b\u5bfe\u3057\u3066\u81ea\u52d5\u7684\u306b\u540c\u3058\u3053\u3068\u3092\u884c\u3044\u307e\u3059\uff09\u3002</p> <pre><code>import numpy as np\n\ndef compute_metrics(eval_preds):\n    preds, labels = eval_preds\n    # \u30e2\u30c7\u30eb\u304c\u4e88\u6e2clogit\u4ee5\u4e0a\u3092\u8fd4\u3059\u5834\u5408\n    if isinstance(preds, tuple):\n        preds = preds[0]\n\n    # \u4e88\u6e2c\u3092\u30c7\u30b3\u30fc\u30c9\u3057\u3066\u30c6\u30ad\u30b9\u30c8\u306b\u5909\u63db\n    decoded_preds = tokenizer.batch_decode(preds, skip_special_tokens=True)\n\n    # \u30e9\u30d9\u30eb\u306e-100\u3092\u30d1\u30c7\u30a3\u30f3\u30b0\u30c8\u30fc\u30af\u30f3ID\u306b\u7f6e\u304d\u63db\u3048\u3066\u30c7\u30b3\u30fc\u30c9\n    labels = np.where(labels != -100, labels, tokenizer.pad_token_id)\n    decoded_labels = tokenizer.batch_decode(labels, skip_special_tokens=True)\n\n    # \u7c21\u5358\u306a\u5f8c\u51e6\u7406\uff1a\u7a7a\u767d\u306e\u524a\u9664\n    decoded_preds = [pred.strip() for pred in decoded_preds]\n    decoded_labels = [[label.strip()] for label in decoded_labels]\n\n    # BLEU\u30b9\u30b3\u30a2\u3092\u8a08\u7b97\n    result = metric.compute(predictions=decoded_preds, references=decoded_labels)\n    return {\"bleu\": result[\"score\"]}\n</code></pre>","tags":["\u6a5f\u68b0\u7ffb\u8a33","Transformers","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","NLP","Python","\u82f1\u65e5\u7ffb\u8a33"]},{"location":"LLM/ClassicalNLP/73_translation/#_8","title":"\u30e2\u30c7\u30eb\u306e\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","text":"<p><code>Seq2SeqTrainingArguments</code> \u3092\u5b9a\u7fa9\u3067\u304d\u307e\u3059\u3002<code>Trainer</code> \u3068\u540c\u69d8\u306b\u3001\u3044\u304f\u3064\u304b\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u304c\u8ffd\u52a0\u3055\u308c\u305f <code>TrainingArguments</code> \u306e\u30b5\u30d6\u30af\u30e9\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002</p> <pre><code>from transformers import Seq2SeqTrainingArguments\n\n# \u8a13\u7df4\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8a2d\u5b9a\nargs = Seq2SeqTrainingArguments(\n    f\"marian-finetuned-opus-100-en-to-ja\",  # \u51fa\u529b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\n    eval_strategy=\"no\",  # \u8a55\u4fa1\u6226\u7565\n    save_strategy=\"epoch\",  # \u4fdd\u5b58\u6226\u7565\n    learning_rate=2e-5,  # \u5b66\u7fd2\u7387\n    per_device_train_batch_size=16,  # \u8a13\u7df4\u6642\u306e\u30d0\u30c3\u30c1\u30b5\u30a4\u30ba\n    per_device_eval_batch_size=32,   # \u8a55\u4fa1\u6642\u306e\u30d0\u30c3\u30c1\u30b5\u30a4\u30ba\n    weight_decay=0.01,  # \u91cd\u307f\u6e1b\u8870\n    save_total_limit=3,  # \u4fdd\u5b58\u3059\u308b\u30c1\u30a7\u30c3\u30af\u30dd\u30a4\u30f3\u30c8\u306e\u6700\u5927\u6570\n    num_train_epochs=3,  # \u30a8\u30dd\u30c3\u30af\u6570\n    predict_with_generate=True,  # \u8a55\u4fa1\u6642\u306bgenerate()\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\n    push_to_hub=False,  # Hub\u306b\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3057\u306a\u3044\n)\n</code></pre> <p>\u524d\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u898b\u305f\u3082\u306e\u3068\u6bd4\u8f03\u3057\u3066\u3001\u901a\u5e38\u306e\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\uff08\u5b66\u7fd2\u7387\u3001\u30a8\u30dd\u30c3\u30af\u6570\u3001\u30d0\u30c3\u30c1\u30b5\u30a4\u30ba\u3001\u91cd\u307f\u6e1b\u8870\u306a\u3069\uff09\u306b\u52a0\u3048\u3066\u3001\u3044\u304f\u3064\u304b\u306e\u5909\u66f4\u304c\u3042\u308a\u307e\u3059\uff1a</p> <ul> <li>\u8a55\u4fa1\u306b\u306f\u6642\u9593\u304c\u304b\u304b\u308b\u305f\u3081\u3001\u5b9a\u671f\u7684\u306a\u8a55\u4fa1\u306f\u8a2d\u5b9a\u3057\u307e\u305b\u3093\u3002\u8a13\u7df4\u524d\u3068\u8a13\u7df4\u5f8c\u306b\u4e00\u5ea6\u3060\u3051\u30e2\u30c7\u30eb\u3092\u8a55\u4fa1\u3057\u307e\u3059</li> <li>\u4e0a\u8a18\u3067\u8aac\u660e\u3057\u305f\u3088\u3046\u306b\u3001<code>predict_with_generate=True</code> \u3092\u8a2d\u5b9a\u3057\u307e\u3059</li> </ul> <p>\u6700\u5f8c\u306b\u3001\u3059\u3079\u3066\u3092 <code>Seq2SeqTrainer</code> \u306b\u6e21\u3057\u307e\u3059\u3002</p> <pre><code>from transformers import Seq2SeqTrainer\n\n# Seq2SeqTrainer\u306e\u521d\u671f\u5316\ntrainer = Seq2SeqTrainer(\n    model,\n    args,\n    train_dataset=tokenized_datasets[\"train\"],\n    eval_dataset=tokenized_datasets[\"validation\"],\n    data_collator=data_collator,\n    processing_class=tokenizer,\n    compute_metrics=compute_metrics,\n)\n</code></pre> <pre><code># \u5b9f\u969b\u306e\u8a13\u7df4\u5b9f\u884c\uff08\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\uff09\n# trainer.train()\n</code></pre>","tags":["\u6a5f\u68b0\u7ffb\u8a33","Transformers","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","NLP","Python","\u82f1\u65e5\u7ffb\u8a33"]},{"location":"LLM/ClassicalNLP/73_translation/#_9","title":"\u30ab\u30b9\u30bf\u30e0\u8a13\u7df4\u30eb\u30fc\u30d7","text":"","tags":["\u6a5f\u68b0\u7ffb\u8a33","Transformers","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","NLP","Python","\u82f1\u65e5\u7ffb\u8a33"]},{"location":"LLM/ClassicalNLP/73_translation/#_10","title":"\u8a13\u7df4\u306e\u6e96\u5099","text":"<p>\u3053\u308c\u307e\u3067\u306b\u4f55\u5ea6\u304b\u898b\u3066\u304d\u305f\u306e\u3067\u3001\u30b3\u30fc\u30c9\u3092\u7d20\u65e9\u304f\u9032\u3081\u307e\u3059\u3002\u307e\u305a\u3001\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092 <code>\"torch\"</code> \u5f62\u5f0f\u306b\u8a2d\u5b9a\u3057\u3066PyTorch\u30c6\u30f3\u30bd\u30eb\u3092\u53d6\u5f97\u3057\u305f\u5f8c\u3001\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304b\u3089 <code>DataLoader</code> \u3092\u69cb\u7bc9\u3057\u307e\u3059\u3002</p> <pre><code>from torch.utils.data import DataLoader\n\n# \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092PyTorch\u5f62\u5f0f\u306b\u8a2d\u5b9a\ntokenized_datasets.set_format(\"torch\")\n\n# \u8a13\u7df4\u7528\u30c7\u30fc\u30bf\u30ed\u30fc\u30c0\u30fc\u306e\u4f5c\u6210\ntrain_dataloader = DataLoader(\n    tokenized_datasets[\"train\"],\n    shuffle=True,  # \u30c7\u30fc\u30bf\u3092\u30b7\u30e3\u30c3\u30d5\u30eb\n    collate_fn=data_collator,\n    batch_size=8,\n)\n\n# \u8a55\u4fa1\u7528\u30c7\u30fc\u30bf\u30ed\u30fc\u30c0\u30fc\u306e\u4f5c\u6210\neval_dataloader = DataLoader(\n    tokenized_datasets[\"validation\"], \n    collate_fn=data_collator, \n    batch_size=8\n)\n</code></pre> <p>\u6b21\u306b\u3001\u4ee5\u524d\u306e\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u304b\u3089\u7d9a\u884c\u3059\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u4e8b\u524d\u8a13\u7df4\u6e08\u307f\u30e2\u30c7\u30eb\u304b\u3089\u518d\u958b\u3059\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308b\u305f\u3081\u306b\u3001\u30e2\u30c7\u30eb\u3092\u518d\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3057\u307e\u3059\u3002</p> <pre><code># \u30e2\u30c7\u30eb\u3092\u518d\u5ea6\u8aad\u307f\u8fbc\u307f\uff08\u524d\u56de\u306e\u8a13\u7df4\u72b6\u614b\u3092\u30ea\u30bb\u30c3\u30c8\uff09\nmodel = AutoModelForSeq2SeqLM.from_pretrained(model_checkpoint)\n</code></pre> <p>\u6b21\u306b\u3001\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u30fc\u304c\u5fc5\u8981\u3067\u3059\u3002</p> <pre><code>from torch.optim import AdamW\n\n# Adam optimizer\u306e\u521d\u671f\u5316\noptimizer = AdamW(model.parameters(), lr=2e-5)\n</code></pre> <p>\u3053\u308c\u3089\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u3059\u3079\u3066\u63c3\u3063\u305f\u3089\u3001<code>accelerator.prepare()</code> \u30e1\u30bd\u30c3\u30c9\u306b\u9001\u4fe1\u3067\u304d\u307e\u3059\u3002Colab\u30ce\u30fc\u30c8\u30d6\u30c3\u30af\u3067TPU\u3067\u8a13\u7df4\u3057\u305f\u3044\u5834\u5408\u306f\u3001\u3053\u306e\u30b3\u30fc\u30c9\u3092\u3059\u3079\u3066\u8a13\u7df4\u95a2\u6570\u306b\u79fb\u52d5\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u3001<code>Accelerator</code> \u3092\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3059\u308b\u30bb\u30eb\u306f\u5b9f\u884c\u3059\u3079\u304d\u3067\u306f\u306a\u3044\u3053\u3068\u3092\u5fd8\u308c\u306a\u3044\u3067\u304f\u3060\u3055\u3044\u3002</p> <pre><code>from accelerate import Accelerator\n\n# \u5206\u6563\u8a13\u7df4\u306e\u305f\u3081\u306eAccelerator\u3092\u521d\u671f\u5316\naccelerator = Accelerator()\nmodel, optimizer, train_dataloader, eval_dataloader = accelerator.prepare(\n    model, optimizer, train_dataloader, eval_dataloader\n)\n</code></pre> <p><code>train_dataloader</code> \u3092 <code>accelerator.prepare()</code> \u306b\u9001\u4fe1\u3057\u305f\u306e\u3067\u3001\u305d\u306e\u9577\u3055\u3092\u4f7f\u7528\u3057\u3066\u8a13\u7df4\u30b9\u30c6\u30c3\u30d7\u6570\u3092\u8a08\u7b97\u3067\u304d\u307e\u3059\u3002\u30c7\u30fc\u30bf\u30ed\u30fc\u30c0\u30fc\u3092\u6e96\u5099\u3057\u305f\u5f8c\u306f\u3001\u305d\u306e\u65b9\u6cd5\u304c <code>DataLoader</code> \u306e\u9577\u3055\u3092\u5909\u66f4\u3059\u308b\u305f\u3081\u3001\u5e38\u306b\u3053\u308c\u3092\u884c\u3046\u5fc5\u8981\u304c\u3042\u308b\u3053\u3068\u3092\u5fd8\u308c\u306a\u3044\u3067\u304f\u3060\u3055\u3044\u3002\u5b66\u7fd2\u7387\u304b\u30890\u3078\u306e\u53e4\u5178\u7684\u306a\u7dda\u5f62\u30b9\u30b1\u30b8\u30e5\u30fc\u30eb\u3092\u4f7f\u7528\u3057\u307e\u3059\uff1a</p> <pre><code>from transformers import get_scheduler\n\n# \u8a13\u7df4\u30b9\u30c6\u30c3\u30d7\u6570\u306e\u8a08\u7b97\nnum_train_epochs = 3\nnum_update_steps_per_epoch = len(train_dataloader)\nnum_training_steps = num_train_epochs * num_update_steps_per_epoch\n\n# \u5b66\u7fd2\u7387\u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u30fc\u306e\u8a2d\u5b9a\nlr_scheduler = get_scheduler(\n    \"linear\",  # \u7dda\u5f62\u6e1b\u8870\n    optimizer=optimizer,\n    num_warmup_steps=0,  # \u30a6\u30a9\u30fc\u30e0\u30a2\u30c3\u30d7\u306a\u3057\n    num_training_steps=num_training_steps,\n)\n</code></pre> <pre><code># \u51fa\u529b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u8a2d\u5b9a\noutput_dir = \"marian-finetuned-kde4-en-to-fr-accelerate\"\n</code></pre>","tags":["\u6a5f\u68b0\u7ffb\u8a33","Transformers","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","NLP","Python","\u82f1\u65e5\u7ffb\u8a33"]},{"location":"LLM/ClassicalNLP/73_translation/#_11","title":"\u8a13\u7df4\u30eb\u30fc\u30d7","text":"<p>\u5b8c\u5168\u306a\u8a13\u7df4\u30eb\u30fc\u30d7\u3092\u66f8\u304f\u6e96\u5099\u304c\u6574\u3044\u307e\u3057\u305f\u3002\u8a55\u4fa1\u90e8\u5206\u3092\u7c21\u7d20\u5316\u3059\u308b\u305f\u3081\u306b\u3001\u4e88\u6e2c\u3068\u30e9\u30d9\u30eb\u3092\u53d7\u3051\u53d6\u308a\u3001<code>metric</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u671f\u5f85\u3059\u308b\u6587\u5b57\u5217\u306e\u30ea\u30b9\u30c8\u306b\u5909\u63db\u3059\u308b <code>postprocess()</code> \u95a2\u6570\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002</p> <pre><code>def postprocess(predictions, labels):\n    # CPU\u306b\u30c7\u30fc\u30bf\u3092\u79fb\u52d5\u3057\u3066numpy\u914d\u5217\u306b\u5909\u63db\n    predictions = predictions.cpu().numpy()\n    labels = labels.cpu().numpy()\n\n    # \u4e88\u6e2c\u3092\u30c6\u30ad\u30b9\u30c8\u306b\u30c7\u30b3\u30fc\u30c9\n    decoded_preds = tokenizer.batch_decode(predictions, skip_special_tokens=True)\n\n    # \u30e9\u30d9\u30eb\u306e-100\u3092\u30d1\u30c7\u30a3\u30f3\u30b0\u30c8\u30fc\u30af\u30f3ID\u306b\u7f6e\u304d\u63db\u3048\u3066\u30c7\u30b3\u30fc\u30c9\n    labels = np.where(labels != -100, labels, tokenizer.pad_token_id)\n    decoded_labels = tokenizer.batch_decode(labels, skip_special_tokens=True)\n\n    # \u7c21\u5358\u306a\u5f8c\u51e6\u7406\uff1a\u7a7a\u767d\u306e\u524a\u9664\u3068\u30ea\u30b9\u30c8\u5f62\u5f0f\u3078\u306e\u5909\u63db\n    decoded_preds = [pred.strip() for pred in decoded_preds]\n    decoded_labels = [[label.strip()] for label in decoded_labels]\n    return decoded_preds, decoded_labels\n</code></pre> <p>\u6ce8\u610f\u3059\u3079\u304d\u6700\u521d\u306e\u70b9\u306f\u3001\u4e88\u6e2c\u3092\u8a08\u7b97\u3059\u308b\u305f\u3081\u306b <code>generate()</code> \u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3067\u3059\u304c\u3001\u3053\u308c\u306fHugging Face Accelerate\u304c <code>prepare()</code> \u30e1\u30bd\u30c3\u30c9\u3067\u4f5c\u6210\u3057\u305f\u30e9\u30c3\u30d7\u3055\u308c\u305f\u30e2\u30c7\u30eb\u3067\u306f\u306a\u304f\u3001\u30d9\u30fc\u30b9\u30e2\u30c7\u30eb\u306e\u30e1\u30bd\u30c3\u30c9\u3067\u3059\u3002\u305d\u306e\u305f\u3081\u3001\u6700\u521d\u306b\u30e2\u30c7\u30eb\u3092\u30a2\u30f3\u30e9\u30c3\u30d7\u3057\u3066\u304b\u3089\u3001\u3053\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3057\u307e\u3059\u3002</p> <p>2\u756a\u76ee\u306e\u70b9\u306f\u3001\u30c8\u30fc\u30af\u30f3\u5206\u985e\u3068\u540c\u69d8\u306b\u30012\u3064\u306e\u30d7\u30ed\u30bb\u30b9\u304c\u5165\u529b\u3068\u30e9\u30d9\u30eb\u3092\u7570\u306a\u308b\u5f62\u72b6\u306b\u30d1\u30c7\u30a3\u30f3\u30b0\u3057\u3066\u3044\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u305f\u3081\u3001<code>gather()</code> \u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3059\u524d\u306b\u3001<code>accelerator.pad_across_processes()</code> \u3092\u4f7f\u7528\u3057\u3066\u4e88\u6e2c\u3068\u30e9\u30d9\u30eb\u3092\u540c\u3058\u5f62\u72b6\u306b\u3057\u307e\u3059\u3002\u3053\u308c\u3092\u884c\u308f\u306a\u3044\u3068\u3001\u8a55\u4fa1\u304c\u30a8\u30e9\u30fc\u30a2\u30a6\u30c8\u3059\u308b\u304b\u3001\u6c38\u7d9a\u7684\u306b\u30cf\u30f3\u30b0\u3057\u307e\u3059\u3002</p> <pre><code>from tqdm.auto import tqdm\nimport torch\n\n# \u9032\u6357\u30d0\u30fc\u306e\u8a2d\u5b9a\nprogress_bar = tqdm(range(num_training_steps))\n\nfor epoch in range(num_train_epochs):\n    # \u8a13\u7df4\u30d5\u30a7\u30fc\u30ba\n    model.train()\n    for batch in train_dataloader:\n        # \u9806\u4f1d\u64ad\n        outputs = model(**batch)\n        loss = outputs.loss\n\n        # \u9006\u4f1d\u64ad\n        accelerator.backward(loss)\n\n        # \u30d1\u30e9\u30e1\u30fc\u30bf\u66f4\u65b0\n        optimizer.step()\n        lr_scheduler.step()\n        optimizer.zero_grad()\n        progress_bar.update(1)\n\n    # \u8a55\u4fa1\u30d5\u30a7\u30fc\u30ba\n    model.eval()\n    for batch in tqdm(eval_dataloader):\n        with torch.no_grad():\n            # generate()\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3057\u3066\u30c6\u30ad\u30b9\u30c8\u751f\u6210\n            generated_tokens = accelerator.unwrap_model(model).generate(\n                batch[\"input_ids\"],\n                attention_mask=batch[\"attention_mask\"],\n                max_length=128,\n            )\n        labels = batch[\"labels\"]\n\n        # \u4e88\u6e2c\u3068\u30e9\u30d9\u30eb\u3092\u5404\u30d7\u30ed\u30bb\u30b9\u9593\u3067\u540c\u3058\u5f62\u72b6\u306b\u30d1\u30c7\u30a3\u30f3\u30b0\n        generated_tokens = accelerator.pad_across_processes(\n            generated_tokens, dim=1, pad_index=tokenizer.pad_token_id\n        )\n        labels = accelerator.pad_across_processes(labels, dim=1, pad_index=-100)\n\n        # \u5168\u30d7\u30ed\u30bb\u30b9\u304b\u3089\u4e88\u6e2c\u3068\u30e9\u30d9\u30eb\u3092\u53ce\u96c6\n        predictions_gathered = accelerator.gather(generated_tokens)\n        labels_gathered = accelerator.gather(labels)\n\n        # \u30c6\u30ad\u30b9\u30c8\u306b\u5909\u63db\u3057\u3066\u30e1\u30c8\u30ea\u30c3\u30af\u306b\u8ffd\u52a0\n        decoded_preds, decoded_labels = postprocess(predictions_gathered, labels_gathered)\n        metric.add_batch(predictions=decoded_preds, references=decoded_labels)\n\n    # BLEU\u30b9\u30b3\u30a2\u3092\u8a08\u7b97\u3057\u3066\u8868\u793a\n    results = metric.compute()\n    print(f\"epoch {epoch}, BLEU score: {results['score']:.2f}\")\n\n    # \u30e2\u30c7\u30eb\u306e\u4fdd\u5b58\u3068\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\n    accelerator.wait_for_everyone()\n    unwrapped_model = accelerator.unwrap_model(model)\n    unwrapped_model.save_pretrained(output_dir, save_function=accelerator.save)\n    if accelerator.is_main_process:\n        tokenizer.save_pretrained(output_dir)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>epoch 0, BLEU score: 33.26\nepoch 1, BLEU score: 38.19\nepoch 2, BLEU score: 41.56\n</code></pre></p>","tags":["\u6a5f\u68b0\u7ffb\u8a33","Transformers","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","NLP","Python","\u82f1\u65e5\u7ffb\u8a33"]},{"location":"LLM/ClassicalNLP/73_translation/#_12","title":"\u53c2\u8003\u8cc7\u6599","text":"<p>\u4f7f\u7528\u3057\u305f\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3068\u30e2\u30c7\u30eb: - Helsinki-NLP/opus-100: \u5927\u898f\u6a21\u591a\u8a00\u8a9e\u7ffb\u8a33\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8 - Helsinki-NLP/opus-mt-en-jap: \u82f1\u65e5\u7ffb\u8a33\u7528\u4e8b\u524d\u8a13\u7df4\u6e08\u307f\u30e2\u30c7\u30eb</p> <p>\u8a55\u4fa1\u30e1\u30c8\u30ea\u30c3\u30af: - SacreBLEU: \u6a19\u6e96\u5316\u3055\u308c\u305fBLEU\u8a55\u4fa1\u30c4\u30fc\u30eb - BLEU: a Method for Automatic Evaluation of Machine Translation: BLEU\u30b9\u30b3\u30a2\u306e\u539f\u8ad6\u6587</p> <p>\u95a2\u9023\u6280\u8853\u8cc7\u6599: - Attention Is All You Need: Transformer\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306e\u539f\u8ad6\u6587 - Hugging Face Transformers Documentation: \u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8 - Helsinki-NLP Organization: 1000\u4ee5\u4e0a\u306e\u7ffb\u8a33\u30e2\u30c7\u30eb\u3092\u63d0\u4f9b</p>","tags":["\u6a5f\u68b0\u7ffb\u8a33","Transformers","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","NLP","Python","\u82f1\u65e5\u7ffb\u8a33"]},{"location":"LLM/ClassicalNLP/74_summarization/","title":"Transformer\u3092\u4f7f\u3063\u305f\u30c6\u30ad\u30b9\u30c8\u8981\u7d04\u306e\u5b9f\u88c5\u30ac\u30a4\u30c9","text":"","tags":["NLP","Transformer","T5","Text Summarization","Machine Learning","PyTorch"]},{"location":"LLM/ClassicalNLP/74_summarization/#_1","title":"\u6982\u8981","text":"<p>\u3053\u306e\u8a18\u4e8b\u3067\u306f\u3001Transformer\u30e2\u30c7\u30eb\u3092\u5229\u7528\u3057\u3066\u9577\u3044\u6587\u66f8\u3092\u77ed\u3044\u8981\u7d04\u306b\u5909\u63db\u3059\u308b\u30c6\u30ad\u30b9\u30c8\u8981\u7d04\uff08Text Summarization\uff09\u306e\u5b9f\u88c5\u65b9\u6cd5\u306b\u3064\u3044\u3066\u8a73\u3057\u304f\u89e3\u8aac\u3057\u307e\u3059\u3002\u30c6\u30ad\u30b9\u30c8\u8981\u7d04\u306f\u3001\u9577\u3044\u6587\u7ae0\u306e\u7406\u89e3\u3068\u4e00\u8cab\u6027\u306e\u3042\u308b\u30c6\u30ad\u30b9\u30c8\u751f\u6210\u3068\u3044\u3046\u8907\u6570\u306e\u80fd\u529b\u3092\u5fc5\u8981\u3068\u3059\u308b\u3001\u6700\u3082\u96e3\u6613\u5ea6\u306e\u9ad8\u3044NLP\u30bf\u30b9\u30af\u306e\u4e00\u3064\u3067\u3059\u3002\u3057\u304b\u3057\u3001\u9069\u5207\u306b\u5b9f\u88c5\u3055\u308c\u305f\u30c6\u30ad\u30b9\u30c8\u8981\u7d04\u30b7\u30b9\u30c6\u30e0\u306f\u3001\u5c02\u9580\u5bb6\u306e\u6587\u66f8\u8aad\u89e3\u8ca0\u62c5\u3092\u8efd\u6e1b\u3057\u3001\u69d8\u3005\u306a\u30d3\u30b8\u30cd\u30b9\u30d7\u30ed\u30bb\u30b9\u3092\u52b9\u7387\u5316\u3059\u308b\u5f37\u529b\u306a\u30c4\u30fc\u30eb\u3068\u306a\u308a\u307e\u3059\u3002</p> <p>\u53c2\u8003\u8cc7\u6599</p> <p>\u672c\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306f Hugging Face LLM Course \u3092\u53c2\u8003\u306b\u3001\u65e5\u672c\u8a9e\u3067\u5b66\u7fd2\u5185\u5bb9\u3092\u307e\u3068\u3081\u305f\u500b\u4eba\u7684\u306a\u5b66\u7fd2\u30ce\u30fc\u30c8\u3067\u3059\u3002\u8a73\u7d30\u306a\u5185\u5bb9\u3084\u6700\u65b0\u60c5\u5831\u306b\u3064\u3044\u3066\u306f\u3001\u539f\u6587\u3082\u4f75\u305b\u3066\u3054\u53c2\u7167\u304f\u3060\u3055\u3044\u3002</p>","tags":["NLP","Transformer","T5","Text Summarization","Machine Learning","PyTorch"]},{"location":"LLM/ClassicalNLP/74_summarization/#_2","title":"\u524d\u63d0\u77e5\u8b58","text":"<p>\u3053\u306e\u8a18\u4e8b\u3092\u7406\u89e3\u3059\u308b\u305f\u3081\u306b\u3001\u4ee5\u4e0b\u306e\u77e5\u8b58\u304c\u3042\u308b\u3053\u3068\u3092\u63a8\u5968\u3057\u307e\u3059\uff1a</p> <ul> <li>Python\u57fa\u790e: pandas, numpy\u7b49\u306e\u57fa\u672c\u7684\u306a\u4f7f\u7528\u65b9\u6cd5</li> <li>\u6a5f\u68b0\u5b66\u7fd2\u306e\u57fa\u790e: \u5b66\u7fd2\u3001\u691c\u8a3c\u3001\u8a55\u4fa1\u306e\u6982\u5ff5</li> <li>Transformer\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3: Encoder-Decoder\u30e2\u30c7\u30eb\u306e\u57fa\u672c\u7406\u89e3</li> <li>Hugging Face Transformers: \u57fa\u672c\u7684\u306a\u4f7f\u7528\u65b9\u6cd5</li> </ul>","tags":["NLP","Transformer","T5","Text Summarization","Machine Learning","PyTorch"]},{"location":"LLM/ClassicalNLP/74_summarization/#_3","title":"\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u6e96\u5099","text":"<p>CNN/DailyMail\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u5229\u7528\u3057\u3066\u8981\u7d04\u30b7\u30b9\u30c6\u30e0\u3092\u69cb\u7bc9\u3057\u3066\u3044\u304d\u307e\u3059\u3002\u3053\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306f\u3001\u30cb\u30e5\u30fc\u30b9\u8a18\u4e8b\u3068\u305d\u306e\u30cf\u30a4\u30e9\u30a4\u30c8\uff08\u8981\u7d04\uff09\u306e\u30da\u30a2\u3092\u542b\u3080\u3001\u30c6\u30ad\u30b9\u30c8\u8981\u7d04\u30bf\u30b9\u30af\u3067\u5e83\u304f\u5229\u7528\u3055\u308c\u3066\u3044\u308b\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3067\u3059\u3002</p> <pre><code>from datasets import load_dataset\n\n# CNN/DailyMail\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u8aad\u307f\u8fbc\u307f\ndatasets = load_dataset(\"cnn_dailymail\", \"3.0.0\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>datasets\n</code></pre></p> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>DatasetDict({\n    train: Dataset({\n        features: ['article', 'highlights', 'id'],\n        num_rows: 287113\n    })\n    validation: Dataset({\n        features: ['article', 'highlights', 'id'],\n        num_rows: 13368\n    })\n    test: Dataset({\n        features: ['article', 'highlights', 'id'],\n        num_rows: 11490\n    })\n})\n</code></pre></p> <p>\u3054\u89a7\u306e\u901a\u308a\u3001\u8a13\u7df4\u7528\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u306f287,113\u4ef6\u306e\u8a18\u4e8b\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3067\u91cd\u8981\u306a\u60c5\u5831\u306f<code>article</code>\u5217\uff08\u5143\u306e\u8a18\u4e8b\uff09\u3068<code>highlights</code>\u5217\uff08\u8981\u7d04\uff09\u306b\u683c\u7d0d\u3055\u308c\u3066\u3044\u307e\u3059\u3002</p> <pre><code># \u30c7\u30fc\u30bf\u306e\u69cb\u9020\u3092\u78ba\u8a8d\ndatasets[\"train\"][1]\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>{'article': 'Editor\\'s note: In our Behind the Scenes series, CNN correspondents share their experiences in covering news and analyze the stories behind the events. Here, Soledad O\\'Brien takes users inside a jail where many of the inmates are mentally ill. An inmate housed on the \"forgotten floor,\" where many mentally ill inmates are housed in Miami before trial. MIAMI, Florida (CNN) -- The ninth floor of the Miami-Dade pretrial detention facility is dubbed the \"forgotten floor.\" Here, inmates with the most severe mental illnesses are incarcerated until they\\'re ready to appear in court. Most often, they face drug charges or charges of assaulting an officer --charges that Judge Steven Leifman says are usually \"avoidable felonies.\" He says the arrests often result from confrontations with police. Mentally ill people often won\\'t do what they\\'re told when police arrive on the scene -- confrontation seems to exacerbate their illness and they become more paranoid, delusional, and less likely to follow directions, according to Leifman. So, they end up on the ninth floor severely mentally disturbed, but not getting any real help because they\\'re in jail. We toured the jail with Leifman. He is well known in Miami as an advocate for justice and the mentally ill. Even though we were not exactly welcomed with open arms by the guards, we were given permission to shoot videotape and tour the floor.  Go inside the \\'forgotten floor\\' \u00c2\u00bb . At first, it\\'s hard to determine where the people are. The prisoners are wearing sleeveless robes. Imagine cutting holes for arms and feet in a heavy wool sleeping bag -- that\\'s kind of what they look like. They\\'re designed to keep the mentally ill patients from injuring themselves. That\\'s also why they have no shoes, laces or mattresses. Leifman says about one-third of all people in Miami-Dade county jails are mentally ill. So, he says, the sheer volume is overwhelming the system, and the result is what we see on the ninth floor. Of course, it is a jail, so it\\'s not supposed to be warm and comforting, but the lights glare, the cells are tiny and it\\'s loud. We see two, sometimes three men -- sometimes in the robes, sometimes naked, lying or sitting in their cells. \"I am the son of the president. You need to get me out of here!\" one man shouts at me. He is absolutely serious, convinced that help is on the way -- if only he could reach the White House. Leifman tells me that these prisoner-patients will often circulate through the system, occasionally stabilizing in a mental hospital, only to return to jail to face their charges. It\\'s brutally unjust, in his mind, and he has become a strong advocate for changing things in Miami. Over a meal later, we talk about how things got this way for mental patients. Leifman says 200 years ago people were considered \"lunatics\" and they were locked up in jails even if they had no charges against them. They were just considered unfit to be in society. Over the years, he says, there was some public outcry, and the mentally ill were moved out of jails and into hospitals. But Leifman says many of these mental hospitals were so horrible they were shut down. Where did the patients go? Nowhere. The streets. They became, in many cases, the homeless, he says. They never got treatment. Leifman says in 1955 there were more than half a million people in state mental hospitals, and today that number has been reduced 90 percent, and 40,000 to 50,000 people are in mental hospitals. The judge says he\\'s working to change this. Starting in 2008, many inmates who would otherwise have been brought to the \"forgotten floor\"  will instead be sent to a new mental health facility -- the first step on a journey toward long-term treatment, not just punishment. Leifman says it\\'s not the complete answer, but it\\'s a start. Leifman says the best part is that it\\'s a win-win solution. The patients win, the families are relieved, and the state saves money by simply not cycling these prisoners through again and again. And, for Leifman, justice is served. E-mail to a friend .',\n 'highlights': 'Mentally ill inmates in Miami are housed on the \"forgotten floor\"\\nJudge Steven Leifman says most are there as a result of \"avoidable felonies\"\\nWhile CNN tours facility, patient shouts: \"I am the son of the president\"\\nLeifman says the system is unjust and he\\'s fighting for change .',\n 'id': 'ee8871b15c50d0db17b0179a6d2beab35065f1e9'}\n</code></pre></p> <p>\u3053\u306e\u30c7\u30fc\u30bf\u4f8b\u304b\u3089\u308f\u304b\u308b\u3088\u3046\u306b\u3001<code>article</code>\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u306f\u9577\u3044\u30cb\u30e5\u30fc\u30b9\u8a18\u4e8b\u304c\u3001<code>highlights</code>\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u306f\u305d\u306e\u8981\u7d04\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u307e\u3059\u3002</p>","tags":["NLP","Transformer","T5","Text Summarization","Machine Learning","PyTorch"]},{"location":"LLM/ClassicalNLP/74_summarization/#_4","title":"\u30c6\u30ad\u30b9\u30c8\u8981\u7d04\u306e\u305f\u3081\u306e\u30e2\u30c7\u30eb","text":"<p>\u30c6\u30ad\u30b9\u30c8\u8981\u7d04\u306f\u6a5f\u68b0\u7ffb\u8a33\u306b\u4f3c\u305f\u30bf\u30b9\u30af\u3068\u8003\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u30ec\u30d3\u30e5\u30fc\u306a\u3069\u306e\u30c6\u30ad\u30b9\u30c8\u306e\u672c\u4f53\u3092\u3001\u5165\u529b\u306e\u91cd\u8981\u306a\u7279\u5fb4\u3092\u6349\u3048\u305f\u77ed\u3044\u30d0\u30fc\u30b8\u30e7\u30f3\u306b\u300c\u7ffb\u8a33\u300d\u3057\u305f\u3044\u304b\u3089\u3067\u3059\u3002\u305d\u306e\u305f\u3081\u3001\u8981\u7d04\u7528\u306e\u307b\u3068\u3093\u3069\u306eTransformer\u30e2\u30c7\u30eb\u306f\u3001\u57fa\u672c\u7684\u306aEncoder-Decoder\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3092\u63a1\u7528\u3057\u3066\u3044\u307e\u3059\u3002\u305f\u3060\u3057\u3001Few-shot\u8a2d\u5b9a\u3067\u8981\u7d04\u306b\u5229\u7528\u3067\u304d\u308bGPT\u30d5\u30a1\u30df\u30ea\u30fc\u306e\u30e2\u30c7\u30eb\u306a\u3069\u3001\u3044\u304f\u3064\u304b\u306e\u4f8b\u5916\u3082\u3042\u308a\u307e\u3059\u3002</p> <p>\u4ee5\u4e0b\u306e\u8868\u306f\u3001\u8981\u7d04\u306e\u305f\u3081\u306b\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u306b\u9069\u3057\u305f\u4ee3\u8868\u7684\u306a\u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u3092\u30ea\u30b9\u30c8\u30a2\u30c3\u30d7\u3057\u305f\u3082\u306e\u3067\u3059\uff1a</p> Transformer\u30e2\u30c7\u30eb \u8aac\u660e \u591a\u8a00\u8a9e\u5bfe\u5fdc GPT-2 \u81ea\u5df1\u56de\u5e30\u8a00\u8a9e\u30e2\u30c7\u30eb\u3068\u3057\u3066\u5b66\u7fd2\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u5165\u529b\u30c6\u30ad\u30b9\u30c8\u306e\u6700\u5f8c\u306b\u300cTL;DR\u300d\u3092\u8ffd\u52a0\u3059\u308b\u3053\u3068\u3067GPT-2\u306b\u8981\u7d04\u3092\u751f\u6210\u3055\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u274c PEGASUS \u8907\u6570\u6587\u30c6\u30ad\u30b9\u30c8\u3067\u30de\u30b9\u30af\u3055\u308c\u305f\u6587\u3092\u4e88\u6e2c\u3059\u308b\u4e8b\u524d\u5b66\u7fd2\u76ee\u7684\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u3053\u306e\u4e8b\u524d\u5b66\u7fd2\u76ee\u7684\u306f\u3001\u30d0\u30cb\u30e9\u8a00\u8a9e\u30e2\u30c7\u30ea\u30f3\u30b0\u3088\u308a\u3082\u8981\u7d04\u306b\u8fd1\u304f\u3001\u4eba\u6c17\u306e\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u3067\u9ad8\u3044\u30b9\u30b3\u30a2\u3092\u8a18\u9332\u3057\u3066\u3044\u307e\u3059\u3002 \u274c T5 \u3059\u3079\u3066\u306e\u30bf\u30b9\u30af\u3092text-to-text\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3067\u5b9a\u5f0f\u5316\u3059\u308b\u30e6\u30cb\u30d0\u30fc\u30b5\u30ebTransformer\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3002\u4f8b\uff1a\u6587\u66f8\u3092\u8981\u7d04\u3059\u308b\u30e2\u30c7\u30eb\u306e\u5165\u529b\u5f62\u5f0f\u306f <code>summarize: ARTICLE</code> \u3067\u3059\u3002 \u274c mT5 T5\u306e\u591a\u8a00\u8a9e\u7248\u3067\u3001101\u8a00\u8a9e\u3092\u30ab\u30d0\u30fc\u3059\u308b\u591a\u8a00\u8a9eCommon Crawl\u30b3\u30fc\u30d1\u30b9\uff08mC4\uff09\u3067\u4e8b\u524d\u5b66\u7fd2\u3055\u308c\u3066\u3044\u307e\u3059\u3002 \u2705 BART \u7834\u640d\u3057\u305f\u5165\u529b\u3092\u518d\u69cb\u7bc9\u3059\u308b\u3088\u3046\u306b\u5b66\u7fd2\u3055\u308c\u305f\u3001\u30a8\u30f3\u30b3\u30fc\u30c0\u30fc\u3068\u30c7\u30b3\u30fc\u30c0\u30fc\u306e\u4e21\u65b9\u306e\u30b9\u30bf\u30c3\u30af\u3092\u6301\u3064\u65b0\u3057\u3044Transformer\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3067\u3001BERT\u3068GPT-2\u306e\u4e8b\u524d\u5b66\u7fd2\u30b9\u30ad\u30fc\u30e0\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u3044\u307e\u3059\u3002 \u274c mBART-50 BART\u306e\u591a\u8a00\u8a9e\u7248\u3067\u300150\u8a00\u8a9e\u3067\u4e8b\u524d\u5b66\u7fd2\u3055\u308c\u3066\u3044\u307e\u3059\u3002 \u2705 <p>\u3053\u306e\u8868\u304b\u3089\u308f\u304b\u308b\u3088\u3046\u306b\u3001\u8981\u7d04\uff08\u305d\u3057\u3066\u5b9f\u969b\u306b\u306f\u307b\u3068\u3093\u3069\u306eNLP\u30bf\u30b9\u30af\uff09\u7528\u306eTransformer\u30e2\u30c7\u30eb\u306e\u5927\u90e8\u5206\u306f\u5358\u8a00\u8a9e\u3067\u3059\u3002\u3053\u308c\u306f\u3001\u82f1\u8a9e\u3084\u30c9\u30a4\u30c4\u8a9e\u306a\u3069\u306e\u300c\u9ad8\u30ea\u30bd\u30fc\u30b9\u300d\u8a00\u8a9e\u3067\u306e\u30bf\u30b9\u30af\u306b\u306f\u6700\u9069\u3067\u3059\u304c\u3001\u4e16\u754c\u4e2d\u3067\u5229\u7528\u3055\u308c\u3066\u3044\u308b\u4f55\u5343\u3082\u306e\u4ed6\u306e\u8a00\u8a9e\u306b\u306f\u3042\u307e\u308a\u9069\u3057\u3066\u3044\u307e\u305b\u3093\u3002\u5e78\u3044\u3001mT5\u3084mBART\u306a\u3069\u306e\u591a\u8a00\u8a9eTransformer\u30e2\u30c7\u30eb\u306e\u30af\u30e9\u30b9\u304c\u89e3\u6c7a\u7b56\u3092\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u3089\u306e\u30e2\u30c7\u30eb\u306f\u8a00\u8a9e\u30e2\u30c7\u30ea\u30f3\u30b0\u3092\u5229\u7528\u3057\u3066\u4e8b\u524d\u5b66\u7fd2\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u7279\u5fb4\u7684\u306a\u70b9\u304c\u3042\u308a\u307e\u3059\u30021\u3064\u306e\u8a00\u8a9e\u306e\u30b3\u30fc\u30d1\u30b9\u3067\u5b66\u7fd2\u3059\u308b\u4ee3\u308f\u308a\u306b\u300150\u4ee5\u4e0a\u306e\u8a00\u8a9e\u306e\u30c6\u30ad\u30b9\u30c8\u3067\u540c\u6642\u306b\u5171\u540c\u5b66\u7fd2\u3055\u308c\u3066\u3044\u307e\u3059\u3002</p>","tags":["NLP","Transformer","T5","Text Summarization","Machine Learning","PyTorch"]},{"location":"LLM/ClassicalNLP/74_summarization/#_5","title":"\u30c7\u30fc\u30bf\u306e\u524d\u51e6\u7406","text":"<p>\u6b21\u306e\u30bf\u30b9\u30af\u306f\u3001\u8a18\u4e8b\u3068\u305d\u306e\u30bf\u30a4\u30c8\u30eb\u3092\u30c8\u30fc\u30af\u30f3\u5316\u3057\u3066\u30a8\u30f3\u30b3\u30fc\u30c9\u3059\u308b\u3053\u3068\u3067\u3059\u3002\u3044\u3064\u3082\u306e\u3088\u3046\u306b\u3001\u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u306e\u30c1\u30a7\u30c3\u30af\u30dd\u30a4\u30f3\u30c8\u306b\u95a2\u9023\u4ed8\u3051\u3089\u308c\u305f\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3092\u8aad\u307f\u8fbc\u3080\u3053\u3068\u304b\u3089\u59cb\u3081\u307e\u3059\u3002\u5408\u7406\u7684\u306a\u6642\u9593\u3067\u30e2\u30c7\u30eb\u3092\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3067\u304d\u308b\u3088\u3046\u306b\u3001\u30c1\u30a7\u30c3\u30af\u30dd\u30a4\u30f3\u30c8\u3068\u3057\u3066<code>t5-small</code>\u3092\u4f7f\u7528\u3057\u307e\u3059\uff1a</p> <pre><code>from transformers import T5Tokenizer\n\n# T5\u30e2\u30c7\u30eb\u306e\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3092\u8aad\u307f\u8fbc\u307f\nmodel_checkpoint = \"t5-small\"\ntokenizer = T5Tokenizer.from_pretrained(model_checkpoint)\n</code></pre> <p>\u5c0f\u3055\u306a\u4f8b\u3067T5\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3092\u30c6\u30b9\u30c8\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff1a</p> <pre><code># \u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306e\u30c6\u30b9\u30c8\ninputs = tokenizer(\"I loved reading the Hunger Games!\")\ninputs\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>{'input_ids': [27, 1858, 1183, 8, 26049, 5880, 55, 1], 'attention_mask': [1, 1, 1, 1, 1, 1, 1, 1]}\n</code></pre></p> <p>\u3053\u3053\u3067\u306f\u3001\u304a\u306a\u3058\u307f\u306e<code>input_ids</code>\u3068<code>attention_mask</code>\u304c\u898b\u3089\u308c\u307e\u3059\u3002\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u306e<code>convert_ids_to_tokens()</code>\u95a2\u6570\u3067\u3053\u308c\u3089\u306e\u5165\u529bID\u3092\u30c7\u30b3\u30fc\u30c9\u3057\u3066\u3001\u3069\u306e\u3088\u3046\u306a\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3092\u6271\u3063\u3066\u3044\u308b\u304b\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\uff1a</p> <pre><code># \u30c8\u30fc\u30af\u30f3\u306b\u5909\u63db\u3057\u3066\u5185\u5bb9\u3092\u78ba\u8a8d\ntokenizer.convert_ids_to_tokens(inputs.input_ids)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>['\u2581I', '\u2581loved', '\u2581reading', '\u2581the', '\u2581Hunger', '\u2581Games', '!', '&lt;/s&gt;']\n</code></pre></p> <p>\u7279\u6b8a\u306aUnicode\u6587\u5b57<code>\u2581</code>\u3068\u7d42\u4e86\u30b7\u30fc\u30b1\u30f3\u30b9\u30c8\u30fc\u30af\u30f3<code>&lt;/s&gt;</code>\u306f\u3001Unigram\u30bb\u30b0\u30e1\u30f3\u30c6\u30fc\u30b7\u30e7\u30f3\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u57fa\u3065\u304fSentencePiece\u30c8\u30fc\u30af\u30ca\u30a4\u30b6\u30fc\u3092\u6271\u3063\u3066\u3044\u308b\u3053\u3068\u3092\u793a\u3057\u3066\u3044\u307e\u3059\u3002Unigram\u306f\u3001\u30a2\u30af\u30bb\u30f3\u30c8\u3001\u53e5\u8aad\u70b9\u3001\u305d\u3057\u3066\u65e5\u672c\u8a9e\u306e\u3088\u3046\u306b\u7a7a\u767d\u6587\u5b57\u3092\u6301\u305f\u306a\u3044\u591a\u304f\u306e\u8a00\u8a9e\u306b\u3064\u3044\u3066\u3001SentencePiece\u304c\u8a00\u8a9e\u306b\u4f9d\u5b58\u3057\u306a\u3044\u3088\u3046\u306b\u3059\u308b\u305f\u3081\u3001\u591a\u8a00\u8a9e\u30b3\u30fc\u30d1\u30b9\u306b\u7279\u306b\u6709\u7528\u3067\u3059\u3002</p> <p>T5\u306b\u306f\u30bf\u30b9\u30af\u30d7\u30ec\u30d5\u30a3\u30c3\u30af\u30b9\u304c\u5fc5\u8981\u3067\u3059\u3002\u4ee5\u4e0b\u306fT5\u306e\u51e6\u7406\u306e\u4f8b\u3067\u3059\uff1a</p> <pre><code># \u524d\u51e6\u7406\u95a2\u6570\u306e\u5b9a\u7fa9\ndef preprocess_function(examples):\n    # T5\u306b\u306f\u30bf\u30b9\u30af\u30d7\u30ec\u30d5\u30a3\u30c3\u30af\u30b9\u304c\u5fc5\u8981\n    inputs = [\"summarize: \" + doc for doc in examples[\"article\"]]\n    targets = examples[\"highlights\"]\n\n    # \u5165\u529b\u3068\u30bf\u30fc\u30b2\u30c3\u30c8\u3092\u30c8\u30fc\u30af\u30f3\u5316\n    model_inputs = tokenizer(\n        inputs, \n        max_length=512,  # \u6700\u5927\u5165\u529b\u9577\n        truncation=True, \n        padding=False\n    )\n\n    # \u30bf\u30fc\u30b2\u30c3\u30c8\u30c6\u30ad\u30b9\u30c8\u3092\u30c8\u30fc\u30af\u30f3\u5316\n    with tokenizer.as_target_tokenizer():\n        labels = tokenizer(\n            targets, \n            max_length=128,  # \u8981\u7d04\u306f\u901a\u5e38\u77ed\u3044\n            truncation=True, \n            padding=False\n        )\n\n    model_inputs[\"labels\"] = labels[\"input_ids\"]\n    return model_inputs\n\n# \u524d\u51e6\u7406\u3092\u9069\u7528\ntokenized_dataset = datasets.map(preprocess_function, batched=True)\n</code></pre>","tags":["NLP","Transformer","T5","Text Summarization","Machine Learning","PyTorch"]},{"location":"LLM/ClassicalNLP/74_summarization/#trainer-apit5","title":"Trainer API\u3092\u4f7f\u7528\u3057\u305fT5\u306e\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","text":"<p>\u8981\u7d04\u306e\u305f\u3081\u306e\u30e2\u30c7\u30eb\u306e\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u306f\u3001\u4ed6\u306e\u4e00\u822c\u7684\u306aNLP\u30bf\u30b9\u30af\u3068\u975e\u5e38\u306b\u4f3c\u3066\u3044\u307e\u3059\u3002\u6700\u521d\u306b\u3084\u308b\u3079\u304d\u3053\u3068\u306f\u3001<code>t5-small</code>\u30c1\u30a7\u30c3\u30af\u30dd\u30a4\u30f3\u30c8\u304b\u3089\u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u3092\u8aad\u307f\u8fbc\u3080\u3053\u3068\u3067\u3059\u3002\u8981\u7d04\u306fsequence-to-sequence\u30bf\u30b9\u30af\u306a\u306e\u3067\u3001<code>AutoModelForSeq2SeqLM</code>\u30af\u30e9\u30b9\u3067\u30e2\u30c7\u30eb\u3092\u8aad\u307f\u8fbc\u3080\u3053\u3068\u304c\u3067\u304d\u3001\u3053\u308c\u306b\u3088\u3063\u3066\u91cd\u307f\u304c\u81ea\u52d5\u7684\u306b\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3055\u308c\u30ad\u30e3\u30c3\u30b7\u30e5\u3055\u308c\u307e\u3059\uff1a</p> <pre><code>from transformers import T5ForConditionalGeneration, T5Tokenizer\nimport torch\n\n# \u30c7\u30d0\u30a4\u30b9\u306e\u8a2d\u5b9a\u3068\u30e2\u30c7\u30eb\u306e\u8aad\u307f\u8fbc\u307f\ndevice = \"mps\" if torch.mps.is_available() else \"cpu\"\nmodel_name = \"t5-small\"\ntokenizer = T5Tokenizer.from_pretrained(model_name)\nmodel = T5ForConditionalGeneration.from_pretrained(model_name).to(device)\n</code></pre> <p>\u5b66\u7fd2\u4e2d\u306bROUGE\u30b9\u30b3\u30a2\u3092\u8a08\u7b97\u3059\u308b\u305f\u3081\u306b\u8981\u7d04\u3092\u751f\u6210\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u5e78\u3044\u3001Hugging Face Transformers\u306f\u3001\u3053\u308c\u3092\u81ea\u52d5\u7684\u306b\u884c\u3063\u3066\u304f\u308c\u308b\u5c02\u7528\u306e<code>Seq2SeqTrainingArguments</code>\u3068<code>Seq2SeqTrainer</code>\u30af\u30e9\u30b9\u3092\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\uff01\u3053\u308c\u304c\u3069\u306e\u3088\u3046\u306b\u6a5f\u80fd\u3059\u308b\u304b\u3092\u78ba\u8a8d\u3059\u308b\u305f\u3081\u306b\u3001\u307e\u305a\u5b9f\u9a13\u306e\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u305d\u306e\u4ed6\u306e\u5f15\u6570\u3092\u5b9a\u7fa9\u3057\u307e\u3057\u3087\u3046\uff1a</p> <pre><code>from transformers import Seq2SeqTrainingArguments\n\n# \u5b66\u7fd2\u5f15\u6570\u306e\u8a2d\u5b9a\ntraining_args = Seq2SeqTrainingArguments(\n    output_dir=\"./t5-small-cnn-summarization\",\n    eval_strategy=\"steps\",\n    eval_steps=1000,\n    save_steps=1000,\n    logging_steps=500,\n    per_device_train_batch_size=8,\n    per_device_eval_batch_size=8,\n    num_train_epochs=3,\n    learning_rate=3e-4,\n    warmup_steps=1000,\n    weight_decay=0.01,\n    fp16=False,\n    save_total_limit=3,\n    load_best_model_at_end=True,\n    metric_for_best_model=\"rouge1\",\n    greater_is_better=True,\n\n    # Seq2Seq\u56fa\u6709\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\n    predict_with_generate=True,  # \u8a55\u4fa1\u306bgenerate()\u3092\u4f7f\u7528\n    generation_max_length=128,   # \u6700\u5927\u751f\u6210\u9577\n    generation_num_beams=4,      # \u3088\u308a\u826f\u3044\u54c1\u8cea\u306e\u305f\u3081\u306e\u30d3\u30fc\u30e0\u30b5\u30fc\u30c1\n\n    dataloader_num_workers=4,\n    report_to=None,\n)\n</code></pre> <p>\u6b21\u306b\u884c\u3046\u5fc5\u8981\u304c\u3042\u308b\u3053\u3068\u306f\u3001\u5b66\u7fd2\u4e2d\u306b\u30e2\u30c7\u30eb\u3092\u8a55\u4fa1\u3067\u304d\u308b\u3088\u3046\u306b\u3001\u30c8\u30ec\u30fc\u30ca\u30fc\u306b<code>compute_metrics()</code>\u95a2\u6570\u3092\u63d0\u4f9b\u3059\u308b\u3053\u3068\u3067\u3059\u3002\u8981\u7d04\u306b\u5bfe\u3057\u3066\u306f\u3053\u308c\u304c\u5358\u7d14\u306b\u4e88\u6e2c\u306b\u5bfe\u3057\u3066<code>rouge_score.compute()</code>\u3092\u547c\u3073\u51fa\u3059\u3088\u308a\u3082\u3046\u5c11\u3057\u8907\u96d1\u306b\u306a\u308a\u307e\u3059\u3002ROUGE\u30b9\u30b3\u30a2\u3092\u8a08\u7b97\u3059\u308b\u524d\u306b\u3001\u51fa\u529b\u3068\u30e9\u30d9\u30eb\u3092\u30c6\u30ad\u30b9\u30c8\u306b_\u30c7\u30b3\u30fc\u30c9_\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u304b\u3089\u3067\u3059\u3002</p> <pre><code>from rouge_score import rouge_scorer\nimport numpy as np\n\n# \u8a55\u4fa1\u95a2\u6570\u306e\u5b9a\u7fa9\ndef compute_metrics(eval_pred):\n    predictions, labels = eval_pred\n\n    # \u4e88\u6e2c\u3092\u30c7\u30b3\u30fc\u30c9\n    decoded_preds = tokenizer.batch_decode(predictions, skip_special_tokens=True)\n\n    # \u30e9\u30d9\u30eb\u306e-100\u3092\u7f6e\u63db\u3057\u3066\u30c7\u30b3\u30fc\u30c9\n    labels = np.where(labels != -100, labels, tokenizer.pad_token_id)\n    decoded_labels = tokenizer.batch_decode(labels, skip_special_tokens=True)\n\n    # ROUGE\u30b9\u30b3\u30a2\u3092\u8a08\u7b97\n    scorer = rouge_scorer.RougeScorer(['rouge1', 'rouge2', 'rougeL'], use_stemmer=True)\n\n    rouge_scores = []\n    for pred, ref in zip(decoded_preds, decoded_labels):\n        scores = scorer.score(ref, pred)\n        rouge_scores.append(scores)\n\n    # \u5e73\u5747\u30b9\u30b3\u30a2\u3092\u8a08\u7b97\n    result = {}\n    for key in ['rouge1', 'rouge2', 'rougeL']:\n        scores = [score[key].fmeasure for score in rouge_scores]\n        result[key] = np.mean(scores) * 100\n\n    return {k: round(v, 2) for k, v in result.items()}\n</code></pre> <p>\u6b21\u306b\u3001sequence-to-sequence\u30bf\u30b9\u30af\u306e\u305f\u3081\u306e\u30c7\u30fc\u30bf\u7167\u5408\u5668\u3092\u5b9a\u7fa9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u5e78\u3044\u3001Hugging Face Transformers\u306f\u3001\u5165\u529b\u3068\u30e9\u30d9\u30eb\u3092\u52d5\u7684\u306b\u30d1\u30c7\u30a3\u30f3\u30b0\u3057\u3066\u304f\u308c\u308b<code>DataCollatorForSeq2Seq</code>\u7167\u5408\u5668\u3092\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u7167\u5408\u5668\u3092\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3059\u308b\u306b\u306f\u3001\u5358\u306b<code>tokenizer</code>\u3068<code>model</code>\u3092\u63d0\u4f9b\u3059\u308c\u3070\u6e08\u307f\u307e\u3059\u3002</p> <pre><code>from transformers import DataCollatorForSeq2Seq\n\n# \u30c7\u30fc\u30bf\u7167\u5408\u5668\u306e\u8a2d\u5b9a\ndata_collator = DataCollatorForSeq2Seq(tokenizer, model=model, padding=True)\n</code></pre> <p>\u3064\u3044\u306b\u5b66\u7fd2\u306b\u5fc5\u8981\u306a\u3059\u3079\u3066\u306e\u8981\u7d20\u304c\u63c3\u3044\u307e\u3057\u305f\uff01\u6a19\u6e96\u7684\u306a\u5f15\u6570\u3067\u30c8\u30ec\u30fc\u30ca\u30fc\u3092\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3059\u308b\u3060\u3051\u3067\u3059\uff1a</p> <pre><code>from transformers import Seq2SeqTrainer\n\n# Trainer\u306e\u4ee3\u308f\u308a\u306bSeq2SeqTrainer\u3092\u4f7f\u7528\ntrainer = Seq2SeqTrainer(  # \u5358\u306a\u308bTrainer\u3067\u306f\u306a\u3044\n    model=model,\n    args=training_args,\n    train_dataset=tokenized_dataset[\"train\"],\n    eval_dataset=tokenized_dataset[\"validation\"],\n    processing_class=tokenizer,\n    data_collator=data_collator,\n    compute_metrics=compute_metrics,\n)\n</code></pre> <pre><code># \u5b66\u7fd2\u958b\u59cb\uff08\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u6e08\u307f - \u30c7\u30e2\u30f3\u30b9\u30c8\u30ec\u30fc\u30b7\u30e7\u30f3\u7528\uff09\n# trainer.train()\n</code></pre>","tags":["NLP","Transformer","T5","Text Summarization","Machine Learning","PyTorch"]},{"location":"LLM/ClassicalNLP/74_summarization/#hugging-face-acceleratet5","title":"Hugging Face Accelerate\u3092\u4f7f\u3063\u305fT5\u306e\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","text":"<p>Hugging Face Accelerate\u3067\u30e2\u30c7\u30eb\u3092\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3059\u308b\u3053\u3068\u306f\u3001\u4e00\u822c\u7684\u306a\u30c6\u30ad\u30b9\u30c8\u5206\u985e\u306e\u4f8b\u3068\u975e\u5e38\u306b\u4f3c\u3066\u3044\u307e\u3059\u3002\u4e3b\u306a\u9055\u3044\u306f\u3001\u5b66\u7fd2\u4e2d\u306b\u660e\u793a\u7684\u306b\u8981\u7d04\u3092\u751f\u6210\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3053\u3068\u3068\u3001ROUGE\u30b9\u30b3\u30a2\u306e\u8a08\u7b97\u65b9\u6cd5\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u3067\u3059\uff08<code>Seq2SeqTrainer</code>\u304c\u751f\u6210\u3092\u51e6\u7406\u3057\u3066\u304f\u308c\u305f\u3053\u3068\u3092\u601d\u3044\u51fa\u3057\u3066\u304f\u3060\u3055\u3044\uff09\u3002\u3053\u308c\u3089\u306e2\u3064\u306e\u8981\u4ef6\u3092Hugging Face Accelerate\u5185\u3067\u3069\u306e\u3088\u3046\u306b\u5b9f\u88c5\u3067\u304d\u308b\u304b\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\uff01</p>","tags":["NLP","Transformer","T5","Text Summarization","Machine Learning","PyTorch"]},{"location":"LLM/ClassicalNLP/74_summarization/#_6","title":"\u5b66\u7fd2\u306e\u305f\u3081\u306e\u3059\u3079\u3066\u306e\u6e96\u5099","text":"<p>\u6700\u521d\u306b\u3084\u308b\u3079\u304d\u3053\u3068\u306f\u3001\u5404\u5206\u5272\u306b\u5bfe\u3057\u3066<code>DataLoader</code>\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u3067\u3059\u3002PyTorch\u30c7\u30fc\u30bf\u30ed\u30fc\u30c0\u30fc\u306f\u30c6\u30f3\u30bd\u30eb\u306e\u30d0\u30c3\u30c1\u3092\u671f\u5f85\u3059\u308b\u306e\u3067\u3001\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u5f62\u5f0f\u3092<code>\"torch\"</code>\u306b\u8a2d\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff1a</p> <pre><code># \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u5f62\u5f0f\u3092PyTorch\u30c6\u30f3\u30bd\u30eb\u306b\u8a2d\u5b9a\ntokenized_dataset.set_format(\"torch\")\n</code></pre> <p>\u30c6\u30f3\u30bd\u30eb\u3060\u3051\u3067\u69cb\u6210\u3055\u308c\u308b\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304c\u3067\u304d\u305f\u306e\u3067\u3001\u6b21\u306b<code>DataCollatorForSeq2Seq</code>\u3092\u518d\u5ea6\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3057\u307e\u3059\u3002\u3053\u306e\u305f\u3081\u306b\u30e2\u30c7\u30eb\u306e\u65b0\u3057\u3044\u30d0\u30fc\u30b8\u30e7\u30f3\u304c\u5fc5\u8981\u306a\u306e\u3067\u3001\u30ad\u30e3\u30c3\u30b7\u30e5\u304b\u3089\u518d\u5ea6\u8aad\u307f\u8fbc\u307f\u307e\u3057\u3087\u3046\uff1a</p> <pre><code># \u30e2\u30c7\u30eb\u3092\u518d\u8aad\u307f\u8fbc\u307f\nmodel = T5ForConditionalGeneration.from_pretrained(model_name).to(device)\n</code></pre> <p>\u305d\u306e\u5f8c\u3001\u30c7\u30fc\u30bf\u7167\u5408\u5668\u3092\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3057\u3001\u3053\u308c\u3092\u4f7f\u7528\u3057\u3066\u30c7\u30fc\u30bf\u30ed\u30fc\u30c0\u30fc\u3092\u5b9a\u7fa9\u3067\u304d\u307e\u3059\uff1a</p> <pre><code>from torch.utils.data import DataLoader\n\n# \u524d\u51e6\u7406\u3092\u9069\u7528\uff08\u5217\u3092\u9664\u53bb\u3057\u3066\u65b0\u3057\u3044\u3082\u306e\u306b\uff09\ntokenized_dataset = datasets.map(preprocess_function, batched=True, remove_columns=datasets[\"train\"].column_names)\n\n# \u30c7\u30fc\u30bf\u7167\u5408\u5668\ndata_collator = DataCollatorForSeq2Seq(tokenizer=tokenizer, model=model)\n\n# \u30c7\u30fc\u30bf\u30ed\u30fc\u30c0\u30fc\u3092\u4f5c\u6210\ntrain_dataloader = DataLoader(\n    tokenized_dataset[\"train\"],\n    batch_size=8,\n    shuffle=True,\n    collate_fn=data_collator,\n)\n\neval_dataloader = DataLoader(\n    tokenized_dataset[\"validation\"],\n    batch_size=8,\n    shuffle=False,\n    collate_fn=data_collator,\n)\n</code></pre> <p>\u6b21\u306b\u884c\u3046\u3053\u3068\u306f\u3001\u4f7f\u7528\u3057\u305f\u3044\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u30fc\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u3067\u3059\u3002\u4ed6\u306e\u4f8b\u3068\u540c\u69d8\u306b\u3001\u307b\u3068\u3093\u3069\u306e\u554f\u984c\u3067\u3046\u307e\u304f\u52d5\u4f5c\u3059\u308b<code>AdamW</code>\u3092\u4f7f\u7528\u3057\u307e\u3059\uff1a</p> <pre><code>from transformers import get_linear_schedule_with_warmup\nfrom torch.optim import AdamW\n\n# \u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u30fc\u3068\u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u30fc\noptimizer = AdamW(model.parameters(), lr=3e-4, weight_decay=0.01)\n\nnum_epochs = 3\nnum_training_steps = num_epochs * len(train_dataloader)\nnum_warmup_steps = min(1000, num_training_steps // 10)\n\nlr_scheduler = get_linear_schedule_with_warmup(\n    optimizer=optimizer,\n    num_warmup_steps=num_warmup_steps,\n    num_training_steps=num_training_steps\n)\n</code></pre> <p>\u6700\u5f8c\u306b\u3001\u30e2\u30c7\u30eb\u3001\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u30fc\u3001\u30c7\u30fc\u30bf\u30ed\u30fc\u30c0\u30fc\u3092<code>accelerator.prepare()</code>\u30e1\u30bd\u30c3\u30c9\u306b\u6e21\u3057\u307e\u3059\uff1a</p> <pre><code>from accelerate import Accelerator\n\n# accelerator\u3092\u521d\u671f\u5316\naccelerator = Accelerator()\n\n# accelerator\u3067\u3059\u3079\u3066\u3092\u6e96\u5099\nmodel, optimizer, train_dataloader, eval_dataloader, lr_scheduler = accelerator.prepare(\n    model, optimizer, train_dataloader, eval_dataloader, lr_scheduler\n)\n\nprint(f\"\u30c7\u30d0\u30a4\u30b9: {accelerator.device}\")\nprint(f\"\u5b66\u7fd2\u30b9\u30c6\u30c3\u30d7\u6570: {num_training_steps}\")\nprint(f\"\u30a6\u30a9\u30fc\u30e0\u30a2\u30c3\u30d7\u30b9\u30c6\u30c3\u30d7\u6570: {num_warmup_steps}\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>Device: mps\nTraining steps: 107670\nWarmup steps: 1000\n</code></pre></p> <pre><code>from tqdm.auto import tqdm\nimport os\n\n# \u8a55\u4fa1\u95a2\u6570\u306e\u5b9a\u7fa9\ndef evaluate_model():\n    model.eval()\n    rouge_scorer_obj = rouge_scorer.RougeScorer(['rouge1', 'rouge2', 'rougeL'], use_stemmer=True)\n\n    all_predictions = []\n    all_references = []\n    eval_loss = 0\n\n    for batch in tqdm(eval_dataloader, desc=\"\u8a55\u4fa1\u4e2d\"):\n        with torch.no_grad():\n            # \u640d\u5931\u3092\u8a08\u7b97\n            outputs = model(**batch)\n            eval_loss += outputs.loss.item()\n\n            # \u4e88\u6e2c\u3092\u751f\u6210\n            generated_tokens = accelerator.unwrap_model(model).generate(\n                input_ids=batch[\"input_ids\"],\n                attention_mask=batch[\"attention_mask\"],\n                max_length=128,\n                num_beams=4,\n                early_stopping=True\n            )\n\n            # \u4e88\u6e2c\u3068\u53c2\u7167\u3092\u30c7\u30b3\u30fc\u30c9\n            predictions = tokenizer.batch_decode(generated_tokens, skip_special_tokens=True)\n            labels = batch[\"labels\"]\n            labels = torch.where(labels != -100, labels, tokenizer.pad_token_id)\n            references = tokenizer.batch_decode(labels, skip_special_tokens=True)\n\n            all_predictions.extend(predictions)\n            all_references.extend(references)\n\n    # ROUGE\u30b9\u30b3\u30a2\u3092\u8a08\u7b97\n    rouge_scores = []\n    for pred, ref in zip(all_predictions, all_references):\n        scores = rouge_scorer_obj.score(ref, pred)\n        rouge_scores.append(scores)\n\n    # \u5e73\u5747\u30b9\u30b3\u30a2\n    rouge_results = {}\n    for key in ['rouge1', 'rouge2', 'rougeL']:\n        scores = [score[key].fmeasure for score in rouge_scores]\n        rouge_results[key] = np.mean(scores) * 100\n\n    avg_eval_loss = eval_loss / len(eval_dataloader)\n\n    return avg_eval_loss, rouge_results\n\n# \u5b66\u7fd2\u30eb\u30fc\u30d7\nmodel.train()\nprogress_bar = tqdm(range(num_training_steps), desc=\"\u5b66\u7fd2\u4e2d\")\n\nstep = 0\nbest_rouge1 = 0\nsave_dir = \"./t5-small-cnn-accelerate\"\nos.makedirs(save_dir, exist_ok=True)\n\nfor epoch in range(num_epochs):\n    print(f\"\\n\u30a8\u30dd\u30c3\u30af {epoch + 1}/{num_epochs}\")\n\n    for batch in train_dataloader:\n        # \u9806\u4f1d\u64ad\n        outputs = model(**batch)\n        loss = outputs.loss\n\n        # \u9006\u4f1d\u64ad\n        accelerator.backward(loss)\n\n        optimizer.step()\n        lr_scheduler.step()\n        optimizer.zero_grad()\n\n        progress_bar.update(1)\n        step += 1\n\n        # \u30ed\u30b0\u51fa\u529b\n        if step % 500 == 0:\n            print(f\"\u30b9\u30c6\u30c3\u30d7 {step}: \u640d\u5931 = {loss.item():.4f}, \u5b66\u7fd2\u7387 = {lr_scheduler.get_last_lr()[0]:.2e}\")\n\n        # \u8a55\u4fa1\n        if step % 1000 == 0:\n            print(f\"\\n\u30b9\u30c6\u30c3\u30d7 {step}\u3067\u8a55\u4fa1\u4e2d...\")\n            eval_loss, rouge_results = evaluate_model()\n\n            print(f\"\u8a55\u4fa1\u640d\u5931: {eval_loss:.4f}\")\n            print(f\"ROUGE-1: {rouge_results['rouge1']:.2f}\")\n            print(f\"ROUGE-2: {rouge_results['rouge2']:.2f}\")\n            print(f\"ROUGE-L: {rouge_results['rougeL']:.2f}\")\n\n            # \u6700\u826f\u30e2\u30c7\u30eb\u3092\u4fdd\u5b58\n            if rouge_results['rouge1'] &gt; best_rouge1:\n                best_rouge1 = rouge_results['rouge1']\n                accelerator.wait_for_everyone()\n                unwrapped_model = accelerator.unwrap_model(model)\n                unwrapped_model.save_pretrained(\n                    save_dir, \n                    is_main_process=accelerator.is_main_process,\n                    save_function=accelerator.save\n                )\n                if accelerator.is_main_process:\n                    tokenizer.save_pretrained(save_dir)\n                print(f\"ROUGE-1: {best_rouge1:.2f}\u3067\u6700\u826f\u30e2\u30c7\u30eb\u3092\u4fdd\u5b58\u3057\u307e\u3057\u305f\")\n\n            model.train()\n\nprint(\"\\n\u5b66\u7fd2\u5b8c\u4e86!\")\nprint(f\"\u6700\u826fROUGE-1\u30b9\u30b3\u30a2: {best_rouge1:.2f}\")\n\n# \u6700\u7d42\u8a55\u4fa1\nprint(\"\\n\u6700\u7d42\u8a55\u4fa1...\")\neval_loss, rouge_results = evaluate_model()\nprint(f\"\u6700\u7d42\u7d50\u679c:\")\nprint(f\"ROUGE-1: {rouge_results['rouge1']:.2f}\")\nprint(f\"ROUGE-2: {rouge_results['rouge2']:.2f}\")  \nprint(f\"ROUGE-L: {rouge_results['rougeL']:.2f}\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: \u3053\u306e\u5b66\u7fd2\u30d7\u30ed\u30bb\u30b9\u306f\u6570\u6642\u9593\u304b\u304b\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002\u5b9f\u969b\u306e\u5b9f\u884c\u6642\u306b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u51fa\u529b\u304c\u8868\u793a\u3055\u308c\u307e\u3059\uff1a</p> <pre><code>\u30a8\u30dd\u30c3\u30af 1/3\n\u30b9\u30c6\u30c3\u30d7 500: \u640d\u5931 = 2.1234, \u5b66\u7fd2\u7387 = 2.85e-04\n\n\u30b9\u30c6\u30c3\u30d7 1000\u3067\u8a55\u4fa1\u4e2d...\n\u8a55\u4fa1\u640d\u5931: 1.8765\nROUGE-1: 28.45\nROUGE-2: 9.87\nROUGE-L: 25.12\nROUGE-1: 28.45\u3067\u6700\u826f\u30e2\u30c7\u30eb\u3092\u4fdd\u5b58\u3057\u307e\u3057\u305f\n\n\u5b66\u7fd2\u5b8c\u4e86!\n\u6700\u826fROUGE-1\u30b9\u30b3\u30a2: 32.78\n\n\u6700\u7d42\u8a55\u4fa1...\n\u6700\u7d42\u7d50\u679c:\nROUGE-1: 32.78\nROUGE-2: 12.34\nROUGE-L: 28.91\n</code></pre>","tags":["NLP","Transformer","T5","Text Summarization","Machine Learning","PyTorch"]},{"location":"LLM/ClassicalNLP/74_summarization/#_7","title":"\u5b66\u7fd2\u7d50\u679c\u306e\u5206\u6790\u3068\u6d3b\u7528","text":"","tags":["NLP","Transformer","T5","Text Summarization","Machine Learning","PyTorch"]},{"location":"LLM/ClassicalNLP/74_summarization/#rouge","title":"ROUGE\u30b9\u30b3\u30a2\u306e\u7406\u89e3","text":"<p>ROUGE\uff08Recall-Oriented Understudy for Gisting Evaluation\uff09\u306f\u3001\u30c6\u30ad\u30b9\u30c8\u8981\u7d04\u306e\u54c1\u8cea\u3092\u8a55\u4fa1\u3059\u308b\u305f\u3081\u306e\u6a19\u6e96\u7684\u306a\u6307\u6a19\u3067\u3059\uff1a</p> <ul> <li>ROUGE-1: \u5358\u8a9e\uff081-gram\uff09\u306e\u91cd\u8907\u3092\u6e2c\u5b9a</li> <li>ROUGE-2: 2\u8a9e\u306e\u7d44\u307f\u5408\u308f\u305b\uff082-gram\uff09\u306e\u91cd\u8907\u3092\u6e2c\u5b9a  </li> <li>ROUGE-L: \u6700\u9577\u5171\u901a\u90e8\u5206\u5217\uff08Longest Common Subsequence\uff09\u3092\u57fa\u6e96\u3068\u3057\u305f\u6e2c\u5b9a</li> </ul> <p>\u4e00\u822c\u7684\u306b\u3001ROUGE-1\u30b9\u30b3\u30a2\u304c30\u3092\u8d85\u3048\u308b\u3068\u826f\u597d\u306a\u6027\u80fd\u3068\u3055\u308c\u300140\u3092\u8d85\u3048\u308b\u3068\u512a\u79c0\u306a\u6027\u80fd\u3068\u8003\u3048\u3089\u308c\u307e\u3059\u3002</p>","tags":["NLP","Transformer","T5","Text Summarization","Machine Learning","PyTorch"]},{"location":"LLM/ClassicalNLP/74_summarization/#_8","title":"\u30e2\u30c7\u30eb\u306e\u5b9f\u969b\u306e\u4f7f\u7528\u65b9\u6cd5","text":"<p>\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u3092\u4f7f\u7528\u3057\u3066\u65b0\u3057\u3044\u30c6\u30ad\u30b9\u30c8\u3092\u8981\u7d04\u3059\u308b\u65b9\u6cd5\uff1a</p> <pre><code># \u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u3092\u8aad\u307f\u8fbc\u307f\nfrom transformers import T5ForConditionalGeneration, T5Tokenizer\n\nmodel_path = \"./t5-small-cnn-accelerate\"\ntokenizer = T5Tokenizer.from_pretrained(model_path)\nmodel = T5ForConditionalGeneration.from_pretrained(model_path)\n\ndef generate_summary(text, max_length=128):\n    \"\"\"\n    \u30c6\u30ad\u30b9\u30c8\u306e\u8981\u7d04\u3092\u751f\u6210\u3059\u308b\u95a2\u6570\n\n    Args:\n        text (str): \u8981\u7d04\u3057\u305f\u3044\u30c6\u30ad\u30b9\u30c8\n        max_length (int): \u8981\u7d04\u306e\u6700\u5927\u9577\n\n    Returns:\n        str: \u751f\u6210\u3055\u308c\u305f\u8981\u7d04\n    \"\"\"\n    # T5\u7528\u306e\u30d7\u30ec\u30d5\u30a3\u30c3\u30af\u30b9\u3092\u8ffd\u52a0\n    input_text = f\"summarize: {text}\"\n\n    # \u30c8\u30fc\u30af\u30f3\u5316\n    inputs = tokenizer(\n        input_text, \n        return_tensors=\"pt\", \n        max_length=512, \n        truncation=True\n    )\n\n    # \u8981\u7d04\u3092\u751f\u6210\n    with torch.no_grad():\n        summary_ids = model.generate(\n            inputs[\"input_ids\"],\n            attention_mask=inputs[\"attention_mask\"],\n            max_length=max_length,\n            num_beams=4,\n            early_stopping=True,\n            no_repeat_ngram_size=2\n        )\n\n    # \u30c7\u30b3\u30fc\u30c9\u3057\u3066\u8fd4\u3059\n    summary = tokenizer.decode(summary_ids[0], skip_special_tokens=True)\n    return summary\n\n# \u4f7f\u7528\u4f8b\nsample_text = \"\"\"\n\u4eba\u5de5\u77e5\u80fd\uff08AI\uff09\u306e\u767a\u5c55\u306f\u3001\u79c1\u305f\u3061\u306e\u751f\u6d3b\u306b\u5927\u304d\u306a\u5909\u5316\u3092\u3082\u305f\u3089\u3057\u3066\u3044\u307e\u3059\u3002\n\u6a5f\u68b0\u5b66\u7fd2\u3001\u7279\u306b\u6df1\u5c64\u5b66\u7fd2\u306e\u6280\u8853\u306b\u3088\u308a\u3001\u753b\u50cf\u8a8d\u8b58\u3001\u97f3\u58f0\u8a8d\u8b58\u3001\u81ea\u7136\u8a00\u8a9e\u51e6\u7406\n\u306a\u3069\u306e\u5206\u91ce\u3067\u753b\u671f\u7684\u306a\u9032\u6b69\u304c\u898b\u3089\u308c\u3066\u3044\u307e\u3059\u3002\u533b\u7642\u5206\u91ce\u3067\u306f\u3001AI\u304c\u8a3a\u65ad\u652f\u63f4\u3084\n\u85ac\u7269\u767a\u898b\u306b\u6d3b\u7528\u3055\u308c\u3001\u6559\u80b2\u5206\u91ce\u3067\u306f\u500b\u5225\u5b66\u7fd2\u30b7\u30b9\u30c6\u30e0\u304c\u958b\u767a\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\u3057\u304b\u3057\u3001AI\u306e\u666e\u53ca\u306b\u4f34\u3044\u3001\u96c7\u7528\u3078\u306e\u5f71\u97ff\u3084\u30d7\u30e9\u30a4\u30d0\u30b7\u30fc\u306e\u554f\u984c\u306a\u3069\u3001\n\u793e\u4f1a\u7684\u306a\u8ab2\u984c\u3082\u6d6e\u4e0a\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u3089\u306e\u8ab2\u984c\u306b\u5bfe\u51e6\u3057\u306a\u304c\u3089\u3001\nAI\u306e\u6069\u6075\u3092\u6700\u5927\u5316\u3059\u308b\u3053\u3068\u304c\u91cd\u8981\u3067\u3059\u3002\n\"\"\"\n\nsummary = generate_summary(sample_text)\nprint(\"\u751f\u6210\u3055\u308c\u305f\u8981\u7d04:\")\nprint(summary)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>\u751f\u6210\u3055\u308c\u305f\u8981\u7d04:\n\u4eba\u5de5\u77e5\u80fd\u306e\u767a\u5c55\u306b\u3088\u308a\u753b\u50cf\u8a8d\u8b58\u3084\u97f3\u58f0\u8a8d\u8b58\u304c\u9032\u6b69\u3057\u3001\u533b\u7642\u3084\u6559\u80b2\u5206\u91ce\u3067\u6d3b\u7528\u3055\u308c\u3066\u3044\u308b\u304c\u3001\u96c7\u7528\u3084\u30d7\u30e9\u30a4\u30d0\u30b7\u30fc\u306e\u8ab2\u984c\u3082\u3042\u308b\u3002\n</code></pre></p>","tags":["NLP","Transformer","T5","Text Summarization","Machine Learning","PyTorch"]},{"location":"LLM/ClassicalNLP/74_summarization/#_9","title":"\u6027\u80fd\u5411\u4e0a\u306e\u305f\u3081\u306e\u8ffd\u52a0\u6280\u8853","text":"","tags":["NLP","Transformer","T5","Text Summarization","Machine Learning","PyTorch"]},{"location":"LLM/ClassicalNLP/74_summarization/#_10","title":"\u30d3\u30fc\u30e0\u30b5\u30fc\u30c1\u306e\u6700\u9069\u5316","text":"<p>\u30d3\u30fc\u30e0\u30b5\u30fc\u30c1\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8abf\u6574\u3059\u308b\u3053\u3068\u3067\u3001\u8981\u7d04\u306e\u54c1\u8cea\u3092\u5411\u4e0a\u3055\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a</p> <pre><code>def advanced_generate_summary(text, num_beams=4, temperature=0.7):\n    \"\"\"\n    \u9ad8\u5ea6\u306a\u751f\u6210\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u4f7f\u7528\u3057\u305f\u8981\u7d04\u751f\u6210\n    \"\"\"\n    input_text = f\"summarize: {text}\"\n    inputs = tokenizer(input_text, return_tensors=\"pt\", max_length=512, truncation=True)\n\n    summary_ids = model.generate(\n        inputs[\"input_ids\"],\n        attention_mask=inputs[\"attention_mask\"],\n        max_length=128,\n        min_length=20,\n        num_beams=num_beams,\n        temperature=temperature,\n        do_sample=True,\n        early_stopping=True,\n        no_repeat_ngram_size=3,\n        repetition_penalty=1.2\n    )\n\n    return tokenizer.decode(summary_ids[0], skip_special_tokens=True)\n</code></pre>","tags":["NLP","Transformer","T5","Text Summarization","Machine Learning","PyTorch"]},{"location":"LLM/ClassicalNLP/74_summarization/#_11","title":"\u9577\u6587\u51e6\u7406\u306e\u6539\u5584","text":"<p>\u975e\u5e38\u306b\u9577\u3044\u6587\u66f8\u3092\u51e6\u7406\u3059\u308b\u5834\u5408\u306e\u6226\u7565\uff1a</p> <pre><code>def summarize_long_document(text, chunk_size=400, overlap=50):\n    \"\"\"\n    \u9577\u3044\u6587\u66f8\u3092\u5206\u5272\u3057\u3066\u8981\u7d04\u3059\u308b\u95a2\u6570\n\n    Args:\n        text (str): \u9577\u3044\u6587\u66f8\n        chunk_size (int): \u30c1\u30e3\u30f3\u30af\u30b5\u30a4\u30ba\uff08\u5358\u8a9e\u6570\uff09\n        overlap (int): \u30c1\u30e3\u30f3\u30af\u9593\u306e\u30aa\u30fc\u30d0\u30fc\u30e9\u30c3\u30d7\uff08\u5358\u8a9e\u6570\uff09\n    \"\"\"\n    words = text.split()\n    chunks = []\n\n    # \u6587\u66f8\u3092\u91cd\u8907\u3042\u308a\u3067\u30c1\u30e3\u30f3\u30af\u306b\u5206\u5272\n    for i in range(0, len(words), chunk_size - overlap):\n        chunk = ' '.join(words[i:i + chunk_size])\n        chunks.append(chunk)\n\n    # \u5404\u30c1\u30e3\u30f3\u30af\u3092\u8981\u7d04\n    chunk_summaries = []\n    for chunk in chunks:\n        summary = generate_summary(chunk, max_length=64)\n        chunk_summaries.append(summary)\n\n    # \u30c1\u30e3\u30f3\u30af\u8981\u7d04\u3092\u7d50\u5408\u3057\u3066\u6700\u7d42\u8981\u7d04\u3092\u751f\u6210\n    combined_summary = ' '.join(chunk_summaries)\n    final_summary = generate_summary(combined_summary, max_length=128)\n\n    return final_summary\n</code></pre>","tags":["NLP","Transformer","T5","Text Summarization","Machine Learning","PyTorch"]},{"location":"LLM/ClassicalNLP/74_summarization/#_12","title":"\u5b9f\u7528\u7684\u306a\u6d3b\u7528\u4f8b","text":"","tags":["NLP","Transformer","T5","Text Summarization","Machine Learning","PyTorch"]},{"location":"LLM/ClassicalNLP/74_summarization/#_13","title":"\u30cb\u30e5\u30fc\u30b9\u8a18\u4e8b\u306e\u81ea\u52d5\u8981\u7d04\u30b7\u30b9\u30c6\u30e0","text":"<pre><code>import requests\nfrom datetime import datetime\n\nclass NewsSummarizationSystem:\n    \"\"\"\u30cb\u30e5\u30fc\u30b9\u8a18\u4e8b\u81ea\u52d5\u8981\u7d04\u30b7\u30b9\u30c6\u30e0\"\"\"\n\n    def __init__(self, model_path):\n        self.tokenizer = T5Tokenizer.from_pretrained(model_path)\n        self.model = T5ForConditionalGeneration.from_pretrained(model_path)\n\n    def summarize_article(self, article_text, target_length=100):\n        \"\"\"\u8a18\u4e8b\u3092\u6307\u5b9a\u3055\u308c\u305f\u9577\u3055\u3067\u8981\u7d04\"\"\"\n        return generate_summary(article_text, max_length=target_length)\n\n    def batch_summarize(self, articles):\n        \"\"\"\u8907\u6570\u8a18\u4e8b\u306e\u4e00\u62ec\u8981\u7d04\"\"\"\n        summaries = []\n        for article in articles:\n            try:\n                summary = self.summarize_article(article)\n                summaries.append(summary)\n            except Exception as e:\n                summaries.append(f\"\u8981\u7d04\u30a8\u30e9\u30fc: {str(e)}\")\n        return summaries\n\n    def export_summaries(self, articles, summaries, filename):\n        \"\"\"\u8981\u7d04\u7d50\u679c\u3092\u30d5\u30a1\u30a4\u30eb\u306b\u51fa\u529b\"\"\"\n        with open(filename, 'w', encoding='utf-8') as f:\n            f.write(f\"\u8981\u7d04\u30ec\u30dd\u30fc\u30c8 - {datetime.now().strftime('%Y-%m-%d %H:%M')}\\n\\n\")\n            for i, (article, summary) in enumerate(zip(articles, summaries)):\n                f.write(f\"\u8a18\u4e8b {i+1}:\\n\")\n                f.write(f\"\u8981\u7d04: {summary}\\n\")\n                f.write(f\"\u5143\u8a18\u4e8b\u306e\u9577\u3055: {len(article.split())} \u8a9e\\n\")\n                f.write(\"-\" * 50 + \"\\n\\n\")\n\n# \u4f7f\u7528\u4f8b\nsummarizer = NewsSummarizationSystem(\"./t5-small-cnn-accelerate\")\n</code></pre>","tags":["NLP","Transformer","T5","Text Summarization","Machine Learning","PyTorch"]},{"location":"LLM/ClassicalNLP/74_summarization/#_14","title":"\u307e\u3068\u3081","text":"<p>\u30c6\u30ad\u30b9\u30c8\u8981\u7d04\u306f\u3001\u60c5\u5831\u904e\u591a\u306e\u73fe\u4ee3\u306b\u304a\u3044\u3066\u975e\u5e38\u306b\u4fa1\u5024\u306e\u9ad8\u3044\u6280\u8853\u3067\u3059\u3002\u9069\u5207\u306b\u5b9f\u88c5\u3055\u308c\u305f\u30b7\u30b9\u30c6\u30e0\u306f\u3001\u5927\u91cf\u306e\u6587\u66f8\u3092\u52b9\u7387\u7684\u306b\u51e6\u7406\u3057\u3001\u91cd\u8981\u306a\u60c5\u5831\u3092\u62bd\u51fa\u3059\u308b\u5f37\u529b\u306a\u30c4\u30fc\u30eb\u3068\u306a\u308a\u307e\u3059\u3002</p>","tags":["NLP","Transformer","T5","Text Summarization","Machine Learning","PyTorch"]},{"location":"LLM/ClassicalNLP/74_summarization/#_15","title":"\u53c2\u8003\u8cc7\u6599","text":"<ul> <li>Hugging Face Transformers Documentation: https://huggingface.co/docs/transformers</li> <li>T5 Paper: \"Exploring the Limits of Transfer Learning with a Unified Text-to-Text Transformer\"</li> <li>ROUGE\u8a55\u4fa1\u6307\u6a19: Lin, Chin-Yew. \"ROUGE: A Package for Automatic Evaluation of Summaries\"</li> <li>CNN/DailyMail Dataset: https://huggingface.co/datasets/abisee/cnn_dailymail</li> <li>PyTorch Lightning Documentation: https://pytorch-lightning.readthedocs.io/</li> </ul>","tags":["NLP","Transformer","T5","Text Summarization","Machine Learning","PyTorch"]},{"location":"LLM/ClassicalNLP/75_question_answering/","title":"SQuAD\u8cea\u554f\u5fdc\u7b54\u30b7\u30b9\u30c6\u30e0\u306e\u69cb\u7bc9 - BERT\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u5b8c\u5168\u30ac\u30a4\u30c9","text":"","tags":["\u6a5f\u68b0\u5b66\u7fd2","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","BERT","\u8cea\u554f\u5fdc\u7b54","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","SQuAD","transformers"]},{"location":"LLM/ClassicalNLP/75_question_answering/#_1","title":"\u6982\u8981","text":"<p>\u3053\u306e\u8a18\u4e8b\u3067\u306f\u3001BERT\u30e2\u30c7\u30eb\u3092SQuAD\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3067\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3057\u3066\u3001\u9ad8\u7cbe\u5ea6\u306a\u8cea\u554f\u5fdc\u7b54\u30b7\u30b9\u30c6\u30e0\u3092\u69cb\u7bc9\u3059\u308b\u65b9\u6cd5\u3092\u89e3\u8aac\u3057\u307e\u3059\u3002\u8cea\u554f\u5fdc\u7b54\uff08Question Answering\uff09\u306f\u81ea\u7136\u8a00\u8a9e\u51e6\u7406\u306e\u91cd\u8981\u306a\u30bf\u30b9\u30af\u306e\u4e00\u3064\u3067\u3001\u6587\u66f8\u304b\u3089\u8cea\u554f\u306b\u5bfe\u3059\u308b\u7b54\u3048\u3092\u62bd\u51fa\u3059\u308b\u6280\u8853\u3067\u3059\u3002</p> <p>\u53c2\u8003\u8cc7\u6599</p> <p>\u672c\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306f Hugging Face LLM Course \u3092\u53c2\u8003\u306b\u3001\u65e5\u672c\u8a9e\u3067\u5b66\u7fd2\u5185\u5bb9\u3092\u307e\u3068\u3081\u305f\u500b\u4eba\u7684\u306a\u5b66\u7fd2\u30ce\u30fc\u30c8\u3067\u3059\u3002\u8a73\u7d30\u306a\u5185\u5bb9\u3084\u6700\u65b0\u60c5\u5831\u306b\u3064\u3044\u3066\u306f\u3001\u539f\u6587\u3082\u4f75\u305b\u3066\u3054\u53c2\u7167\u304f\u3060\u3055\u3044\u3002</p>","tags":["\u6a5f\u68b0\u5b66\u7fd2","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","BERT","\u8cea\u554f\u5fdc\u7b54","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","SQuAD","transformers"]},{"location":"LLM/ClassicalNLP/75_question_answering/#_2","title":"\u524d\u63d0\u77e5\u8b58","text":"<ul> <li>Python\u57fa\u790e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0</li> <li>\u6a5f\u68b0\u5b66\u7fd2\u306e\u57fa\u672c\u6982\u5ff5</li> <li>transformers\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u57fa\u672c\u7684\u306a\u4f7f\u7528\u65b9\u6cd5</li> <li>PyTorch\u306e\u57fa\u790e\u77e5\u8b58</li> </ul>","tags":["\u6a5f\u68b0\u5b66\u7fd2","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","BERT","\u8cea\u554f\u5fdc\u7b54","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","SQuAD","transformers"]},{"location":"LLM/ClassicalNLP/75_question_answering/#_3","title":"\u8cea\u554f\u5fdc\u7b54\u3068\u306f","text":"<p>\u8cea\u554f\u5fdc\u7b54\u306b\u306f\u3055\u307e\u3056\u307e\u306a\u5f62\u5f0f\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u3053\u306e\u8a18\u4e8b\u3067\u306f\u62bd\u51fa\u578b\u8cea\u554f\u5fdc\u7b54\uff08extractive question answering\uff09\u306b\u7126\u70b9\u3092\u5f53\u3066\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u6587\u66f8\u306b\u3064\u3044\u3066\u8cea\u554f\u3057\u3001\u305d\u306e\u7b54\u3048\u3092\u6587\u66f8\u5185\u306e\u30c6\u30ad\u30b9\u30c8\u30b9\u30d1\u30f3\u3068\u3057\u3066\u7279\u5b9a\u3059\u308b\u30bf\u30b9\u30af\u3067\u3059\u3002</p> <p>\u79c1\u305f\u3061\u306fSQuAD dataset\u3067BERT\u30e2\u30c7\u30eb\u3092\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3057\u307e\u3059\u3002SQuAD\u306f\u3001Wikipedia\u8a18\u4e8b\u306b\u5bfe\u3057\u3066\u30af\u30e9\u30a6\u30c9\u30ef\u30fc\u30ab\u30fc\u304c\u4f5c\u6210\u3057\u305f\u8cea\u554f\u3067\u69cb\u6210\u3055\u308c\u3066\u3044\u307e\u3059\u3002</p>","tags":["\u6a5f\u68b0\u5b66\u7fd2","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","BERT","\u8cea\u554f\u5fdc\u7b54","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","SQuAD","transformers"]},{"location":"LLM/ClassicalNLP/75_question_answering/#_4","title":"\u30c7\u30fc\u30bf\u306e\u6e96\u5099","text":"<p>\u62bd\u51fa\u578b\u8cea\u554f\u5fdc\u7b54\u306e\u5b66\u8853\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u3068\u3057\u3066\u6700\u3082\u4f7f\u7528\u3055\u308c\u3066\u3044\u308b\u306e\u306fSQuAD\u306a\u306e\u3067\u3001\u4eca\u56de\u306f\u3053\u308c\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u3088\u308a\u56f0\u96e3\u306aSQuAD v2\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u3082\u3042\u308a\u3001\u3053\u308c\u306b\u306f\u7b54\u3048\u304c\u5b58\u5728\u3057\u306a\u3044\u8cea\u554f\u3082\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002</p>","tags":["\u6a5f\u68b0\u5b66\u7fd2","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","BERT","\u8cea\u554f\u5fdc\u7b54","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","SQuAD","transformers"]},{"location":"LLM/ClassicalNLP/75_question_answering/#squad","title":"SQuAD\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u8aad\u307f\u8fbc\u307f","text":"<p><code>load_dataset()</code>\u3092\u4f7f\u7528\u3057\u3066\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u7c21\u5358\u306b\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u30fb\u30ad\u30e3\u30c3\u30b7\u30e5\u3067\u304d\u307e\u3059\uff1a</p> <pre><code>from datasets import load_dataset\n\nraw_datasets = load_dataset(\"rajpurkar/squad_v2\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>DatasetDict({\n    train: Dataset({\n        features: ['id', 'title', 'context', 'question', 'answers'],\n        num_rows: 130319\n    })\n    validation: Dataset({\n        features: ['id', 'title', 'context', 'question', 'answers'],\n        num_rows: 11873\n    })\n})\n</code></pre></p> <p>\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u69cb\u9020\u3092\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff1a</p> <pre><code>raw_datasets\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>DatasetDict({\n    train: Dataset({\n        features: ['id', 'title', 'context', 'question', 'answers'],\n        num_rows: 130319\n    })\n    validation: Dataset({\n        features: ['id', 'title', 'context', 'question', 'answers'],\n        num_rows: 11873\n    })\n})\n</code></pre></p> <p>\u5fc5\u8981\u306a<code>context</code>\u3001<code>question</code>\u3001<code>answers</code>\u30d5\u30a3\u30fc\u30eb\u30c9\u304c\u3059\u3079\u3066\u63c3\u3063\u3066\u3044\u307e\u3059\u3002\u8a13\u7df4\u30bb\u30c3\u30c8\u306e\u6700\u521d\u306e\u8981\u7d20\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\uff1a</p> <pre><code>print(\"Context: \", raw_datasets[\"train\"][0][\"context\"])\nprint(\"Question: \", raw_datasets[\"train\"][0][\"question\"])\nprint(\"Answer: \", raw_datasets[\"train\"][0][\"answers\"])\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>Context:  Beyonc\u00c3\u00a9 Giselle Knowles-Carter (/bi\u00cb\u00cb\u02c6j\u00c9'nse\u00c9\u00aa/ bee-YON-say) (born September 4, 1981) is an American singer, songwriter, record producer and actress. Born and raised in Houston, Texas, she performed in various singing and dancing competitions as a child, and rose to fame in the late 1990s as lead singer of R&amp;B girl-group Destiny's Child. Managed by her father, Mathew Knowles, the group became one of the world's best-selling girl groups of all time. Their hiatus saw the release of Beyonc\u00c3\u00a9's debut album, Dangerously in Love (2003), which established her as a solo artist worldwide, earned five Grammy Awards and featured the Billboard Hot 100 number-one singles \"Crazy in Love\" and \"Baby Boy\".\nQuestion:  When did Beyonce start becoming popular?\nAnswer:  {'text': ['in the late 1990s'], 'answer_start': [269]}\n</code></pre></p> <p><code>context</code>\u3068<code>question</code>\u30d5\u30a3\u30fc\u30eb\u30c9\u306f\u76f4\u611f\u7684\u3067\u3059\u3002<code>answers</code>\u30d5\u30a3\u30fc\u30eb\u30c9\u306f\u5c11\u3057\u8907\u96d1\u3067\u3001\u3069\u3061\u3089\u3082\u30ea\u30b9\u30c8\u3067\u3042\u308b2\u3064\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u6301\u3064\u8f9e\u66f8\u5f62\u5f0f\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002<code>text</code>\u30d5\u30a3\u30fc\u30eb\u30c9\u306f\u660e\u78ba\u3067\u3001<code>answer_start</code>\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u306f\u6587\u8108\u5185\u3067\u306e\u5404\u7b54\u3048\u306e\u958b\u59cb\u6587\u5b57\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002</p> <p>SQuAD2.0\u3067\u306f\u3001SQuAD1.1\u306e10\u4e07\u554f\u306b\u52a0\u3048\u3066\u30015\u4e07\u554f\u4ee5\u4e0a\u306e\u7b54\u3048\u306e\u306a\u3044\u8cea\u554f\u304c\u8ffd\u52a0\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u3089\u306f\u3001\u7b54\u3048\u306e\u3042\u308b\u8cea\u554f\u306b\u4f3c\u305b\u3066\u30af\u30e9\u30a6\u30c9\u30ef\u30fc\u30ab\u30fc\u304c\u4f5c\u6210\u3057\u305f\u5bfe\u6297\u7684\u306a\u8cea\u554f\u3067\u3059\u3002</p> <p>\u7b54\u3048\u306e\u306a\u3044\u8cea\u554f\u3092\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff1a</p> <pre><code>unanswerable = raw_datasets[\"train\"].filter(lambda x: len(x[\"answers\"][\"text\"]) != 1)\n</code></pre> <pre><code>unanswerable[0]\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>{'id': '5a8d7bf7df8bba001a0f9ab1',\n 'title': 'The_Legend_of_Zelda:_Twilight_Princess',\n 'context': 'The Legend of Zelda: Twilight Princess (Japanese: \u30bc\u30eb\u30c0\u306e\u4f1d\u8aac \u30c8\u30ef\u30a4\u30e9\u30a4\u30c8\u30d7\u30ea\u30f3\u30bb\u30b9, Hepburn: Zeruda no Densetsu: Towairaito Purinsesu?) is an action-adventure game developed and published by Nintendo for the GameCube and Wii home video game consoles. It is the thirteenth installment in the The Legend of Zelda series. Originally planned for release on the GameCube in November 2005, Twilight Princess was delayed by Nintendo to allow its developers to refine the game, add more content, and port it to the Wii. The Wii version was released alongside the console in North America in November 2006, and in Japan, Europe, and Australia the following month. The GameCube version was released worldwide in December 2006.[b]',\n 'question': 'What category of game is Legend of Zelda: Australia Twilight?',\n 'answers': {'text': [], 'answer_start': []}}\n</code></pre></p> <p>\u8a55\u4fa1\u6642\u306b\u306f\u3001\u5404\u30b5\u30f3\u30d7\u30eb\u306b\u5bfe\u3057\u3066\u8907\u6570\u306e\u6b63\u89e3\u304c\u5b58\u5728\u3059\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\uff1a</p> <pre><code>print(raw_datasets[\"validation\"][132][\"answers\"])\nprint(raw_datasets[\"validation\"][3][\"answers\"])\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>{'text': ['1018', '1064', '1018'], 'answer_start': [221, 345, 221]}\n{'text': ['Rollo', 'Rollo', 'Rollo', 'Rollo'], 'answer_start': [308, 308, 308, 308]}\n</code></pre></p> <p>\u4f8b\u3068\u3057\u3066\u3001\u30a4\u30f3\u30c7\u30c3\u30af\u30b9132\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\uff1a</p> <pre><code>print(raw_datasets[\"validation\"][132][\"context\"])\nprint(raw_datasets[\"validation\"][132][\"question\"])\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>The legendary religious zeal of the Normans was exercised in religious wars long before the First Crusade carved out a Norman principality in Antioch. They were major foreign participants in the Reconquista in Iberia. In 1018, Roger de Tosny travelled to the Iberian Peninsula to carve out a state for himself from Moorish lands, but failed. In 1064, during the War of Barbastro, William of Montreuil led the papal army and took a huge booty.\nWhat year did Roger de Tosny fail to accomplish what he set out to do?\n</code></pre></p>","tags":["\u6a5f\u68b0\u5b66\u7fd2","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","BERT","\u8cea\u554f\u5fdc\u7b54","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","SQuAD","transformers"]},{"location":"LLM/ClassicalNLP/75_question_answering/#_5","title":"\u8a13\u7df4\u30c7\u30fc\u30bf\u306e\u524d\u51e6\u7406","text":"<p>\u8a13\u7df4\u30c7\u30fc\u30bf\u306e\u524d\u51e6\u7406\u304b\u3089\u59cb\u3081\u307e\u3057\u3087\u3046\u3002\u6700\u3082\u91cd\u8981\u306a\u51e6\u7406\u306f\u3001\u8cea\u554f\u306e\u7b54\u3048\u306e\u30e9\u30d9\u30eb\u3092\u751f\u6210\u3059\u308b\u3053\u3068\u3067\u3059\u3002\u3053\u308c\u306f\u3001\u6587\u8108\u5185\u3067\u7b54\u3048\u306b\u5bfe\u5fdc\u3059\u308b\u30c8\u30fc\u30af\u30f3\u306e\u958b\u59cb\u4f4d\u7f6e\u3068\u7d42\u4e86\u4f4d\u7f6e\u306b\u306a\u308a\u307e\u3059\u3002</p> <p>\u307e\u305a\u3001tokenizer\u3092\u4f7f\u7528\u3057\u3066\u30c6\u30ad\u30b9\u30c8\u3092\u30e2\u30c7\u30eb\u304c\u7406\u89e3\u3067\u304d\u308bID\u306b\u5909\u63db\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff1a</p> <pre><code>from transformers import AutoTokenizer\n\nmodel_checkpoint = \"bert-base-cased\"\ntokenizer = AutoTokenizer.from_pretrained(model_checkpoint)\n</code></pre> <p>BERT\u30e2\u30c7\u30eb\u3092\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3057\u307e\u3059\u304c\u3001\u9ad8\u901ftokenizer\u304c\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u4ed6\u306e\u30e2\u30c7\u30eb\u30bf\u30a4\u30d7\u3082\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002<code>is_fast</code>\u5c5e\u6027\u3092\u78ba\u8a8d\u3057\u3066\u3001tokenizer\u304c\u5b9f\u969b\u306b\ud83e\udd17 Tokenizers\u306b\u3088\u3063\u3066\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u308b\u304b\u78ba\u8a8d\u3067\u304d\u307e\u3059\uff1a</p> <pre><code>tokenizer.is_fast\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>True\n</code></pre></p> <p>tokenizer\u306b\u8cea\u554f\u3068\u6587\u8108\u3092\u4e00\u7dd2\u306b\u6e21\u3059\u3053\u3068\u3067\u3001\u9069\u5207\u306a\u7279\u6b8a\u30c8\u30fc\u30af\u30f3\u304c\u633f\u5165\u3055\u308c\u305f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u6587\u304c\u5f62\u6210\u3055\u308c\u307e\u3059\uff1a</p> <pre><code>[CLS] question [SEP] context [SEP]\n</code></pre> <pre><code>context = raw_datasets[\"train\"][0][\"context\"]\nquestion = raw_datasets[\"train\"][0][\"question\"]\n\ninputs = tokenizer(question, context)\ntokenizer.decode(inputs[\"input_ids\"])\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>'[CLS] When did Beyonce start becoming popular? [SEP] Beyonc\u00c3\u00a9 Giselle Knowles - Carter ( / [UNK] / bee - YON - say ) ( born September 4, 1981 ) is an American singer, songwriter, record producer and actress. Born and raised in Houston, Texas, she performed in various singing and dancing competitions as a child, and rose to fame in the late 1990s as lead singer of R &amp; B girl - group Destiny \\' s Child. Managed by her father, Mathew Knowles, the group became one of the world \\' s best - selling girl groups of all time. Their hiatus saw the release of Beyonc\u00c3\u00a9 \\' s debut album, Dangerously in Love ( 2003 ), which established her as a solo artist worldwide, earned five Grammy Awards and featured the Billboard Hot 100 number - one singles \" Crazy in Love \" and \" Baby Boy \". [SEP]'\n</code></pre></p>","tags":["\u6a5f\u68b0\u5b66\u7fd2","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","BERT","\u8cea\u554f\u5fdc\u7b54","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","SQuAD","transformers"]},{"location":"LLM/ClassicalNLP/75_question_answering/#_6","title":"\u9577\u3044\u6587\u8108\u3078\u306e\u5bfe\u5fdc","text":"<p>\u3053\u306e\u4f8b\u3067\u306f\u6587\u8108\u306f\u9577\u3059\u304e\u307e\u305b\u3093\u304c\u3001\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u5185\u306e\u4e00\u90e8\u306e\u4f8b\u3067\u306f\u3001\u8a2d\u5b9a\u3057\u305f\u6700\u5927\u9577\uff08\u3053\u3053\u3067\u306f384\uff09\u3092\u8d85\u3048\u308b\u975e\u5e38\u306b\u9577\u3044\u6587\u8108\u304c\u3042\u308a\u307e\u3059\u3002\u9577\u3044\u6587\u8108\u3092\u51e6\u7406\u3059\u308b\u305f\u3081\u306b\u3001\u30b9\u30e9\u30a4\u30c7\u30a3\u30f3\u30b0\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u4f7f\u7528\u3057\u30661\u3064\u306e\u30b5\u30f3\u30d7\u30eb\u304b\u3089\u8907\u6570\u306e\u8a13\u7df4\u7279\u5fb4\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002</p> <p>\u73fe\u5728\u306e\u4f8b\u3092\u4f7f\u3063\u3066\u3001\u9577\u3055\u3092100\u306b\u5236\u9650\u3057\u300150\u30c8\u30fc\u30af\u30f3\u306e\u30b9\u30e9\u30a4\u30c7\u30a3\u30f3\u30b0\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u4f7f\u7528\u3059\u308b\u65b9\u6cd5\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\uff1a</p> <pre><code>inputs = tokenizer(\n    question,\n    context,\n    max_length=100,\n    truncation=\"only_second\",\n    stride=50,\n    return_overflowing_tokens=True\n)\n\nfor ids in inputs[\"input_ids\"]:\n    print(tokenizer.decode(ids))\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>[CLS] When did Beyonce start becoming popular? [SEP] Beyonc\u00c3\u00a9 Giselle Knowles - Carter ( / [UNK] / bee - YON - say ) ( born September 4, 1981 ) is an American singer, songwriter, record producer and actress. Born and raised in Houston, Texas, she performed in various singing and dancing competitions as a child, and rose to fame in the late 1990s as lead singer of R &amp; B girl - group Destiny ' s Child. Managed by her father, Mathew Knowles [SEP]\n[CLS] When did Beyonce start becoming popular? [SEP] raised in Houston, Texas, she performed in various singing and dancing competitions as a child, and rose to fame in the late 1990s as lead singer of R &amp; B girl - group Destiny ' s Child. Managed by her father, Mathew Knowles, the group became one of the world ' s best - selling girl groups of all time. Their hiatus saw the release of Beyonc\u00c3\u00a9 ' s debut album, Dangerously in Love ( 2003 ) [SEP]\n[CLS] When did Beyonce start becoming popular? [SEP] s Child. Managed by her father, Mathew Knowles, the group became one of the world ' s best - selling girl groups of all time. Their hiatus saw the release of Beyonc\u00c3\u00a9 ' s debut album, Dangerously in Love ( 2003 ), which established her as a solo artist worldwide, earned five Grammy Awards and featured the Billboard Hot 100 number - one singles \" Crazy in Love \" and \" Baby Boy \". [SEP]\n</code></pre></p> <p>\u4f8b\u304c4\u3064\u306e\u5165\u529b\u306b\u5206\u5272\u3055\u308c\u3001\u305d\u308c\u305e\u308c\u304c\u8cea\u554f\u3068\u6587\u8108\u306e\u4e00\u90e8\u3092\u542b\u3093\u3067\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\u7b54\u3048\u304c\u6587\u8108\u306b\u5b8c\u5168\u306b\u542b\u307e\u308c\u306a\u3044\u5834\u5408\u306f\u3001\u30e9\u30d9\u30eb\u3092<code>start_position = end_position = 0</code>\uff08<code>[CLS]</code>\u30c8\u30fc\u30af\u30f3\u3092\u4e88\u6e2c\uff09\u306b\u8a2d\u5b9a\u3057\u307e\u3059\u3002</p>","tags":["\u6a5f\u68b0\u5b66\u7fd2","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","BERT","\u8cea\u554f\u5fdc\u7b54","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","SQuAD","transformers"]},{"location":"LLM/ClassicalNLP/75_question_answering/#_7","title":"\u30aa\u30d5\u30bb\u30c3\u30c8\u30de\u30c3\u30d4\u30f3\u30b0\u306e\u6d3b\u7528","text":"<p>\u30aa\u30d5\u30bb\u30c3\u30c8\u30de\u30c3\u30d4\u30f3\u30b0\u3092\u53d6\u5f97\u3059\u308b\u305f\u3081\u306b\u3001<code>return_offsets_mapping=True</code>\u3092\u6e21\u3057\u307e\u3059\uff1a</p> <pre><code>inputs = tokenizer(\n    question,\n    context,\n    max_length=100,\n    truncation=\"only_second\",\n    stride=50,\n    return_overflowing_tokens=True,\n    return_offsets_mapping=True,\n)\ninputs.data.keys()\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>dict_keys(['input_ids', 'token_type_ids', 'attention_mask', 'offset_mapping', 'overflow_to_sample_mapping'])\n</code></pre></p> <p><code>overflow_to_sample_mapping</code>\u306f\u3001\u5404\u7279\u5fb4\u304c\u3069\u306e\u4f8b\u304b\u3089\u751f\u6210\u3055\u308c\u305f\u304b\u3092\u793a\u3057\u307e\u3059\uff1a</p> <pre><code>inputs[\"overflow_to_sample_mapping\"]\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>[0, 0, 0]\n</code></pre></p> <p>\u8907\u6570\u306e\u4f8b\u3092tokenize\u3059\u308b\u3068\u3001\u3053\u306e\u60c5\u5831\u304c\u3088\u308a\u6709\u7528\u306b\u306a\u308a\u307e\u3059\uff1a</p> <pre><code>inputs = tokenizer(\n    raw_datasets[\"train\"][2:6][\"question\"],\n    raw_datasets[\"train\"][2:6][\"context\"],\n    max_length=100,\n    truncation=\"only_second\",\n    stride=50,\n    return_overflowing_tokens=True,\n    return_offsets_mapping=True,\n)\n\nprint(f\"4\u3064\u306e\u4f8b\u304b\u3089{len(inputs['input_ids'])}\u500b\u306e\u7279\u5fb4\u304c\u751f\u6210\u3055\u308c\u307e\u3057\u305f\u3002\")\nprint(f\"\u5404\u7279\u5fb4\u306e\u5143\u306e\u4f8b: {inputs['overflow_to_sample_mapping']}\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>4\u3064\u306e\u4f8b\u304b\u308915\u500b\u306e\u7279\u5fb4\u304c\u751f\u6210\u3055\u308c\u307e\u3057\u305f\u3002\n\u5404\u7279\u5fb4\u306e\u5143\u306e\u4f8b: [0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 3]\n</code></pre></p>","tags":["\u6a5f\u68b0\u5b66\u7fd2","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","BERT","\u8cea\u554f\u5fdc\u7b54","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","SQuAD","transformers"]},{"location":"LLM/ClassicalNLP/75_question_answering/#_8","title":"\u30e9\u30d9\u30eb\u306e\u751f\u6210","text":"<p>\u9069\u5207\u306a\u30e9\u30d9\u30eb\u3092\u751f\u6210\u3059\u308b\u305f\u3081\u306b\u3001\u6587\u8108\u5185\u3067\u306e\u7b54\u3048\u306e\u4f4d\u7f6e\u3092\u7279\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff1a</p> <pre><code>answers = raw_datasets[\"train\"][2:6][\"answers\"]\nstart_positions = []\nend_positions = []\n\nfor i, offset in enumerate(inputs[\"offset_mapping\"]):\n    sample_idx = inputs[\"overflow_to_sample_mapping\"][i]\n    answer = answers[sample_idx]\n    start_char = answer[\"answer_start\"][0]\n    end_char = answer[\"answer_start\"][0] + len(answer[\"text\"][0])\n    sequence_ids = inputs.sequence_ids(i)\n\n    # \u6587\u8108\u306e\u958b\u59cb\u3068\u7d42\u4e86\u3092\u898b\u3064\u3051\u308b\n    idx = 0\n    while sequence_ids[idx] != 1:\n        idx += 1\n    context_start = idx\n    while sequence_ids[idx] == 1:\n        idx += 1\n    context_end = idx - 1\n\n    # \u7b54\u3048\u304c\u6587\u8108\u5185\u306b\u5b8c\u5168\u306b\u542b\u307e\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u3001\u30e9\u30d9\u30eb\u306f(0, 0)\n    if offset[context_start][0] &gt; start_char or offset[context_end][1] &lt; end_char:\n        start_positions.append(0)\n        end_positions.append(0)\n    else:\n        # \u305d\u3046\u3067\u306a\u3051\u308c\u3070\u3001\u958b\u59cb\u3068\u7d42\u4e86\u306e\u30c8\u30fc\u30af\u30f3\u4f4d\u7f6e\n        idx = context_start\n        while idx &lt;= context_end and offset[idx][0] &lt;= start_char:\n            idx += 1\n        start_positions.append(idx - 1)\n\n        idx = context_end\n        while idx &gt;= context_start and offset[idx][1] &gt;= end_char:\n            idx -= 1\n        end_positions.append(idx + 1)\n\nstart_positions, end_positions\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>([0, 0, 80, 49, 54, 19, 0, 0, 74, 37, 0, 88, 53, 18, 0],\n [0, 0, 80, 49, 56, 21, 0, 0, 75, 38, 0, 91, 56, 21, 0])\n</code></pre></p> <p>\u7d50\u679c\u3092\u691c\u8a3c\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff1a</p> <pre><code>idx = 2\nsample_idx = inputs[\"overflow_to_sample_mapping\"][idx]\nanswer = answers[sample_idx][\"text\"][0]\n\nstart = start_positions[idx]\nend = end_positions[idx]\nlabeled_answer = tokenizer.decode(inputs[\"input_ids\"][idx][start : end + 1])\n\nprint(f\"\u7406\u8ad6\u4e0a\u306e\u7b54\u3048: {answer}, \u30e9\u30d9\u30eb\u304b\u3089: {labeled_answer}\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>\u7406\u8ad6\u4e0a\u306e\u7b54\u3048: 2003, \u30e9\u30d9\u30eb\u304b\u3089: 2003\n</code></pre></p>","tags":["\u6a5f\u68b0\u5b66\u7fd2","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","BERT","\u8cea\u554f\u5fdc\u7b54","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","SQuAD","transformers"]},{"location":"LLM/ClassicalNLP/75_question_answering/#_9","title":"\u524d\u51e6\u7406\u95a2\u6570\u306e\u5b9f\u88c5","text":"<p>\u8a13\u7df4\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u5168\u4f53\u306b\u9069\u7528\u3059\u308b\u524d\u51e6\u7406\u95a2\u6570\u3092\u4f5c\u6210\u3057\u307e\u3059\uff1a</p> <pre><code>max_length = 384\nstride = 128\n\ndef preprocess_training_example(examples):\n    questions = [q.strip() for q in examples[\"question\"]]\n    inputs = tokenizer(\n        questions,\n        examples[\"context\"],\n        max_length=max_length,\n        truncation=\"only_second\",\n        stride=stride,\n        return_overflowing_tokens=True,\n        return_offsets_mapping=True,\n        padding=\"max_length\"\n    )\n\n    offset_mapping = inputs.pop(\"offset_mapping\")\n    sample_map = inputs.pop(\"overflow_to_sample_mapping\")\n    answers = examples[\"answers\"]\n    start_positions = []\n    end_positions = []\n\n    for i, offset in enumerate(offset_mapping):\n        sample_idx = sample_map[i]\n        answer = answers[sample_idx]\n        # \u7a7a\u306e\u7b54\u3048\u3092\u30c1\u30a7\u30c3\u30af\n        if (not answer or \n            not answer.get(\"answer_start\") or \n            not answer.get(\"text\") or\n            len(answer[\"answer_start\"]) == 0 or \n            len(answer[\"text\"]) == 0):\n            start_positions.append(0)\n            end_positions.append(0)\n            continue\n        start_char = answer[\"answer_start\"][0]\n        end_char = answer[\"answer_start\"][0] + len(answer[\"text\"][0])\n        sequence_ids = inputs.sequence_ids(i)\n\n        # \u6587\u8108\u306e\u958b\u59cb\u3068\u7d42\u4e86\u3092\u898b\u3064\u3051\u308b\n        idx = 0\n        while sequence_ids[idx] != 1:\n            idx += 1\n        context_start = idx\n        while sequence_ids[idx] ==1:\n            idx += 1\n        context_end = idx - 1\n\n        # \u7b54\u3048\u304c\u6587\u8108\u5185\u306b\u5b8c\u5168\u306b\u542b\u307e\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u3001\u30e9\u30d9\u30eb\u306f(0, 0)\n        if offset[context_start][0] &gt; start_char or offset[context_end][1] &lt; end_char:\n            start_positions.append(0)\n            end_positions.append(0)\n        else:\n            # \u305d\u3046\u3067\u306a\u3051\u308c\u3070\u3001\u958b\u59cb\u3068\u7d42\u4e86\u306e\u30c8\u30fc\u30af\u30f3\u4f4d\u7f6e\n            idx = context_start\n            while idx &lt;= context_end and offset[idx][0] &lt;= start_char:\n                idx += 1\n            start_positions.append(idx - 1)\n\n            idx = context_end\n            while idx &gt;= context_start and offset[idx][1] &gt;= end_char:\n                idx -= 1\n            end_positions.append(idx + 1)\n\n    inputs[\"start_positions\"] = start_positions\n    inputs[\"end_positions\"] = end_positions\n\n    return inputs\n</code></pre> <p>\u3053\u306e\u95a2\u6570\u3092\u8a13\u7df4\u30bb\u30c3\u30c8\u5168\u4f53\u306b\u9069\u7528\u3057\u307e\u3059\uff1a</p> <pre><code>train_dataset = raw_datasets[\"train\"].map(\n    preprocess_training_example,\n    batched=True,\n    remove_columns=raw_datasets[\"train\"].column_names\n)\nlen(raw_datasets[\"train\"]), len(train_dataset)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>(130319, 132079)\n</code></pre></p> <pre><code>print(train_dataset.column_names)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>['input_ids', 'token_type_ids', 'attention_mask', 'start_positions', 'end_positions']\n</code></pre></p>","tags":["\u6a5f\u68b0\u5b66\u7fd2","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","BERT","\u8cea\u554f\u5fdc\u7b54","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","SQuAD","transformers"]},{"location":"LLM/ClassicalNLP/75_question_answering/#_10","title":"\u691c\u8a3c\u30c7\u30fc\u30bf\u306e\u524d\u51e6\u7406","text":"<p>\u691c\u8a3c\u30c7\u30fc\u30bf\u306e\u524d\u51e6\u7406\u306f\u3001\u30e9\u30d9\u30eb\u3092\u751f\u6210\u3059\u308b\u5fc5\u8981\u304c\u306a\u3044\u305f\u3081\u5c11\u3057\u7c21\u5358\u3067\u3059\u3002\u91cd\u8981\u306a\u306e\u306f\u3001\u30aa\u30d5\u30bb\u30c3\u30c8\u30de\u30c3\u30d4\u30f3\u30b0\u3068\u5404\u7279\u5fb4\u3092\u5143\u306e\u4f8b\u306b\u30de\u30c3\u30c1\u3055\u305b\u308b\u65b9\u6cd5\u3092\u4fdd\u5b58\u3059\u308b\u3053\u3068\u3067\u3059\uff1a</p> <pre><code>def preprocess_validation_examples(examples):\n    questions = [q.strip() for q in examples[\"question\"]]\n    inputs = tokenizer(\n        questions,\n        examples[\"context\"],\n        max_length=max_length,\n        truncation=\"only_second\",\n        stride=stride,\n        return_overflowing_tokens=True,\n        return_offsets_mapping=True,\n        padding=\"max_length\",\n    )\n\n    sample_map = inputs.pop(\"overflow_to_sample_mapping\")\n    example_ids = []\n\n    for i in range(len(inputs[\"input_ids\"])):\n        sample_idx = sample_map[i]\n        example_ids.append(examples[\"id\"][sample_idx])\n\n        sequence_ids = inputs.sequence_ids(i)\n        offset = inputs[\"offset_mapping\"][i]\n        inputs[\"offset_mapping\"][i] = [\n            o if sequence_ids[k] == 1 else None for k, o in enumerate(offset)\n        ]\n\n    inputs[\"example_id\"] = example_ids\n    return inputs\n</code></pre> <p>\u691c\u8a3c\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u5168\u4f53\u306b\u9069\u7528\u3057\u307e\u3059\uff1a</p> <pre><code>validation_dataset = raw_datasets[\"validation\"].map(\n    preprocess_validation_examples,\n    batched=True,\n    remove_columns=raw_datasets[\"validation\"].column_names,\n)\nlen(raw_datasets[\"validation\"]), len(validation_dataset)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>(11873, 12199)\n</code></pre></p>","tags":["\u6a5f\u68b0\u5b66\u7fd2","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","BERT","\u8cea\u554f\u5fdc\u7b54","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","SQuAD","transformers"]},{"location":"LLM/ClassicalNLP/75_question_answering/#trainerapi","title":"TrainerAPI\u306b\u3088\u308b\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","text":"","tags":["\u6a5f\u68b0\u5b66\u7fd2","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","BERT","\u8cea\u554f\u5fdc\u7b54","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","SQuAD","transformers"]},{"location":"LLM/ClassicalNLP/75_question_answering/#_11","title":"\u5f8c\u51e6\u7406\u95a2\u6570\u306e\u5b9f\u88c5","text":"<p>\u30e2\u30c7\u30eb\u306e\u4e88\u6e2c\u3092\u5143\u306e\u4f8b\u306e\u30c6\u30ad\u30b9\u30c8\u30b9\u30d1\u30f3\u306b\u5909\u63db\u3059\u308b\u5f8c\u51e6\u7406\u95a2\u6570\u3092\u5b9f\u88c5\u3057\u307e\u3059\uff1a</p> <pre><code>small_eval_set = raw_datasets[\"validation\"].select(range(100))\ntrained_checkpoint = \"distilbert-base-cased-distilled-squad\"\n\ntokenizer = AutoTokenizer.from_pretrained(trained_checkpoint)\neval_set = small_eval_set.map(\n    preprocess_validation_examples,\n    batched=True,\n    remove_columns=raw_datasets[\"validation\"].column_names,\n)\n\neval_set\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>Dataset({\n    features: ['input_ids', 'attention_mask', 'offset_mapping', 'example_id'],\n    num_rows: 107\n})\n</code></pre></p> <p>tokenizer\u3092\u5143\u306b\u623b\u3057\u307e\u3059\uff1a</p> <pre><code>tokenizer = AutoTokenizer.from_pretrained(model_checkpoint)\n</code></pre> <p>\u8a13\u7df4\u6e08\u307f\u30e2\u30c7\u30eb\u3067\u4e88\u6e2c\u3092\u751f\u6210\u3057\u307e\u3059\uff1a</p> <pre><code>import torch\nfrom transformers import AutoModelForQuestionAnswering\n\neval_set_for_model = eval_set.remove_columns([\"example_id\", \"offset_mapping\"])\neval_set_for_model.set_format(\"torch\")\nprint(eval_set_for_model)\n\ndevice = torch.device(\"mps\") if torch.mps.is_available() else torch.device(\"cpu\")\nbatch = {k: eval_set_for_model[:][k].to(device) for k in eval_set_for_model.column_names}\ntrained_model = AutoModelForQuestionAnswering.from_pretrained(trained_checkpoint).to(device)\n\nwith torch.no_grad():\n    outputs = trained_model(**batch)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>Dataset({\n    features: ['input_ids', 'attention_mask'],\n    num_rows: 107\n})\n</code></pre></p> <p>logits\u3092NumPy\u914d\u5217\u306b\u5909\u63db\u3057\u307e\u3059\uff1a</p> <pre><code>start_logits = outputs.start_logits.cpu().numpy()\nend_logits = outputs.end_logits.cpu().numpy()\n</code></pre> <p>\u4f8b\u3068\u7279\u5fb4\u306e\u30de\u30c3\u30d4\u30f3\u30b0\u3092\u4f5c\u6210\u3057\u307e\u3059\uff1a</p> <pre><code>import collections\n\nexample_to_features = collections.defaultdict(list)\nfor idx, feature in enumerate(eval_set):\n    example_to_features[feature[\"example_id\"]].append(idx)\n</code></pre> <p>\u6700\u9069\u306a\u7b54\u3048\u3092\u898b\u3064\u3051\u308b\u305f\u3081\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u5b9f\u88c5\u3057\u307e\u3059\uff08SQuAD 2.0\u5bfe\u5fdc\u7248\uff09\uff1a</p> <pre><code>import numpy as np\n\nn_best = 20\nmax_answer_length = 30\npredicted_answers = []\n\nfor example in small_eval_set:\n    example_id = example[\"id\"]\n    context = example[\"context\"]\n    answers = []\n    null_scores = []  # \u5404\u7279\u5fb4\u306enull score\uff08CLS\u30c8\u30fc\u30af\u30f3\u306e\u30b9\u30b3\u30a2\uff09\n\n    for feature_index in example_to_features[example_id]:\n        start_logit = start_logits[feature_index]\n        end_logit = end_logits[feature_index]\n        offsets = eval_set[\"offset_mapping\"][feature_index]\n\n        # Null score\uff08\u7b54\u3048\u306a\u3057\u306e\u4fe1\u983c\u5ea6\uff09\u3092\u8a08\u7b97\n        null_score = start_logit[0] + end_logit[0]\n        null_scores.append(null_score)\n\n        start_indexes = np.argsort(start_logit)[-1 : -n_best - 1 : -1].tolist()\n        end_indexes = np.argsort(end_logit)[-1 : -n_best - 1 : -1].tolist()\n\n        for start_index in start_indexes:\n            for end_index in end_indexes:\n                # \u6587\u8108\u5185\u306b\u5b8c\u5168\u306b\u542b\u307e\u308c\u3066\u3044\u306a\u3044\u7b54\u3048\u3092\u30b9\u30ad\u30c3\u30d7\n                if offsets[start_index] is None or offsets[end_index] is None:\n                    continue\n                # \u9577\u3055\u304c\u4e0d\u6b63\u306a\u7b54\u3048\u3092\u30b9\u30ad\u30c3\u30d7\n                if (\n                    end_index &lt; start_index\n                    or end_index - start_index + 1 &gt; max_answer_length\n                ):\n                    continue\n\n                answer_score = start_logit[start_index] + end_logit[end_index]\n                answers.append(\n                    {\n                        \"text\": context[offsets[start_index][0] : offsets[end_index][1]],\n                        \"logit_score\": answer_score,\n                    }\n                )\n\n    # SQuAD 2.0\u306e\u91cd\u8981\u306a\u51e6\u7406\uff1a\u7b54\u3048\u306a\u3057\u5224\u5b9a\n    min_null_score = min(null_scores) if null_scores else 0.0\n\n    if answers:\n        best_answer = max(answers, key=lambda x: x[\"logit_score\"])\n        # \u7b54\u3048\u3042\u308a\u30b9\u30b3\u30a2\u3068null\u30b9\u30b3\u30a2\u3092\u6bd4\u8f03\n        score_diff = best_answer[\"logit_score\"] - min_null_score\n\n        if score_diff &gt; 0.0:  # \u95be\u5024\uff1a0.0\uff08\u8abf\u6574\u53ef\u80fd\uff09\n            # \u7b54\u3048\u3042\u308a\n            predicted_answers.append({\n                \"id\": example_id,\n                \"prediction_text\": best_answer[\"text\"],\n                \"no_answer_probability\": 0.0\n            })\n        else:\n            # \u7b54\u3048\u306a\u3057\n            predicted_answers.append({\n                \"id\": example_id,\n                \"prediction_text\": \"\",\n                \"no_answer_probability\": 1.0\n            })\n    else:\n        # \u5019\u88dc\u304c\u898b\u3064\u304b\u3089\u306a\u3044\u5834\u5408\u306f\u7b54\u3048\u306a\u3057\n        predicted_answers.append({\n            \"id\": example_id,\n            \"prediction_text\": \"\",\n            \"no_answer_probability\": 1.0\n        })\n</code></pre> <p>\u8a55\u4fa1\u30e1\u30c8\u30ea\u30af\u30b9\u3092\u8aad\u307f\u8fbc\u307f\u307e\u3059\uff1a</p> <pre><code>import evaluate\n\nmetric = evaluate.load(\"squad_v2\")\n</code></pre> <p>\u7406\u8ad6\u7684\u306a\u7b54\u3048\u306e\u5f62\u5f0f\u3092\u6e96\u5099\u3057\u307e\u3059\uff1a</p> <pre><code>theoretical_answers = [\n    {\"id\": ex[\"id\"], \"answers\": ex[\"answers\"]} for ex in small_eval_set\n]\n</code></pre> <p>\u4e88\u6e2c\u7d50\u679c\u3092\u78ba\u8a8d\u3057\u307e\u3059\uff1a</p> <pre><code>print(predicted_answers[1])\nprint(theoretical_answers[1])\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>{'id': '56ddde6b9a695914005b9629', 'prediction_text': '10th and 11th centuries', 'no_answer_probability': 0.0}\n{'id': '56ddde6b9a695914005b9629', 'answers': {'text': ['10th and 11th centuries', 'in the 10th and 11th centuries', '10th and 11th centuries', '10th and 11th centuries'], 'answer_start': [94, 87, 94, 94]}}\n</code></pre></p> <p>\u8a55\u4fa1\u95a2\u6570\u3092\u5b9f\u88c5\u3057\u307e\u3059\uff08SQuAD 2.0\u5bfe\u5fdc\u4fee\u6b63\u7248\uff09\uff1a</p> <pre><code>def evaluate_squad_format():\n    \"\"\"SQuAD 2.0\u6a19\u6e96\u5f62\u5f0f\u3067\u8a55\u4fa1\uff08\u7b54\u3048\u306a\u3057\u5bfe\u5fdc\uff09\"\"\"\n\n    # \u6b63\u3057\u3044\u5f62\u5f0f\u306b\u5909\u63db\n    formatted_predictions = []\n    formatted_references = []\n\n    for pred, ref in zip(predicted_answers, theoretical_answers):\n        # \u4e88\u6e2c\u5f62\u5f0f\uff08\u4fee\u6b63\u7248\uff1ano_answer_probability\u3092\u6b63\u3057\u304f\u8a2d\u5b9a\uff09\n        formatted_predictions.append({\n            \"id\": pred[\"id\"],\n            \"prediction_text\": pred[\"prediction_text\"],\n            \"no_answer_probability\": pred[\"no_answer_probability\"]  # \u4fee\u6b63\uff1a\u52d5\u7684\u306b\u8a2d\u5b9a\n        })\n\n        # \u53c2\u8003\u5f62\u5f0f\n        formatted_references.append({\n            \"id\": ref[\"id\"],\n            \"answers\": ref[\"answers\"]\n        })\n\n    # SQuAD\u6307\u6a19\u3092\u4f7f\u7528\n    results = metric.compute(\n        predictions=formatted_predictions,\n        references=formatted_references\n    )\n\n    return results\n\n# \u8a55\u4fa1\u3092\u5b9f\u884c\ntry:\n    results = evaluate_squad_format()\n    print(\"SQuAD\u8a55\u4fa1\u7d50\u679c:\")\n    for key, value in results.items():\n        print(f\"  {key}: {value:.4f}\")\nexcept Exception as e:\n    print(f\"SQuAD\u8a55\u4fa1\u3067\u30a8\u30e9\u30fc: {e}\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>SQuAD\u8a55\u4fa1\u7d50\u679c:\n  exact: 68.0000\n  f1: 69.7262\n  total: 100.0000\n  HasAns_exact: 73.3333\n  HasAns_f1: 77.1693\n  HasAns_total: 45.0000\n  NoAns_exact: 63.6364\n  NoAns_f1: 63.6364\n  NoAns_total: 55.0000\n  best_exact: 68.0000\n  best_exact_thresh: 0.0000\n  best_f1: 69.7262\n  best_f1_thresh: 0.0000\n</code></pre></p> <p>\u5b8c\u5168\u306a\u30e1\u30c8\u30ea\u30af\u30b9\u8a08\u7b97\u95a2\u6570\u3092\u5b9f\u88c5\u3057\u307e\u3059\uff1a</p> <pre><code>from tqdm.auto import tqdm\nimport numpy as np\n\ndef find_optimal_threshold(start_logits, end_logits, features, examples):\n    \"\"\"\u6700\u9069\u306a\u95be\u5024\u3092\u898b\u3064\u3051\u308b\u95a2\u6570\"\"\"\n    best_f1 = 0\n    best_threshold = 0\n\n    for threshold in np.arange(-5.0, 5.0, 0.5):\n        metrics = compute_metrics(\n            start_logits, end_logits, features, examples,\n            null_score_diff_threshold=threshold\n        )\n        if metrics['f1'] &gt; best_f1:\n            best_f1 = metrics['f1']\n            best_threshold = threshold\n\n    return best_threshold\n\ndef compute_metrics(start_logits, end_logits, features, examples,\n                           null_score_diff_threshold=0.0):\n    \"\"\"SQuAD 2.0\u5bfe\u5fdc\u3001\u7b54\u3048\u306a\u3057\u691c\u51fa\u3092\u30b5\u30dd\u30fc\u30c8\"\"\"\n\n    example_to_features = collections.defaultdict(list)\n    for idx, feature in enumerate(features):\n        example_to_features[feature[\"example_id\"]].append(idx)\n\n    predicted_answers = []\n\n    for example in tqdm(examples):\n        example_id = example[\"id\"]\n        context = example[\"context\"]\n        answers = []\n\n        # \u5168\u7279\u5fb4\u306enull score (CLS token score)\u3092\u53ce\u96c6\n        null_scores = []\n\n        # \u3053\u306e\u4f8b\u306b\u95a2\u9023\u3059\u308b\u5168\u7279\u5fb4\u3092\u30eb\u30fc\u30d7\u51e6\u7406\n        for feature_index in example_to_features[example_id]:\n            start_logit = start_logits[feature_index]\n            end_logit = end_logits[feature_index]\n            offsets = features[feature_index][\"offset_mapping\"]\n\n            # null score (CLS\u30c8\u30fc\u30af\u30f3\u306e\u30b9\u30b3\u30a2)\u3092\u8a08\u7b97\n            null_score = start_logit[0] + end_logit[0]\n            null_scores.append(null_score)\n\n            start_indexes = np.argsort(start_logit)[-1 : -n_best - 1 : -1].tolist()\n            end_indexes = np.argsort(end_logit)[-1 : -n_best - 1 : -1].tolist()\n\n            for start_index in start_indexes:\n                for end_index in end_indexes:\n                    # \u6587\u8108\u5185\u306b\u306a\u3044\u7b54\u3048\u3092\u30b9\u30ad\u30c3\u30d7\n                    if offsets[start_index] is None or offsets[end_index] is None:\n                        continue\n                    # \u9577\u3055\u304c\u4e0d\u9069\u5207\u306a\u7b54\u3048\u3092\u30b9\u30ad\u30c3\u30d7\n                    if (\n                        end_index &lt; start_index\n                        or end_index - start_index + 1 &gt; max_answer_length\n                    ):\n                        continue\n\n                    answer = {\n                        \"text\": context[offsets[start_index][0] : offsets[end_index][1]],\n                        \"logit_score\": start_logit[start_index] + end_logit[end_index],\n                        \"feature_index\": feature_index\n                    }\n                    answers.append(answer)\n\n        # \u6700\u9069\u306anull score\u3092\u8a08\u7b97\n        min_null_score = min(null_scores) if null_scores else 0.0\n\n        # \u6700\u9069\u306a\u7b54\u3048\u3092\u9078\u629e\n        if len(answers) &gt; 0:\n            best_answer = max(answers, key=lambda x: x[\"logit_score\"])\n\n            # SQuAD 2.0\u306e\u91cd\u8981\u306a\u70b9\uff1a\u6700\u9069\u7b54\u6848\u30b9\u30b3\u30a2\u3068null\u30b9\u30b3\u30a2\u3092\u6bd4\u8f03\n            score_diff = best_answer[\"logit_score\"] - min_null_score\n\n            if score_diff &gt; null_score_diff_threshold:\n                # \u7b54\u3048\u3042\u308a\n                predicted_answers.append({\n                    \"id\": example_id, \n                    \"prediction_text\": best_answer[\"text\"],\n                    \"no_answer_probability\": 0.0\n                })\n            else:\n                # \u7b54\u3048\u306a\u3057\n                predicted_answers.append({\n                    \"id\": example_id, \n                    \"prediction_text\": \"\",\n                    \"no_answer_probability\": 1.0\n                })\n        else:\n            # \u5019\u88dc\u7b54\u6848\u304c\u898b\u3064\u304b\u3089\u306a\u3044\u5834\u5408\u3001\u78ba\u5b9f\u306b\u7b54\u3048\u306a\u3057\n            predicted_answers.append({\n                \"id\": example_id, \n                \"prediction_text\": \"\",\n                \"no_answer_probability\": 1.0\n            })\n\n    theoretical_answers = [{\"id\": ex[\"id\"], \"answers\": ex[\"answers\"]} for ex in examples]\n    return metric.compute(predictions=predicted_answers, references=theoretical_answers)\n</code></pre> <p>\u8a55\u4fa1\u3092\u5b9f\u884c\u3057\u307e\u3059\uff1a</p> <pre><code>compute_metrics(start_logits, end_logits, eval_set, small_eval_set)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>{'exact': 68.0,\n 'f1': 69.72619047619048,\n 'total': 100,\n 'HasAns_exact': 73.33333333333333,\n 'HasAns_f1': 77.16931216931216,\n 'HasAns_total': 45,\n 'NoAns_exact': 63.63636363636363,\n 'NoAns_f1': 63.63636363636363,\n 'NoAns_total': 55,\n 'best_exact': 68.0,\n 'best_exact_thresh': 0.0,\n 'best_f1': 69.72619047619048,\n 'best_f1_thresh': 0.0}\n</code></pre></p>","tags":["\u6a5f\u68b0\u5b66\u7fd2","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","BERT","\u8cea\u554f\u5fdc\u7b54","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","SQuAD","transformers"]},{"location":"LLM/ClassicalNLP/75_question_answering/#_12","title":"\u30e2\u30c7\u30eb\u306e\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","text":"<p>\u8cea\u554f\u5fdc\u7b54\u7528\u306eBERT\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3057\u307e\u3059\uff1a</p> <pre><code>from transformers import AutoModelForQuestionAnswering\n\nmodel = AutoModelForQuestionAnswering.from_pretrained(model_checkpoint)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>Some weights of BertForQuestionAnswering were not initialized from the model checkpoint at bert-base-cased and are newly initialized: ['qa_outputs.bias', 'qa_outputs.weight']\nYou should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n</code></pre></p> <p>\u8a13\u7df4\u5f15\u6570\u3092\u8a2d\u5b9a\u3057\u307e\u3059\uff1a</p> <pre><code>from transformers import TrainingArguments\n\nargs = TrainingArguments(\n    \"bert-finetuned-squad\",\n    eval_strategy=\"no\",\n    save_strategy=\"epoch\",\n    learning_rate=2e-5,\n    num_train_epochs=3,\n    weight_decay=0.01,\n    fp16=False,\n    dataloader_pin_memory=False,\n)\n</code></pre> <p>Trainer\u30af\u30e9\u30b9\u3067\u8a13\u7df4\u3092\u958b\u59cb\u3057\u307e\u3059\uff1a</p> <pre><code>from transformers import Trainer\n\ntrainer = Trainer(\n    model=model,\n    args=args,\n    train_dataset=train_dataset,\n    eval_dataset=validation_dataset,\n    processing_class=tokenizer,\n)\n\nprint(next(model.parameters()).device) \n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>mps:0\n</code></pre></p> <pre><code># trainer.train()\n</code></pre>","tags":["\u6a5f\u68b0\u5b66\u7fd2","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","BERT","\u8cea\u554f\u5fdc\u7b54","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","SQuAD","transformers"]},{"location":"LLM/ClassicalNLP/75_question_answering/#_13","title":"\u30ab\u30b9\u30bf\u30e0\u8a13\u7df4\u30eb\u30fc\u30d7","text":"<p>\u5b8c\u5168\u306a\u8a13\u7df4\u30eb\u30fc\u30d7\u3092\u5b9f\u88c5\u3057\u3066\u3001\u5fc5\u8981\u306a\u90e8\u5206\u3092\u7c21\u5358\u306b\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u3087\u3046\u3002</p>","tags":["\u6a5f\u68b0\u5b66\u7fd2","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","BERT","\u8cea\u554f\u5fdc\u7b54","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","SQuAD","transformers"]},{"location":"LLM/ClassicalNLP/75_question_answering/#_14","title":"\u8a13\u7df4\u306e\u6e96\u5099","text":"<p>\u307e\u305a\u3001\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304b\u3089DataLoader\u3092\u69cb\u7bc9\u3057\u307e\u3059\uff1a</p> <pre><code>from torch.utils.data import DataLoader\nfrom transformers import default_data_collator\n\ntrain_dataset.set_format(\"torch\")\nvalidation_set = validation_dataset.remove_columns([\"example_id\", \"offset_mapping\"])\nvalidation_set.set_format(\"torch\")\n\ntrain_dataloader = DataLoader(\n    train_dataset,\n    shuffle=True,\n    collate_fn=default_data_collator,\n    batch_size=16,  # \u9ad8\u901f\u5316\u306e\u305f\u3081\u500d\u5897\n)\neval_dataloader = DataLoader(\n    validation_set, collate_fn=default_data_collator, batch_size=16  # \u8a55\u4fa1\u3082\u9ad8\u901f\u5316\n)\n</code></pre> <p>\u30e2\u30c7\u30eb\u3092\u518d\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3057\u307e\u3059\uff1a</p> <pre><code>model = AutoModelForQuestionAnswering.from_pretrained(model_checkpoint)\n</code></pre> <p>\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u30fc\u3092\u8a2d\u5b9a\u3057\u307e\u3059\uff1a</p> <pre><code>from torch.optim import AdamW\n\noptimizer = AdamW(model.parameters(), lr=2e-5)\n</code></pre> <p>Accelerator\u3092\u4f7f\u7528\u3057\u3066\u5206\u6563\u8a13\u7df4\u3092\u6e96\u5099\u3057\u307e\u3059\uff1a</p> <pre><code>from accelerate import Accelerator\n\naccelerator = Accelerator()\nmodel, optimizer, train_dataloader, eval_dataloader = accelerator.prepare(\n    model, optimizer, train_dataloader, eval_dataloader\n)\n</code></pre> <p>\u5b66\u7fd2\u7387\u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u30fc\u3092\u8a2d\u5b9a\u3057\u307e\u3059\uff1a</p> <pre><code>from transformers import get_scheduler\n\nnum_train_epochs = 1  # \u30af\u30a4\u30c3\u30af\u30c6\u30b9\u30c8\u7528\nnum_update_steps_per_epoch = len(train_dataloader)\nnum_training_steps = num_train_epochs * num_update_steps_per_epoch\n\nlr_scheduler = get_scheduler(\n    \"linear\",\n    optimizer=optimizer,\n    num_warmup_steps=0,\n    num_training_steps=num_training_steps,\n)\n</code></pre> <pre><code>output_dir = \"bert-finetuned-squad-accelerate\"\n</code></pre>","tags":["\u6a5f\u68b0\u5b66\u7fd2","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","BERT","\u8cea\u554f\u5fdc\u7b54","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","SQuAD","transformers"]},{"location":"LLM/ClassicalNLP/75_question_answering/#_15","title":"\u8a13\u7df4\u30eb\u30fc\u30d7\u306e\u5b9f\u884c","text":"<p>\u5b8c\u5168\u306a\u8a13\u7df4\u30eb\u30fc\u30d7\u3092\u5b9f\u88c5\u3057\u307e\u3059\uff1a</p> <pre><code>from tqdm.auto import tqdm\nimport torch\n\nprogress_bar = tqdm(range(num_training_steps))\nprint(next(model.parameters()).device)\nfor epoch in range(num_train_epochs):\n    # \u8a13\u7df4\u30d5\u30a7\u30fc\u30ba\n    model.train()\n    for step, batch in enumerate(train_dataloader):\n        outputs = model(**batch)\n        loss = outputs.loss\n        accelerator.backward(loss)\n\n        optimizer.step()\n        lr_scheduler.step()\n        optimizer.zero_grad()\n        progress_bar.update(1)\n\n    # \u8a55\u4fa1\u30d5\u30a7\u30fc\u30ba\n    model.eval()\n    start_logits = []\n    end_logits = []\n    accelerator.print(\"\u8a55\u4fa1\u4e2d!\")\n    for batch in tqdm(eval_dataloader):\n        with torch.no_grad():\n            outputs = model(**batch)\n\n        start_logits.append(accelerator.gather(outputs.start_logits).cpu().numpy())\n        end_logits.append(accelerator.gather(outputs.end_logits).cpu().numpy())\n\n    start_logits = np.concatenate(start_logits)\n    end_logits = np.concatenate(end_logits)\n    start_logits = start_logits[: len(validation_dataset)]\n    end_logits = end_logits[: len(validation_dataset)]\n\n    # \u6700\u9069\u95be\u5024\u3092\u8a08\u7b97\u3057\u3066\u30e1\u30c8\u30ea\u30af\u30b9\u3092\u8a55\u4fa1\n    best_threshold = find_optimal_threshold(\n        start_logits, end_logits, validation_dataset, raw_datasets[\"validation\"]\n    )\n\n    metrics = compute_metrics(\n        start_logits, end_logits, validation_dataset, raw_datasets[\"validation\"],\n        null_score_diff_threshold=best_threshold\n    )\n    print(f\"\u30a8\u30dd\u30c3\u30af {epoch} (\u6700\u9069\u95be\u5024: {best_threshold:.2f}):\", metrics)\n\n    # \u4fdd\u5b58\u3068\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\n    accelerator.wait_for_everyone()\n    unwrapped_model = accelerator.unwrap_model(model)\n    unwrapped_model.save_pretrained(output_dir, save_function=accelerator.save)\n    if accelerator.is_main_process:\n        tokenizer.save_pretrained(output_dir)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>\u30a8\u30dd\u30c3\u30af 0 (\u6700\u9069\u95be\u5024: 4.00): {'exact': 73.07335972374294, 'f1': 76.27284417400911, 'total': 11873, 'HasAns_exact': 66.31241565452092, 'HasAns_f1': 72.72055986471157, 'HasAns_total': 5928, 'NoAns_exact': 79.81497056349873, 'NoAns_f1': 79.81497056349873, 'NoAns_total': 5945, 'best_exact': 73.07335972374294, 'best_exact_thresh': 0.0, 'best_f1': 76.27284417400917, 'best_f1_thresh': 0.0}\n</code></pre></p>","tags":["\u6a5f\u68b0\u5b66\u7fd2","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","BERT","\u8cea\u554f\u5fdc\u7b54","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","SQuAD","transformers"]},{"location":"LLM/ClassicalNLP/75_question_answering/#_16","title":"\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u6e08\u307f\u30e2\u30c7\u30eb\u306e\u4f7f\u7528","text":"<p>\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3057\u305f\u30e2\u30c7\u30eb\u3092\u4f7f\u7528\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002</p> <pre><code>from transformers import pipeline\n\n# SQuAD 2.0\u5bfe\u5fdc\u306ePipeline\u8a2d\u5b9a\nmodel_checkpoint = \"bert-finetuned-squad-accelerate\"\nquestion_answerer = pipeline(\n    \"question-answering\",\n    model=model_checkpoint,\n    handle_impossible_answer=True,  # \u91cd\u8981\uff1aSQuAD 2.0\u30b5\u30dd\u30fc\u30c8\n    max_answer_len=30,\n    max_seq_len=384,\n    doc_stride=128\n)\n\ncontext = \"\"\"\n\ud83e\udd17 Transformers is backed by the three most popular deep learning libraries \u2014 Jax, PyTorch and TensorFlow \u2014 with a seamless integration\nbetween them. It's straightforward to train your models with one before loading them for inference with the other.\n\"\"\"\nquestion = \"Which deep learning libraries back \ud83e\udd17 Transformers?\"\n\n# \u57fa\u672c\u7684\u306a\u63a8\u8ad6\nresult = question_answerer(question=question, context=context)\nprint(f\"\u7b54\u3048: {result['answer']}\")\nprint(f\"\u30b9\u30b3\u30a2: {result['score']:.4f}\")\nprint(f\"\u958b\u59cb\u4f4d\u7f6e: {result['start']}\")\nprint(f\"\u7d42\u4e86\u4f4d\u7f6e: {result['end']}\")\n\n# \u8907\u6570\u306e\u5019\u88dc\u3092\u53d6\u5f97\uff08\u3088\u308a\u8a73\u7d30\u306a\u5206\u6790\uff09\nresults = question_answerer(\n    question=question,\n    context=context,\n    top_k=3  # \u30c8\u30c3\u30d73\u306e\u5019\u88dc\u3092\u53d6\u5f97\n)\nprint(\"\\n\u30c8\u30c3\u30d73\u306e\u5019\u88dc:\")\nfor i, res in enumerate(results):\n    print(f\"{i+1}. {res['answer']} (\u30b9\u30b3\u30a2: {res['score']:.4f})\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>\u7b54\u3048: Jax, PyTorch and TensorFlow\n\u30b9\u30b3\u30a2: 0.8929\n\u958b\u59cb\u4f4d\u7f6e: 78\n\u7d42\u4e86\u4f4d\u7f6e: 105\n\n\u30c8\u30c3\u30d73\u306e\u5019\u88dc:\n1. Jax, PyTorch and TensorFlow (\u30b9\u30b3\u30a2: 0.8929)\n2. Jax, PyTorch and TensorFlow \u2014 (\u30b9\u30b3\u30a2: 0.0314)\n3.  (\u30b9\u30b3\u30a2: 0.0012)\n</code></pre></p>","tags":["\u6a5f\u68b0\u5b66\u7fd2","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","BERT","\u8cea\u554f\u5fdc\u7b54","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","SQuAD","transformers"]},{"location":"LLM/ClassicalNLP/75_question_answering/#_17","title":"\u8a55\u4fa1\u6307\u6a19\u306e\u89e3\u8aac","text":"","tags":["\u6a5f\u68b0\u5b66\u7fd2","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","BERT","\u8cea\u554f\u5fdc\u7b54","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","SQuAD","transformers"]},{"location":"LLM/ClassicalNLP/75_question_answering/#exact-match-em","title":"Exact Match (EM)","text":"<p>\u4e88\u6e2c\u3057\u305f\u7b54\u3048\u304c\u6b63\u89e3\u3068\u5b8c\u5168\u306b\u4e00\u81f4\u3059\u308b\u5272\u5408\u3067\u3059\u3002\u5927\u6587\u5b57\u5c0f\u6587\u5b57\u3084\u53e5\u8aad\u70b9\u306f\u7121\u8996\u3055\u308c\u307e\u3059\u3002</p>","tags":["\u6a5f\u68b0\u5b66\u7fd2","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","BERT","\u8cea\u554f\u5fdc\u7b54","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","SQuAD","transformers"]},{"location":"LLM/ClassicalNLP/75_question_answering/#f1","title":"F1\u30b9\u30b3\u30a2","text":"<p>\u4e88\u6e2c\u3068\u6b63\u89e3\u306e\u9593\u3067\u306e\u5358\u8a9e\u30ec\u30d9\u30eb\u306e\u91cd\u8907\u3092\u6e2c\u5b9a\u3057\u307e\u3059\u3002\u5404\u4e88\u6e2c-\u6b63\u89e3\u30da\u30a2\u306b\u5bfe\u3057\u3066F1\u30b9\u30b3\u30a2\u3092\u8a08\u7b97\u3057\u3001\u6700\u5927\u5024\u3092\u53d6\u308a\u307e\u3059\u3002</p>","tags":["\u6a5f\u68b0\u5b66\u7fd2","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","BERT","\u8cea\u554f\u5fdc\u7b54","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","SQuAD","transformers"]},{"location":"LLM/ClassicalNLP/75_question_answering/#squad-20","title":"SQuAD 2.0\u7279\u6709\u306e\u6307\u6a19","text":"<ul> <li>HasAns: \u7b54\u3048\u304c\u3042\u308b\u8cea\u554f\u306e\u307f\u306e\u6027\u80fd</li> <li>NoAns: \u7b54\u3048\u304c\u306a\u3044\u8cea\u554f\u306e\u307f\u306e\u6027\u80fd</li> <li>best_exact/best_f1: \u6700\u9069\u306a\u95be\u5024\u3067\u306e\u6027\u80fd</li> </ul>","tags":["\u6a5f\u68b0\u5b66\u7fd2","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","BERT","\u8cea\u554f\u5fdc\u7b54","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","SQuAD","transformers"]},{"location":"LLM/ClassicalNLP/75_question_answering/#_18","title":"\u307e\u3068\u3081","text":"<p>\u3053\u306e\u8a18\u4e8b\u3067\u306f\u3001BERT\u30e2\u30c7\u30eb\u3092SQuAD\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3067\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3057\u3066\u8cea\u554f\u5fdc\u7b54\u30b7\u30b9\u30c6\u30e0\u3092\u69cb\u7bc9\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3057\u305f\u3002\u4e3b\u306a\u30dd\u30a4\u30f3\u30c8\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\uff1a</p> <ol> <li>\u30c7\u30fc\u30bf\u524d\u51e6\u7406: \u9577\u3044\u6587\u8108\u3092\u9069\u5207\u306b\u5206\u5272\u3057\u3001\u30aa\u30d5\u30bb\u30c3\u30c8\u30de\u30c3\u30d4\u30f3\u30b0\u3092\u6d3b\u7528\u3057\u3066\u30e9\u30d9\u30eb\u3092\u751f\u6210</li> <li>\u30e2\u30c7\u30eb\u5b66\u7fd2: TrainerAPI\u3068\u30ab\u30b9\u30bf\u30e0\u8a13\u7df4\u30eb\u30fc\u30d7\u306e\u4e21\u65b9\u3092\u5b9f\u88c5</li> <li>\u8a55\u4fa1: SQuAD 2.0\u306e\u8907\u96d1\u306a\u8a55\u4fa1\u6307\u6a19\u3092\u7406\u89e3\u3057\u3001\u7b54\u3048\u306e\u306a\u3044\u8cea\u554f\u3078\u306e\u5bfe\u5fdc</li> <li>\u5f8c\u51e6\u7406: \u30e2\u30c7\u30eb\u306e\u4e88\u6e2c\u3092\u30c6\u30ad\u30b9\u30c8\u30b9\u30d1\u30f3\u306b\u5909\u63db\u3059\u308b\u52b9\u7387\u7684\u306a\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0</li> </ol> <p>\u6700\u7d42\u7684\u306b\u5f97\u3089\u308c\u305f\u30e2\u30c7\u30eb\u306f\u3001\u7d0476%\u306eF1\u30b9\u30b3\u30a2\u3092\u9054\u6210\u3057\u3001\u5b9f\u7528\u7684\u306a\u8cea\u554f\u5fdc\u7b54\u30b7\u30b9\u30c6\u30e0\u3068\u3057\u3066\u6d3b\u7528\u3067\u304d\u307e\u3059\u3002</p>","tags":["\u6a5f\u68b0\u5b66\u7fd2","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","BERT","\u8cea\u554f\u5fdc\u7b54","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","SQuAD","transformers"]},{"location":"LLM/ClassicalNLP/75_question_answering/#_19","title":"\u53c2\u8003\u8cc7\u6599","text":"<ul> <li>SQuAD Dataset</li> <li>Hugging Face Transformers Documentation</li> <li>BERT: Pre-training of Deep Bidirectional Transformers</li> <li>SQuAD 2.0 Paper</li> </ul>","tags":["\u6a5f\u68b0\u5b66\u7fd2","\u81ea\u7136\u8a00\u8a9e\u51e6\u7406","BERT","\u8cea\u554f\u5fdc\u7b54","\u30d5\u30a1\u30a4\u30f3\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","SQuAD","transformers"]},{"location":"PyTorch/00_setup/","title":"PyTorch\u74b0\u5883\u69cb\u7bc9\u30ac\u30a4\u30c9\uff08Apple Silicon Mac\uff09","text":"<p>\u3053\u306e\u30ac\u30a4\u30c9\u3067\u306f\u3001Apple Silicon Mac\u3067PyTorch\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3092\u5b9f\u884c\u3059\u308b\u305f\u3081\u306e\u74b0\u5883\u69cb\u7bc9\u65b9\u6cd5\u3092\u89e3\u8aac\u3057\u307e\u3059\u3002</p>","tags":["\u74b0\u5883\u69cb\u7bc9","PyTorch","Python","\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7","\u521d\u5fc3\u8005\u5411\u3051","Apple Silicon","MPS"]},{"location":"PyTorch/00_setup/#_1","title":"\u5fc5\u8981\u306a\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2","text":"","tags":["\u74b0\u5883\u69cb\u7bc9","PyTorch","Python","\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7","\u521d\u5fc3\u8005\u5411\u3051","Apple Silicon","MPS"]},{"location":"PyTorch/00_setup/#_2","title":"\u57fa\u672c\u8981\u4ef6","text":"<ul> <li>Python 3.9\u4ee5\u4e0a \uff08\u63a8\u5968: 3.11\uff09</li> <li>Conda \u307e\u305f\u306f pip</li> <li>Git\uff08\u30aa\u30d7\u30b7\u30e7\u30f3\uff1a\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u7ba1\u7406\u7528\uff09</li> </ul>","tags":["\u74b0\u5883\u69cb\u7bc9","PyTorch","Python","\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7","\u521d\u5fc3\u8005\u5411\u3051","Apple Silicon","MPS"]},{"location":"PyTorch/00_setup/#gpu","title":"GPU\u4f7f\u7528\u6642\u306e\u8ffd\u52a0\u8981\u4ef6","text":"<ul> <li>Apple Silicon Mac\uff08M1/M2/M3\u30c1\u30c3\u30d7\uff09</li> <li>MPS\uff08Metal Performance Shaders\uff09\u5bfe\u5fdc</li> </ul>","tags":["\u74b0\u5883\u69cb\u7bc9","PyTorch","Python","\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7","\u521d\u5fc3\u8005\u5411\u3051","Apple Silicon","MPS"]},{"location":"PyTorch/00_setup/#_3","title":"\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u624b\u9806","text":"","tags":["\u74b0\u5883\u69cb\u7bc9","PyTorch","Python","\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7","\u521d\u5fc3\u8005\u5411\u3051","Apple Silicon","MPS"]},{"location":"PyTorch/00_setup/#1-conda","title":"1. Conda\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb","text":"<pre><code># Miniconda\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u30fb\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\ncurl -O https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-arm64.sh\nbash Miniconda3-latest-MacOSX-arm64.sh\n</code></pre>","tags":["\u74b0\u5883\u69cb\u7bc9","PyTorch","Python","\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7","\u521d\u5fc3\u8005\u5411\u3051","Apple Silicon","MPS"]},{"location":"PyTorch/00_setup/#2","title":"2. \u4eee\u60f3\u74b0\u5883\u306e\u4f5c\u6210","text":"<pre><code># \u65b0\u3057\u3044\u74b0\u5883\u3092\u4f5c\u6210\nconda create -n pytorch-tutorial python=3.11\nconda activate pytorch-tutorial\n</code></pre>","tags":["\u74b0\u5883\u69cb\u7bc9","PyTorch","Python","\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7","\u521d\u5fc3\u8005\u5411\u3051","Apple Silicon","MPS"]},{"location":"PyTorch/00_setup/#3-pytorchmps","title":"3. PyTorch\uff08MPS\u5bfe\u5fdc\u7248\uff09\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb","text":"<pre><code># MPS\uff08Metal Performance Shaders\uff09\u5bfe\u5fdcPyTorch\nconda install pytorch torchvision torchaudio -c pytorch\n</code></pre>","tags":["\u74b0\u5883\u69cb\u7bc9","PyTorch","Python","\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7","\u521d\u5fc3\u8005\u5411\u3051","Apple Silicon","MPS"]},{"location":"PyTorch/00_setup/#4","title":"4. \u8ffd\u52a0\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb","text":"<pre><code># \u6a5f\u68b0\u5b66\u7fd2\u30fb\u53ef\u8996\u5316\u30e9\u30a4\u30d6\u30e9\u30ea\nconda install matplotlib pandas numpy scikit-learn jupyter\nconda install requests tqdm -c conda-forge\n</code></pre>","tags":["\u74b0\u5883\u69cb\u7bc9","PyTorch","Python","\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7","\u521d\u5fc3\u8005\u5411\u3051","Apple Silicon","MPS"]},{"location":"PyTorch/00_setup/#conda-vs-pip","title":"Conda vs pip \u306e\u4f7f\u3044\u5206\u3051","text":"","tags":["\u74b0\u5883\u69cb\u7bc9","PyTorch","Python","\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7","\u521d\u5fc3\u8005\u5411\u3051","Apple Silicon","MPS"]},{"location":"PyTorch/00_setup/#conda","title":"Conda\u63a8\u5968\u30b1\u30fc\u30b9","text":"<ul> <li>GPU\u5bfe\u5fdcPyTorch: MPS\u3068\u306e\u4e92\u63db\u6027\u304c\u91cd\u8981</li> <li>\u79d1\u5b66\u8a08\u7b97\u30e9\u30a4\u30d6\u30e9\u30ea: NumPy\u3001SciPy\u3001matplotlib\u306a\u3069</li> <li>\u30d0\u30a4\u30ca\u30ea\u4f9d\u5b58\u95a2\u4fc2: \u30b3\u30f3\u30d1\u30a4\u30eb\u6e08\u307f\u30d1\u30c3\u30b1\u30fc\u30b8\u3067\u9ad8\u901f\u52d5\u4f5c</li> </ul>","tags":["\u74b0\u5883\u69cb\u7bc9","PyTorch","Python","\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7","\u521d\u5fc3\u8005\u5411\u3051","Apple Silicon","MPS"]},{"location":"PyTorch/00_setup/#pip","title":"pip\u63a8\u5968\u30b1\u30fc\u30b9","text":"<ul> <li>\u7d14\u7c8b\u306aPython\u30d1\u30c3\u30b1\u30fc\u30b8: requests\u3084tqdm\u306a\u3069</li> <li>\u6700\u65b0\u7248\u304c\u5fc5\u8981: conda-forge\u306b\u7121\u3044\u5834\u5408</li> <li>\u8efd\u91cf\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb: \u6700\u5c0f\u9650\u306e\u4f9d\u5b58\u95a2\u4fc2</li> </ul>","tags":["\u74b0\u5883\u69cb\u7bc9","PyTorch","Python","\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7","\u521d\u5fc3\u8005\u5411\u3051","Apple Silicon","MPS"]},{"location":"PyTorch/00_setup/#_4","title":"\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u78ba\u8a8d","text":"","tags":["\u74b0\u5883\u69cb\u7bc9","PyTorch","Python","\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7","\u521d\u5fc3\u8005\u5411\u3051","Apple Silicon","MPS"]},{"location":"PyTorch/00_setup/#gpu_1","title":"GPU\u4f7f\u7528\u53ef\u5426\u306e\u78ba\u8a8d","text":"<pre><code>import torch\n\n# PyTorch\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u78ba\u8a8d\nprint(f\"PyTorch version: {torch.__version__}\")\n\n# MPS\u4f7f\u7528\u53ef\u80fd\u6027\u306e\u78ba\u8a8d\nif torch.backends.mps.is_available():\n    print(\"MPS (Metal Performance Shaders) available\")\nelse:\n    print(\"CPU only\")\n\n# \u63a8\u5968\u30c7\u30d0\u30a4\u30b9\u306e\u78ba\u8a8d\ndevice = \"mps\" if torch.backends.mps.is_available() else \"cpu\"\nprint(f\"Recommended device: {device}\")\n</code></pre>","tags":["\u74b0\u5883\u69cb\u7bc9","PyTorch","Python","\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7","\u521d\u5fc3\u8005\u5411\u3051","Apple Silicon","MPS"]},{"location":"PyTorch/00_setup/#_5","title":"\u57fa\u672c\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u78ba\u8a8d","text":"<pre><code># \u5fc5\u8981\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\u30c6\u30b9\u30c8\nimport torch\nimport torchvision\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport requests\nfrom tqdm import tqdm\n\nprint(\"All libraries imported successfully!\")\n</code></pre>","tags":["\u74b0\u5883\u69cb\u7bc9","PyTorch","Python","\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7","\u521d\u5fc3\u8005\u5411\u3051","Apple Silicon","MPS"]},{"location":"PyTorch/00_setup/#_6","title":"\u3088\u304f\u3042\u308b\u30a8\u30e9\u30fc\u3068\u89e3\u6c7a\u65b9\u6cd5","text":"","tags":["\u74b0\u5883\u69cb\u7bc9","PyTorch","Python","\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7","\u521d\u5fc3\u8005\u5411\u3051","Apple Silicon","MPS"]},{"location":"PyTorch/00_setup/#mps","title":"MPS\u95a2\u9023\u30a8\u30e9\u30fc","text":"","tags":["\u74b0\u5883\u69cb\u7bc9","PyTorch","Python","\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7","\u521d\u5fc3\u8005\u5411\u3051","Apple Silicon","MPS"]},{"location":"PyTorch/00_setup/#mps-backend-doesnt-support","title":"\u30a8\u30e9\u30fc: \"MPS backend doesn't support...\"","text":"<pre><code># \u89e3\u6c7a\u65b9\u6cd5: CPU\u306b\u30d5\u30a9\u30fc\u30eb\u30d0\u30c3\u30af\ndevice = \"mps\" if torch.backends.mps.is_available() else \"cpu\"\n# \u7279\u5b9a\u306e\u64cd\u4f5c\u3067\u30a8\u30e9\u30fc\u304c\u51fa\u308b\u5834\u5408\ntensor = tensor.to(\"cpu\")  # \u4e00\u6642\u7684\u306bCPU\u3067\u5b9f\u884c\n</code></pre>","tags":["\u74b0\u5883\u69cb\u7bc9","PyTorch","Python","\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7","\u521d\u5fc3\u8005\u5411\u3051","Apple Silicon","MPS"]},{"location":"PyTorch/00_setup/#runtimeerror-mps-backend-out-of-memory","title":"\u30a8\u30e9\u30fc: \"RuntimeError: MPS backend out of memory\"","text":"<pre><code># \u89e3\u6c7a\u65b9\u6cd51: \u30d0\u30c3\u30c1\u30b5\u30a4\u30ba\u3092\u5c0f\u3055\u304f\u3059\u308b\nBATCH_SIZE = 16  # 32\u304b\u308916\u306b\u5909\u66f4\n\n# \u89e3\u6c7a\u65b9\u6cd52: MPS\u30e1\u30e2\u30ea\u3092\u30af\u30ea\u30a2\ntorch.mps.empty_cache()\n</code></pre>","tags":["\u74b0\u5883\u69cb\u7bc9","PyTorch","Python","\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7","\u521d\u5fc3\u8005\u5411\u3051","Apple Silicon","MPS"]},{"location":"PyTorch/00_setup/#_7","title":"\u6b21\u306e\u30b9\u30c6\u30c3\u30d7","text":"<p>\u74b0\u5883\u69cb\u7bc9\u304c\u5b8c\u4e86\u3057\u305f\u3089\uff1a</p> <ol> <li>PyTorch fundamentals \u3067\u30c6\u30f3\u30bd\u30eb\u64cd\u4f5c\u3092\u5b66\u7fd2</li> <li>PyTorch workflow \u3067\u6a5f\u68b0\u5b66\u7fd2\u306e\u6d41\u308c\u3092\u7406\u89e3</li> <li>\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30eb\u30fc\u30c8\u306e<code>requirements.txt</code>\u3067\u8ffd\u52a0\u4f9d\u5b58\u95a2\u4fc2\u3092\u78ba\u8a8d</li> </ol>","tags":["\u74b0\u5883\u69cb\u7bc9","PyTorch","Python","\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7","\u521d\u5fc3\u8005\u5411\u3051","Apple Silicon","MPS"]},{"location":"PyTorch/01_pytorch_fundamentals/","title":"PyTorch\u57fa\u790e\uff1a\u30c6\u30f3\u30bd\u30eb\u64cd\u4f5c\u304b\u3089\u59cb\u3081\u308b\u6df1\u5c64\u5b66\u7fd2","text":"","tags":["PyTorch","\u6df1\u5c64\u5b66\u7fd2","\u30c6\u30f3\u30bd\u30eb","Python","\u6a5f\u68b0\u5b66\u7fd2","\u521d\u5fc3\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u57fa\u790e"]},{"location":"PyTorch/01_pytorch_fundamentals/#_1","title":"\u6982\u8981","text":"<p>\u3053\u306e\u8a18\u4e8b\u3067\u306f\u3001PyTorch\u306e\u6700\u3082\u91cd\u8981\u306a\u6982\u5ff5\u3067\u3042\u308b\u300c\u30c6\u30f3\u30bd\u30eb\u300d\u306b\u3064\u3044\u3066\u57fa\u790e\u304b\u3089\u5b66\u7fd2\u3057\u307e\u3059\u3002\u30c6\u30f3\u30bd\u30eb\u306f\u6df1\u5c64\u5b66\u7fd2\u306b\u304a\u3051\u308b\u6570\u5024\u8a08\u7b97\u306e\u57fa\u672c\u5358\u4f4d\u3067\u3042\u308a\u3001PyTorch\u3092\u4f7f\u3044\u3053\u306a\u3059\u305f\u3081\u306b\u5fc5\u9808\u306e\u77e5\u8b58\u3067\u3059\u3002</p>","tags":["PyTorch","\u6df1\u5c64\u5b66\u7fd2","\u30c6\u30f3\u30bd\u30eb","Python","\u6a5f\u68b0\u5b66\u7fd2","\u521d\u5fc3\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u57fa\u790e"]},{"location":"PyTorch/01_pytorch_fundamentals/#_2","title":"\u5b66\u7fd2\u76ee\u6a19","text":"<ul> <li>\u30c6\u30f3\u30bd\u30eb\u306e\u6982\u5ff5\u3068\u7a2e\u985e\u3092\u7406\u89e3\u3059\u308b</li> <li>PyTorch\u3067\u306e\u57fa\u672c\u7684\u306a\u30c6\u30f3\u30bd\u30eb\u64cd\u4f5c\u3092\u30de\u30b9\u30bf\u30fc\u3059\u308b</li> <li>GPU\uff08MPS\uff09\u3092\u6d3b\u7528\u3057\u305f\u9ad8\u901f\u8a08\u7b97\u306e\u65b9\u6cd5\u3092\u5b66\u3076</li> <li>\u5b9f\u969b\u306e\u30b3\u30fc\u30c9\u3092\u901a\u3058\u3066\u5b9f\u8df5\u7684\u306a\u6280\u8853\u3092\u8eab\u306b\u3064\u3051\u308b</li> </ul>","tags":["PyTorch","\u6df1\u5c64\u5b66\u7fd2","\u30c6\u30f3\u30bd\u30eb","Python","\u6a5f\u68b0\u5b66\u7fd2","\u521d\u5fc3\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u57fa\u790e"]},{"location":"PyTorch/01_pytorch_fundamentals/#_3","title":"\u524d\u63d0\u77e5\u8b58","text":"<ul> <li>Python\u57fa\u790e\uff08\u30ea\u30b9\u30c8\u3001\u95a2\u6570\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\uff09</li> <li>\u6570\u5b66\u57fa\u790e\uff08\u884c\u5217\u3001\u30d9\u30af\u30c8\u30eb\u306e\u6982\u5ff5\uff09</li> <li>Jupyter Notebook\u306e\u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9</li> </ul>","tags":["PyTorch","\u6df1\u5c64\u5b66\u7fd2","\u30c6\u30f3\u30bd\u30eb","Python","\u6a5f\u68b0\u5b66\u7fd2","\u521d\u5fc3\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u57fa\u790e"]},{"location":"PyTorch/01_pytorch_fundamentals/#_4","title":"\u74b0\u5883\u8a2d\u5b9a\u3068\u30e9\u30a4\u30d6\u30e9\u30ea\u30a4\u30f3\u30dd\u30fc\u30c8","text":"<p>\u307e\u305a\u3001\u5fc5\u8981\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u3001Mac\u74b0\u5883\u3067\u306eMPS\uff08Metal Performance Shaders\uff09\u304c\u5229\u7528\u53ef\u80fd\u304b\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002</p> <pre><code>import torch\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# MPS\u304c\u5229\u7528\u3055\u308c\u3066\u3044\u308b\u304b\u3092\u78ba\u8a8d\n# \u671f\u5f85\u5024\u3000tensor([1.], device='mps:0')\nif torch.backends.mps.is_available():\n    mps_device = torch.device(\"mps\")\n    x = torch.ones(1, device=mps_device)\n    print (x)\nelse:\n    print (\"MPS device not found.\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>tensor([1.], device='mps:0')\n</code></pre></p> <p>MPS\u30c7\u30d0\u30a4\u30b9\u304c\u6b63\u5e38\u306b\u8a8d\u8b58\u3055\u308c\u3001GPU\u52a0\u901f\u304c\u5229\u7528\u53ef\u80fd\u3067\u3042\u308b\u3053\u3068\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3057\u305f\u3002</p>","tags":["PyTorch","\u6df1\u5c64\u5b66\u7fd2","\u30c6\u30f3\u30bd\u30eb","Python","\u6a5f\u68b0\u5b66\u7fd2","\u521d\u5fc3\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u57fa\u790e"]},{"location":"PyTorch/01_pytorch_fundamentals/#_5","title":"\u30c6\u30f3\u30bd\u30eb\u306e\u57fa\u790e\u6982\u5ff5","text":"","tags":["PyTorch","\u6df1\u5c64\u5b66\u7fd2","\u30c6\u30f3\u30bd\u30eb","Python","\u6a5f\u68b0\u5b66\u7fd2","\u521d\u5fc3\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u57fa\u790e"]},{"location":"PyTorch/01_pytorch_fundamentals/#0","title":"\u30b9\u30ab\u30e9\u30fc\uff080\u6b21\u5143\u30c6\u30f3\u30bd\u30eb\uff09","text":"<p>\u30b9\u30ab\u30e9\u30fc\u306f\u5358\u4e00\u306e\u6570\u5024\u3092\u8868\u3059\u6700\u3082\u30b7\u30f3\u30d7\u30eb\u306a\u30c6\u30f3\u30bd\u30eb\u3067\u3059\u3002</p> <pre><code># scalar 1\u3064\u306e\u6570\u5b57\nscalar = torch.tensor(7)\nprint(scalar.ndim)  # \u6b21\u5143\u6570\u3092\u8868\u793a\n# \u5358\u4e00\u306e\u5024\u3092\u542b\u3080\u30c6\u30f3\u30bd\u30eb\u304b\u3089Python\u306e\u6570\u5024\u3092\u53d6\u5f97\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3057\u307e\u3059\nprint(scalar.item())  # Python\u306e\u6570\u5024\u3068\u3057\u3066\u53d6\u5f97\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>0\n7\n</code></pre></p> <p>\u30dd\u30a4\u30f3\u30c8: - <code>ndim</code>\u3067\u6b21\u5143\u6570\u3092\u78ba\u8a8d\uff08\u30b9\u30ab\u30e9\u30fc\u306f0\u6b21\u5143\uff09 - <code>item()</code>\u3067Python\u306e\u6a19\u6e96\u7684\u306a\u6570\u5024\u578b\u306b\u5909\u63db</p>","tags":["PyTorch","\u6df1\u5c64\u5b66\u7fd2","\u30c6\u30f3\u30bd\u30eb","Python","\u6a5f\u68b0\u5b66\u7fd2","\u521d\u5fc3\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u57fa\u790e"]},{"location":"PyTorch/01_pytorch_fundamentals/#1","title":"\u30d9\u30af\u30c8\u30eb\uff081\u6b21\u5143\u30c6\u30f3\u30bd\u30eb\uff09","text":"<p>\u30d9\u30af\u30c8\u30eb\u306f\u6570\u5024\u306e1\u6b21\u5143\u914d\u5217\u3067\u3001\u65b9\u5411\u3068\u5927\u304d\u3055\u3092\u6301\u3064\u91cf\u3092\u8868\u73fe\u3067\u304d\u307e\u3059\u3002</p> <pre><code># Vector \u65b9\u5411\u3092\u6301\u3064\u6570\u5024\uff08\u4f8b: \u98a8\u901f\u3068\u65b9\u5411\uff09\u3067\u3059\u304c\u3001\u4ed6\u306e\u591a\u304f\u306e\u6570\u5024\u3092\u6301\u3064\u3053\u3068\u3082\u3067\u304d\u307e\u3059\nvector = torch.tensor([7, 7])\nvector.ndim, vector.shape\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>(1, torch.Size([2]))\n</code></pre></p>","tags":["PyTorch","\u6df1\u5c64\u5b66\u7fd2","\u30c6\u30f3\u30bd\u30eb","Python","\u6a5f\u68b0\u5b66\u7fd2","\u521d\u5fc3\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u57fa\u790e"]},{"location":"PyTorch/01_pytorch_fundamentals/#2","title":"\u884c\u5217\uff082\u6b21\u5143\u30c6\u30f3\u30bd\u30eb\uff09","text":"<p>\u884c\u5217\u306f\u6570\u5024\u306e2\u6b21\u5143\u914d\u5217\u3067\u3001\u753b\u50cf\u30c7\u30fc\u30bf\u3084\u8868\u5f62\u5f0f\u30c7\u30fc\u30bf\u306e\u8868\u73fe\u306b\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002</p> <pre><code># Matrix \u6570\u5024\u306e2\u6b21\u5143\u914d\u5217\n# \u5927\u6587\u5b57\u306f\u4e00\u822c\u7684\u3067\u3059\nMATRIX = torch.tensor([[1, 3],\n                       [2, 4]])\nprint(MATRIX)\nprint(MATRIX.ndim)\nprint(MATRIX.shape)\nprint(MATRIX[0])  # \u6700\u521d\u306e\u884c\u3092\u53d6\u5f97\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>tensor([[1, 3],\n        [2, 4]])\n2\ntorch.Size([2, 2])\ntensor([1, 3])\n</code></pre></p>","tags":["PyTorch","\u6df1\u5c64\u5b66\u7fd2","\u30c6\u30f3\u30bd\u30eb","Python","\u6a5f\u68b0\u5b66\u7fd2","\u521d\u5fc3\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u57fa\u790e"]},{"location":"PyTorch/01_pytorch_fundamentals/#3","title":"\u9ad8\u6b21\u5143\u30c6\u30f3\u30bd\u30eb\uff083\u6b21\u5143\u4ee5\u4e0a\uff09","text":"<p>3\u6b21\u5143\u4ee5\u4e0a\u306e\u30c6\u30f3\u30bd\u30eb\u306f\u3001\u30ab\u30e9\u30fc\u753b\u50cf\u3001\u52d5\u753b\u3001\u30d0\u30c3\u30c1\u30c7\u30fc\u30bf\u306a\u3069\u306e\u8907\u96d1\u306a\u69cb\u9020\u3092\u8868\u73fe\u3057\u307e\u3059\u3002</p> <pre><code># Tensor \u6570\u5024\u306en\u6b21\u5143\u914d\u5217\n# \u5927\u6587\u5b57\u306f\u4e00\u822c\u7684\u3067\u3059\nTENSOR = torch.tensor([[[1, 2, 3],\n                        [3, 4, 5],\n                        [5, 6, 7]]])\nprint(TENSOR)\nprint(TENSOR.ndim)\nprint(TENSOR.shape)\nprint(TENSOR[0][1][1])  # \u7279\u5b9a\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>tensor([[[1, 2, 3],\n         [3, 4, 5],\n         [5, 6, 7]]])\n3\ntorch.Size([1, 3, 3])\ntensor(4)\n</code></pre></p>","tags":["PyTorch","\u6df1\u5c64\u5b66\u7fd2","\u30c6\u30f3\u30bd\u30eb","Python","\u6a5f\u68b0\u5b66\u7fd2","\u521d\u5fc3\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u57fa\u790e"]},{"location":"PyTorch/01_pytorch_fundamentals/#_6","title":"\u30e9\u30f3\u30c0\u30e0\u30c6\u30f3\u30bd\u30eb\u306e\u91cd\u8981\u6027","text":"","tags":["PyTorch","\u6df1\u5c64\u5b66\u7fd2","\u30c6\u30f3\u30bd\u30eb","Python","\u6a5f\u68b0\u5b66\u7fd2","\u521d\u5fc3\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u57fa\u790e"]},{"location":"PyTorch/01_pytorch_fundamentals/#_7","title":"\u306a\u305c\u30e9\u30f3\u30c0\u30e0\u30c6\u30f3\u30bd\u30eb\u304c\u91cd\u8981\u306a\u306e\u304b\uff1f","text":"<p>\u6a5f\u68b0\u5b66\u7fd2\u30e2\u30c7\u30eb\u306f\u901a\u5e38\u3001\u30e9\u30f3\u30c0\u30e0\u306a\u5024\u3067\u521d\u671f\u5316\u3055\u308c\u305f\u30c6\u30f3\u30bd\u30eb\u304b\u3089\u5b66\u7fd2\u3092\u958b\u59cb\u3057\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u30e2\u30c7\u30eb\u304c\u5b66\u7fd2\u30c7\u30fc\u30bf\u304b\u3089\u6700\u9069\u306a\u30d1\u30bf\u30fc\u30f3\u3092\u767a\u898b\u3059\u308b\u305f\u3081\u306e\u30b9\u30bf\u30fc\u30c8\u5730\u70b9\u3068\u3057\u3066\u6a5f\u80fd\u3057\u307e\u3059\u3002</p> <pre><code># 3\u00d74\u306e\u30e9\u30f3\u30c0\u30e0\u30c6\u30f3\u30bd\u30eb\u3092\u4f5c\u6210\nrandom_tensor = torch.rand(3, 4)\nrandom_tensor, random_tensor.ndim\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>(tensor([[0.6824, 0.4339, 0.7100, 0.4324],\n         [0.1593, 0.0316, 0.4038, 0.4528],\n         [0.5886, 0.0108, 0.5766, 0.2656]]),\n 2)\n</code></pre></p>","tags":["PyTorch","\u6df1\u5c64\u5b66\u7fd2","\u30c6\u30f3\u30bd\u30eb","Python","\u6a5f\u68b0\u5b66\u7fd2","\u521d\u5fc3\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u57fa\u790e"]},{"location":"PyTorch/01_pytorch_fundamentals/#_8","title":"\u753b\u50cf\u30b5\u30a4\u30ba\u306e\u30c6\u30f3\u30bd\u30eb","text":"<p>\u5b9f\u969b\u306e\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3\u30bf\u30b9\u30af\u3067\u3088\u304f\u4f7f\u7528\u3055\u308c\u308b\u753b\u50cf\u30b5\u30a4\u30ba\u306e\u30c6\u30f3\u30bd\u30eb\u3092\u4f5c\u6210\u3057\u3066\u307f\u307e\u3059\u3002</p> <pre><code># \u753b\u50cf\u30c6\u30f3\u30bd\u30eb\u3068\u540c\u69d8\u306e\u5f62\u72b6\u3067\u30e9\u30f3\u30c0\u30e0\u30c6\u30f3\u30bd\u30eb\u3092\u4f5c\u6210\nrandom_image_size_tensor = torch.rand(size=(3, 224, 224))  # R, G, B\nrandom_image_size_tensor.shape, random_image_size_tensor.ndim\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>(torch.Size([3, 224, 224]), 3)\n</code></pre></p> <p>\u3053\u306e\u5f62\u72b6\u306f\u30013\u30c1\u30e3\u30f3\u30cd\u30eb\uff08RGB\uff09\u306e224\u00d7224\u30d4\u30af\u30bb\u30eb\u306e\u753b\u50cf\u3092\u8868\u73fe\u3057\u3066\u304a\u308a\u3001\u591a\u304f\u306e\u6df1\u5c64\u5b66\u7fd2\u30e2\u30c7\u30eb\u306e\u6a19\u6e96\u7684\u306a\u5165\u529b\u30b5\u30a4\u30ba\u3067\u3059\u3002</p>","tags":["PyTorch","\u6df1\u5c64\u5b66\u7fd2","\u30c6\u30f3\u30bd\u30eb","Python","\u6a5f\u68b0\u5b66\u7fd2","\u521d\u5fc3\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u57fa\u790e"]},{"location":"PyTorch/01_pytorch_fundamentals/#_9","title":"\u7279\u6b8a\u306a\u30c6\u30f3\u30bd\u30eb\u306e\u4f5c\u6210","text":"","tags":["PyTorch","\u6df1\u5c64\u5b66\u7fd2","\u30c6\u30f3\u30bd\u30eb","Python","\u6a5f\u68b0\u5b66\u7fd2","\u521d\u5fc3\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u57fa\u790e"]},{"location":"PyTorch/01_pytorch_fundamentals/#_10","title":"\u30bc\u30ed\u57cb\u3081\u30c6\u30f3\u30bd\u30eb","text":"<pre><code># \u3059\u3079\u3066\u306e\u8981\u7d20\u304c0\u306e\u30c6\u30f3\u30bd\u30eb\u3092\u4f5c\u6210\nzeros = torch.zeros((3, 4))\nzeros\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>tensor([[0., 0., 0., 0.],\n        [0., 0., 0., 0.],\n        [0., 0., 0., 0.]])\n</code></pre></p>","tags":["PyTorch","\u6df1\u5c64\u5b66\u7fd2","\u30c6\u30f3\u30bd\u30eb","Python","\u6a5f\u68b0\u5b66\u7fd2","\u521d\u5fc3\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u57fa\u790e"]},{"location":"PyTorch/01_pytorch_fundamentals/#1_1","title":"1\u57cb\u3081\u30c6\u30f3\u30bd\u30eb","text":"<pre><code># \u3059\u3079\u3066\u306e\u8981\u7d20\u304c1\u306e\u30c6\u30f3\u30bd\u30eb\u3092\u4f5c\u6210\nones = torch.ones((3, 4))\nones.dtype, ones\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>(torch.float32,\n tensor([[1., 1., 1., 1.],\n         [1., 1., 1., 1.],\n         [1., 1., 1., 1.]]))\n</code></pre></p>","tags":["PyTorch","\u6df1\u5c64\u5b66\u7fd2","\u30c6\u30f3\u30bd\u30eb","Python","\u6a5f\u68b0\u5b66\u7fd2","\u521d\u5fc3\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u57fa\u790e"]},{"location":"PyTorch/01_pytorch_fundamentals/#_11","title":"\u7bc4\u56f2\u6307\u5b9a\u30c6\u30f3\u30bd\u30eb\u3068\u30c6\u30f3\u30bd\u30eb\u30e9\u30a4\u30af\u64cd\u4f5c","text":"","tags":["PyTorch","\u6df1\u5c64\u5b66\u7fd2","\u30c6\u30f3\u30bd\u30eb","Python","\u6a5f\u68b0\u5b66\u7fd2","\u521d\u5fc3\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u57fa\u790e"]},{"location":"PyTorch/01_pytorch_fundamentals/#_12","title":"\u9023\u7d9a\u5024\u30c6\u30f3\u30bd\u30eb\u306e\u4f5c\u6210","text":"<pre><code># torch.range()\u306f\u975e\u63a8\u5968\u306e\u305f\u3081\u3001torch.arange()\u3092\u4f7f\u7528\ntorch.range(0, 10)  # \u8b66\u544a\u304c\u8868\u793a\u3055\u308c\u308b\ntorch.arange(0, 10)  # \u63a8\u5968\u3055\u308c\u308b\u65b9\u6cd5\none_to_ten = torch.arange(start=1, end=10, step=2)\none_to_ten\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>/var/folders/.../UserWarning: torch.range is deprecated...\ntensor([1, 3, 5, 7, 9])\n</code></pre></p>","tags":["PyTorch","\u6df1\u5c64\u5b66\u7fd2","\u30c6\u30f3\u30bd\u30eb","Python","\u6a5f\u68b0\u5b66\u7fd2","\u521d\u5fc3\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u57fa\u790e"]},{"location":"PyTorch/01_pytorch_fundamentals/#_13","title":"\u65e2\u5b58\u30c6\u30f3\u30bd\u30eb\u3068\u540c\u3058\u5f62\u72b6\u3067\u306e\u65b0\u898f\u4f5c\u6210","text":"<pre><code># \u65e2\u5b58\u30c6\u30f3\u30bd\u30eb\u3068\u540c\u3058\u5f62\u72b6\u3067\u30bc\u30ed\u57cb\u3081\u30c6\u30f3\u30bd\u30eb\u3092\u4f5c\u6210\nten_zeros = torch.zeros_like(input=one_to_ten)\nten_zeros\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>tensor([0, 0, 0, 0, 0])\n</code></pre></p>","tags":["PyTorch","\u6df1\u5c64\u5b66\u7fd2","\u30c6\u30f3\u30bd\u30eb","Python","\u6a5f\u68b0\u5b66\u7fd2","\u521d\u5fc3\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u57fa\u790e"]},{"location":"PyTorch/01_pytorch_fundamentals/#_14","title":"\u30c6\u30f3\u30bd\u30eb\u306e\u30c7\u30fc\u30bf\u578b","text":"<p>PyTorch\u306b\u306f\u69d8\u3005\u306a\u30c7\u30fc\u30bf\u578b\u304c\u3042\u308a\u3001\u8a08\u7b97\u7cbe\u5ea6\u3068\u51e6\u7406\u901f\u5ea6\u306e\u30d0\u30e9\u30f3\u30b9\u3092\u8003\u616e\u3057\u3066\u9078\u629e\u3057\u307e\u3059\u3002</p> <pre><code># Float 32 tensor\nfloat_32_tensor = torch.tensor([3.0, 4.0, 5.0],\n                                dtype=torch.float32,  # \u30c7\u30d5\u30a9\u30eb\u30c8\u306fNone\uff08torch.float32\uff09\n                                device=\"mps\",  # \u30c7\u30d0\u30a4\u30b9\u6307\u5b9a\uff08MPS\u4f7f\u7528\uff09\n                                requires_grad=False)  # \u52fe\u914d\u8a08\u7b97\u306e\u8981\u5426\nfloat_32_tensor\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>tensor([3., 4., 5.], device='mps:0')\n</code></pre></p>","tags":["PyTorch","\u6df1\u5c64\u5b66\u7fd2","\u30c6\u30f3\u30bd\u30eb","Python","\u6a5f\u68b0\u5b66\u7fd2","\u521d\u5fc3\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u57fa\u790e"]},{"location":"PyTorch/01_pytorch_fundamentals/#_15","title":"\u30c7\u30fc\u30bf\u578b\u5909\u63db","text":"<pre><code># 32\u30d3\u30c3\u30c8\u304b\u308916\u30d3\u30c3\u30c8\u6d6e\u52d5\u5c0f\u6570\u70b9\u306b\u5909\u63db\nfloat_16_tensor = float_32_tensor.type(torch.float16)\nfloat_16_tensor\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>tensor([3., 4., 5.], device='mps:0', dtype=torch.float16)\n</code></pre></p>","tags":["PyTorch","\u6df1\u5c64\u5b66\u7fd2","\u30c6\u30f3\u30bd\u30eb","Python","\u6a5f\u68b0\u5b66\u7fd2","\u521d\u5fc3\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u57fa\u790e"]},{"location":"PyTorch/01_pytorch_fundamentals/#_16","title":"\u7570\u306a\u308b\u30c7\u30fc\u30bf\u578b\u9593\u306e\u6f14\u7b97","text":"<pre><code># \u7570\u306a\u308b\u30c7\u30fc\u30bf\u578b\u306e\u30c6\u30f3\u30bd\u30eb\u540c\u58eb\u306e\u6f14\u7b97\nfloat_32_tensor * float_16_tensor\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>tensor([ 9., 16., 25.], device='mps:0')\n</code></pre></p> <p>PyTorch\u306f\u81ea\u52d5\u7684\u306b\u30c7\u30fc\u30bf\u578b\u3092\u7d71\u4e00\u3057\u3066\u8a08\u7b97\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002</p>","tags":["PyTorch","\u6df1\u5c64\u5b66\u7fd2","\u30c6\u30f3\u30bd\u30eb","Python","\u6a5f\u68b0\u5b66\u7fd2","\u521d\u5fc3\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u57fa\u790e"]},{"location":"PyTorch/01_pytorch_fundamentals/#_17","title":"\u30c6\u30f3\u30bd\u30eb\u60c5\u5831\u306e\u53d6\u5f97","text":"<p>\u30c6\u30f3\u30bd\u30eb\u64cd\u4f5c\u306b\u304a\u3044\u3066\u3001\u5f62\u72b6\u3001\u30c7\u30fc\u30bf\u578b\u3001\u30c7\u30d0\u30a4\u30b9\u306e\u60c5\u5831\u306f\u91cd\u8981\u3067\u3059\u3002</p> <pre><code># \u30c6\u30f3\u30bd\u30eb\u3092\u4f5c\u6210\nsome_tensor = torch.rand(3, 4)\nprint(some_tensor)\nprint(f\"Datatype of tensor: {some_tensor.dtype}\")\nprint(some_tensor.shape)\nprint(some_tensor.device)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>tensor([[0.1515, 0.4290, 0.8059, 0.6290],\n        [0.3464, 0.7190, 0.4837, 0.6463],\n        [0.9553, 0.6466, 0.0363, 0.1495]])\nDatatype of tensor: torch.float32\ntorch.Size([3, 4])\ncpu\n</code></pre></p>","tags":["PyTorch","\u6df1\u5c64\u5b66\u7fd2","\u30c6\u30f3\u30bd\u30eb","Python","\u6a5f\u68b0\u5b66\u7fd2","\u521d\u5fc3\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u57fa\u790e"]},{"location":"PyTorch/01_pytorch_fundamentals/#_18","title":"\u30c6\u30f3\u30bd\u30eb\u6f14\u7b97","text":"","tags":["PyTorch","\u6df1\u5c64\u5b66\u7fd2","\u30c6\u30f3\u30bd\u30eb","Python","\u6a5f\u68b0\u5b66\u7fd2","\u521d\u5fc3\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u57fa\u790e"]},{"location":"PyTorch/01_pytorch_fundamentals/#_19","title":"\u57fa\u672c\u7684\u306a\u7b97\u8853\u6f14\u7b97","text":"<pre><code>tensor = torch.tensor([1, 3, 5])\nprint(tensor + 10)    # \u52a0\u7b97\nprint(tensor - 10)    # \u6e1b\u7b97\nprint(tensor * 10)    # \u4e57\u7b97\nprint(tensor / 10)    # \u9664\u7b97\nprint(torch.mul(tensor, 10))    # \u95a2\u6570\u3092\u4f7f\u3063\u305f\u4e57\u7b97\nprint(torch.add(tensor, 10))    # \u95a2\u6570\u3092\u4f7f\u3063\u305f\u52a0\u7b97\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>tensor([11, 13, 15])\ntensor([-9, -7, -5])\ntensor([10, 30, 50])\ntensor([0.1000, 0.3000, 0.5000])\ntensor([10, 30, 50])\ntensor([11, 13, 15])\n</code></pre></p>","tags":["PyTorch","\u6df1\u5c64\u5b66\u7fd2","\u30c6\u30f3\u30bd\u30eb","Python","\u6a5f\u68b0\u5b66\u7fd2","\u521d\u5fc3\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u57fa\u790e"]},{"location":"PyTorch/01_pytorch_fundamentals/#_20","title":"\u884c\u5217\u306e\u4e57\u7b97\uff08\u91cd\u8981\u306a\u6982\u5ff5\uff09","text":"<p>\u884c\u5217\u306e\u4e57\u7b97\u306f\u6df1\u5c64\u5b66\u7fd2\u306b\u304a\u3044\u3066\u6700\u3082\u91cd\u8981\u306a\u6f14\u7b97\u306e\u4e00\u3064\u3067\u3059\u3002</p> <pre><code># \u30d9\u30af\u30c8\u30eb\u306e\u5185\u7a4d\u8a08\u7b97\n# 1*1 + 2*2 + 3*3 = 14\ntensor_a = torch.tensor([1, 2, 3])\ntensor_b = torch.tensor([1, 2, 3])\ntorch.matmul(tensor_a, tensor_b)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>tensor(14)\n</code></pre></p>","tags":["PyTorch","\u6df1\u5c64\u5b66\u7fd2","\u30c6\u30f3\u30bd\u30eb","Python","\u6a5f\u68b0\u5b66\u7fd2","\u521d\u5fc3\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u57fa\u790e"]},{"location":"PyTorch/01_pytorch_fundamentals/#_21","title":"\u884c\u5217\u4e57\u7b97\u306e\u30eb\u30fc\u30eb","text":"<p>\u884c\u5217\u4e57\u7b97\u306b\u306f\u91cd\u8981\u306a\u30eb\u30fc\u30eb\u304c\u3042\u308a\u307e\u3059\uff1a</p> <ol> <li>\u5185\u5074\u306e\u6b21\u5143\u304c\u4e00\u81f4\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b</li> <li>\u7d50\u679c\u306e\u5f62\u72b6\u306f\u5916\u5074\u306e\u6b21\u5143\u306b\u306a\u308b</li> </ol> <pre><code># \u5f62\u72b6\u3092\u78ba\u8a8d\u3057\u306a\u304c\u3089\u884c\u5217\u3092\u5b9a\u7fa9\ntensor_A = torch.tensor([[1, 2],\n                         [3, 4],\n                         [5, 6]], dtype=torch.float32)\n\ntensor_B = torch.tensor([[7, 10],\n                         [8, 11], \n                         [9, 12]], dtype=torch.float32)\n\n# torch.matmul(tensor_A, tensor_B)  # \u3053\u308c\u306f\u30a8\u30e9\u30fc\u306b\u306a\u308b\n</code></pre>","tags":["PyTorch","\u6df1\u5c64\u5b66\u7fd2","\u30c6\u30f3\u30bd\u30eb","Python","\u6a5f\u68b0\u5b66\u7fd2","\u521d\u5fc3\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u57fa\u790e"]},{"location":"PyTorch/01_pytorch_fundamentals/#_22","title":"\u8ee2\u7f6e\u3092\u4f7f\u3063\u305f\u884c\u5217\u4e57\u7b97","text":"<p>\u5f62\u72b6\u304c\u5408\u308f\u306a\u3044\u5834\u5408\u306f\u3001\u8ee2\u7f6e\u3092\u4f7f\u3063\u3066\u8abf\u6574\u3057\u307e\u3059\u3002</p> <pre><code>print(torch.matmul(tensor_A, tensor_B.T))\n\n# \u8a73\u7d30\u306a\u8aac\u660e\nprint(f\"\u5143\u306e\u5f62\u72b6: tensor_A = {tensor_A.shape}, tensor_B = {tensor_B.shape}\\n\")\nprint(f\"\u65b0\u3057\u3044\u5f62\u72b6: tensor_A = {tensor_A.shape} (\u540c\u3058), tensor_B.T = {tensor_B.T.shape}\\n\")\nprint(f\"\u4e57\u7b97: {tensor_A.shape} * {tensor_B.T.shape} &lt;- \u5185\u5074\u306e\u6b21\u5143\u304c\u4e00\u81f4\\n\")\nprint(\"\u7d50\u679c:\\n\")\noutput = torch.matmul(tensor_A, tensor_B.T)\nprint(output) \nprint(f\"\\n\u51fa\u529b\u306e\u5f62\u72b6: {output.shape}\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>tensor([[ 27.,  30.,  33.],\n        [ 61.,  68.,  75.],\n        [ 95., 106., 117.]])\n\n\u5143\u306e\u5f62\u72b6: tensor_A = torch.Size([3, 2]), tensor_B = torch.Size([3, 2])\n\n\u65b0\u3057\u3044\u5f62\u72b6: tensor_A = torch.Size([3, 2]) (\u540c\u3058), tensor_B.T = torch.Size([2, 3])\n\n\u4e57\u7b97: torch.Size([3, 2]) * torch.Size([2, 3]) &lt;- \u5185\u5074\u306e\u6b21\u5143\u304c\u4e00\u81f4\n\n\u7d50\u679c:\n\ntensor([[ 27.,  30.,  33.],\n        [ 61.,  68.,  75.],\n        [ 95., 106., 117.]])\n\n\u51fa\u529b\u306e\u5f62\u72b6: torch.Size([3, 3])\n</code></pre></p>","tags":["PyTorch","\u6df1\u5c64\u5b66\u7fd2","\u30c6\u30f3\u30bd\u30eb","Python","\u6a5f\u68b0\u5b66\u7fd2","\u521d\u5fc3\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u57fa\u790e"]},{"location":"PyTorch/01_pytorch_fundamentals/#_23","title":"\u96c6\u7d04\u6f14\u7b97\uff08\u6700\u5c0f\u3001\u6700\u5927\u3001\u5e73\u5747\u3001\u5408\u8a08\uff09","text":"<pre><code># \u30c6\u30f3\u30bd\u30eb\u3092\u4f5c\u6210\nx = torch.arange(0, 100, 10)\nprint(x, x.dtype)\nprint(torch.min(x))      # \u6700\u5c0f\u5024\nprint(x.min())           # \u540c\u4e0a\uff08\u30e1\u30bd\u30c3\u30c9\u7248\uff09\nprint(torch.max(x))      # \u6700\u5927\u5024\nprint(x.max())           # \u540c\u4e0a\uff08\u30e1\u30bd\u30c3\u30c9\u7248\uff09\n# \u5e73\u5747\u5024\u8a08\u7b97\u306b\u306ffloat\u578b\u304c\u5fc5\u8981\nprint(torch.mean(x.type(torch.float32)))\nprint(torch.sum(x))      # \u5408\u8a08\nprint(x.sum())           # \u540c\u4e0a\uff08\u30e1\u30bd\u30c3\u30c9\u7248\uff09\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>tensor([ 0, 10, 20, 30, 40, 50, 60, 70, 80, 90]) torch.int64\ntensor(0)\ntensor(0)\ntensor(90)\ntensor(90)\ntensor(45.)\ntensor(450)\ntensor(450)\n</code></pre></p>","tags":["PyTorch","\u6df1\u5c64\u5b66\u7fd2","\u30c6\u30f3\u30bd\u30eb","Python","\u6a5f\u68b0\u5b66\u7fd2","\u521d\u5fc3\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u57fa\u790e"]},{"location":"PyTorch/01_pytorch_fundamentals/#_24","title":"\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u53d6\u5f97","text":"<pre><code># \u6700\u5927\u5024\u30fb\u6700\u5c0f\u5024\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u53d6\u5f97\nprint(x.argmax())  # \u6700\u5927\u5024\u306e\u4f4d\u7f6e\nprint(x.argmin())  # \u6700\u5c0f\u5024\u306e\u4f4d\u7f6e\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>tensor(9)\ntensor(0)\n</code></pre></p>","tags":["PyTorch","\u6df1\u5c64\u5b66\u7fd2","\u30c6\u30f3\u30bd\u30eb","Python","\u6a5f\u68b0\u5b66\u7fd2","\u521d\u5fc3\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u57fa\u790e"]},{"location":"PyTorch/01_pytorch_fundamentals/#_25","title":"\u30c6\u30f3\u30bd\u30eb\u306e\u5f62\u72b6\u64cd\u4f5c","text":"","tags":["PyTorch","\u6df1\u5c64\u5b66\u7fd2","\u30c6\u30f3\u30bd\u30eb","Python","\u6a5f\u68b0\u5b66\u7fd2","\u521d\u5fc3\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u57fa\u790e"]},{"location":"PyTorch/01_pytorch_fundamentals/#_26","title":"\u57fa\u672c\u7684\u306a\u5f62\u72b6\u5909\u66f4\u64cd\u4f5c","text":"\u30e1\u30bd\u30c3\u30c9 \u8aac\u660e <code>torch.reshape()</code> \u4e92\u63db\u6027\u304c\u3042\u308b\u5834\u5408\u306b\u5f62\u72b6\u3092\u5909\u66f4 <code>tensor.view()</code> \u5143\u306e\u30c6\u30f3\u30bd\u30eb\u3068\u540c\u3058\u30c7\u30fc\u30bf\u3092\u5171\u6709\u3059\u308b\u7570\u306a\u308b\u5f62\u72b6\u306e\u30d3\u30e5\u30fc\u3092\u8fd4\u3059 <code>torch.stack()</code> \u65b0\u3057\u3044\u6b21\u5143\u3067\u30c6\u30f3\u30bd\u30eb\u3092\u9023\u7d50 <code>torch.squeeze()</code> \u30b5\u30a4\u30ba1\u306e\u6b21\u5143\u3092\u524a\u9664 <code>torch.unsqueeze()</code> \u6307\u5b9a\u4f4d\u7f6e\u306b\u30b5\u30a4\u30ba1\u306e\u6b21\u5143\u3092\u8ffd\u52a0 <code>torch.permute()</code> \u6b21\u5143\u306e\u9806\u5e8f\u3092\u5909\u66f4 <pre><code># \u30c6\u30f3\u30bd\u30eb\u3092\u4f5c\u6210\nx = torch.arange(1., 10.)\nprint(x, x.shape)\n\n# \u5f62\u72b6\u3092\u5909\u66f4\nx_reshaped = x.reshape(3, 3)\nprint(x_reshaped, x_reshaped.shape)\n\n# \u30d3\u30e5\u30fc\u3092\u4f5c\u6210\uff08\u30c7\u30fc\u30bf\u3092\u5171\u6709\uff09\nz = x.view(3, 3)\nprint(z, z.shape)\n\n# \u30d3\u30e5\u30fc\u3092\u5909\u66f4\u3059\u308b\u3068\u5143\u306e\u30c6\u30f3\u30bd\u30eb\u3082\u5909\u66f4\u3055\u308c\u308b\nz[:, 0] = 5\nprint(z, x)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>tensor([1., 2., 3., 4., 5., 6., 7., 8., 9.]) torch.Size([9])\ntensor([[1., 2., 3.],\n        [4., 5., 6.],\n        [7., 8., 9.]]) torch.Size([3, 3])\ntensor([[1., 2., 3.],\n        [4., 5., 6.],\n        [7., 8., 9.]]) torch.Size([3, 3])\ntensor([[5., 5.],\n        [2., 2.],\n        [3., 3.],\n        [5., 5.],\n        [5., 5.],\n        [6., 6.],\n        [5., 5.],\n        [8., 8.],\n        [9., 9.]]) tensor([5., 2., 3., 5., 5., 6., 5., 8., 9.])\n</code></pre></p>","tags":["PyTorch","\u6df1\u5c64\u5b66\u7fd2","\u30c6\u30f3\u30bd\u30eb","Python","\u6a5f\u68b0\u5b66\u7fd2","\u521d\u5fc3\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u57fa\u790e"]},{"location":"PyTorch/01_pytorch_fundamentals/#_27","title":"\u30b9\u30bf\u30c3\u30af\u64cd\u4f5c","text":"<pre><code># \u30c6\u30f3\u30bd\u30eb\u3092\u7a4d\u307f\u91cd\u306d\u308b\nx_stacked = torch.stack([x, x], dim=1)\nprint(x)\nprint(x_stacked, x_stacked.shape)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>tensor([5., 2., 3., 5., 5., 6., 5., 8., 9.])\ntensor([[5., 5.],\n        [2., 2.],\n        [3., 3.],\n        [5., 5.],\n        [5., 5.],\n        [6., 6.],\n        [5., 5.],\n        [8., 8.],\n        [9., 9.]]) torch.Size([9, 2])\n</code></pre></p>","tags":["PyTorch","\u6df1\u5c64\u5b66\u7fd2","\u30c6\u30f3\u30bd\u30eb","Python","\u6a5f\u68b0\u5b66\u7fd2","\u521d\u5fc3\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u57fa\u790e"]},{"location":"PyTorch/01_pytorch_fundamentals/#squeezeunsqueeze","title":"squeeze\u64cd\u4f5c\u3068unsqueeze\u64cd\u4f5c","text":"<pre><code># \u30b5\u30a4\u30ba1\u306e\u6b21\u5143\u3092\u524a\u9664\nx = torch.zeros(2, 1, 2, 1, 2)\nx_squeeze = torch.squeeze(x)\nprint(x_squeeze, x_squeeze.size())\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>tensor([[[0., 0.],\n         [0., 0.]],\n\n        [[0., 0.],\n         [0., 0.]]]) torch.Size([2, 2, 2])\n</code></pre></p> <pre><code># \u6b21\u5143\u3092\u8ffd\u52a0\nprint(f\"\u5143\u306e\u30c6\u30f3\u30bd\u30eb: {x_squeeze}\")\nprint(f\"\u5143\u306e\u5f62\u72b6: {x_squeeze.shape}\")\n\nx_unsqueezed = x_squeeze.unsqueeze(dim=1)\nprint(x_unsqueezed, x_unsqueezed.shape)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>\u5143\u306e\u30c6\u30f3\u30bd\u30eb: tensor([[[0., 0.],\n         [0., 0.]],\n\n        [[0., 0.],\n         [0., 0.]]])\n\u5143\u306e\u5f62\u72b6: torch.Size([2, 2, 2])\ntensor([[[[0., 0.],\n          [0., 0.]]],\n\n\n        [[[0., 0.],\n          [0., 0.]]]]) torch.Size([2, 1, 2, 2])\n</code></pre></p>","tags":["PyTorch","\u6df1\u5c64\u5b66\u7fd2","\u30c6\u30f3\u30bd\u30eb","Python","\u6a5f\u68b0\u5b66\u7fd2","\u521d\u5fc3\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u57fa\u790e"]},{"location":"PyTorch/01_pytorch_fundamentals/#_28","title":"\u6b21\u5143\u306e\u9806\u5e8f\u5909\u66f4","text":"<pre><code># \u6b21\u5143\u306e\u9806\u5e8f\u3092\u5909\u66f4\uff08\u30ab\u30e9\u30fc\u753b\u50cf\u306e\u4f8b\uff09\nx_original = torch.rand(size=(224, 224, 3))  # Height, Width, Channels\nx_permuted = torch.permute(x_original, (2, 0, 1))  # Channels, Height, Width\nprint(x_permuted.shape)\nprint(x_original.shape)\n\n# \u30d3\u30e5\u30fc\u306a\u306e\u3067\u540c\u3058\u30e1\u30e2\u30ea\u3092\u5171\u6709\nx_permuted[0, 0, 0] = 2222\nprint(x_original[0, 0, 0], x_permuted[0, 0, 0])\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>torch.Size([3, 224, 224])\ntorch.Size([224, 224, 3])\ntensor(2222.) tensor(2222.)\n</code></pre></p>","tags":["PyTorch","\u6df1\u5c64\u5b66\u7fd2","\u30c6\u30f3\u30bd\u30eb","Python","\u6a5f\u68b0\u5b66\u7fd2","\u521d\u5fc3\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u57fa\u790e"]},{"location":"PyTorch/01_pytorch_fundamentals/#_29","title":"\u30c6\u30f3\u30bd\u30eb\u30a4\u30f3\u30c7\u30c3\u30af\u30b9","text":"<pre><code># \u30c6\u30f3\u30bd\u30eb\u3092\u4f5c\u6210\nx = torch.arange(1, 10).reshape(1, 3, 3)\nprint(x, x.shape)\n\n# \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306b\u3088\u308b\u30a2\u30af\u30bb\u30b9\nprint(x[0])          # \u6700\u521d\u306e\u6b21\u5143\nprint(x[0][0])       # \u6700\u521d\u306e\u884c\nprint(x[0][0][0])    # \u7279\u5b9a\u306e\u8981\u7d20\n\n# \u30b9\u30e9\u30a4\u30b9\u8a18\u6cd5\nprint(x[:, 0, :])    # \u3059\u3079\u3066\u306e0\u756a\u76ee\u306e\u884c\nprint(x[:, :, 0])    # \u3059\u3079\u3066\u306e0\u756a\u76ee\u306e\u5217\nprint(x[:, 0, 0])    # \u7279\u5b9a\u306e\u4f4d\u7f6e\u306e\u8981\u7d20\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>tensor([[[1, 2, 3],\n         [4, 5, 6],\n         [7, 8, 9]]]) torch.Size([1, 3, 3])\ntensor([[1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]])\ntensor([1, 2, 3])\ntensor(1)\ntensor([[1, 2, 3]])\ntensor([[1, 4, 7]])\ntensor([1])\n</code></pre></p>","tags":["PyTorch","\u6df1\u5c64\u5b66\u7fd2","\u30c6\u30f3\u30bd\u30eb","Python","\u6a5f\u68b0\u5b66\u7fd2","\u521d\u5fc3\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u57fa\u790e"]},{"location":"PyTorch/01_pytorch_fundamentals/#pytorchnumpy","title":"PyTorch\u30c6\u30f3\u30bd\u30eb\u3068NumPy","text":"<p>PyTorch\u3068NumPy\u306f\u76f8\u4e92\u904b\u7528\u6027\u306b\u512a\u308c\u3066\u304a\u308a\u3001\u7c21\u5358\u306b\u5909\u63db\u3067\u304d\u307e\u3059\u3002</p> <pre><code>import numpy as np\n\n# NumPy\u914d\u5217\u304b\u3089PyTorch\u30c6\u30f3\u30bd\u30eb\u3078\narray = np.arange(1.0, 8.0)\ntensor = torch.from_numpy(array).type(torch.float32)\nprint(array.dtype)\nprint(array, tensor, tensor.dtype)\n\n# \u914d\u5217\u3092\u5909\u66f4\uff08\u65b0\u3057\u3044\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\uff09\narray = array * 10\nprint(array, tensor)  # tensor\u306f\u5909\u66f4\u3055\u308c\u306a\u3044\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>float64\n[1. 2. 3. 4. 5. 6. 7.] tensor([1., 2., 3., 4., 5., 6., 7.]) torch.float32\n[10. 20. 30. 40. 50. 60. 70.] tensor([1., 2., 3., 4., 5., 6., 7.])\n</code></pre></p> <pre><code># PyTorch\u30c6\u30f3\u30bd\u30eb\u304b\u3089NumPy\u914d\u5217\u3078\ntensor = torch.ones(8)\nnumpy_tensor = tensor.numpy()\nprint(tensor, numpy_tensor, numpy_tensor.dtype)\n\n# \u30c6\u30f3\u30bd\u30eb\u3092\u5909\u66f4\uff08\u65b0\u3057\u3044\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\uff09\ntensor = tensor * 10\nprint(tensor, numpy_tensor)  # numpy_tensor\u306f\u5909\u66f4\u3055\u308c\u306a\u3044\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>tensor([1., 1., 1., 1., 1., 1., 1., 1.]) [1. 1. 1. 1. 1. 1. 1. 1.] float32\ntensor([10., 10., 10., 10., 10., 10., 10., 10.]) [1. 1. 1. 1. 1. 1. 1. 1.]\n</code></pre></p>","tags":["PyTorch","\u6df1\u5c64\u5b66\u7fd2","\u30c6\u30f3\u30bd\u30eb","Python","\u6a5f\u68b0\u5b66\u7fd2","\u521d\u5fc3\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u57fa\u790e"]},{"location":"PyTorch/01_pytorch_fundamentals/#_30","title":"\u518d\u73fe\u6027\u306e\u78ba\u4fdd","text":"<p>\u6a5f\u68b0\u5b66\u7fd2\u5b9f\u9a13\u3067\u306f\u518d\u73fe\u6027\u304c\u91cd\u8981\u3067\u3059\u3002<code>torch.manual_seed()</code>\u3092\u4f7f\u7528\u3057\u3066\u30e9\u30f3\u30c0\u30e0\u6027\u3092\u5236\u5fa1\u3067\u304d\u307e\u3059\u3002</p> <pre><code># \u518d\u73fe\u6027\u306a\u3057\u306e\u4f8b\nrandom_tensor_A = torch.rand(3, 4)\nrandom_tensor_B = torch.rand(3, 4)\n\nprint(random_tensor_A)\nprint(random_tensor_B)\nprint(random_tensor_A == random_tensor_B)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>tensor([[0.4391, 0.6196, 0.7505, 0.7156],\n        [0.9042, 0.2950, 0.4127, 0.0252],\n        [0.5446, 0.3252, 0.6805, 0.1873]])\ntensor([[0.2874, 0.8757, 0.1099, 0.1557],\n        [0.6750, 0.5061, 0.6277, 0.4129],\n        [0.6435, 0.6629, 0.5479, 0.1246]])\ntensor([[False, False, False, False],\n        [False, False, False, False],\n        [False, False, False, False]])\n</code></pre></p> <pre><code># \u518d\u73fe\u6027\u3042\u308a\u306e\u4f8b\nRANDOM_SEED = 42\ntorch.manual_seed(RANDOM_SEED)\nrandom_tensor_C = torch.rand(3, 4)\ntorch.manual_seed(RANDOM_SEED)\nrandom_tensor_D = torch.rand(3, 4)\n\nprint(random_tensor_C)\nprint(random_tensor_D)\nprint(random_tensor_C == random_tensor_D)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>tensor([[0.8823, 0.9150, 0.3829, 0.9593],\n        [0.3904, 0.6009, 0.2566, 0.7936],\n        [0.9408, 0.1332, 0.9346, 0.5936]])\ntensor([[0.8823, 0.9150, 0.3829, 0.9593],\n        [0.3904, 0.6009, 0.2566, 0.7936],\n        [0.9408, 0.1332, 0.9346, 0.5936]])\ntensor([[True, True, True, True],\n        [True, True, True, True],\n        [True, True, True, True]])\n</code></pre></p>","tags":["PyTorch","\u6df1\u5c64\u5b66\u7fd2","\u30c6\u30f3\u30bd\u30eb","Python","\u6a5f\u68b0\u5b66\u7fd2","\u521d\u5fc3\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u57fa\u790e"]},{"location":"PyTorch/01_pytorch_fundamentals/#gpumps","title":"GPU\uff08MPS\uff09\u3067\u306e\u9ad8\u901f\u8a08\u7b97","text":"","tags":["PyTorch","\u6df1\u5c64\u5b66\u7fd2","\u30c6\u30f3\u30bd\u30eb","Python","\u6a5f\u68b0\u5b66\u7fd2","\u521d\u5fc3\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u57fa\u790e"]},{"location":"PyTorch/01_pytorch_fundamentals/#_31","title":"\u30c7\u30d0\u30a4\u30b9\u8a2d\u5b9a","text":"<pre><code># Apple Silicon Mac\u7528\u306eMPS\u30c7\u30d0\u30a4\u30b9\u8a2d\u5b9a\ndevice = \"mps\" if torch.backends.mps.is_available() else \"cpu\"\nprint(device)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>mps\n</code></pre></p>","tags":["PyTorch","\u6df1\u5c64\u5b66\u7fd2","\u30c6\u30f3\u30bd\u30eb","Python","\u6a5f\u68b0\u5b66\u7fd2","\u521d\u5fc3\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u57fa\u790e"]},{"location":"PyTorch/01_pytorch_fundamentals/#gpu","title":"\u30c6\u30f3\u30bd\u30eb\u306eGPU\u79fb\u52d5","text":"<pre><code># CPU\u30c6\u30f3\u30bd\u30eb\u3092\u4f5c\u6210\ntensor = torch.tensor([1, 2, 3])\nprint(tensor, tensor.device)\n\n# MPS\u30c7\u30d0\u30a4\u30b9\u306b\u79fb\u52d5\ntensor_on_gpu = tensor.to(device)\nprint(tensor_on_gpu)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>tensor([1, 2, 3]) cpu\ntensor([1, 2, 3], device='mps:0')\n</code></pre></p>","tags":["PyTorch","\u6df1\u5c64\u5b66\u7fd2","\u30c6\u30f3\u30bd\u30eb","Python","\u6a5f\u68b0\u5b66\u7fd2","\u521d\u5fc3\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u57fa\u790e"]},{"location":"PyTorch/01_pytorch_fundamentals/#gpucpu","title":"GPU\u2192CPU\u5909\u63db","text":"<pre><code># NumPy\u306fGPU\u3092\u76f4\u63a5\u30b5\u30dd\u30fc\u30c8\u3057\u306a\u3044\u305f\u3081\u3001CPU\u306b\u623b\u3059\u5fc5\u8981\u304c\u3042\u308b\n# tensor_on_gpu.numpy()  # \u3053\u308c\u306f\u30a8\u30e9\u30fc\u306b\u306a\u308b\n\n# CPU\u306b\u623b\u3057\u3066\u304b\u3089NumPy\u914d\u5217\u306b\u5909\u63db\ntensor_back_on_cpu = tensor_on_gpu.cpu().numpy()\nprint(tensor_back_on_cpu)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>[1 2 3]\n</code></pre></p>","tags":["PyTorch","\u6df1\u5c64\u5b66\u7fd2","\u30c6\u30f3\u30bd\u30eb","Python","\u6a5f\u68b0\u5b66\u7fd2","\u521d\u5fc3\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u57fa\u790e"]},{"location":"PyTorch/01_pytorch_fundamentals/#_32","title":"\u307e\u3068\u3081","text":"<p>\u3053\u306e\u8a18\u4e8b\u3067\u306f\u3001PyTorch\u30c6\u30f3\u30bd\u30eb\u306e\u57fa\u790e\u304b\u3089\u5fdc\u7528\u307e\u3067\u3092\u5b66\u7fd2\u3057\u307e\u3057\u305f\u3002</p>","tags":["PyTorch","\u6df1\u5c64\u5b66\u7fd2","\u30c6\u30f3\u30bd\u30eb","Python","\u6a5f\u68b0\u5b66\u7fd2","\u521d\u5fc3\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u57fa\u790e"]},{"location":"PyTorch/01_pytorch_fundamentals/#_33","title":"\u91cd\u8981\u306a\u30dd\u30a4\u30f3\u30c8","text":"<ol> <li>\u30c6\u30f3\u30bd\u30eb\u306e\u7a2e\u985e: \u30b9\u30ab\u30e9\u30fc\u3001\u30d9\u30af\u30c8\u30eb\u3001\u884c\u5217\u3001\u9ad8\u6b21\u5143\u30c6\u30f3\u30bd\u30eb</li> <li>\u57fa\u672c\u64cd\u4f5c: \u4f5c\u6210\u3001\u6f14\u7b97\u3001\u5f62\u72b6\u5909\u66f4\u3001\u30a4\u30f3\u30c7\u30c3\u30af\u30b9</li> <li>\u884c\u5217\u4e57\u7b97: \u6df1\u5c64\u5b66\u7fd2\u306e\u6838\u3068\u306a\u308b\u91cd\u8981\u306a\u6f14\u7b97</li> <li>\u30c7\u30d0\u30a4\u30b9\u7ba1\u7406: CPU/GPU\u9593\u3067\u306e\u30c6\u30f3\u30bd\u30eb\u79fb\u52d5</li> <li>\u518d\u73fe\u6027: \u5b9f\u9a13\u306e\u4fe1\u983c\u6027\u78ba\u4fdd</li> </ol>","tags":["PyTorch","\u6df1\u5c64\u5b66\u7fd2","\u30c6\u30f3\u30bd\u30eb","Python","\u6a5f\u68b0\u5b66\u7fd2","\u521d\u5fc3\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u57fa\u790e"]},{"location":"PyTorch/01_pytorch_fundamentals/#_34","title":"\u53c2\u8003\u8cc7\u6599","text":"","tags":["PyTorch","\u6df1\u5c64\u5b66\u7fd2","\u30c6\u30f3\u30bd\u30eb","Python","\u6a5f\u68b0\u5b66\u7fd2","\u521d\u5fc3\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u57fa\u790e"]},{"location":"PyTorch/01_pytorch_fundamentals/#_35","title":"\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8","text":"<ul> <li>PyTorch\u516c\u5f0f\u30c6\u30f3\u30bd\u30eb\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8</li> <li>PyTorch\u57fa\u672c\u64cd\u4f5c\u30ac\u30a4\u30c9</li> </ul>","tags":["PyTorch","\u6df1\u5c64\u5b66\u7fd2","\u30c6\u30f3\u30bd\u30eb","Python","\u6a5f\u68b0\u5b66\u7fd2","\u521d\u5fc3\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u57fa\u790e"]},{"location":"PyTorch/02_pytorch_workflow/","title":"PyTorch\uff1a\u7dda\u5f62\u56de\u5e30\u304b\u3089\u5b66\u3076\u6a5f\u68b0\u5b66\u7fd2","text":"","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u7dda\u5f62\u56de\u5e30","\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0","\u521d\u5fc3\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u30ef\u30fc\u30af\u30d5\u30ed\u30fc","\u5b9f\u8df5","\u57fa\u790e"]},{"location":"PyTorch/02_pytorch_workflow/#_1","title":"\u6982\u8981","text":"<p>\u6a5f\u68b0\u5b66\u7fd2\u3068\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0\u306e\u672c\u8cea\u306f\u3001\u904e\u53bb\u306e\u30c7\u30fc\u30bf\u304b\u3089\u30d1\u30bf\u30fc\u30f3\u3092\u767a\u898b\u3057\u3001\u305d\u306e\u30d1\u30bf\u30fc\u30f3\u3092\u4f7f\u7528\u3057\u3066\u672a\u6765\u3092\u4e88\u6e2c\u3059\u308b\u3053\u3068\u3067\u3059\u3002\u672c\u8a18\u4e8b\u3067\u306f\u3001\u6700\u3082\u30b7\u30f3\u30d7\u30eb\u306a\u7dda\u5f62\u56de\u5e30\u554f\u984c\u3092\u901a\u3058\u3066\u3001PyTorch\u3092\u4f7f\u7528\u3057\u305f\u6a5f\u68b0\u5b66\u7fd2\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u5b8c\u5168\u306a\u30ef\u30fc\u30af\u30d5\u30ed\u30fc\u3092\u5b66\u7fd2\u3057\u307e\u3059\u3002</p>","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u7dda\u5f62\u56de\u5e30","\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0","\u521d\u5fc3\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u30ef\u30fc\u30af\u30d5\u30ed\u30fc","\u5b9f\u8df5","\u57fa\u790e"]},{"location":"PyTorch/02_pytorch_workflow/#_2","title":"\u5b66\u7fd2\u76ee\u6a19","text":"<ul> <li>PyTorch\u3092\u4f7f\u7528\u3057\u305f\u6a5f\u68b0\u5b66\u7fd2\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u57fa\u672c\u7684\u306a\u6d41\u308c\u3092\u7406\u89e3\u3059\u308b</li> <li>\u30c7\u30fc\u30bf\u306e\u6e96\u5099\u304b\u3089\u30e2\u30c7\u30eb\u306e\u8a55\u4fa1\u307e\u3067\u3001\u5404\u30b9\u30c6\u30c3\u30d7\u306e\u91cd\u8981\u6027\u3092\u628a\u63e1\u3059\u308b</li> <li>\u7dda\u5f62\u56de\u5e30\u30e2\u30c7\u30eb\u306e\u5b9f\u88c5\u3068\u8a13\u7df4\u30d7\u30ed\u30bb\u30b9\u3092\u7fd2\u5f97\u3059\u308b</li> <li>\u52fe\u914d\u964d\u4e0b\u6cd5\u3068\u30d0\u30c3\u30af\u30d7\u30ed\u30d1\u30b2\u30fc\u30b7\u30e7\u30f3\u306e\u57fa\u672c\u6982\u5ff5\u3092\u7406\u89e3\u3059\u308b</li> </ul>","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u7dda\u5f62\u56de\u5e30","\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0","\u521d\u5fc3\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u30ef\u30fc\u30af\u30d5\u30ed\u30fc","\u5b9f\u8df5","\u57fa\u790e"]},{"location":"PyTorch/02_pytorch_workflow/#_3","title":"\u524d\u63d0\u77e5\u8b58","text":"<ul> <li>Python\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u57fa\u790e\u77e5\u8b58</li> <li>\u57fa\u672c\u7684\u306a\u6570\u5b66\uff08\u5fae\u5206\u3001\u7dda\u5f62\u4ee3\u6570\u306e\u521d\u6b69\uff09</li> <li>PyTorch\u306e\u57fa\u672c\u7684\u306a\u6982\u5ff5\uff08\u30c6\u30f3\u30bd\u30eb\u64cd\u4f5c\uff09</li> </ul>","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u7dda\u5f62\u56de\u5e30","\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0","\u521d\u5fc3\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u30ef\u30fc\u30af\u30d5\u30ed\u30fc","\u5b9f\u8df5","\u57fa\u790e"]},{"location":"PyTorch/02_pytorch_workflow/#_4","title":"\u6a5f\u68b0\u5b66\u7fd2\u30ef\u30fc\u30af\u30d5\u30ed\u30fc\u306e\u5168\u4f53\u50cf","text":"<p>\u672c\u8a18\u4e8b\u3067\u306f\u3001\u6a5f\u68b0\u5b66\u7fd2\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u6a19\u6e96\u7684\u306a6\u3064\u306e\u30b9\u30c6\u30c3\u30d7\u3092\u9806\u756a\u306b\u9032\u3081\u3066\u3044\u304d\u307e\u3059\u3002</p> \u30b9\u30c6\u30c3\u30d7 \u5185\u5bb9 \u4e3b\u306a\u4f5c\u696d 1. \u30c7\u30fc\u30bf\u306e\u6e96\u5099 \u554f\u984c\u306b\u9069\u3057\u305f\u30c7\u30fc\u30bf\u3092\u4f5c\u6210\u30fb\u6e96\u5099\u3059\u308b \u5408\u6210\u30c7\u30fc\u30bf\u306e\u751f\u6210\u3001\u30c7\u30fc\u30bf\u306e\u53ef\u8996\u5316 2. \u30e2\u30c7\u30eb\u306e\u69cb\u7bc9 \u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30e2\u30c7\u30eb\u3092\u5b9a\u7fa9\u3059\u308b <code>nn.Module</code>\u3092\u7d99\u627f\u3057\u305f\u30af\u30e9\u30b9\u306e\u4f5c\u6210 3. \u30e2\u30c7\u30eb\u306e\u8a13\u7df4 \u30c7\u30fc\u30bf\u3092\u4f7f\u3063\u3066\u30e2\u30c7\u30eb\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6700\u9069\u5316\u3059\u308b \u640d\u5931\u95a2\u6570\u3068\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u30fc\u306e\u8a2d\u5b9a\u3001\u8a13\u7df4\u30eb\u30fc\u30d7\u306e\u5b9f\u88c5 4. \u4e88\u6e2c\u3068\u8a55\u4fa1 \u8a13\u7df4\u6e08\u307f\u30e2\u30c7\u30eb\u3067\u4e88\u6e2c\u3092\u884c\u3044\u6027\u80fd\u3092\u8a55\u4fa1\u3059\u308b \u63a8\u8ad6\u30e2\u30fc\u30c9\u3067\u306e\u4e88\u6e2c\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3067\u306e\u8a55\u4fa1 5. \u30e2\u30c7\u30eb\u306e\u4fdd\u5b58\u30fb\u8aad\u307f\u8fbc\u307f \u30e2\u30c7\u30eb\u3092\u4fdd\u5b58\u3057\u3066\u518d\u5229\u7528\u53ef\u80fd\u306b\u3059\u308b <code>state_dict()</code>\u306e\u4fdd\u5b58\u30fb\u8aad\u307f\u8fbc\u307f 6. \u7d71\u5408 \u5168\u4f53\u306e\u30ef\u30fc\u30af\u30d5\u30ed\u30fc\u3092\u307e\u3068\u3081\u308b \u30b3\u30fc\u30c9\u306e\u6574\u7406\u3068\u6700\u9069\u5316","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u7dda\u5f62\u56de\u5e30","\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0","\u521d\u5fc3\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u30ef\u30fc\u30af\u30d5\u30ed\u30fc","\u5b9f\u8df5","\u57fa\u790e"]},{"location":"PyTorch/02_pytorch_workflow/#_5","title":"\u5b9f\u88c5\u6e96\u5099","text":"<p>\u307e\u305a\u306f\u5fc5\u8981\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u3001\u5b9f\u884c\u74b0\u5883\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002</p> <pre><code>import torch\nfrom torch import nn\nimport matplotlib.pyplot as plt\n\n# \u4f7f\u7528\u53ef\u80fd\u306a\u30c7\u30d0\u30a4\u30b9\u3092\u78ba\u8a8d\uff08Apple Silicon\u306eMPS\u307e\u305f\u306fCPU\uff09\ndevice = \"mps\" if torch.backends.mps.is_available() else \"cpu\"\nprint(f\"PyTorch\u30d0\u30fc\u30b8\u30e7\u30f3: {torch.__version__}\")\nprint(f\"\u4f7f\u7528\u30c7\u30d0\u30a4\u30b9: {device}\")\n</code></pre> <pre><code>PyTorch\u30d0\u30fc\u30b8\u30e7\u30f3: 2.7.0\n\u4f7f\u7528\u30c7\u30d0\u30a4\u30b9: mps\n</code></pre>","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u7dda\u5f62\u56de\u5e30","\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0","\u521d\u5fc3\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u30ef\u30fc\u30af\u30d5\u30ed\u30fc","\u5b9f\u8df5","\u57fa\u790e"]},{"location":"PyTorch/02_pytorch_workflow/#1","title":"1. \u30c7\u30fc\u30bf\u306e\u6e96\u5099\u3068\u8aad\u307f\u8fbc\u307f","text":"","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u7dda\u5f62\u56de\u5e30","\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0","\u521d\u5fc3\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u30ef\u30fc\u30af\u30d5\u30ed\u30fc","\u5b9f\u8df5","\u57fa\u790e"]},{"location":"PyTorch/02_pytorch_workflow/#_6","title":"\u5408\u6210\u30c7\u30fc\u30bf\u306e\u751f\u6210","text":"<p>\u6a5f\u68b0\u5b66\u7fd2\u3067\u306f\u3001\u30c7\u30fc\u30bf\u306e\u5f62\u5f0f\u306f\u69d8\u3005\u3067\u3059\uff08Excel\u30d5\u30a1\u30a4\u30eb\u3001\u753b\u50cf\u3001\u52d5\u753b\u3001\u97f3\u58f0\u3001\u30c6\u30ad\u30b9\u30c8\u306a\u3069\uff09\u3002\u3057\u304b\u3057\u3001\u3059\u3079\u3066\u306e\u30c7\u30fc\u30bf\u306f\u6700\u7d42\u7684\u306b\u6570\u5024\u8868\u73fe\u306b\u5909\u63db\u3055\u308c\u3001\u30e2\u30c7\u30eb\u304c\u5b66\u7fd2\u53ef\u80fd\u306a\u5f62\u5f0f\u306b\u306a\u308a\u307e\u3059\u3002</p> <p>\u4eca\u56de\u306f\u3001\u7dda\u5f62\u56de\u5e30\u306e\u7406\u89e3\u3092\u6df1\u3081\u308b\u305f\u3081\u3001\u65e2\u77e5\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u4f7f\u7528\u3057\u3066\u5408\u6210\u30c7\u30fc\u30bf\u3092\u751f\u6210\u3057\u307e\u3059\u3002</p> <pre><code># \u65e2\u77e5\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8a2d\u5b9a\uff08\u30e2\u30c7\u30eb\u304c\u5b66\u7fd2\u3059\u3079\u304d\u771f\u306e\u5024\uff09\nweight = 0.7  # \u91cd\u307f\uff08\u50be\u304d\uff09\nbias = 0.3    # \u30d0\u30a4\u30a2\u30b9\uff08y\u5207\u7247\uff09\n\n# \u30c7\u30fc\u30bf\u306e\u7bc4\u56f2\u3092\u8a2d\u5b9a\nstart = 0\nend = 1\nstep = 0.02\n\n# \u7dda\u5f62\u95a2\u4fc2 y = weight * x + bias \u306b\u5f93\u3063\u3066\u30c7\u30fc\u30bf\u3092\u751f\u6210\nX = torch.arange(start, end, step).unsqueeze(dim=1)  # \u5165\u529b\u7279\u5fb4\u91cf\ny = weight * X + bias  # \u51fa\u529b\u30e9\u30d9\u30eb\n\nprint(f\"\u30c7\u30fc\u30bf\u5f62\u72b6: X={X.shape}, y={y.shape}\")\nprint(f\"X\u306e\u6700\u521d\u306e10\u500b\u306e\u5024:\\n{X[:10].flatten()}\")\nprint(f\"y\u306e\u6700\u521d\u306e10\u500b\u306e\u5024:\\n{y[:10].flatten()}\")\n</code></pre> <pre><code>\u30c7\u30fc\u30bf\u5f62\u72b6: X=torch.Size([50, 1]), y=torch.Size([50, 1])\nX\u306e\u6700\u521d\u306e10\u500b\u306e\u5024:\ntensor([0.0000, 0.0200, 0.0400, 0.0600, 0.0800, 0.1000, 0.1200, 0.1400, 0.1600, 0.1800])\ny\u306e\u6700\u521d\u306e10\u500b\u306e\u5024:\ntensor([0.3000, 0.3140, 0.3280, 0.3420, 0.3560, 0.3700, 0.3840, 0.3980, 0.4120, 0.4260])\n</code></pre>","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u7dda\u5f62\u56de\u5e30","\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0","\u521d\u5fc3\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u30ef\u30fc\u30af\u30d5\u30ed\u30fc","\u5b9f\u8df5","\u57fa\u790e"]},{"location":"PyTorch/02_pytorch_workflow/#_7","title":"\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u5206\u5272","text":"<p>\u6a5f\u68b0\u5b66\u7fd2\u3067\u306f\u3001\u30c7\u30fc\u30bf\u3092\u8a13\u7df4\u7528\u3068\u30c6\u30b9\u30c8\u7528\u306b\u5206\u5272\u3059\u308b\u3053\u3068\u304c\u91cd\u8981\u3067\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u30e2\u30c7\u30eb\u306e\u6c4e\u5316\u6027\u80fd\u3092\u9069\u5207\u306b\u8a55\u4fa1\u3067\u304d\u307e\u3059\u3002</p> \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8 \u76ee\u7684 \u5168\u4f53\u306b\u5360\u3081\u308b\u5272\u5408 \u4f7f\u7528\u983b\u5ea6 \u8a13\u7df4\u30bb\u30c3\u30c8 \u30e2\u30c7\u30eb\u304c\u30d1\u30bf\u30fc\u30f3\u3092\u5b66\u7fd2\u3059\u308b 60-80% \u6bce\u30a8\u30dd\u30c3\u30af \u691c\u8a3c\u30bb\u30c3\u30c8 \u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8abf\u6574 10-20% \u5b9a\u671f\u7684 \u30c6\u30b9\u30c8\u30bb\u30c3\u30c8 \u6700\u7d42\u7684\u306a\u6027\u80fd\u8a55\u4fa1 10-20% \u6700\u5f8c\u306e\u307f <pre><code># 80%\u3092\u8a13\u7df4\u7528\u300120%\u3092\u30c6\u30b9\u30c8\u7528\u306b\u5206\u5272\ntrain_split = int(0.8 * len(X))\nX_train, y_train = X[:train_split], y[:train_split]\nX_test, y_test = X[train_split:], y[train_split:]\n\nprint(f\"\u8a13\u7df4\u30c7\u30fc\u30bf: {len(X_train)}\u30b5\u30f3\u30d7\u30eb\")\nprint(f\"\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf: {len(X_test)}\u30b5\u30f3\u30d7\u30eb\")\n</code></pre> <pre><code>\u8a13\u7df4\u30c7\u30fc\u30bf: 40\u30b5\u30f3\u30d7\u30eb\n\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf: 10\u30b5\u30f3\u30d7\u30eb\n</code></pre>","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u7dda\u5f62\u56de\u5e30","\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0","\u521d\u5fc3\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u30ef\u30fc\u30af\u30d5\u30ed\u30fc","\u5b9f\u8df5","\u57fa\u790e"]},{"location":"PyTorch/02_pytorch_workflow/#_8","title":"\u30c7\u30fc\u30bf\u306e\u53ef\u8996\u5316","text":"<p>\u30c7\u30fc\u30bf\u306e\u5206\u5e03\u3068\u95a2\u4fc2\u6027\u3092\u8996\u899a\u7684\u306b\u78ba\u8a8d\u3059\u308b\u3053\u3068\u3067\u3001\u554f\u984c\u306e\u7406\u89e3\u3092\u6df1\u3081\u307e\u3059\u3002</p> <pre><code>def plot_predictions(train_data=X_train,\n                     train_labels=y_train,\n                     test_data=X_test,\n                     test_labels=y_test,\n                     predictions=None):\n    \"\"\"\n    \u8a13\u7df4\u30c7\u30fc\u30bf\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3001\u4e88\u6e2c\u7d50\u679c\u3092\u53ef\u8996\u5316\u3059\u308b\u95a2\u6570\n    \"\"\"\n    plt.figure(figsize=(10, 7))\n\n    # \u8a13\u7df4\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u30d7\u30ed\u30c3\u30c8\n    plt.scatter(train_data, train_labels, c=\"b\", s=4, label=\"\u8a13\u7df4\u30c7\u30fc\u30bf\")\n    plt.scatter(test_data, test_labels, c=\"g\", s=4, label=\"\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\")\n\n    # \u4e88\u6e2c\u7d50\u679c\u304c\u3042\u308c\u3070\u30d7\u30ed\u30c3\u30c8\n    if predictions is not None:\n        plt.scatter(test_data, predictions, c=\"r\", s=4, label=\"\u4e88\u6e2c\u7d50\u679c\")\n\n    plt.legend(prop={\"size\": 14})\n    plt.xlabel(\"X\")\n    plt.ylabel(\"y\")\n    plt.title(\"\u7dda\u5f62\u56de\u5e30\u30c7\u30fc\u30bf\u306e\u53ef\u8996\u5316\")\n\n# \u521d\u671f\u30c7\u30fc\u30bf\u306e\u53ef\u8996\u5316\nplot_predictions()\nplt.show()\n</code></pre> <p></p>","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u7dda\u5f62\u56de\u5e30","\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0","\u521d\u5fc3\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u30ef\u30fc\u30af\u30d5\u30ed\u30fc","\u5b9f\u8df5","\u57fa\u790e"]},{"location":"PyTorch/02_pytorch_workflow/#2","title":"2. \u30e2\u30c7\u30eb\u306e\u69cb\u7bc9","text":"","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u7dda\u5f62\u56de\u5e30","\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0","\u521d\u5fc3\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u30ef\u30fc\u30af\u30d5\u30ed\u30fc","\u5b9f\u8df5","\u57fa\u790e"]},{"location":"PyTorch/02_pytorch_workflow/#pytorch_1","title":"PyTorch\u30e2\u30c7\u30eb\u69cb\u7bc9\u306e\u57fa\u672c\u6982\u5ff5","text":"<p>PyTorch\u3067\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u69cb\u7bc9\u3059\u308b\u969b\u306e\u91cd\u8981\u306a\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u7406\u89e3\u3057\u307e\u3057\u3087\u3046\u3002</p> \u30e2\u30b8\u30e5\u30fc\u30eb \u5f79\u5272 \u4e3b\u306a\u7528\u9014 <code>torch.nn</code> \u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u69cb\u6210\u8981\u7d20 \u30ec\u30a4\u30e4\u30fc\u3001\u6d3b\u6027\u5316\u95a2\u6570\u3001\u640d\u5931\u95a2\u6570 <code>torch.nn.Parameter</code> \u5b66\u7fd2\u53ef\u80fd\u306a\u30d1\u30e9\u30e1\u30fc\u30bf \u91cd\u307f\u3068\u30d0\u30a4\u30a2\u30b9 <code>torch.nn.Module</code> \u3059\u3079\u3066\u306e\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u57fa\u5e95\u30af\u30e9\u30b9 \u30ab\u30b9\u30bf\u30e0\u30e2\u30c7\u30eb\u306e\u5b9a\u7fa9 <code>torch.optim</code> \u6700\u9069\u5316\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0 SGD\u3001Adam\u3001RMSprop\u306a\u3069","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u7dda\u5f62\u56de\u5e30","\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0","\u521d\u5fc3\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u30ef\u30fc\u30af\u30d5\u30ed\u30fc","\u5b9f\u8df5","\u57fa\u790e"]},{"location":"PyTorch/02_pytorch_workflow/#_9","title":"\u7dda\u5f62\u56de\u5e30\u30e2\u30c7\u30eb\u306e\u5b9f\u88c5","text":"<p>\u307e\u305a\u3001<code>nn.Module</code>\u3092\u7d99\u627f\u3057\u3066\u30ab\u30b9\u30bf\u30e0\u30e2\u30c7\u30eb\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002</p> <pre><code>class LinearRegressionModel(nn.Module):\n    \"\"\"\n    \u7dda\u5f62\u56de\u5e30\u30e2\u30c7\u30eb: y = weight * x + bias\n    \"\"\"\n    def __init__(self):\n        super().__init__()\n        # \u5b66\u7fd2\u53ef\u80fd\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u5b9a\u7fa9\n        self.weights = nn.Parameter(torch.randn(1, \n                                               requires_grad=True,\n                                               dtype=torch.float))\n        self.bias = nn.Parameter(torch.randn(1,\n                                            requires_grad=True,\n                                            dtype=torch.float))\n\n    def forward(self, x: torch.Tensor) -&gt; torch.Tensor:\n        \"\"\"\n        \u30d5\u30a9\u30ef\u30fc\u30c9\u30d1\u30b9: \u30e2\u30c7\u30eb\u306e\u8a08\u7b97\u3092\u5b9a\u7fa9\n        \"\"\"\n        return self.weights * x + self.bias\n</code></pre>","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u7dda\u5f62\u56de\u5e30","\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0","\u521d\u5fc3\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u30ef\u30fc\u30af\u30d5\u30ed\u30fc","\u5b9f\u8df5","\u57fa\u790e"]},{"location":"PyTorch/02_pytorch_workflow/#_10","title":"\u30e2\u30c7\u30eb\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u4f5c\u6210\u3068\u78ba\u8a8d","text":"<pre><code># \u518d\u73fe\u6027\u306e\u305f\u3081\u306b\u30e9\u30f3\u30c0\u30e0\u30b7\u30fc\u30c9\u3092\u8a2d\u5b9a\ntorch.manual_seed(42)\n\n# \u30e2\u30c7\u30eb\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\nmodel_0 = LinearRegressionModel()\n\n# \u30e2\u30c7\u30eb\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u78ba\u8a8d\nprint(\"\u30e2\u30c7\u30eb\u306e\u30d1\u30e9\u30e1\u30fc\u30bf:\")\nfor name, param in model_0.named_parameters():\n    print(f\"{name}: {param.data}\")\n\nprint(f\"\\n\u30e2\u30c7\u30eb\u306e\u72b6\u614b\u8f9e\u66f8:\\n{model_0.state_dict()}\")\n</code></pre> <pre><code>\u30e2\u30c7\u30eb\u306e\u30d1\u30e9\u30e1\u30fc\u30bf:\nweights: tensor([0.3367])\nbias: tensor([0.1288])\n\n\u30e2\u30c7\u30eb\u306e\u72b6\u614b\u8f9e\u66f8:\nOrderedDict([('weights', tensor([0.3367])), ('bias', tensor([0.1288]))])\n</code></pre>","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u7dda\u5f62\u56de\u5e30","\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0","\u521d\u5fc3\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u30ef\u30fc\u30af\u30d5\u30ed\u30fc","\u5b9f\u8df5","\u57fa\u790e"]},{"location":"PyTorch/02_pytorch_workflow/#_11","title":"\u521d\u671f\u4e88\u6e2c\u306e\u5b9f\u884c","text":"<p>\u8a13\u7df4\u524d\u306e\u30e2\u30c7\u30eb\u3067\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u4e88\u6e2c\u3092\u884c\u3044\u3001\u30e9\u30f3\u30c0\u30e0\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u306e\u6027\u80fd\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002</p> <pre><code># \u63a8\u8ad6\u30e2\u30fc\u30c9\u3067\u4e88\u6e2c\u3092\u5b9f\u884c\nmodel_0.eval()  # \u8a55\u4fa1\u30e2\u30fc\u30c9\u306b\u8a2d\u5b9a\nwith torch.inference_mode():  # \u52fe\u914d\u8a08\u7b97\u3092\u7121\u52b9\u5316\u3057\u3066\u9ad8\u901f\u5316\n    y_preds = model_0(X_test)\n\nprint(\"\u8a13\u7df4\u524d\u306e\u4e88\u6e2c\u7d50\u679c:\")\nprint(y_preds[:5].flatten())\nprint(\"\\n\u5b9f\u969b\u306e\u5024:\")\nprint(y_test[:5].flatten())\n\n# \u4e88\u6e2c\u7d50\u679c\u3092\u53ef\u8996\u5316\nplot_predictions(predictions=y_preds)\nplt.title(\"\u8a13\u7df4\u524d\u306e\u30e2\u30c7\u30eb\u4e88\u6e2c\uff08\u30e9\u30f3\u30c0\u30e0\u30d1\u30e9\u30e1\u30fc\u30bf\uff09\")\nplt.show()\n</code></pre> <p></p> <p>\u73fe\u5728\u306e\u30e2\u30c7\u30eb\u306f\u5b8c\u5168\u306b\u30e9\u30f3\u30c0\u30e0\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u305f\u3081\u3001\u4e88\u6e2c\u306f\u5b9f\u969b\u306e\u5024\u304b\u3089\u5927\u304d\u304f\u5916\u308c\u3066\u3044\u307e\u3059\u3002</p>","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u7dda\u5f62\u56de\u5e30","\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0","\u521d\u5fc3\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u30ef\u30fc\u30af\u30d5\u30ed\u30fc","\u5b9f\u8df5","\u57fa\u790e"]},{"location":"PyTorch/02_pytorch_workflow/#3","title":"3. \u30e2\u30c7\u30eb\u306e\u8a13\u7df4\uff08\u5b66\u7fd2\u30d7\u30ed\u30bb\u30b9\uff09","text":"","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u7dda\u5f62\u56de\u5e30","\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0","\u521d\u5fc3\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u30ef\u30fc\u30af\u30d5\u30ed\u30fc","\u5b9f\u8df5","\u57fa\u790e"]},{"location":"PyTorch/02_pytorch_workflow/#_12","title":"\u640d\u5931\u95a2\u6570\u3068\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u30fc\u306e\u8a2d\u5b9a","text":"<p>\u30e2\u30c7\u30eb\u3092\u8a13\u7df4\u3059\u308b\u306b\u306f\u3001\u4ee5\u4e0b\u306e2\u3064\u306e\u91cd\u8981\u306a\u8981\u7d20\u304c\u5fc5\u8981\u3067\u3059\u3002</p> \u8981\u7d20 \u76ee\u7684 PyTorch\u3067\u306e\u5b9f\u88c5 \u4e00\u822c\u7684\u306a\u9078\u629e\u80a2 \u640d\u5931\u95a2\u6570 \u4e88\u6e2c\u3068\u5b9f\u969b\u306e\u5024\u306e\u5dee\u3092\u5b9a\u91cf\u5316 <code>torch.nn.*Loss</code> MAE, MSE, CrossEntropy \u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u30fc \u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u66f4\u65b0\u65b9\u6cd5\u3092\u6c7a\u5b9a <code>torch.optim.*</code> SGD, Adam, RMSprop <pre><code># \u640d\u5931\u95a2\u6570\uff1a\u5e73\u5747\u7d76\u5bfe\u8aa4\u5dee\uff08L1Loss\uff09\nloss_fn = nn.L1Loss()\n\n# \u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u30fc\uff1a\u78ba\u7387\u7684\u52fe\u914d\u964d\u4e0b\u6cd5\uff08SGD\uff09\noptimizer = torch.optim.SGD(params=model_0.parameters(),\n                           lr=0.005)  # \u5b66\u7fd2\u7387\n</code></pre>","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u7dda\u5f62\u56de\u5e30","\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0","\u521d\u5fc3\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u30ef\u30fc\u30af\u30d5\u30ed\u30fc","\u5b9f\u8df5","\u57fa\u790e"]},{"location":"PyTorch/02_pytorch_workflow/#pytorch_2","title":"PyTorch\u8a13\u7df4\u30eb\u30fc\u30d7\u306e\u5b9f\u88c5","text":"<p>\u6a5f\u68b0\u5b66\u7fd2\u306e\u8a13\u7df4\u306f\u3001\u4ee5\u4e0b\u306e5\u3064\u306e\u30b9\u30c6\u30c3\u30d7\u3092\u7e70\u308a\u8fd4\u3059\u30d7\u30ed\u30bb\u30b9\u3067\u3059\u3002</p> \u30b9\u30c6\u30c3\u30d7 \u51e6\u7406\u5185\u5bb9 \u30b3\u30fc\u30c9\u4f8b 1. \u30d5\u30a9\u30ef\u30fc\u30c9\u30d1\u30b9 \u73fe\u5728\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u4e88\u6e2c\u3092\u8a08\u7b97 <code>y_pred = model(x_train)</code> 2. \u640d\u5931\u8a08\u7b97 \u4e88\u6e2c\u3068\u5b9f\u969b\u306e\u5024\u306e\u5dee\u3092\u8a08\u7b97 <code>loss = loss_fn(y_pred, y_train)</code> 3. \u52fe\u914d\u521d\u671f\u5316 \u524d\u56de\u306e\u52fe\u914d\u3092\u30ea\u30bb\u30c3\u30c8 <code>optimizer.zero_grad()</code> 4. \u30d0\u30c3\u30af\u30d7\u30ed\u30d1\u30b2\u30fc\u30b7\u30e7\u30f3 \u640d\u5931\u306b\u95a2\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u52fe\u914d\u3092\u8a08\u7b97 <code>loss.backward()</code> 5. \u30d1\u30e9\u30e1\u30fc\u30bf\u66f4\u65b0 \u52fe\u914d\u3092\u4f7f\u3063\u3066\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u66f4\u65b0 <code>optimizer.step()</code> <pre><code># \u8a13\u7df4\u306e\u8a2d\u5b9a\nepochs = 500  # \u30a8\u30dd\u30c3\u30af\u6570\uff08\u5168\u30c7\u30fc\u30bf\u3092\u4f55\u56de\u5b66\u7fd2\u3059\u308b\u304b\uff09\n\n# \u9032\u6357\u8ffd\u8de1\u7528\u306e\u30ea\u30b9\u30c8\nepoch_count = []\nloss_values = []\ntest_loss_values = []\n\nprint(\"\u8a13\u7df4\u958b\u59cb...\")\nfor epoch in range(epochs):\n    ### \u8a13\u7df4\u30d5\u30a7\u30fc\u30ba ###\n    model_0.train()  # \u8a13\u7df4\u30e2\u30fc\u30c9\u306b\u8a2d\u5b9a\n\n    # 1. \u30d5\u30a9\u30ef\u30fc\u30c9\u30d1\u30b9\n    y_pred = model_0(X_train)\n\n    # 2. \u640d\u5931\u8a08\u7b97\n    loss = loss_fn(y_pred, y_train)\n\n    # 3. \u52fe\u914d\u521d\u671f\u5316\n    optimizer.zero_grad()\n\n    # 4. \u30d0\u30c3\u30af\u30d7\u30ed\u30d1\u30b2\u30fc\u30b7\u30e7\u30f3\n    loss.backward()\n\n    # 5. \u30d1\u30e9\u30e1\u30fc\u30bf\u66f4\u65b0\n    optimizer.step()\n\n    ### \u30c6\u30b9\u30c8\u30d5\u30a7\u30fc\u30ba ###\n    model_0.eval()  # \u8a55\u4fa1\u30e2\u30fc\u30c9\u306b\u8a2d\u5b9a\n\n    with torch.inference_mode():\n        # \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3067\u4e88\u6e2c\n        test_pred = model_0(X_test)\n        # \u30c6\u30b9\u30c8\u640d\u5931\u3092\u8a08\u7b97\n        test_loss = loss_fn(test_pred, y_test)\n\n    # \u9032\u6357\u3092\u8a18\u9332\u30fb\u8868\u793a\n    if epoch % 50 == 0:\n        epoch_count.append(epoch)\n        loss_values.append(loss.detach())  # \u52fe\u914d\u60c5\u5831\u3092\u5207\u308a\u96e2\u3057\u3066\u4fdd\u5b58\n        test_loss_values.append(test_loss.detach())\n\n        print(f\"\u30a8\u30dd\u30c3\u30af: {epoch:3d} | \u8a13\u7df4\u640d\u5931: {loss:.6f} | \u30c6\u30b9\u30c8\u640d\u5931: {test_loss:.6f}\")\n        print(f\"\u30d1\u30e9\u30e1\u30fc\u30bf - \u91cd\u307f: {model_0.state_dict()['weights'].item():.4f}, \"\n              f\"\u30d0\u30a4\u30a2\u30b9: {model_0.state_dict()['bias'].item():.4f}\")\n\nprint(f\"\\n\u8a13\u7df4\u5b8c\u4e86\uff01\u6700\u7d42\u30d1\u30e9\u30e1\u30fc\u30bf:\")\nprint(f\"\u91cd\u307f: {model_0.state_dict()['weights'].item():.4f} (\u771f\u306e\u5024: {weight})\")\nprint(f\"\u30d0\u30a4\u30a2\u30b9: {model_0.state_dict()['bias'].item():.4f} (\u771f\u306e\u5024: {bias})\")\n</code></pre> <pre><code>\u8a13\u7df4\u958b\u59cb...\n\u30a8\u30dd\u30c3\u30af:   0 | \u8a13\u7df4\u640d\u5931: 0.312881 | \u30c6\u30b9\u30c8\u640d\u5931: 0.487801\n\u30d1\u30e9\u30e1\u30fc\u30bf - \u91cd\u307f: 0.3386, \u30d0\u30a4\u30a2\u30b9: 0.1338\n\u30a8\u30dd\u30c3\u30af:  50 | \u8a13\u7df4\u640d\u5931: 0.064309 | \u30c6\u30b9\u30c8\u640d\u5931: 0.178070\n\u30d1\u30e9\u30e1\u30fc\u30bf - \u91cd\u307f: 0.4344, \u30d0\u30a4\u30a2\u30b9: 0.3583\n\u30a8\u30dd\u30c3\u30af: 100 | \u8a13\u7df4\u640d\u5931: 0.041652 | \u30c6\u30b9\u30c8\u640d\u5931: 0.100242\n\u30d1\u30e9\u30e1\u30fc\u30bf - \u91cd\u307f: 0.4929, \u30d0\u30a4\u30a2\u30b9: 0.3841\n\u30a8\u30dd\u30c3\u30af: 150 | \u8a13\u7df4\u640d\u5931: 0.033003 | \u30c6\u30b9\u30c8\u640d\u5931: 0.076814\n\u30d1\u30e9\u30e1\u30fc\u30bf - \u91cd\u307f: 0.5367, \u30d0\u30a4\u30a2\u30b9: 0.3686\n\u30a8\u30dd\u30c3\u30af: 200 | \u8a13\u7df4\u640d\u5931: 0.024416 | \u30c6\u30b9\u30c8\u640d\u5931: 0.056821\n\u30d1\u30e9\u30e1\u30fc\u30bf - \u91cd\u307f: 0.5793, \u30d0\u30a4\u30a2\u30b9: 0.3506\n\u30a8\u30dd\u30c3\u30af: 250 | \u8a13\u7df4\u640d\u5931: 0.015829 | \u30c6\u30b9\u30c8\u640d\u5931: 0.036484\n\u30d1\u30e9\u30e1\u30fc\u30bf - \u91cd\u307f: 0.6221, \u30d0\u30a4\u30a2\u30b9: 0.3328\n\u30a8\u30dd\u30c3\u30af: 300 | \u8a13\u7df4\u640d\u5931: 0.007245 | \u30c6\u30b9\u30c8\u640d\u5931: 0.016491\n\u30d1\u30e9\u30e1\u30fc\u30bf - \u91cd\u307f: 0.6648, \u30d0\u30a4\u30a2\u30b9: 0.3148\n\u30a8\u30dd\u30c3\u30af: 350 | \u8a13\u7df4\u640d\u5931: 0.001977 | \u30c6\u30b9\u30c8\u640d\u5931: 0.002469\n\u30d1\u30e9\u30e1\u30fc\u30bf - \u91cd\u307f: 0.6974, \u30d0\u30a4\u30a2\u30b9: 0.3048\n\u30a8\u30dd\u30c3\u30af: 400 | \u8a13\u7df4\u640d\u5931: 0.001977 | \u30c6\u30b9\u30c8\u640d\u5931: 0.002469\n\u30d1\u30e9\u30e1\u30fc\u30bf - \u91cd\u307f: 0.6974, \u30d0\u30a4\u30a2\u30b9: 0.3048\n\u30a8\u30dd\u30c3\u30af: 450 | \u8a13\u7df4\u640d\u5931: 0.001977 | \u30c6\u30b9\u30c8\u640d\u5931: 0.002469\n\u30d1\u30e9\u30e1\u30fc\u30bf - \u91cd\u307f: 0.6974, \u30d0\u30a4\u30a2\u30b9: 0.3048\n\n\u8a13\u7df4\u5b8c\u4e86\uff01\u6700\u7d42\u30d1\u30e9\u30e1\u30fc\u30bf:\n\u91cd\u307f: 0.6974 (\u771f\u306e\u5024: 0.7)\n\u30d0\u30a4\u30a2\u30b9: 0.3048 (\u771f\u306e\u5024: 0.3)\n</code></pre>","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u7dda\u5f62\u56de\u5e30","\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0","\u521d\u5fc3\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u30ef\u30fc\u30af\u30d5\u30ed\u30fc","\u5b9f\u8df5","\u57fa\u790e"]},{"location":"PyTorch/02_pytorch_workflow/#_13","title":"\u8a13\u7df4\u904e\u7a0b\u306e\u53ef\u8996\u5316","text":"<p>\u640d\u5931\u306e\u5909\u5316\u3092\u53ef\u8996\u5316\u3059\u308b\u3053\u3068\u3067\u3001\u8a13\u7df4\u306e\u9032\u6357\u3092\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002</p> <pre><code>import numpy as np\n\nplt.figure(figsize=(10, 6))\nplt.plot(epoch_count, np.array([t.numpy() for t in loss_values]), \n         label=\"\u8a13\u7df4\u640d\u5931\", marker='o')\nplt.plot(epoch_count, np.array([t.numpy() for t in test_loss_values]), \n         label=\"\u30c6\u30b9\u30c8\u640d\u5931\", marker='s')\nplt.title(\"\u8a13\u7df4\u30fb\u30c6\u30b9\u30c8\u640d\u5931\u306e\u5909\u5316\")\nplt.ylabel(\"\u640d\u5931\u5024\")\nplt.xlabel(\"\u30a8\u30dd\u30c3\u30af\")\nplt.legend()\nplt.grid(True, alpha=0.3)\nplt.show()\n</code></pre> <p></p> <p>\u30b0\u30e9\u30d5\u304b\u3089\u3001\u8a13\u7df4\u304c\u9032\u3080\u306b\u3064\u308c\u3066\u640d\u5931\u304c\u6e1b\u5c11\u3057\u3001\u7d04350\u30a8\u30dd\u30c3\u30af\u4ed8\u8fd1\u3067\u53ce\u675f\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002</p>","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u7dda\u5f62\u56de\u5e30","\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0","\u521d\u5fc3\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u30ef\u30fc\u30af\u30d5\u30ed\u30fc","\u5b9f\u8df5","\u57fa\u790e"]},{"location":"PyTorch/02_pytorch_workflow/#4","title":"4. \u8a13\u7df4\u6e08\u307f\u30e2\u30c7\u30eb\u306b\u3088\u308b\u4e88\u6e2c\u3068\u8a55\u4fa1","text":"","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u7dda\u5f62\u56de\u5e30","\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0","\u521d\u5fc3\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u30ef\u30fc\u30af\u30d5\u30ed\u30fc","\u5b9f\u8df5","\u57fa\u790e"]},{"location":"PyTorch/02_pytorch_workflow/#_14","title":"\u63a8\u8ad6\u306e\u5b9f\u884c","text":"<p>\u8a13\u7df4\u6e08\u307f\u30e2\u30c7\u30eb\u3092\u4f7f\u7528\u3057\u3066\u4e88\u6e2c\u3092\u884c\u3046\u969b\u306e\u91cd\u8981\u306a\u30dd\u30a4\u30f3\u30c8\uff1a</p> <ol> <li>\u8a55\u4fa1\u30e2\u30fc\u30c9\u306e\u8a2d\u5b9a: <code>model.eval()</code>\u3067\u30c9\u30ed\u30c3\u30d7\u30a2\u30a6\u30c8\u3084\u30d0\u30c3\u30c1\u6b63\u898f\u5316\u3092\u7121\u52b9\u5316</li> <li>\u63a8\u8ad6\u30e2\u30fc\u30c9\u306e\u4f7f\u7528: <code>torch.inference_mode()</code>\u3067\u52fe\u914d\u8a08\u7b97\u3092\u7121\u52b9\u5316\u3057\u9ad8\u901f\u5316</li> <li>\u30c7\u30d0\u30a4\u30b9\u4e00\u81f4: \u30c7\u30fc\u30bf\u3068\u30e2\u30c7\u30eb\u304c\u540c\u3058\u30c7\u30d0\u30a4\u30b9\u4e0a\u306b\u3042\u308b\u3053\u3068\u3092\u78ba\u8a8d</li> </ol> <pre><code>print(f\"\u771f\u306e\u30d1\u30e9\u30e1\u30fc\u30bf - \u91cd\u307f: {weight}, \u30d0\u30a4\u30a2\u30b9: {bias}\")\n\n# \u8a13\u7df4\u6e08\u307f\u30e2\u30c7\u30eb\u3067\u4e88\u6e2c\u3092\u5b9f\u884c\nmodel_0.eval()\nwith torch.inference_mode():\n    y_pred_final = model_0(X_test)\n\nprint(f\"\u4e88\u6e2c\u7d50\u679c:\")\nfor i in range(len(y_pred_final)):\n    print(f\"X={X_test[i].item():.2f} -&gt; \u4e88\u6e2c={y_pred_final[i].item():.4f}, \"\n          f\"\u5b9f\u969b={y_test[i].item():.4f}, \"\n          f\"\u8aa4\u5dee={abs(y_pred_final[i].item() - y_test[i].item()):.4f}\")\n\n# \u6700\u7d42\u7684\u306a\u4e88\u6e2c\u7d50\u679c\u3092\u53ef\u8996\u5316\nplot_predictions(predictions=y_pred_final)\nplt.title(\"\u8a13\u7df4\u5f8c\u306e\u30e2\u30c7\u30eb\u4e88\u6e2c\u7d50\u679c\")\nplt.show()\n</code></pre> <pre><code>\u771f\u306e\u30d1\u30e9\u30e1\u30fc\u30bf - \u91cd\u307f: 0.7, \u30d0\u30a4\u30a2\u30b9: 0.3\n\u4e88\u6e2c\u7d50\u679c:\nX=0.80 -&gt; \u4e88\u6e2c=0.8561, \u5b9f\u969b=0.8600, \u8aa4\u5dee=0.0039\nX=0.82 -&gt; \u4e88\u6e2c=0.8701, \u5b9f\u969b=0.8740, \u8aa4\u5dee=0.0039\nX=0.84 -&gt; \u4e88\u6e2c=0.8840, \u5b9f\u969b=0.8880, \u8aa4\u5dee=0.0040\nX=0.86 -&gt; \u4e88\u6e2c=0.8979, \u5b9f\u969b=0.9020, \u8aa4\u5dee=0.0041\nX=0.88 -&gt; \u4e88\u6e2c=0.9118, \u5b9f\u969b=0.9160, \u8aa4\u5dee=0.0042\nX=0.90 -&gt; \u4e88\u6e2c=0.9257, \u5b9f\u969b=0.9300, \u8aa4\u5dee=0.0043\nX=0.92 -&gt; \u4e88\u6e2c=0.9396, \u5b9f\u969b=0.9440, \u8aa4\u5dee=0.0044\nX=0.94 -&gt; \u4e88\u6e2c=0.9535, \u5b9f\u969b=0.9580, \u8aa4\u5dee=0.0045\nX=0.96 -&gt; \u4e88\u6e2c=0.9674, \u5b9f\u969b=0.9720, \u8aa4\u5dee=0.0046\nX=0.98 -&gt; \u4e88\u6e2c=0.9813, \u5b9f\u969b=0.9860, \u8aa4\u5dee=0.0047\n</code></pre> <p></p>","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u7dda\u5f62\u56de\u5e30","\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0","\u521d\u5fc3\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u30ef\u30fc\u30af\u30d5\u30ed\u30fc","\u5b9f\u8df5","\u57fa\u790e"]},{"location":"PyTorch/02_pytorch_workflow/#5","title":"5. \u30e2\u30c7\u30eb\u306e\u4fdd\u5b58\u3068\u8aad\u307f\u8fbc\u307f","text":"","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u7dda\u5f62\u56de\u5e30","\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0","\u521d\u5fc3\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u30ef\u30fc\u30af\u30d5\u30ed\u30fc","\u5b9f\u8df5","\u57fa\u790e"]},{"location":"PyTorch/02_pytorch_workflow/#pytorch_3","title":"PyTorch\u30e2\u30c7\u30eb\u4fdd\u5b58\u306e\u91cd\u8981\u30e1\u30bd\u30c3\u30c9","text":"\u30e1\u30bd\u30c3\u30c9 \u6a5f\u80fd \u4f7f\u7528\u5834\u9762 <code>torch.save()</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u30c7\u30a3\u30b9\u30af\u306b\u4fdd\u5b58 \u30e2\u30c7\u30eb\u3084\u30c6\u30f3\u30bd\u30eb\u306e\u6c38\u7d9a\u5316 <code>torch.load()</code> \u4fdd\u5b58\u3055\u308c\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u8aad\u307f\u8fbc\u307f \u4fdd\u5b58\u3055\u308c\u305f\u30e2\u30c7\u30eb\u306e\u5fa9\u5143 <code>model.state_dict()</code> \u30e2\u30c7\u30eb\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u8f9e\u66f8\u3092\u53d6\u5f97 \u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u307f\u306e\u4fdd\u5b58\uff08\u63a8\u5968\uff09 <code>model.load_state_dict()</code> \u30d1\u30e9\u30e1\u30fc\u30bf\u8f9e\u66f8\u3092\u30e2\u30c7\u30eb\u306b\u8aad\u307f\u8fbc\u307f \u4fdd\u5b58\u3055\u308c\u305f\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5fa9\u5143","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u7dda\u5f62\u56de\u5e30","\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0","\u521d\u5fc3\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u30ef\u30fc\u30af\u30d5\u30ed\u30fc","\u5b9f\u8df5","\u57fa\u790e"]},{"location":"PyTorch/02_pytorch_workflow/#_15","title":"\u30e2\u30c7\u30eb\u306e\u4fdd\u5b58","text":"<pre><code>from pathlib import Path\n\n# 1. \u30e2\u30c7\u30eb\u4fdd\u5b58\u7528\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u4f5c\u6210\nMODEL_PATH = Path(\"models\")\nMODEL_PATH.mkdir(parents=True, exist_ok=True)\n\n# 2. \u4fdd\u5b58\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u306e\u8a2d\u5b9a\nMODEL_NAME = \"01_pytorch_workflow_model_0.pth\"\nMODEL_SAVE_PATH = MODEL_PATH / MODEL_NAME\n\nprint(f\"\u30e2\u30c7\u30eb\u4fdd\u5b58\u30d1\u30b9: {MODEL_SAVE_PATH}\")\n\n# 3. state_dict()\u3092\u4fdd\u5b58\uff08\u63a8\u5968\u65b9\u6cd5\uff09\nprint(f\"\u30e2\u30c7\u30eb\u3092\u4fdd\u5b58\u4e2d: {MODEL_SAVE_PATH}\")\ntorch.save(obj=model_0.state_dict(), f=MODEL_SAVE_PATH)\nprint(\"\u4fdd\u5b58\u5b8c\u4e86\uff01\")\n</code></pre> <pre><code>\u30e2\u30c7\u30eb\u4fdd\u5b58\u30d1\u30b9: models/01_pytorch_workflow_model_0.pth\n\u30e2\u30c7\u30eb\u3092\u4fdd\u5b58\u4e2d: models/01_pytorch_workflow_model_0.pth\n\u4fdd\u5b58\u5b8c\u4e86\uff01\n</code></pre>","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u7dda\u5f62\u56de\u5e30","\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0","\u521d\u5fc3\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u30ef\u30fc\u30af\u30d5\u30ed\u30fc","\u5b9f\u8df5","\u57fa\u790e"]},{"location":"PyTorch/02_pytorch_workflow/#_16","title":"\u30e2\u30c7\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u3068\u691c\u8a3c","text":"<pre><code># \u65b0\u3057\u3044\u30e2\u30c7\u30eb\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\nloaded_model_0 = LinearRegressionModel()\n\n# \u4fdd\u5b58\u3055\u308c\u305fstate_dict()\u3092\u8aad\u307f\u8fbc\u307f\nloaded_model_0.load_state_dict(torch.load(f=MODEL_SAVE_PATH))\n\nprint(\"\u8aad\u307f\u8fbc\u307f\u5b8c\u4e86\uff01\")\nprint(f\"\u8aad\u307f\u8fbc\u307e\u308c\u305f\u30e2\u30c7\u30eb\u306e\u30d1\u30e9\u30e1\u30fc\u30bf:\\n{loaded_model_0.state_dict()}\")\n\n# \u4e88\u6e2c\u7d50\u679c\u306e\u4e00\u81f4\u3092\u78ba\u8a8d\nloaded_model_0.eval()\nwith torch.inference_mode():\n    loaded_model_preds = loaded_model_0(X_test)\n\n# \u5143\u306e\u30e2\u30c7\u30eb\u3068\u4e88\u6e2c\u7d50\u679c\u304c\u4e00\u81f4\u3059\u308b\u304b\u30c1\u30a7\u30c3\u30af\npredictions_match = torch.allclose(loaded_model_preds, y_pred_final)\nprint(f\"\\n\u4e88\u6e2c\u7d50\u679c\u306e\u4e00\u81f4: {predictions_match}\")\n</code></pre> <pre><code>\u8aad\u307f\u8fbc\u307f\u5b8c\u4e86\uff01\n\u8aad\u307f\u8fbc\u307e\u308c\u305f\u30e2\u30c7\u30eb\u306e\u30d1\u30e9\u30e1\u30fc\u30bf:\nOrderedDict([('weights', tensor([0.6954])), ('bias', tensor([0.2998]))])\n\n\u4e88\u6e2c\u7d50\u679c\u306e\u4e00\u81f4: True\n</code></pre>","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u7dda\u5f62\u56de\u5e30","\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0","\u521d\u5fc3\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u30ef\u30fc\u30af\u30d5\u30ed\u30fc","\u5b9f\u8df5","\u57fa\u790e"]},{"location":"PyTorch/02_pytorch_workflow/#6-nnlinear","title":"6. \u7d71\u5408\uff1ann.Linear\u3092\u4f7f\u7528\u3057\u305f\u6539\u826f\u7248\u5b9f\u88c5","text":"<p>\u3053\u308c\u307e\u3067\u306e\u624b\u52d5\u5b9f\u88c5\u306b\u52a0\u3048\u3066\u3001PyTorch\u306e\u7d44\u307f\u8fbc\u307f\u30ec\u30a4\u30e4\u30fc\u3092\u4f7f\u7528\u3057\u305f\u3088\u308a\u52b9\u7387\u7684\u306a\u5b9f\u88c5\u65b9\u6cd5\u3092\u5b66\u7fd2\u3057\u307e\u3057\u3087\u3046\u3002</p>","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u7dda\u5f62\u56de\u5e30","\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0","\u521d\u5fc3\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u30ef\u30fc\u30af\u30d5\u30ed\u30fc","\u5b9f\u8df5","\u57fa\u790e"]},{"location":"PyTorch/02_pytorch_workflow/#nnlinear","title":"nn.Linear\u3092\u4f7f\u7528\u3057\u305f\u30e2\u30c7\u30eb","text":"<pre><code>class LinearRegressionModelV2(nn.Module):\n    \"\"\"\n    nn.Linear\u3092\u4f7f\u7528\u3057\u305f\u7dda\u5f62\u56de\u5e30\u30e2\u30c7\u30eb\n    \"\"\"\n    def __init__(self):\n        super().__init__()\n        # PyTorch\u306e\u7d44\u307f\u8fbc\u307f\u7dda\u5f62\u30ec\u30a4\u30e4\u30fc\u3092\u4f7f\u7528\n        self.linear_layer = nn.Linear(in_features=1, out_features=1)\n\n    def forward(self, x: torch.Tensor) -&gt; torch.Tensor:\n        return self.linear_layer(x)\n\n# \u30e2\u30c7\u30eb\u306e\u4f5c\u6210\u3068\u30c7\u30d0\u30a4\u30b9\u8a2d\u5b9a\ntorch.manual_seed(42)\nmodel_1 = LinearRegressionModelV2()\nmodel_1.to(device=device)\n\nprint(f\"\u30e2\u30c7\u30eb\u306e\u30c7\u30d0\u30a4\u30b9: {next(model_1.parameters()).device}\")\nprint(f\"\u521d\u671f\u30d1\u30e9\u30e1\u30fc\u30bf:\\n{model_1.state_dict()}\")\n</code></pre>","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u7dda\u5f62\u56de\u5e30","\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0","\u521d\u5fc3\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u30ef\u30fc\u30af\u30d5\u30ed\u30fc","\u5b9f\u8df5","\u57fa\u790e"]},{"location":"PyTorch/02_pytorch_workflow/#_17","title":"\u5b8c\u5168\u306a\u7d71\u5408\u30ef\u30fc\u30af\u30d5\u30ed\u30fc","text":"<pre><code># \u30c7\u30d0\u30a4\u30b9\u5bfe\u5fdc\u306e\u8a2d\u5b9a\ndevice = \"mps\" if torch.backends.mps.is_available() else \"cpu\"\nprint(f\"\u4f7f\u7528\u30c7\u30d0\u30a4\u30b9: {device}\")\n\n# \u30c7\u30fc\u30bf\u3092\u30c7\u30d0\u30a4\u30b9\u306b\u79fb\u52d5\nX_train = X_train.to(device)\ny_train = y_train.to(device)\nX_test = X_test.to(device)\ny_test = y_test.to(device)\n\n# \u640d\u5931\u95a2\u6570\u3068\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u30fc\u306e\u8a2d\u5b9a\nloss_fn = nn.L1Loss()\noptimizer = torch.optim.SGD(params=model_1.parameters(), lr=0.01)\n\n# \u8a13\u7df4\u30eb\u30fc\u30d7\ntorch.manual_seed(42)\nepochs = 200\n\nprint(\"\u6539\u826f\u7248\u30e2\u30c7\u30eb\u306e\u8a13\u7df4\u958b\u59cb...\")\nfor epoch in range(epochs):\n    # \u8a13\u7df4\u30d5\u30a7\u30fc\u30ba\n    model_1.train()\n    y_pred = model_1(X_train)\n    loss = loss_fn(y_pred, y_train)\n    optimizer.zero_grad()\n    loss.backward()\n    optimizer.step()\n\n    # \u30c6\u30b9\u30c8\u30d5\u30a7\u30fc\u30ba\n    model_1.eval()\n    with torch.inference_mode():\n        test_pred = model_1(X_test)\n        test_loss = loss_fn(test_pred, y_test)\n\n    # \u9032\u6357\u8868\u793a\n    if epoch % 20 == 0:\n        print(f\"\u30a8\u30dd\u30c3\u30af: {epoch:3d} | \u8a13\u7df4\u640d\u5931: {loss:.6f} | \u30c6\u30b9\u30c8\u640d\u5931: {test_loss:.6f}\")\n\nprint(f\"\\n\u6700\u7d42\u30d1\u30e9\u30e1\u30fc\u30bf:\\n{model_1.state_dict()}\")\n\n# \u6700\u7d42\u4e88\u6e2c\u3068\u53ef\u8996\u5316\nmodel_1.eval()\nwith torch.inference_mode():\n    y_preds_v2 = model_1(X_test)\n\nplot_predictions(predictions=y_preds_v2.cpu())\nplt.title(\"\u6539\u826f\u7248\u30e2\u30c7\u30eb\uff08nn.Linear\u4f7f\u7528\uff09\u306e\u4e88\u6e2c\u7d50\u679c\")\nplt.show()\n\n# \u30e2\u30c7\u30eb\u306e\u4fdd\u5b58\nMODEL_NAME_V2 = \"01_pytorch_workflow_model_1.pth\"\nMODEL_SAVE_PATH_V2 = MODEL_PATH / MODEL_NAME_V2\n\nprint(f\"\u6539\u826f\u7248\u30e2\u30c7\u30eb\u3092\u4fdd\u5b58\u4e2d: {MODEL_SAVE_PATH_V2}\")\ntorch.save(obj=model_1.state_dict(), f=MODEL_SAVE_PATH_V2)\n\n# \u30e2\u30c7\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u3068\u691c\u8a3c\nloaded_model_1 = LinearRegressionModelV2()\nloaded_model_1.load_state_dict(torch.load(MODEL_SAVE_PATH_V2))\nloaded_model_1.to(device=device)\n\nloaded_model_1.eval()\nwith torch.inference_mode():\n    loaded_model_1_preds = loaded_model_1(X_test)\n\n# \u4e88\u6e2c\u7d50\u679c\u306e\u4e00\u81f4\u78ba\u8a8d\npredictions_match_v2 = torch.allclose(y_preds_v2, loaded_model_1_preds)\nprint(f\"\u6539\u826f\u7248\u30e2\u30c7\u30eb\u306e\u4e88\u6e2c\u7d50\u679c\u4e00\u81f4: {predictions_match_v2}\")\n</code></pre>","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u7dda\u5f62\u56de\u5e30","\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0","\u521d\u5fc3\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u30ef\u30fc\u30af\u30d5\u30ed\u30fc","\u5b9f\u8df5","\u57fa\u790e"]},{"location":"PyTorch/02_pytorch_workflow/#_18","title":"\u7406\u8ad6\u89e3\u8aac\uff1a\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306b\u304a\u3051\u308b\u52fe\u914d\u3068\u30d0\u30c3\u30af\u30d7\u30ed\u30d1\u30b2\u30fc\u30b7\u30e7\u30f3","text":"","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u7dda\u5f62\u56de\u5e30","\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0","\u521d\u5fc3\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u30ef\u30fc\u30af\u30d5\u30ed\u30fc","\u5b9f\u8df5","\u57fa\u790e"]},{"location":"PyTorch/02_pytorch_workflow/#_19","title":"\u52fe\u914d\u306e\u5f79\u5272","text":"<p>\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u5b66\u7fd2\u306b\u304a\u3044\u3066\u3001\u52fe\u914d\uff08gradient\uff09\u306f\u6975\u3081\u3066\u91cd\u8981\u306a\u5f79\u5272\u3092\u679c\u305f\u3057\u307e\u3059\u3002\u52fe\u914d\u306f\u3001\u640d\u5931\u95a2\u6570\u3092\u5404\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u5fae\u5206\u3057\u305f\u5024\u3067\u3042\u308a\u3001\u305d\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u308f\u305a\u304b\u306b\u5909\u5316\u3055\u305b\u305f\u3068\u304d\u306b\u640d\u5931\u304c\u3069\u306e\u3088\u3046\u306b\u5909\u5316\u3059\u308b\u304b\u3092\u793a\u3057\u307e\u3059\u3002</p>","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u7dda\u5f62\u56de\u5e30","\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0","\u521d\u5fc3\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u30ef\u30fc\u30af\u30d5\u30ed\u30fc","\u5b9f\u8df5","\u57fa\u790e"]},{"location":"PyTorch/02_pytorch_workflow/#_20","title":"\u52fe\u914d\u306e\u89e3\u91c8\uff1a","text":"<ul> <li>\u6b63\u306e\u52fe\u914d: \u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u5897\u52a0\u3055\u305b\u308b\u3068\u640d\u5931\u304c\u5897\u52a0 \u2192 \u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6e1b\u5c11\u3055\u305b\u308b\u3079\u304d</li> <li>\u8ca0\u306e\u52fe\u914d: \u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u5897\u52a0\u3055\u305b\u308b\u3068\u640d\u5931\u304c\u6e1b\u5c11 \u2192 \u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u5897\u52a0\u3055\u305b\u308b\u3079\u304d</li> <li>\u52fe\u914d\u306e\u5927\u304d\u3055: \u5927\u304d\u3044\u307b\u3069\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5909\u5316\u304c\u640d\u5931\u306b\u4e0e\u3048\u308b\u5f71\u97ff\u304c\u5927\u304d\u3044</li> </ul>","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u7dda\u5f62\u56de\u5e30","\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0","\u521d\u5fc3\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u30ef\u30fc\u30af\u30d5\u30ed\u30fc","\u5b9f\u8df5","\u57fa\u790e"]},{"location":"PyTorch/02_pytorch_workflow/#_21","title":"\u7dda\u5f62\u56de\u5e30\u306b\u304a\u3051\u308b\u52fe\u914d\u306e\u8a08\u7b97","text":"<p>\u7dda\u5f62\u95a2\u6570 <code>y = wx + b</code> \u306b\u304a\u3044\u3066\u3001\u5e73\u5747\u4e8c\u4e57\u8aa4\u5dee\uff08MSE\uff09\u640d\u5931\u95a2\u6570\u3092\u8003\u3048\u3066\u307f\u307e\u3057\u3087\u3046\uff1a</p> <pre><code>L(w) = (wx + b - t)\u00b2\n</code></pre> <p>\u3053\u306e\u640d\u5931\u95a2\u6570\u3092\u91cd\u307f <code>w</code> \u3067\u5fae\u5206\u3059\u308b\u3068\uff1a</p> <pre><code>dL/dw = 2x(wx + b - t)\n</code></pre> <p>\u3053\u306e\u5c0e\u95a2\u6570\u306e\u7279\u6027\u3092\u8996\u899a\u7684\u306b\u7406\u89e3\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002</p> <pre><code>import numpy as np\nimport matplotlib.pyplot as plt\n\n# \u30d1\u30e9\u30e1\u30fc\u30bf\u8a2d\u5b9a\nx_data = 2.0    # \u56fa\u5b9a\u5165\u529b\u5024\ntrue_target = 5.0  # \u771f\u306e\u76ee\u6a19\u5024\nbias = 1.0      # \u56fa\u5b9a\u30d0\u30a4\u30a2\u30b9\n\n# \u91cd\u307f\u306e\u7bc4\u56f2\nw_values = np.linspace(-1, 6, 100)\n\n# MSE\u640d\u5931\u95a2\u6570\u306e\u8a08\u7b97\nmse_loss_values = ((w_values * x_data + bias) - true_target)**2\n\n# \u52fe\u914d\u306e\u8a08\u7b97\nderivative_values = 2 * x_data * (w_values * x_data + bias - true_target)\n\n# \u6700\u9069\u306a\u91cd\u307f\u306e\u5024\uff08\u89e3\u6790\u89e3\uff09\noptimal_w = (true_target - bias) / x_data\n\nplt.figure(figsize=(15, 5))\n\n# MSE\u640d\u5931\u95a2\u6570\u306e\u30d7\u30ed\u30c3\u30c8\nplt.subplot(1, 3, 1)\nplt.plot(w_values, mse_loss_values, 'b-', linewidth=2, label='MSE\u640d\u5931')\nplt.axvline(optimal_w, color='r', linestyle='--', label=f'\u6700\u9069\u5024 w={optimal_w:.1f}')\nplt.xlabel('\u91cd\u307f (w)')\nplt.ylabel('MSE\u640d\u5931')\nplt.title('MSE\u640d\u5931\u95a2\u6570')\nplt.grid(True, alpha=0.3)\nplt.legend()\n\n# \u52fe\u914d\u306e\u30d7\u30ed\u30c3\u30c8\nplt.subplot(1, 3, 2)\nplt.plot(w_values, derivative_values, 'r-', linewidth=2, label='\u52fe\u914d dL/dw')\nplt.axhline(0, color='black', linewidth=0.8, linestyle='--', alpha=0.7)\nplt.axvline(optimal_w, color='r', linestyle='--', label=f'\u52fe\u914d=0\u306e\u70b9')\nplt.xlabel('\u91cd\u307f (w)')\nplt.ylabel('\u52fe\u914d dL/dw')\nplt.title('\u640d\u5931\u95a2\u6570\u306e\u52fe\u914d')\nplt.grid(True, alpha=0.3)\nplt.legend()\n\n# \u52fe\u914d\u964d\u4e0b\u6cd5\u306e\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\nplt.subplot(1, 3, 3)\nw_current = 0.5  # \u521d\u671f\u91cd\u307f\nlearning_rate = 0.1\nhistory_w = [w_current]\nhistory_loss = [((w_current * x_data + bias) - true_target)**2]\n\nfor step in range(15):\n    # \u73fe\u5728\u306e\u52fe\u914d\u3092\u8a08\u7b97\n    gradient = 2 * x_data * (w_current * x_data + bias - true_target)\n    # \u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u66f4\u65b0\n    w_current = w_current - learning_rate * gradient\n    # \u5c65\u6b74\u3092\u8a18\u9332\n    history_w.append(w_current)\n    history_loss.append(((w_current * x_data + bias) - true_target)**2)\n\nplt.plot(w_values, mse_loss_values, 'b-', alpha=0.6, label='MSE\u640d\u5931')\nplt.plot(history_w, history_loss, 'ro-', markersize=6, label='\u52fe\u914d\u964d\u4e0b\u6cd5\u306e\u8ecc\u8de1')\nplt.axvline(optimal_w, color='g', linestyle='--', label=f'\u6700\u9069\u89e3')\nplt.xlabel('\u91cd\u307f (w)')\nplt.ylabel('MSE\u640d\u5931')\nplt.title('\u52fe\u914d\u964d\u4e0b\u6cd5\u306b\u3088\u308b\u6700\u9069\u5316')\nplt.grid(True, alpha=0.3)\nplt.legend()\n\nplt.tight_layout()\nplt.show()\n\nprint(f\"\u6700\u9069\u306a\u91cd\u307f\uff08\u89e3\u6790\u89e3\uff09: {optimal_w:.4f}\")\nprint(f\"\u52fe\u914d\u964d\u4e0b\u6cd5\u306e\u6700\u7d42\u7d50\u679c: {history_w[-1]:.4f}\")\nprint(f\"\u53ce\u675f\u8aa4\u5dee: {abs(optimal_w - history_w[-1]):.6f}\")\n</code></pre> <p></p> <pre><code>\u6700\u9069\u306a\u91cd\u307f\uff08\u89e3\u6790\u89e3\uff09: 2.0000\n\u52fe\u914d\u964d\u4e0b\u6cd5\u306e\u6700\u7d42\u7d50\u679c: 2.0000\n\u53ce\u675f\u8aa4\u5dee: 0.000012\n</code></pre>","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u7dda\u5f62\u56de\u5e30","\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0","\u521d\u5fc3\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u30ef\u30fc\u30af\u30d5\u30ed\u30fc","\u5b9f\u8df5","\u57fa\u790e"]},{"location":"PyTorch/02_pytorch_workflow/#_22","title":"\u30d0\u30c3\u30af\u30d7\u30ed\u30d1\u30b2\u30fc\u30b7\u30e7\u30f3\u306e\u4ed5\u7d44\u307f","text":"<p>\u30d0\u30c3\u30af\u30d7\u30ed\u30d1\u30b2\u30fc\u30b7\u30e7\u30f3\uff08\u8aa4\u5dee\u9006\u4f1d\u64ad\u6cd5\uff09\u306f\u3001\u8907\u96d1\u306a\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306b\u304a\u3044\u3066\u52b9\u7387\u7684\u306b\u52fe\u914d\u3092\u8a08\u7b97\u3059\u308b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u3059\u3002\u5fae\u5206\u306e\u9023\u9396\u5f8b\u3092\u5229\u7528\u3057\u3066\u3001\u51fa\u529b\u5c64\u304b\u3089\u5165\u529b\u5c64\u306b\u5411\u304b\u3063\u3066\u9806\u6b21\u52fe\u914d\u3092\u8a08\u7b97\u3057\u3066\u3044\u304d\u307e\u3059\u3002</p> <p>\u9023\u9396\u5f8b\u306e\u4f8b\uff1a <pre><code>z = f(y) = f(g(x))\u306e\u5834\u5408\ndz/dx = (dz/dy) \u00d7 (dy/dx)\n</code></pre></p> <p>\u3053\u306e\u539f\u7406\u306b\u3088\u308a\u3001\u591a\u5c64\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3067\u3082\u52b9\u7387\u7684\u306b\u5404\u5c64\u306e\u52fe\u914d\u3092\u8a08\u7b97\u3067\u304d\u307e\u3059\u3002</p>","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u7dda\u5f62\u56de\u5e30","\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0","\u521d\u5fc3\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u30ef\u30fc\u30af\u30d5\u30ed\u30fc","\u5b9f\u8df5","\u57fa\u790e"]},{"location":"PyTorch/02_pytorch_workflow/#_23","title":"\u3088\u304f\u3042\u308b\u554f\u984c\u3068\u30c8\u30e9\u30d6\u30eb\u30b7\u30e5\u30fc\u30c6\u30a3\u30f3\u30b0","text":"","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u7dda\u5f62\u56de\u5e30","\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0","\u521d\u5fc3\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u30ef\u30fc\u30af\u30d5\u30ed\u30fc","\u5b9f\u8df5","\u57fa\u790e"]},{"location":"PyTorch/02_pytorch_workflow/#_24","title":"\u5b66\u7fd2\u7387\u306e\u8a2d\u5b9a","text":"<p>\u5b66\u7fd2\u7387\u306f\u52fe\u914d\u964d\u4e0b\u6cd5\u306e\u6027\u80fd\u306b\u5927\u304d\u304f\u5f71\u97ff\u3057\u307e\u3059\uff1a</p> <pre><code>def demonstrate_learning_rates():\n    \"\"\"\u7570\u306a\u308b\u5b66\u7fd2\u7387\u3067\u306e\u53ce\u675f\u306e\u69d8\u5b50\u3092\u6bd4\u8f03\"\"\"\n    learning_rates = [0.001, 0.01, 0.1, 0.5]\n\n    plt.figure(figsize=(15, 4))\n\n    for i, lr in enumerate(learning_rates):\n        plt.subplot(1, 4, i+1)\n\n        # \u7c21\u5358\u306a\u6700\u9069\u5316\u554f\u984c\u3092\u8a2d\u5b9a\n        w_current = 0.1\n        target = 2.0\n        history = [w_current]\n\n        for step in range(20):\n            gradient = 2 * (w_current - target)  # \u7c21\u5358\u306a\u4e8c\u6b21\u95a2\u6570\u306e\u52fe\u914d\n            w_current = w_current - lr * gradient\n            history.append(w_current)\n\n            if abs(w_current - target) &lt; 1e-6:  # \u53ce\u675f\u5224\u5b9a\n                break\n\n        steps = range(len(history))\n        plt.plot(steps, history, 'o-', markersize=4)\n        plt.axhline(target, color='r', linestyle='--', alpha=0.7, label='\u76ee\u6a19\u5024')\n        plt.title(f'\u5b66\u7fd2\u7387: {lr}')\n        plt.xlabel('\u30b9\u30c6\u30c3\u30d7')\n        plt.ylabel('\u30d1\u30e9\u30e1\u30fc\u30bf\u5024')\n        plt.grid(True, alpha=0.3)\n        plt.legend()\n\n        # \u53ce\u675f\u6027\u306e\u8a55\u4fa1\n        if len(history) &lt;= 20:\n            convergence_status = f\"\u53ce\u675f\uff08{len(history)-1}\u30b9\u30c6\u30c3\u30d7\uff09\"\n        else:\n            convergence_status = \"\u53ce\u675f\u305b\u305a\"\n        plt.text(0.5, 0.9, convergence_status, transform=plt.gca().transAxes, \n                bbox=dict(boxstyle=\"round,pad=0.3\", facecolor=\"yellow\", alpha=0.7))\n\n    plt.tight_layout()\n    plt.show()\n\ndemonstrate_learning_rates()\n</code></pre>","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u7dda\u5f62\u56de\u5e30","\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0","\u521d\u5fc3\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u30ef\u30fc\u30af\u30d5\u30ed\u30fc","\u5b9f\u8df5","\u57fa\u790e"]},{"location":"PyTorch/02_pytorch_workflow/#_25","title":"\u5b66\u7fd2\u7387\u9078\u629e\u306e\u6307\u91dd\uff1a","text":"<ul> <li>\u5c0f\u3055\u3059\u304e\u308b: \u53ce\u675f\u304c\u9045\u3044\u3001\u5c40\u6240\u6700\u9069\u89e3\u306b\u9665\u308a\u3084\u3059\u3044</li> <li>\u5927\u304d\u3059\u304e\u308b: \u632f\u52d5\u3084\u767a\u6563\u304c\u8d77\u3053\u308b</li> <li>\u9069\u5207\u306a\u7bc4\u56f2: \u901a\u5e380.001\u301c0.1\u7a0b\u5ea6\u304b\u3089\u958b\u59cb\u3057\u3066\u8abf\u6574</li> </ul>","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u7dda\u5f62\u56de\u5e30","\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0","\u521d\u5fc3\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u30ef\u30fc\u30af\u30d5\u30ed\u30fc","\u5b9f\u8df5","\u57fa\u790e"]},{"location":"PyTorch/02_pytorch_workflow/#_26","title":"\u4e00\u822c\u7684\u306a\u30a8\u30e9\u30fc\u3068\u5bfe\u51e6\u6cd5","text":"\u30a8\u30e9\u30fc \u539f\u56e0 \u5bfe\u51e6\u6cd5 <code>RuntimeError: Expected all tensors to be on the same device</code> \u30c7\u30fc\u30bf\u3068\u30e2\u30c7\u30eb\u304c\u7570\u306a\u308b\u30c7\u30d0\u30a4\u30b9 <code>.to(device)</code>\u3067\u7d71\u4e00 <code>RuntimeError: grad can be implicitly created only for scalar outputs</code> \u975e\u30b9\u30ab\u30e9\u30fc\u5024\u3067backward() \u640d\u5931\u3092\u30b9\u30ab\u30e9\u30fc\u306b\u5909\u63db \u640d\u5931\u304c\u6e1b\u5c11\u3057\u306a\u3044 \u5b66\u7fd2\u7387\u3001\u30e2\u30c7\u30eb\u69cb\u9020\u306e\u554f\u984c \u5b66\u7fd2\u7387\u8abf\u6574\u3001\u30e2\u30c7\u30eb\u898b\u76f4\u3057 \u904e\u5b66\u7fd2\uff08overfitting\uff09 \u30e2\u30c7\u30eb\u304c\u8907\u96d1\u3059\u304e\u308b \u6b63\u5247\u5316\u3001\u30c7\u30fc\u30bf\u5897\u5f37","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u7dda\u5f62\u56de\u5e30","\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0","\u521d\u5fc3\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u30ef\u30fc\u30af\u30d5\u30ed\u30fc","\u5b9f\u8df5","\u57fa\u790e"]},{"location":"PyTorch/02_pytorch_workflow/#_27","title":"\u307e\u3068\u3081","text":"<p>\u672c\u8a18\u4e8b\u3067\u306f\u3001PyTorch\u3092\u4f7f\u7528\u3057\u305f\u6a5f\u68b0\u5b66\u7fd2\u306e\u57fa\u672c\u30ef\u30fc\u30af\u30d5\u30ed\u30fc\u3092\u7dda\u5f62\u56de\u5e30\u554f\u984c\u3092\u901a\u3058\u3066\u5b66\u7fd2\u3057\u307e\u3057\u305f\u3002</p>","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u7dda\u5f62\u56de\u5e30","\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0","\u521d\u5fc3\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u30ef\u30fc\u30af\u30d5\u30ed\u30fc","\u5b9f\u8df5","\u57fa\u790e"]},{"location":"PyTorch/02_pytorch_workflow/#_28","title":"\u91cd\u8981\u306a\u30dd\u30a4\u30f3\u30c8\u306e\u632f\u308a\u8fd4\u308a","text":"<ol> <li>\u30c7\u30fc\u30bf\u6e96\u5099: \u9069\u5207\u306a\u8a13\u7df4\u30fb\u30c6\u30b9\u30c8\u5206\u5272\u3068\u524d\u51e6\u7406\u306e\u91cd\u8981\u6027</li> <li>\u30e2\u30c7\u30eb\u69cb\u7bc9: <code>nn.Module</code>\u3092\u7d99\u627f\u3057\u305f\u30af\u30e9\u30b9\u8a2d\u8a08\u3068\u30d1\u30e9\u30e1\u30fc\u30bf\u5b9a\u7fa9</li> <li>\u8a13\u7df4\u30d7\u30ed\u30bb\u30b9: \u640d\u5931\u95a2\u6570\u3001\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u30fc\u3001\u8a13\u7df4\u30eb\u30fc\u30d7\u306e\u5b9f\u88c5</li> <li>\u8a55\u4fa1\u3068\u63a8\u8ad6: \u9069\u5207\u306a\u8a55\u4fa1\u30e2\u30fc\u30c9\u3067\u306e\u4e88\u6e2c\u5b9f\u884c</li> <li>\u6c38\u7d9a\u5316: \u30e2\u30c7\u30eb\u306e\u4fdd\u5b58\u30fb\u8aad\u307f\u8fbc\u307f\u306b\u3088\u308b\u518d\u5229\u7528\u6027\u78ba\u4fdd</li> </ol>","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u7dda\u5f62\u56de\u5e30","\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0","\u521d\u5fc3\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u30ef\u30fc\u30af\u30d5\u30ed\u30fc","\u5b9f\u8df5","\u57fa\u790e"]},{"location":"PyTorch/02_pytorch_workflow/#_29","title":"\u53c2\u8003\u8cc7\u6599","text":"","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u7dda\u5f62\u56de\u5e30","\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0","\u521d\u5fc3\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u30ef\u30fc\u30af\u30d5\u30ed\u30fc","\u5b9f\u8df5","\u57fa\u790e"]},{"location":"PyTorch/02_pytorch_workflow/#_30","title":"\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8","text":"<ul> <li>PyTorch\u516c\u5f0f\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb</li> <li>PyTorch API \u30ea\u30d5\u30a1\u30ec\u30f3\u30b9</li> </ul>","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u7dda\u5f62\u56de\u5e30","\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0","\u521d\u5fc3\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u30ef\u30fc\u30af\u30d5\u30ed\u30fc","\u5b9f\u8df5","\u57fa\u790e"]},{"location":"PyTorch/02_pytorch_workflow/#_31","title":"\u74b0\u5883\u69cb\u7bc9\u306e\u88dc\u8db3","text":"<p>\u5fc5\u8981\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\uff1a</p> <pre><code># CPU\u7248PyTorch\npip install torch torchvision torchaudio\n\n# GPU\u7248PyTorch\uff08CUDA\u5bfe\u5fdc\uff09\npip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118\n\n# \u53ef\u8996\u5316\u30fb\u6570\u5024\u8a08\u7b97\npip install matplotlib numpy pandas scikit-learn\n</code></pre>","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u7dda\u5f62\u56de\u5e30","\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0","\u521d\u5fc3\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u30ef\u30fc\u30af\u30d5\u30ed\u30fc","\u5b9f\u8df5","\u57fa\u790e"]},{"location":"PyTorch/03_pytorch_classification/","title":"PyTorch\u306b\u3088\u308b\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u5206\u985e","text":"","tags":["PyTorch","\u6df1\u5c64\u5b66\u7fd2","\u5206\u985e","\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af","\u6a5f\u68b0\u5b66\u7fd2","\u4e2d\u7d1a\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5","\u4e8c\u5024\u5206\u985e","\u591a\u30af\u30e9\u30b9\u5206\u985e"]},{"location":"PyTorch/03_pytorch_classification/#_1","title":"\u6982\u8981","text":"<p>\u672c\u8a18\u4e8b\u3067\u306f\u3001PyTorch\u3092\u4f7f\u7528\u3057\u3066\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306b\u3088\u308b\u5206\u985e\u30bf\u30b9\u30af\u3092\u5b9f\u88c5\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002\u4e8c\u5024\u5206\u985e\u304b\u3089\u591a\u30af\u30e9\u30b9\u5206\u985e\u307e\u3067\u3001\u5b9f\u8df5\u7684\u306a\u30b3\u30fc\u30c9\u4f8b\u3068\u53ef\u8996\u5316\u3092\u901a\u3058\u3066\u3001\u5206\u985e\u554f\u984c\u3092\u89e3\u6c7a\u3059\u308b\u305f\u3081\u306e\u57fa\u790e\u77e5\u8b58\u3068\u5b9f\u88c5\u30b9\u30ad\u30eb\u3092\u8eab\u306b\u3064\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p>","tags":["PyTorch","\u6df1\u5c64\u5b66\u7fd2","\u5206\u985e","\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af","\u6a5f\u68b0\u5b66\u7fd2","\u4e2d\u7d1a\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5","\u4e8c\u5024\u5206\u985e","\u591a\u30af\u30e9\u30b9\u5206\u985e"]},{"location":"PyTorch/03_pytorch_classification/#_2","title":"\u524d\u63d0\u77e5\u8b58","text":"<ul> <li>Python\u306e\u57fa\u672c\u7684\u306a\u6587\u6cd5</li> <li>NumPy\u3068Pandas\u306e\u57fa\u790e\u77e5\u8b58</li> <li>\u6a5f\u68b0\u5b66\u7fd2\u306e\u57fa\u672c\u6982\u5ff5\uff08\u6559\u5e2b\u3042\u308a\u5b66\u7fd2\u3001\u5206\u985e\u30bf\u30b9\u30af\uff09</li> <li>PyTorch\u306e\u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9\uff08\u30c6\u30f3\u30bd\u30eb\u64cd\u4f5c\u3001\u52fe\u914d\u8a08\u7b97\uff09</li> </ul>","tags":["PyTorch","\u6df1\u5c64\u5b66\u7fd2","\u5206\u985e","\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af","\u6a5f\u68b0\u5b66\u7fd2","\u4e2d\u7d1a\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5","\u4e8c\u5024\u5206\u985e","\u591a\u30af\u30e9\u30b9\u5206\u985e"]},{"location":"PyTorch/03_pytorch_classification/#_3","title":"\u5b9f\u88c5\u5185\u5bb9","text":"","tags":["PyTorch","\u6df1\u5c64\u5b66\u7fd2","\u5206\u985e","\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af","\u6a5f\u68b0\u5b66\u7fd2","\u4e2d\u7d1a\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5","\u4e8c\u5024\u5206\u985e","\u591a\u30af\u30e9\u30b9\u5206\u985e"]},{"location":"PyTorch/03_pytorch_classification/#0","title":"0. \u5206\u985e\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3","text":"<p>\u5206\u985e\u30bf\u30b9\u30af\u306b\u304a\u3051\u308b\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u57fa\u672c\u7684\u306a\u69cb\u6210\u8981\u7d20\u3092\u7406\u89e3\u3057\u307e\u3057\u3087\u3046\u3002</p> \u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf \u4e8c\u5024\u5206\u985e \u591a\u30af\u30e9\u30b9\u5206\u985e \u5165\u529b\u5c64\u306e\u5f62\u72b6 (in_features) \u7279\u5fb4\u91cf\u306e\u6570\u3068\u540c\u3058\uff08\u4f8b\uff1a\u5fc3\u81d3\u75c5\u4e88\u6e2c\u3067\u306e\u5e74\u9f62\u3001\u6027\u5225\u3001\u8eab\u9577\u3001\u4f53\u91cd\u3001\u55ab\u7159\u72b6\u6cc1\u306a\u30895\uff09 \u4e8c\u5024\u5206\u985e\u3068\u540c\u3058 \u96a0\u308c\u5c64 \u554f\u984c\u306b\u4f9d\u5b58\u3001\u6700\u5c0f = 1\u3001\u6700\u5927 = \u7121\u5236\u9650 \u4e8c\u5024\u5206\u985e\u3068\u540c\u3058 \u96a0\u308c\u5c64\u306e\u30cb\u30e5\u30fc\u30ed\u30f3\u6570 \u554f\u984c\u306b\u4f9d\u5b58\u3001\u4e00\u822c\u7684\u306b10\uff5e512 \u4e8c\u5024\u5206\u985e\u3068\u540c\u3058 \u51fa\u529b\u5c64\u306e\u5f62\u72b6 (out_features) 1\uff08\u3069\u3061\u3089\u304b\u306e\u30af\u30e9\u30b9\uff09 \u30af\u30e9\u30b9\u6570\uff08\u4f8b\uff1a\u98df\u3079\u7269\u3001\u4eba\u3001\u72ac\u306e\u5199\u771f\u306a\u30893\uff09 \u96a0\u308c\u5c64\u306e\u6d3b\u6027\u5316\u95a2\u6570 \u901a\u5e38ReLU\uff08\u4ed6\u306e\u9078\u629e\u80a2\u3082\u591a\u6570\uff09 \u4e8c\u5024\u5206\u985e\u3068\u540c\u3058 \u51fa\u529b\u5c64\u306e\u6d3b\u6027\u5316\u95a2\u6570 Sigmoid (torch.sigmoid) Softmax (torch.softmax) \u640d\u5931\u95a2\u6570 \u30d0\u30a4\u30ca\u30ea\u30af\u30ed\u30b9\u30a8\u30f3\u30c8\u30ed\u30d4\u30fc (torch.nn.BCELoss) \u30af\u30ed\u30b9\u30a8\u30f3\u30c8\u30ed\u30d4\u30fc (torch.nn.CrossEntropyLoss) \u6700\u9069\u5316\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0 SGD\u3001Adam\uff08torch.optim\u306b\u4ed6\u306e\u9078\u629e\u80a2\u3042\u308a\uff09 \u4e8c\u5024\u5206\u985e\u3068\u540c\u3058","tags":["PyTorch","\u6df1\u5c64\u5b66\u7fd2","\u5206\u985e","\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af","\u6a5f\u68b0\u5b66\u7fd2","\u4e2d\u7d1a\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5","\u4e8c\u5024\u5206\u985e","\u591a\u30af\u30e9\u30b9\u5206\u985e"]},{"location":"PyTorch/03_pytorch_classification/#1","title":"1. \u5206\u985e\u7528\u30c7\u30fc\u30bf\u306e\u4f5c\u6210\u3068\u6e96\u5099","text":"<p>\u307e\u305a\u306f\u3001\u4e8c\u5024\u5206\u985e\u306e\u554f\u984c\u3092\u89e3\u304f\u305f\u3081\u306b\u3001\u5186\u5f62\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\u3053\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306f\u30012\u3064\u306e\u30af\u30e9\u30b9\uff08\u5185\u5074\u306e\u5186\u3068\u5916\u5074\u306e\u5186\uff09\u306b\u5206\u304b\u308c\u305f\u70b9\u3067\u69cb\u6210\u3055\u308c\u3066\u3044\u307e\u3059\u3002</p> <pre><code>import sklearn\nfrom sklearn.datasets import make_circles\n\n# 1000\u500b\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u4f5c\u6210\nn_samples = 1000\n\n# \u5186\u5f62\u30c7\u30fc\u30bf\u306e\u751f\u6210\nX, y = make_circles(n_samples = n_samples,\n                    noise = 0.03,      # \u30ce\u30a4\u30ba\u3092\u8ffd\u52a0\u3057\u3066\u3088\u308a\u73fe\u5b9f\u7684\u306b\n                    random_state=42)   # \u518d\u73fe\u6027\u306e\u305f\u3081\u4e71\u6570\u30b7\u30fc\u30c9\u3092\u56fa\u5b9a\nprint(type(X))\nprint(f\"\u6700\u521d\u306e5\u3064\u306eX\u7279\u5fb4\u91cf:\\n{X[:5]}\")\nprint(f\"\\n\u6700\u521d\u306e5\u3064\u306ey\u30e9\u30d9\u30eb:\\n{y[:5]}\")\n</code></pre> <p>\u51fa\u529b\uff1a <pre><code>&lt;class 'numpy.ndarray'&gt;\n\u6700\u521d\u306e5\u3064\u306eX\u7279\u5fb4\u91cf:\n[[ 0.75424625  0.23148074]\n [-0.75615888  0.15325888]\n [-0.81539193  0.17328203]\n [-0.39373073  0.69288277]\n [ 0.44220765 -0.89672343]]\n\n\u6700\u521d\u306e5\u3064\u306ey\u30e9\u30d9\u30eb:\n[1 1 1 1 0]\n</code></pre></p> <p>\u6b21\u306b\u3001\u30c7\u30fc\u30bf\u3092Pandas\u306eDataFrame\u306b\u5909\u63db\u3057\u3066\u53ef\u8996\u5316\u3057\u307e\u3059\uff1a</p> <pre><code># \u5186\u5f62\u30c7\u30fc\u30bf\u306eDataFrame\u3092\u4f5c\u6210\nimport pandas as pd\ncircles = pd.DataFrame({\"X1\":X[:,0],\n                        \"X2\":X[:,1],\n                        \"label\":y})\nprint(circles.head(10))\n\n# \u30c7\u30fc\u30bf\u306e\u53ef\u8996\u5316\nimport matplotlib.pyplot as plt\n\nplt.scatter(x=X[:,0],\n            y=X[:,1],\n            c=y,\n            cmap=plt.cm.RdYlBu)\n</code></pre> <p>\u51fa\u529b\uff1a <pre><code>         X1        X2  label\n0  0.754246  0.231481      1\n1 -0.756159  0.153259      1\n2 -0.815392  0.173282      1\n3 -0.393731  0.692883      1\n4  0.442208 -0.896723      0\n5 -0.479646  0.676435      1\n6 -0.013648  0.803349      1\n7  0.771513  0.147760      1\n8 -0.169322 -0.793456      1\n9 -0.121486  1.021509      0\n</code></pre></p> <p></p> <p>\u3053\u306e\u53ef\u8996\u5316\u304b\u3089\u3001\u30c7\u30fc\u30bf\u304c2\u3064\u306e\u540c\u5fc3\u5186\u72b6\u306b\u5206\u5e03\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\u9752\u3044\u70b9\uff08\u30e9\u30d9\u30eb0\uff09\u304c\u5185\u5074\u306e\u5186\u3092\u3001\u8d64\u3044\u70b9\uff08\u30e9\u30d9\u30eb1\uff09\u304c\u5916\u5074\u306e\u5186\u3092\u5f62\u6210\u3057\u3066\u3044\u307e\u3059\u3002</p>","tags":["PyTorch","\u6df1\u5c64\u5b66\u7fd2","\u5206\u985e","\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af","\u6a5f\u68b0\u5b66\u7fd2","\u4e2d\u7d1a\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5","\u4e8c\u5024\u5206\u985e","\u591a\u30af\u30e9\u30b9\u5206\u985e"]},{"location":"PyTorch/03_pytorch_classification/#11","title":"1.1 \u5165\u529b\u3068\u51fa\u529b\u306e\u5f62\u72b6\u3092\u78ba\u8a8d","text":"<p>\u30e2\u30c7\u30eb\u3092\u69cb\u7bc9\u3059\u308b\u524d\u306b\u3001\u30c7\u30fc\u30bf\u306e\u5f62\u72b6\u3092\u7406\u89e3\u3059\u308b\u3053\u3068\u304c\u91cd\u8981\u3067\u3059\uff1a</p> <pre><code>print(X.shape, y.shape)\nprint(type(X))\n\n# 1\u3064\u306e\u30b5\u30f3\u30d7\u30eb\u306e\u7279\u5fb4\u91cf\u3068\u30e9\u30d9\u30eb\u3092\u78ba\u8a8d\nX_sample = X[0]\ny_sample = y[0]\nprint(f\"1\u3064\u306e\u30b5\u30f3\u30d7\u30eb\u306eX\u5024: {X_sample} \u3068\u5bfe\u5fdc\u3059\u308by\u5024: {y_sample}\")\nprint(f\"1\u3064\u306e\u30b5\u30f3\u30d7\u30eb\u306eX\u5f62\u72b6: {X_sample.shape} \u3068\u5bfe\u5fdc\u3059\u308by\u5f62\u72b6: {y_sample.shape}\")\n</code></pre> <p>\u51fa\u529b\uff1a <pre><code>(1000, 2) (1000,)\n&lt;class 'numpy.ndarray'&gt;\n1\u3064\u306e\u30b5\u30f3\u30d7\u30eb\u306eX\u5024: [0.75424625 0.23148074] \u3068\u5bfe\u5fdc\u3059\u308by\u5024: 1\n1\u3064\u306e\u30b5\u30f3\u30d7\u30eb\u306eX\u5f62\u72b6: (2,) \u3068\u5bfe\u5fdc\u3059\u308by\u5f62\u72b6: ()\n</code></pre></p>","tags":["PyTorch","\u6df1\u5c64\u5b66\u7fd2","\u5206\u985e","\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af","\u6a5f\u68b0\u5b66\u7fd2","\u4e2d\u7d1a\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5","\u4e8c\u5024\u5206\u985e","\u591a\u30af\u30e9\u30b9\u5206\u985e"]},{"location":"PyTorch/03_pytorch_classification/#12","title":"1.2 \u30c7\u30fc\u30bf\u3092\u30c6\u30f3\u30bd\u30eb\u306b\u5909\u63db\u3057\u3001\u8a13\u7df4\u30fb\u30c6\u30b9\u30c8\u30bb\u30c3\u30c8\u306b\u5206\u5272","text":"<p>PyTorch\u3067\u6271\u3046\u305f\u3081\u306b\u3001NumPy\u914d\u5217\u3092\u30c6\u30f3\u30bd\u30eb\u306b\u5909\u63db\u3057\u307e\u3059\uff1a</p> <pre><code># \u30c7\u30fc\u30bf\u3092\u30c6\u30f3\u30bd\u30eb\u306b\u5909\u63db\nimport torch\n\nX = torch.from_numpy(X).type(torch.float)\ny = torch.from_numpy(y).type(torch.float)\n\nprint(X[0],y[0])\n\n# \u30c7\u30fc\u30bf\u3092\u8a13\u7df4\u30bb\u30c3\u30c8\u3068\u30c6\u30b9\u30c8\u30bb\u30c3\u30c8\u306b\u5206\u5272\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2)\nprint(X_test.shape, y_test.shape)\nprint(X_train[:5], y_train[:5])\nlen(X_train),len(X_test),len(y_train),len(y_test)\n</code></pre> <p>\u51fa\u529b\uff1a <pre><code>tensor([0.7542, 0.2315]) tensor(1.)\ntorch.Size([200, 2]) torch.Size([200])\ntensor([[-0.5945,  0.5481],\n        [-0.4160,  0.7137],\n        [-0.7646, -0.2763],\n        [ 0.6387,  0.5345],\n        [ 0.8572, -0.5925]]) tensor([1., 1., 1., 1., 0.])\n(800, 200, 800, 200)\n</code></pre></p>","tags":["PyTorch","\u6df1\u5c64\u5b66\u7fd2","\u5206\u985e","\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af","\u6a5f\u68b0\u5b66\u7fd2","\u4e2d\u7d1a\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5","\u4e8c\u5024\u5206\u985e","\u591a\u30af\u30e9\u30b9\u5206\u985e"]},{"location":"PyTorch/03_pytorch_classification/#2","title":"2. \u30e2\u30c7\u30eb\u306e\u69cb\u7bc9","text":"<p>\u30c7\u30fc\u30bf\u306e\u6e96\u5099\u304c\u3067\u304d\u305f\u306e\u3067\u3001\u6b21\u306f\u30e2\u30c7\u30eb\u3092\u69cb\u7bc9\u3057\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u624b\u9806\u3067\u9032\u3081\u307e\u3059\uff1a</p> <ol> <li>\u30c7\u30d0\u30a4\u30b9\u306b\u4f9d\u5b58\u3057\u306a\u3044\u30b3\u30fc\u30c9\u3092\u8a2d\u5b9a\uff08CPU\u307e\u305f\u306fGPU\u3067\u5b9f\u884c\u53ef\u80fd\uff09</li> <li>nn.Module\u3092\u7d99\u627f\u3057\u305f\u30e2\u30c7\u30eb\u30af\u30e9\u30b9\u306e\u5b9a\u7fa9</li> <li>\u640d\u5931\u95a2\u6570\u3068\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u306e\u5b9a\u7fa9</li> <li>\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30eb\u30fc\u30d7\u306e\u4f5c\u6210</li> </ol> <pre><code>from torch import nn\n\n# \u30c7\u30d0\u30a4\u30b9\u306e\u8a2d\u5b9a\uff08M1/M2 Mac\u3067\u306fMPS\u3001\u305d\u308c\u4ee5\u5916\u306fCPU\uff09\ndevice = \"mps\" if torch.mps.is_available() else \"cpu\"\n</code></pre> <p>\u6b21\u306b\u3001\u4ee5\u4e0b\u306e\u7279\u5fb4\u3092\u6301\u3064\u30e2\u30c7\u30eb\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3057\u307e\u3059\uff1a</p> <ol> <li>nn.Module\u3092\u30b5\u30d6\u30af\u30e9\u30b9\u5316\uff08PyTorch\u306e\u307b\u307c\u3059\u3079\u3066\u306e\u30e2\u30c7\u30eb\u306fnn.Module\u306e\u30b5\u30d6\u30af\u30e9\u30b9\uff09</li> <li>\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u30672\u3064\u306enn.Linear\u5c64\u3092\u4f5c\u6210\uff08\u5165\u529b\u3068\u51fa\u529b\u306e\u5f62\u72b6\u306b\u5bfe\u5fdc\uff09</li> <li>forward()\u30e1\u30bd\u30c3\u30c9\u3067\u9806\u4f1d\u64ad\u8a08\u7b97\u3092\u5b9a\u7fa9</li> <li>\u30e2\u30c7\u30eb\u30af\u30e9\u30b9\u3092\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3057\u3001\u30bf\u30fc\u30b2\u30c3\u30c8\u30c7\u30d0\u30a4\u30b9\u306b\u9001\u4fe1</li> </ol> <pre><code># 1. nn.Module\u3092\u7d99\u627f\u3057\u305f\u30e2\u30c7\u30eb\u30af\u30e9\u30b9\u3092\u69cb\u7bc9\nclass CircleModelV0(nn.Module):\n    def __init__(self):\n        super().__init__()\n        # 2. \u30c7\u30fc\u30bf\u306e\u5f62\u72b6\u3092\u6271\u3048\u308b2\u3064\u306enn.Linear\u5c64\u3092\u4f5c\u6210\n        # 2\u3064\u306e\u7279\u5fb4\u91cf\u3092\u5165\u529b\u30015\u3064\u306e\u7279\u5fb4\u91cf\u3092\u51fa\u529b\n        self.layer_1 = nn.Linear(in_features=2, out_features=5)\n        # 5\u3064\u306e\u7279\u5fb4\u91cf\u3092\u5165\u529b\u30011\u3064\u306e\u7279\u5fb4\u91cf\uff08y\uff09\u3092\u51fa\u529b\n        self.layer_2 = nn.Linear(in_features=5, out_features=1)\n\n    # 3. \u9806\u4f1d\u64ad\u3092\u5b9a\u7fa9\u3059\u308bforward()\u30e1\u30bd\u30c3\u30c9\n    def forward(self, x):\n        return self.layer_2(self.layer_1(x))\n\n# 4. \u30e2\u30c7\u30eb\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\u3057\u3001\u30bf\u30fc\u30b2\u30c3\u30c8\u30c7\u30d0\u30a4\u30b9\u306b\u9001\u4fe1\nmodel_0 = CircleModelV0().to(device=device)\nnext(model_0.parameters()).device\n</code></pre> <p>\u51fa\u529b\uff1a <pre><code>device(type='mps', index=0)\n</code></pre></p> <p>\u3088\u308a\u7c21\u6f54\u306b\u3001nn.Sequential()\u3092\u4f7f\u7528\u3057\u3066\u540c\u3058\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\uff1a</p> <pre><code># nn.Sequential()\u3092\u4f7f\u7528\u3057\u3066\u4e0a\u8a18\u306e\u30e2\u30c7\u30eb\u3092\u8907\u88fd\nmodel_0 = nn.Sequential(\n    nn.Linear(in_features=2, out_features=5),\n    nn.ReLU(),\n    nn.Linear(in_features=5, out_features=1)\n).to(device=device)\nmodel_0.state_dict()\n</code></pre> <p>\u51fa\u529b\uff1a <pre><code>OrderedDict([('0.weight',\n              tensor([[ 0.2976,  0.6313],\n                      [ 0.4087, -0.3091],\n                      [ 0.4082,  0.1265],\n                      [ 0.3591, -0.4310],\n                      [-0.7000, -0.2732]], device='mps:0')),\n             ('0.bias',\n              tensor([-0.5424,  0.5802,  0.2037,  0.2929,  0.2236], device='mps:0')),\n             ('2.weight',\n              tensor([[-0.0078,  0.3500, -0.3178,  0.0282, -0.3052]], device='mps:0')),\n             ('2.bias', tensor([0.1379], device='mps:0'))])\n</code></pre></p> <p>\u8a13\u7df4\u524d\u306e\u30e2\u30c7\u30eb\u3067\u4e88\u6e2c\u3092\u884c\u3063\u3066\u307f\u307e\u3057\u3087\u3046\uff1a</p> <pre><code># \u4e88\u6e2c\u3092\u884c\u3046\nwith torch.inference_mode():\n    untrained_preds = model_0(X_test.to(device))\nprint(f\"\u4e88\u6e2c\u306e\u9577\u3055: {len(untrained_preds)}, \u5f62\u72b6: {untrained_preds.shape}\")\nprint(f\"\u30c6\u30b9\u30c8\u30b5\u30f3\u30d7\u30eb\u306e\u9577\u3055: {len(X_test)}, \u5f62\u72b6: {X_test.shape}\")\nprint(f\"\u6700\u521d\u306e10\u500b\u306e\u4e88\u6e2c: {untrained_preds[:10]}\")\nprint(f\"\u6700\u521d\u306e10\u500b\u306e\u30e9\u30d9\u30eb: {y_test[:10]}\")\n</code></pre> <p>\u51fa\u529b\uff1a <pre><code>\u4e88\u6e2c\u306e\u9577\u3055: 200, \u5f62\u72b6: torch.Size([200, 1])\n\u30c6\u30b9\u30c8\u30b5\u30f3\u30d7\u30eb\u306e\u9577\u3055: 200, \u5f62\u72b6: torch.Size([200, 2])\n\u6700\u521d\u306e10\u500b\u306e\u4e88\u6e2c: tensor([[ 0.3639],\n        [ 0.1690],\n        [ 0.4165],\n        [ 0.2865],\n        [ 0.1603],\n        [ 0.0203],\n        [ 0.0058],\n        [-0.0157],\n        [-0.0180],\n        [ 0.1476]], device='mps:0')\n\u6700\u521d\u306e10\u500b\u306e\u30e9\u30d9\u30eb: tensor([1., 1., 0., 1., 1., 1., 0., 1., 1., 0.])\n</code></pre></p>","tags":["PyTorch","\u6df1\u5c64\u5b66\u7fd2","\u5206\u985e","\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af","\u6a5f\u68b0\u5b66\u7fd2","\u4e2d\u7d1a\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5","\u4e8c\u5024\u5206\u985e","\u591a\u30af\u30e9\u30b9\u5206\u985e"]},{"location":"PyTorch/03_pytorch_classification/#21","title":"2.1 \u640d\u5931\u95a2\u6570\u3068\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u306e\u8a2d\u5b9a","text":"<p>\u554f\u984c\u306e\u7a2e\u985e\u306b\u3088\u3063\u3066\u3001\u9069\u5207\u306a\u640d\u5931\u95a2\u6570\u3092\u9078\u629e\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff1a</p> \u640d\u5931\u95a2\u6570/\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6 \u554f\u984c\u30bf\u30a4\u30d7 PyTorch\u30b3\u30fc\u30c9 \u78ba\u7387\u7684\u52fe\u914d\u964d\u4e0b\u6cd5 (SGD) \u5206\u985e\u3001\u56de\u5e30\u3001\u305d\u306e\u4ed6\u591a\u6570 torch.optim.SGD() Adam\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6 \u5206\u985e\u3001\u56de\u5e30\u3001\u305d\u306e\u4ed6\u591a\u6570 torch.optim.Adam() \u30d0\u30a4\u30ca\u30ea\u30af\u30ed\u30b9\u30a8\u30f3\u30c8\u30ed\u30d4\u30fc\u640d\u5931 \u4e8c\u5024\u5206\u985e torch.nn.BCELossWithLogits or torch.nn.BCELoss \u30af\u30ed\u30b9\u30a8\u30f3\u30c8\u30ed\u30d4\u30fc\u640d\u5931 \u591a\u30af\u30e9\u30b9\u5206\u985e torch.nn.CrossEntropyLoss \u5e73\u5747\u7d76\u5bfe\u8aa4\u5dee (MAE/L1\u640d\u5931) \u56de\u5e30 torch.nn.L1Loss \u5e73\u5747\u4e8c\u4e57\u8aa4\u5dee (MSE/L2\u640d\u5931) \u56de\u5e30 torch.nn.MSELoss <p>PyTorch\u306b\u306f2\u3064\u306e\u30d0\u30a4\u30ca\u30ea\u30af\u30ed\u30b9\u30a8\u30f3\u30c8\u30ed\u30d4\u30fc\u5b9f\u88c5\u304c\u3042\u308a\u307e\u3059\uff1a</p> <ul> <li><code>torch.nn.BCELoss()</code> - \u30bf\u30fc\u30b2\u30c3\u30c8\uff08\u30e9\u30d9\u30eb\uff09\u3068\u5165\u529b\uff08\u7279\u5fb4\u91cf\uff09\u9593\u306e\u30d0\u30a4\u30ca\u30ea\u30af\u30ed\u30b9\u30a8\u30f3\u30c8\u30ed\u30d4\u30fc\u3092\u6e2c\u5b9a</li> <li><code>torch.nn.BCEWithLogitsLoss()</code> - \u4e0a\u8a18\u3068\u540c\u3058\u3060\u304c\u3001\u30b7\u30b0\u30e2\u30a4\u30c9\u5c64\u304c\u7d44\u307f\u8fbc\u307e\u308c\u3066\u3044\u308b</li> </ul> <p><code>torch.nn.BCEWithLogitsLoss()</code>\u306e\u65b9\u304c\u6570\u5024\u7684\u306b\u5b89\u5b9a\u3057\u3066\u3044\u308b\u305f\u3081\u3001\u4e00\u822c\u7684\u306b\u3053\u3061\u3089\u3092\u4f7f\u7528\u3057\u307e\u3059\uff1a</p> <pre><code># \u640d\u5931\u95a2\u6570\u3092\u4f5c\u6210\nloss_fn = nn.BCEWithLogitsLoss()\n\n# \u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u3092\u4f5c\u6210\uff08\u5b66\u7fd2\u73870.1\u306eSGD\uff09\noptimizer = torch.optim.SGD(params=model_0.parameters(),\n                            lr=0.1)\n\n# \u7cbe\u5ea6\u3092\u8a08\u7b97\u3059\u308b\u95a2\u6570\ndef accuracy_fn(y_true, y_pred):\n    correct = torch.eq(y_true, y_pred).sum().item()\n    acc = (correct/len(y_pred)) * 100\n    return acc\n</code></pre>","tags":["PyTorch","\u6df1\u5c64\u5b66\u7fd2","\u5206\u985e","\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af","\u6a5f\u68b0\u5b66\u7fd2","\u4e2d\u7d1a\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5","\u4e8c\u5024\u5206\u985e","\u591a\u30af\u30e9\u30b9\u5206\u985e"]},{"location":"PyTorch/03_pytorch_classification/#3","title":"3. \u30e2\u30c7\u30eb\u306e\u8a13\u7df4","text":"<p>PyTorch\u306e\u8a13\u7df4\u30eb\u30fc\u30d7\u306e\u30b9\u30c6\u30c3\u30d7</p> <ol> <li>\u9806\u4f1d\u64ad - \u30e2\u30c7\u30eb\u304c\u8a13\u7df4\u30c7\u30fc\u30bf\u3092\u4e00\u5ea6\u901a\u904e\u3057\u3001forward()\u95a2\u6570\u306e\u8a08\u7b97\u3092\u5b9f\u884c</li> <li>\u640d\u5931\u306e\u8a08\u7b97 - \u30e2\u30c7\u30eb\u306e\u51fa\u529b\uff08\u4e88\u6e2c\uff09\u3092\u6b63\u89e3\u30e9\u30d9\u30eb\u3068\u6bd4\u8f03\u3057\u3001\u3069\u308c\u3060\u3051\u9593\u9055\u3063\u3066\u3044\u308b\u304b\u3092\u8a55\u4fa1</li> <li>\u52fe\u914d\u3092\u30bc\u30ed\u306b\u30ea\u30bb\u30c3\u30c8 - \u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u306e\u52fe\u914d\u3092\u30bc\u30ed\u306b\u8a2d\u5b9a\uff08\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u7d2f\u7a4d\u3055\u308c\u308b\u305f\u3081\uff09</li> <li>\u9006\u4f1d\u64ad\u306e\u5b9f\u884c - \u66f4\u65b0\u3055\u308c\u308b\u5404\u30e2\u30c7\u30eb\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u640d\u5931\u306e\u52fe\u914d\u3092\u8a08\u7b97</li> <li>\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u306e\u30b9\u30c6\u30c3\u30d7 - \u640d\u5931\u52fe\u914d\u306b\u57fa\u3065\u3044\u3066\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u66f4\u65b0</li> </ol>","tags":["PyTorch","\u6df1\u5c64\u5b66\u7fd2","\u5206\u985e","\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af","\u6a5f\u68b0\u5b66\u7fd2","\u4e2d\u7d1a\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5","\u4e8c\u5024\u5206\u985e","\u591a\u30af\u30e9\u30b9\u5206\u985e"]},{"location":"PyTorch/03_pytorch_classification/#31","title":"3.1 \u751f\u306e\u30e2\u30c7\u30eb\u51fa\u529b\u304b\u3089\u4e88\u6e2c\u30e9\u30d9\u30eb\u3078\u306e\u5909\u63db\uff08\u30ed\u30b8\u30c3\u30c8 \u2192 \u4e88\u6e2c\u78ba\u7387 \u2192 \u4e88\u6e2c\u30e9\u30d9\u30eb\uff09","text":"<p>\u307e\u305a\u3001\u30e2\u30c7\u30eb\u306e\u51fa\u529b\u304c\u3069\u306e\u3088\u3046\u306a\u3082\u306e\u304b\u78ba\u8a8d\u3057\u307e\u3057\u3087\u3046\uff1a</p> <pre><code># \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u9806\u4f1d\u64ad\u306e\u6700\u521d\u306e5\u3064\u306e\u51fa\u529b\u3092\u8868\u793a\ny_logits = model_0(X_test.to(device))[:5]\ny_logits\n</code></pre> <p>\u51fa\u529b\uff1a <pre><code>tensor([[0.3639],\n        [0.1690],\n        [0.4165],\n        [0.2865],\n        [0.1603]], device='mps:0', grad_fn=&lt;SliceBackward0&gt;)\n</code></pre></p> <p>\u3053\u308c\u3089\u306e\u5024\uff08\u30ed\u30b8\u30c3\u30c8\uff09\u3092\u78ba\u7387\u306b\u5909\u63db\u3059\u308b\u306b\u306f\u3001\u30b7\u30b0\u30e2\u30a4\u30c9\u95a2\u6570\u3092\u4f7f\u7528\u3057\u307e\u3059\uff1a</p> <pre><code># \u30e2\u30c7\u30eb\u306e\u30ed\u30b8\u30c3\u30c8\u306b\u30b7\u30b0\u30e2\u30a4\u30c9\u95a2\u6570\u3092\u9069\u7528\ny_pred_probs = torch.sigmoid(y_logits)\nprint(y_test[:5], torch.round(y_pred_probs))\n\n# \u4e88\u6e2c\u30e9\u30d9\u30eb\u3092\u898b\u3064\u3051\u308b\uff080.5\u3092\u95be\u5024\u3068\u3057\u3066\u4e38\u3081\u308b\uff09\ny_preds = torch.round(y_pred_probs)\n\n# \u5b8c\u5168\u306a\u51e6\u7406\ny_pred_labels = torch.round(torch.sigmoid(model_0(X_test.to(device))[:5]))\n\n# \u7b49\u4fa1\u6027\u3092\u78ba\u8a8d\nprint(torch.eq(y_preds.squeeze(), y_pred_labels.squeeze()))\n\n# \u4f59\u5206\u306a\u6b21\u5143\u3092\u524a\u9664\ny_preds.squeeze()\n</code></pre> <p>\u51fa\u529b\uff1a <pre><code>tensor([1., 1., 0., 1., 1.]) tensor([[1.],\n        [1.],\n        [1.],\n        [1.],\n        [1.]], device='mps:0', grad_fn=&lt;RoundBackward0&gt;)\ntensor([True, True, True, True, True], device='mps:0')\ntensor([1., 1., 1., 1., 1.], device='mps:0', grad_fn=&lt;SqueezeBackward0&gt;)\n</code></pre></p>","tags":["PyTorch","\u6df1\u5c64\u5b66\u7fd2","\u5206\u985e","\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af","\u6a5f\u68b0\u5b66\u7fd2","\u4e2d\u7d1a\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5","\u4e8c\u5024\u5206\u985e","\u591a\u30af\u30e9\u30b9\u5206\u985e"]},{"location":"PyTorch/03_pytorch_classification/#32","title":"3.2 \u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u3068\u30c6\u30b9\u30c8\u306e\u30eb\u30fc\u30d7\u3092\u69cb\u7bc9","text":"<p>\u305d\u308c\u3067\u306f\u3001\u5b8c\u5168\u306a\u8a13\u7df4\u30eb\u30fc\u30d7\u3092\u5b9f\u88c5\u3057\u307e\u3057\u3087\u3046\uff1a</p> <pre><code>torch.mps.manual_seed(42)\n\n# \u30a8\u30dd\u30c3\u30af\u6570\u306e\u8a2d\u5b9a\nepochs = 1000\n\n# \u30c7\u30fc\u30bf\u3092\u30bf\u30fc\u30b2\u30c3\u30c8\u30c7\u30d0\u30a4\u30b9\u306b\u914d\u7f6e\nX_train, X_test = X_train.to(device), X_test.to(device)\ny_train, y_test = y_train.to(device), y_test.to(device)\n\n# \u8a13\u7df4\u3068\u8a55\u4fa1\u306e\u30eb\u30fc\u30d7\u3092\u69cb\u7bc9\nfor epoch in range(epochs):\n    # \u8a13\u7df4\u30e2\u30fc\u30c9\n    model_0.train()\n\n    # 1. \u9806\u4f1d\u64ad\n    y_logits = model_0(X_train).squeeze()\n    y_preds = torch.round(torch.sigmoid(y_logits))\n\n    # 2. \u640d\u5931\u3068\u7cbe\u5ea6\u306e\u8a08\u7b97\n    loss = loss_fn(y_logits, y_train)\n    acc = accuracy_fn(y_true=y_train,\n                      y_pred=y_preds)\n\n    # 3. \u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u306e\u52fe\u914d\u3092\u30bc\u30ed\u306b\n    optimizer.zero_grad()\n\n    # 4. \u9006\u4f1d\u64ad\n    loss.backward()\n\n    # 5. \u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u306e\u30b9\u30c6\u30c3\u30d7\n    optimizer.step()\n\n    # \u8a55\u4fa1\u30e2\u30fc\u30c9\n    model_0.eval()\n    with torch.inference_mode():\n        test_logits = model_0(X_test).squeeze()\n        test_preds = torch.round(torch.sigmoid(test_logits))\n        test_loss = loss_fn(test_logits, y_test)\n        test_acc = accuracy_fn(y_true=y_test,\n                               y_pred=test_preds)\n\n    # \u9032\u6357\u3092\u51fa\u529b\n    if epoch % 100 == 0:\n        print(f\"\u30a8\u30dd\u30c3\u30af: {epoch} | \u640d\u5931: {loss:.5f}, \u7cbe\u5ea6: {acc:.2f}% | \u30c6\u30b9\u30c8\u640d\u5931: {test_loss:.5f}, \u30c6\u30b9\u30c8\u7cbe\u5ea6: {test_acc:.2f}%\")\n</code></pre> <p>\u51fa\u529b\uff1a <pre><code>\u30a8\u30dd\u30c3\u30af: 0 | \u640d\u5931: 0.69555, \u7cbe\u5ea6: 56.62% | \u30c6\u30b9\u30c8\u640d\u5931: 0.68961, \u30c6\u30b9\u30c8\u7cbe\u5ea6: 54.00%\n\u30a8\u30dd\u30c3\u30af: 100 | \u640d\u5931: 0.68488, \u7cbe\u5ea6: 57.00% | \u30c6\u30b9\u30c8\u640d\u5931: 0.68687, \u30c6\u30b9\u30c8\u7cbe\u5ea6: 53.00%\n\u30a8\u30dd\u30c3\u30af: 200 | \u640d\u5931: 0.68111, \u7cbe\u5ea6: 57.50% | \u30c6\u30b9\u30c8\u640d\u5931: 0.68388, \u30c6\u30b9\u30c8\u7cbe\u5ea6: 54.50%\n\u30a8\u30dd\u30c3\u30af: 300 | \u640d\u5931: 0.67678, \u7cbe\u5ea6: 58.13% | \u30c6\u30b9\u30c8\u640d\u5931: 0.68012, \u30c6\u30b9\u30c8\u7cbe\u5ea6: 53.50%\n\u30a8\u30dd\u30c3\u30af: 400 | \u640d\u5931: 0.67158, \u7cbe\u5ea6: 59.25% | \u30c6\u30b9\u30c8\u640d\u5931: 0.67569, \u30c6\u30b9\u30c8\u7cbe\u5ea6: 54.50%\n\u30a8\u30dd\u30c3\u30af: 500 | \u640d\u5931: 0.66526, \u7cbe\u5ea6: 60.25% | \u30c6\u30b9\u30c8\u640d\u5931: 0.66991, \u30c6\u30b9\u30c8\u7cbe\u5ea6: 56.00%\n\u30a8\u30dd\u30c3\u30af: 600 | \u640d\u5931: 0.65724, \u7cbe\u5ea6: 62.12% | \u30c6\u30b9\u30c8\u640d\u5931: 0.66266, \u30c6\u30b9\u30c8\u7cbe\u5ea6: 56.00%\n\u30a8\u30dd\u30c3\u30af: 700 | \u640d\u5931: 0.64689, \u7cbe\u5ea6: 65.25% | \u30c6\u30b9\u30c8\u640d\u5931: 0.65343, \u30c6\u30b9\u30c8\u7cbe\u5ea6: 58.50%\n\u30a8\u30dd\u30c3\u30af: 800 | \u640d\u5931: 0.63465, \u7cbe\u5ea6: 72.38% | \u30c6\u30b9\u30c8\u640d\u5931: 0.64152, \u30c6\u30b9\u30c8\u7cbe\u5ea6: 66.00%\n\u30a8\u30dd\u30c3\u30af: 900 | \u640d\u5931: 0.62025, \u7cbe\u5ea6: 82.38% | \u30c6\u30b9\u30c8\u640d\u5931: 0.62660, \u30c6\u30b9\u30c8\u7cbe\u5ea6: 75.50%\n</code></pre></p>","tags":["PyTorch","\u6df1\u5c64\u5b66\u7fd2","\u5206\u985e","\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af","\u6a5f\u68b0\u5b66\u7fd2","\u4e2d\u7d1a\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5","\u4e8c\u5024\u5206\u985e","\u591a\u30af\u30e9\u30b9\u5206\u985e"]},{"location":"PyTorch/03_pytorch_classification/#4","title":"4. \u4e88\u6e2c\u3092\u884c\u3044\u3001\u30e2\u30c7\u30eb\u3092\u8a55\u4fa1\u3059\u308b","text":"<p>\u8a13\u7df4\u3055\u308c\u305f\u30e2\u30c7\u30eb\u306e\u6c7a\u5b9a\u5883\u754c\u3092\u53ef\u8996\u5316\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff1a</p> <pre><code>from helper_functions import plot_predictions, plot_decision_boundary\n\n# \u30e2\u30c7\u30eb\u306e\u6c7a\u5b9a\u5883\u754c\u3092\u30d7\u30ed\u30c3\u30c8\nplt.figure(figsize=(12, 6))\nplt.subplot(1, 2, 1)\nplt.title(\"\u8a13\u7df4\u30c7\u30fc\u30bf\")\nplot_decision_boundary(model_0, X_train, y_train)\nplt.subplot(1, 2, 2)\nplt.title(\"\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\")\nplot_decision_boundary(model_0, X_test, y_test)\n</code></pre> <p></p> <p>\u3053\u306e\u53ef\u8996\u5316\u304b\u3089\u3001\u30e2\u30c7\u30eb\u304c\u7dda\u5f62\u306e\u6c7a\u5b9a\u5883\u754c\u3057\u304b\u5b66\u7fd2\u3067\u304d\u3066\u3044\u306a\u3044\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\u5186\u5f62\u306e\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3066\u76f4\u7dda\u3067\u5206\u96e2\u3057\u3088\u3046\u3068\u3057\u3066\u3044\u308b\u305f\u3081\u3001\u6027\u80fd\u304c\u4f4e\u3044\u306e\u3067\u3059\u3002</p>","tags":["PyTorch","\u6df1\u5c64\u5b66\u7fd2","\u5206\u985e","\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af","\u6a5f\u68b0\u5b66\u7fd2","\u4e2d\u7d1a\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5","\u4e8c\u5024\u5206\u985e","\u591a\u30af\u30e9\u30b9\u5206\u985e"]},{"location":"PyTorch/03_pytorch_classification/#5","title":"5. \u30e2\u30c7\u30eb\u306e\u6539\u5584\uff08\u30e2\u30c7\u30eb\u306e\u89b3\u70b9\u304b\u3089\uff09","text":"<p>\u30e2\u30c7\u30eb\u306e\u30a2\u30f3\u30c0\u30fc\u30d5\u30a3\u30c3\u30c8\u306e\u554f\u984c\u3092\u4fee\u6b63\u3059\u308b\u65b9\u6cd5\u306f\u3044\u304f\u3064\u304b\u3042\u308a\u307e\u3059\uff1a</p> \u6539\u5584\u624b\u6cd5 \u52b9\u679c \u30ec\u30a4\u30e4\u30fc\u3092\u8ffd\u52a0 \u5404\u30ec\u30a4\u30e4\u30fc\u304c\u30c7\u30fc\u30bf\u5185\u306e\u65b0\u3057\u3044\u30d1\u30bf\u30fc\u30f3\u3092\u5b66\u7fd2\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308b \u96a0\u308c\u30e6\u30cb\u30c3\u30c8\u3092\u5897\u3084\u3059 \u30ec\u30a4\u30e4\u30fc\u3042\u305f\u308a\u306e\u96a0\u308c\u30e6\u30cb\u30c3\u30c8\u304c\u591a\u3044\u307b\u3069\u3001\u5b66\u7fd2\u80fd\u529b\u304c\u5411\u4e0a \u3088\u308a\u9577\u304f\u8a13\u7df4\u3059\u308b \u30e2\u30c7\u30eb\u304c\u30c7\u30fc\u30bf\u3092\u898b\u308b\u6a5f\u4f1a\u304c\u5897\u3048\u3001\u3088\u308a\u591a\u304f\u3092\u5b66\u7fd2\u3059\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b \u6d3b\u6027\u5316\u95a2\u6570\u3092\u5909\u66f4\u3059\u308b \u975e\u7dda\u5f62\u6d3b\u6027\u5316\u95a2\u6570\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3067\u3001\u76f4\u7dda\u4ee5\u5916\u306e\u30d1\u30bf\u30fc\u30f3\u3082\u5b66\u7fd2\u53ef\u80fd\u306b \u5b66\u7fd2\u7387\u3092\u5909\u66f4\u3059\u308b \u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u66f4\u65b0\u5e45\u3092\u8abf\u6574\u3057\u3001\u6700\u9069\u306a\u5b66\u7fd2\u901f\u5ea6\u3092\u898b\u3064\u3051\u308b \u640d\u5931\u95a2\u6570\u3092\u5909\u66f4\u3059\u308b \u554f\u984c\u306b\u9069\u3057\u305f\u640d\u5931\u95a2\u6570\u3092\u9078\u629e\u3059\u308b \u8ee2\u79fb\u5b66\u7fd2\u3092\u4f7f\u7528\u3059\u308b \u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u3092\u6d3b\u7528\u3059\u308b <p>\u307e\u305a\u3001\u30ec\u30a4\u30e4\u30fc\u3068\u96a0\u308c\u30e6\u30cb\u30c3\u30c8\u3092\u5897\u3084\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff1a</p> <pre><code>class CircleModelV1(nn.Module):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.layer_1 = nn.Linear(in_features=2, out_features=10)\n        self.layer_2 = nn.Linear(in_features=10, out_features=10)\n        self.layer_3 = nn.Linear(in_features=10, out_features=1)\n\n    def forward(self, x):\n        return self.layer_3(self.layer_2(self.layer_1(x)))\n\nmodel_1 = CircleModelV1().to(device)\nmodel_1\n</code></pre> <p>\u51fa\u529b\uff1a <pre><code>CircleModelV1(\n  (layer_1): Linear(in_features=2, out_features=10, bias=True)\n  (layer_2): Linear(in_features=10, out_features=10, bias=True)\n  (layer_3): Linear(in_features=10, out_features=1, bias=True)\n)\n</code></pre></p> <p>\u3053\u306e\u30e2\u30c7\u30eb\u3092\u8a13\u7df4\u3057\u307e\u3059\uff1a</p> <pre><code>loss_fn = nn.BCEWithLogitsLoss()\noptimizer = torch.optim.SGD(model_1.parameters(), 0.1)\ntorch.manual_seed(42)\ntorch.mps.manual_seed(42)\n\n# \u30a8\u30dd\u30c3\u30af\u6570\u306e\u8a2d\u5b9a\nepochs = 1000\n\n# \u30c7\u30fc\u30bf\u3092\u30bf\u30fc\u30b2\u30c3\u30c8\u30c7\u30d0\u30a4\u30b9\u306b\u914d\u7f6e\nX_train, X_test = X_train.to(device), X_test.to(device)\ny_train, y_test = y_train.to(device), y_test.to(device)\n\n# \u8a13\u7df4\u3068\u8a55\u4fa1\u306e\u30eb\u30fc\u30d7\u3092\u69cb\u7bc9\nfor epoch in range(epochs):\n    # \u8a13\u7df4\n    model_1.train()\n    # 1. \u9806\u4f1d\u64ad\n    y_logits = model_1(X_train).squeeze()\n    y_preds = torch.round(torch.sigmoid(y_logits))\n    # 2. \u640d\u5931/\u7cbe\u5ea6\u306e\u8a08\u7b97\n    loss = loss_fn(y_logits, y_train)\n    acc = accuracy_fn(y_true=y_train,\n                      y_pred=y_preds)\n    # 3. \u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u306e\u52fe\u914d\u3092\u30bc\u30ed\u306b\n    optimizer.zero_grad()\n    # 4. \u9006\u4f1d\u64ad\n    loss.backward()\n    # 5. \u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u306e\u30b9\u30c6\u30c3\u30d7\n    optimizer.step()\n\n    # \u30c6\u30b9\u30c8\n    model_1.eval()\n    with torch.inference_mode():\n        test_logits = model_1(X_test).squeeze()\n        test_preds = torch.round(torch.sigmoid(test_logits))\n        test_loss = loss_fn(test_logits, y_test)\n        test_acc = accuracy_fn(y_true=y_test,\n                               y_pred=test_preds)\n\n    # \u51fa\u529b\n    if epoch % 100 == 0:\n        print(f\"\u30a8\u30dd\u30c3\u30af: {epoch} | \u640d\u5931: {loss:.5f}, \u7cbe\u5ea6: {acc:.2f}% | \u30c6\u30b9\u30c8\u640d\u5931: {test_loss:.5f}, \u30c6\u30b9\u30c8\u7cbe\u5ea6: {test_acc:.2f}%\")\n</code></pre> <p>\u51fa\u529b\uff1a <pre><code>\u30a8\u30dd\u30c3\u30af: 0 | \u640d\u5931: 0.71811, \u7cbe\u5ea6: 50.50% | \u30c6\u30b9\u30c8\u640d\u5931: 0.72682, \u30c6\u30b9\u30c8\u7cbe\u5ea6: 48.00%\n\u30a8\u30dd\u30c3\u30af: 100 | \u640d\u5931: 0.69348, \u7cbe\u5ea6: 49.50% | \u30c6\u30b9\u30c8\u640d\u5931: 0.69462, \u30c6\u30b9\u30c8\u7cbe\u5ea6: 45.50%\n\u30a8\u30dd\u30c3\u30af: 200 | \u640d\u5931: 0.69311, \u7cbe\u5ea6: 47.62% | \u30c6\u30b9\u30c8\u640d\u5931: 0.69401, \u30c6\u30b9\u30c8\u7cbe\u5ea6: 44.50%\n\u30a8\u30dd\u30c3\u30af: 300 | \u640d\u5931: 0.69307, \u7cbe\u5ea6: 43.12% | \u30c6\u30b9\u30c8\u640d\u5931: 0.69389, \u30c6\u30b9\u30c8\u7cbe\u5ea6: 43.00%\n\u30a8\u30dd\u30c3\u30af: 400 | \u640d\u5931: 0.69307, \u7cbe\u5ea6: 41.25% | \u30c6\u30b9\u30c8\u640d\u5931: 0.69385, \u30c6\u30b9\u30c8\u7cbe\u5ea6: 40.50%\n\u30a8\u30dd\u30c3\u30af: 500 | \u640d\u5931: 0.69307, \u7cbe\u5ea6: 41.62% | \u30c6\u30b9\u30c8\u640d\u5931: 0.69384, \u30c6\u30b9\u30c8\u7cbe\u5ea6: 40.50%\n\u30a8\u30dd\u30c3\u30af: 600 | \u640d\u5931: 0.69307, \u7cbe\u5ea6: 41.62% | \u30c6\u30b9\u30c8\u640d\u5931: 0.69383, \u30c6\u30b9\u30c8\u7cbe\u5ea6: 40.50%\n\u30a8\u30dd\u30c3\u30af: 700 | \u640d\u5931: 0.69307, \u7cbe\u5ea6: 41.88% | \u30c6\u30b9\u30c8\u640d\u5931: 0.69383, \u30c6\u30b9\u30c8\u7cbe\u5ea6: 40.50%\n\u30a8\u30dd\u30c3\u30af: 800 | \u640d\u5931: 0.69307, \u7cbe\u5ea6: 41.88% | \u30c6\u30b9\u30c8\u640d\u5931: 0.69383, \u30c6\u30b9\u30c8\u7cbe\u5ea6: 40.00%\n\u30a8\u30dd\u30c3\u30af: 900 | \u640d\u5931: 0.69307, \u7cbe\u5ea6: 41.88% | \u30c6\u30b9\u30c8\u640d\u5931: 0.69383, \u30c6\u30b9\u30c8\u7cbe\u5ea6: 40.00%\n</code></pre></p> <p>\u30ec\u30a4\u30e4\u30fc\u3068\u96a0\u308c\u30e6\u30cb\u30c3\u30c8\u3092\u5897\u3084\u3057\u3066\u3082\u3001\u6027\u80fd\u306f\u6539\u5584\u3055\u308c\u307e\u305b\u3093\u3067\u3057\u305f\u3002\u3053\u308c\u306f\u3001\u30e2\u30c7\u30eb\u304c\u307e\u3060\u7dda\u5f62\u306e\u6c7a\u5b9a\u5883\u754c\u3057\u304b\u5b66\u7fd2\u3067\u304d\u306a\u3044\u305f\u3081\u3067\u3059\u3002</p>","tags":["PyTorch","\u6df1\u5c64\u5b66\u7fd2","\u5206\u985e","\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af","\u6a5f\u68b0\u5b66\u7fd2","\u4e2d\u7d1a\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5","\u4e8c\u5024\u5206\u985e","\u591a\u30af\u30e9\u30b9\u5206\u985e"]},{"location":"PyTorch/03_pytorch_classification/#51","title":"5.1 \u30e2\u30c7\u30eb\u304c\u76f4\u7dda\u3092\u30e2\u30c7\u30eb\u5316\u3067\u304d\u308b\u304b\u306e\u78ba\u8a8d","text":"<p>\u30e2\u30c7\u30eb\u304c\u672c\u5f53\u306b\u5b66\u7fd2\u3067\u304d\u308b\u306e\u304b\u78ba\u8a8d\u3059\u308b\u305f\u3081\u3001\u7dda\u5f62\u30c7\u30fc\u30bf\u3067\u8a66\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff1a</p> <pre><code># \u30c7\u30fc\u30bf\u3092\u4f5c\u6210\uff08\u30ce\u30fc\u30c8\u30d6\u30c3\u30af01\u3068\u540c\u3058\uff09\nweight = 0.7\nbias = 0.3\nstart = 0\nend = 1\nstep = 0.01\n\n# \u30c7\u30fc\u30bf\u3092\u4f5c\u6210\nX_regression = torch.arange(start, end, step).unsqueeze(dim=1)\ny_regression = weight * X_regression + bias # \u7dda\u5f62\u56de\u5e30\u306e\u5f0f\n\n# \u30c7\u30fc\u30bf\u3092\u78ba\u8a8d\nprint(len(X_regression))\nX_regression[:5], y_regression[:5]\n</code></pre> <p>\u51fa\u529b\uff1a <pre><code>100\n(tensor([[0.0000],\n         [0.0100],\n         [0.0200],\n         [0.0300],\n         [0.0400]]),\n tensor([[0.3000],\n         [0.3070],\n         [0.3140],\n         [0.3210],\n         [0.3280]]))\n</code></pre></p> <p>\u8a13\u7df4\u3068\u30c6\u30b9\u30c8\u30bb\u30c3\u30c8\u306b\u5206\u5272\uff1a</p> <pre><code># \u8a13\u7df4\u3068\u30c6\u30b9\u30c8\u30bb\u30c3\u30c8\u3092\u4f5c\u6210\ntrain_split = int(0.8 * len(X_regression)) # \u30c7\u30fc\u30bf\u306e80%\u3092\u8a13\u7df4\u7528\u306b\u4f7f\u7528\nX_train_regression, y_train_regression = X_regression[:train_split], y_regression[:train_split]\nX_test_regression, y_test_regression = X_regression[train_split:], y_regression[train_split:]\n\n# \u5404\u5206\u5272\u306e\u9577\u3055\u3092\u78ba\u8a8d\nprint(len(X_train_regression), \n    len(y_train_regression), \n    len(X_test_regression), \n    len(y_test_regression))\n</code></pre> <p>\u51fa\u529b\uff1a <pre><code>80 80 20 20\n</code></pre></p> <p>\u30c7\u30fc\u30bf\u3092\u53ef\u8996\u5316\uff1a</p> <pre><code>plot_predictions(train_data=X_train_regression,\n    train_labels=y_train_regression,\n    test_data=X_test_regression,\n    test_labels=y_test_regression\n)\n</code></pre> <p></p> <p>\u7dda\u5f62\u30c7\u30fc\u30bf\u7528\u306e\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\uff1a</p> <pre><code># model_1\u3068\u540c\u3058\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\uff08\u305f\u3060\u3057nn.Sequential\u3092\u4f7f\u7528\uff09\nmodel_2 = nn.Sequential(\n    nn.Linear(in_features=1, out_features=10),\n    nn.Linear(in_features=10, out_features=10),\n    nn.Linear(in_features=10, out_features=1)\n).to(device)\n\nmodel_2\n</code></pre> <p>\u51fa\u529b\uff1a <pre><code>Sequential(\n  (0): Linear(in_features=1, out_features=10, bias=True)\n  (1): Linear(in_features=10, out_features=10, bias=True)\n  (2): Linear(in_features=10, out_features=1, bias=True)\n)\n</code></pre></p> <p>\u56de\u5e30\u554f\u984c\u306a\u306e\u3067\u3001\u640d\u5931\u95a2\u6570\u3092\u5909\u66f4\uff1a</p> <pre><code># \u640d\u5931\u95a2\u6570\u3068\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\nloss_fn = nn.L1Loss()\noptimizer = torch.optim.SGD(model_2.parameters(), lr=0.1)\n</code></pre> <p>\u30e2\u30c7\u30eb\u3092\u8a13\u7df4\uff1a</p> <pre><code># \u30e2\u30c7\u30eb\u3092\u8a13\u7df4\ntorch.manual_seed(42)\n\n# \u30a8\u30dd\u30c3\u30af\u6570\u3092\u8a2d\u5b9a\nepochs = 1000\n\n# \u30c7\u30fc\u30bf\u3092\u30bf\u30fc\u30b2\u30c3\u30c8\u30c7\u30d0\u30a4\u30b9\u306b\u914d\u7f6e\nX_train_regression, y_train_regression = X_train_regression.to(device), y_train_regression.to(device)\nX_test_regression, y_test_regression = X_test_regression.to(device), y_test_regression.to(device)\n\nfor epoch in range(epochs):\n    ### \u8a13\u7df4 \n    # 1. \u9806\u4f1d\u64ad\n    y_pred = model_2(X_train_regression)\n\n    # 2. \u640d\u5931\u3092\u8a08\u7b97\uff08\u56de\u5e30\u554f\u984c\u306a\u306e\u3067\u7cbe\u5ea6\u306f\u8a08\u7b97\u3057\u306a\u3044\uff09\n    loss = loss_fn(y_pred, y_train_regression)\n\n    # 3. \u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u306e\u52fe\u914d\u3092\u30bc\u30ed\u306b\n    optimizer.zero_grad()\n\n    # 4. \u9006\u4f1d\u64ad\n    loss.backward()\n\n    # 5. \u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u306e\u30b9\u30c6\u30c3\u30d7\n    optimizer.step()\n\n    ### \u30c6\u30b9\u30c8\n    model_2.eval()\n    with torch.inference_mode():\n      # 1. \u9806\u4f1d\u64ad\n      test_pred = model_2(X_test_regression)\n      # 2. \u640d\u5931\u3092\u8a08\u7b97 \n      test_loss = loss_fn(test_pred, y_test_regression)\n\n    # \u9032\u6357\u3092\u51fa\u529b\n    if epoch % 100 == 0: \n        print(f\"\u30a8\u30dd\u30c3\u30af: {epoch} | \u8a13\u7df4\u640d\u5931: {loss:.5f}, \u30c6\u30b9\u30c8\u640d\u5931: {test_loss:.5f}\")\n</code></pre> <p>\u51fa\u529b\uff1a <pre><code>\u30a8\u30dd\u30c3\u30af: 0 | \u8a13\u7df4\u640d\u5931: 0.75986, \u30c6\u30b9\u30c8\u640d\u5931: 0.54143\n\u30a8\u30dd\u30c3\u30af: 100 | \u8a13\u7df4\u640d\u5931: 0.09309, \u30c6\u30b9\u30c8\u640d\u5931: 0.02901\n\u30a8\u30dd\u30c3\u30af: 200 | \u8a13\u7df4\u640d\u5931: 0.07376, \u30c6\u30b9\u30c8\u640d\u5931: 0.02850\n\u30a8\u30dd\u30c3\u30af: 300 | \u8a13\u7df4\u640d\u5931: 0.06745, \u30c6\u30b9\u30c8\u640d\u5931: 0.00615\n\u30a8\u30dd\u30c3\u30af: 400 | \u8a13\u7df4\u640d\u5931: 0.06107, \u30c6\u30b9\u30c8\u640d\u5931: 0.02004\n\u30a8\u30dd\u30c3\u30af: 500 | \u8a13\u7df4\u640d\u5931: 0.05698, \u30c6\u30b9\u30c8\u640d\u5931: 0.01061\n\u30a8\u30dd\u30c3\u30af: 600 | \u8a13\u7df4\u640d\u5931: 0.04857, \u30c6\u30b9\u30c8\u640d\u5931: 0.01326\n\u30a8\u30dd\u30c3\u30af: 700 | \u8a13\u7df4\u640d\u5931: 0.06109, \u30c6\u30b9\u30c8\u640d\u5931: 0.02127\n\u30a8\u30dd\u30c3\u30af: 800 | \u8a13\u7df4\u640d\u5931: 0.05599, \u30c6\u30b9\u30c8\u640d\u5931: 0.01426\n\u30a8\u30dd\u30c3\u30af: 900 | \u8a13\u7df4\u640d\u5931: 0.05571, \u30c6\u30b9\u30c8\u640d\u5931: 0.00603\n</code></pre></p> <p>\u4e88\u6e2c\u7d50\u679c\u3092\u53ef\u8996\u5316\uff1a</p> <pre><code># \u8a55\u4fa1\u30e2\u30fc\u30c9\u306b\u5207\u308a\u66ff\u3048\nmodel_2.eval()\n\n# \u4e88\u6e2c\u3092\u5b9f\u884c\uff08\u63a8\u8ad6\uff09\nwith torch.inference_mode():\n    y_preds = model_2(X_test_regression)\n\n# \u30c7\u30fc\u30bf\u3068\u4e88\u6e2c\u3092\u30d7\u30ed\u30c3\u30c8\uff08matplotlib\u306fGPU\u4e0a\u306e\u30c7\u30fc\u30bf\u3092\u6271\u3048\u306a\u3044\u305f\u3081\u3001CPU\u306b\u79fb\u52d5\uff09\nplot_predictions(train_data=X_train_regression.cpu(),\n                 train_labels=y_train_regression.cpu(),\n                 test_data=X_test_regression.cpu(),\n                 test_labels=y_test_regression.cpu(),\n                 predictions=y_preds.cpu())\n</code></pre> <p></p> <p>\u30e2\u30c7\u30eb\u306f\u7dda\u5f62\u30c7\u30fc\u30bf\u3092\u5b66\u7fd2\u3067\u304d\u308b\u3053\u3068\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3057\u305f\u3002\u3064\u307e\u308a\u3001\u5186\u5f62\u30c7\u30fc\u30bf\u306e\u554f\u984c\u306f\u3001\u30e2\u30c7\u30eb\u304c\u7dda\u5f62\u306e\u6c7a\u5b9a\u5883\u754c\u3057\u304b\u5b66\u7fd2\u3067\u304d\u306a\u3044\u3053\u3068\u306b\u3042\u308a\u307e\u3059\u3002</p>","tags":["PyTorch","\u6df1\u5c64\u5b66\u7fd2","\u5206\u985e","\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af","\u6a5f\u68b0\u5b66\u7fd2","\u4e2d\u7d1a\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5","\u4e8c\u5024\u5206\u985e","\u591a\u30af\u30e9\u30b9\u5206\u985e"]},{"location":"PyTorch/03_pytorch_classification/#6","title":"6. \u6b20\u3051\u3066\u3044\u308b\u90e8\u5206\uff1a\u975e\u7dda\u5f62\u6027","text":"<p>\u30e2\u30c7\u30eb\u304c\u76f4\u7dda\uff08\u7dda\u5f62\uff09\u3092\u63cf\u753b\u3067\u304d\u308b\u3053\u3068\u306f\u308f\u304b\u308a\u307e\u3057\u305f\u304c\u3001\u5186\u5f62\u30c7\u30fc\u30bf\u3092\u5206\u985e\u3059\u308b\u306b\u306f\u975e\u7dda\u5f62\u306e\u6c7a\u5b9a\u5883\u754c\u304c\u5fc5\u8981\u3067\u3059\u3002</p>","tags":["PyTorch","\u6df1\u5c64\u5b66\u7fd2","\u5206\u985e","\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af","\u6a5f\u68b0\u5b66\u7fd2","\u4e2d\u7d1a\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5","\u4e8c\u5024\u5206\u985e","\u591a\u30af\u30e9\u30b9\u5206\u985e"]},{"location":"PyTorch/03_pytorch_classification/#61","title":"6.1 \u975e\u7dda\u5f62\u30c7\u30fc\u30bf\uff08\u8d64\u3068\u9752\u306e\u5186\uff09\u306e\u518d\u4f5c\u6210","text":"<p>\u30c7\u30fc\u30bf\u3092\u518d\u4f5c\u6210\u3057\u3066\u3001\u65b0\u3057\u3044\u30a2\u30d7\u30ed\u30fc\u30c1\u3092\u8a66\u3057\u307e\u3057\u3087\u3046\uff1a</p> <pre><code># \u30c7\u30fc\u30bf\u3092\u4f5c\u6210\u3057\u3066\u30d7\u30ed\u30c3\u30c8\nimport matplotlib.pyplot as plt\nfrom sklearn.datasets import make_circles\n\nn_sample = 1000\nX, y = make_circles(n_samples=1000,\n                    noise=0.03,\n                    random_state=42)\n\nplt.scatter(X[:,0], X[:,1], c=y, cmap=plt.cm.RdBu)\n</code></pre> <p></p> <pre><code>import torch\nfrom sklearn.model_selection import train_test_split\n\nX = torch.from_numpy(X).type(torch.float)\ny = torch.from_numpy(y).type(torch.float)\n\n# \u8a13\u7df4\u3068\u30c6\u30b9\u30c8\u30bb\u30c3\u30c8\u306b\u5206\u5272\nX_train, X_test, y_train, y_test = train_test_split(X, \n                                                    y, \n                                                    test_size=0.2,\n                                                    random_state=42\n)\nX_train[:5], y_train[:5]\n</code></pre> <p>\u51fa\u529b\uff1a <pre><code>(tensor([[ 0.6579, -0.4651],\n         [ 0.6319, -0.7347],\n         [-1.0086, -0.1240],\n         [-0.9666, -0.2256],\n         [-0.1666,  0.7994]]),\n tensor([1., 0., 0., 0., 1.]))\n</code></pre></p>","tags":["PyTorch","\u6df1\u5c64\u5b66\u7fd2","\u5206\u985e","\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af","\u6a5f\u68b0\u5b66\u7fd2","\u4e2d\u7d1a\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5","\u4e8c\u5024\u5206\u985e","\u591a\u30af\u30e9\u30b9\u5206\u985e"]},{"location":"PyTorch/03_pytorch_classification/#62","title":"6.2 \u975e\u7dda\u5f62\u6027\u3092\u6301\u3064\u30e2\u30c7\u30eb\u306e\u69cb\u7bc9","text":"<p>PyTorch\u306b\u306f\u591a\u304f\u306e\u975e\u7dda\u5f62\u6d3b\u6027\u5316\u95a2\u6570\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u6700\u3082\u4e00\u822c\u7684\u3067\u9ad8\u6027\u80fd\u306a\u3082\u306e\u306e1\u3064\u304cReLU\uff08Rectified Linear Unit\u3001\u6574\u6d41\u7dda\u5f62\u30e6\u30cb\u30c3\u30c8\uff09\u3067\u3059\uff1a</p> <pre><code>from torch import nn\nclass CircleModelV2(nn.Module):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.layer_1 = nn.Linear(in_features=2, out_features=10)\n        self.layer_2 = nn.Linear(in_features=10, out_features=10)\n        self.relu = nn.ReLU()  # \u975e\u7dda\u5f62\u6d3b\u6027\u5316\u95a2\u6570\n        self.layer_3 = nn.Linear(in_features=10, out_features=1)\n\n    def forward(self, x):\n        # ReLU\u6d3b\u6027\u5316\u95a2\u6570\u3092\u5c64\u306e\u9593\u306b\u9069\u7528\n        return self.layer_3(self.relu(self.layer_2(self.relu(self.layer_1(x)))))\n\nmodel_3 = CircleModelV2().to(device)\nmodel_3\n</code></pre> <p>\u51fa\u529b\uff1a <pre><code>CircleModelV2(\n  (layer_1): Linear(in_features=2, out_features=10, bias=True)\n  (layer_2): Linear(in_features=10, out_features=10, bias=True)\n  (relu): ReLU()\n  (layer_3): Linear(in_features=10, out_features=1, bias=True)\n)\n</code></pre></p>","tags":["PyTorch","\u6df1\u5c64\u5b66\u7fd2","\u5206\u985e","\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af","\u6a5f\u68b0\u5b66\u7fd2","\u4e2d\u7d1a\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5","\u4e8c\u5024\u5206\u985e","\u591a\u30af\u30e9\u30b9\u5206\u985e"]},{"location":"PyTorch/03_pytorch_classification/#63","title":"6.3 \u975e\u7dda\u5f62\u6d3b\u6027\u5316\u95a2\u6570\u3092\u4f7f\u7528\u3057\u305f\u30e2\u30c7\u30eb\u306e\u8a13\u7df4","text":"<pre><code># \u640d\u5931\u95a2\u6570\u3068\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u3092\u8a2d\u5b9a\nloss_fn = nn.BCEWithLogitsLoss()\noptimizer = torch.optim.SGD(model_3.parameters(), 0.1)\n</code></pre> <pre><code># \u30e2\u30c7\u30eb\u3092\u8a13\u7df4\ntorch.manual_seed(42)\ntorch.mps.manual_seed(42)\nepochs = 1000\n\nX_train, y_train = X_train.to(device), y_train.to(device)\nX_test, y_test = X_test.to(device), y_test.to(device)\n\nfor epoch in range(epochs):\n    model_3.train()\n    y_logits = model_3(X_train).squeeze()\n    y_preds = torch.round(torch.sigmoid(y_logits))\n\n    loss = loss_fn(y_logits, y_train)\n    acc = accuracy_fn(y_true=y_train,\n                      y_pred=y_preds)\n\n    optimizer.zero_grad()\n    loss.backward()\n    optimizer.step()\n\n    model_3.eval()\n    with torch.inference_mode():\n        test_logits = model_3(X_test).squeeze()\n        test_preds = torch.round(torch.sigmoid(test_logits))\n        test_loss = loss_fn(test_logits, y_test)\n        test_acc = accuracy_fn(y_true=y_test,\n                          y_pred=test_preds)\n        if epoch % 100 == 0:\n            print(f\"\u30a8\u30dd\u30c3\u30af: {epoch} | \u640d\u5931: {loss:.5f}, \u7cbe\u5ea6: {acc:.2f}% | \u30c6\u30b9\u30c8\u640d\u5931: {test_loss:.5f}, \u30c6\u30b9\u30c8\u7cbe\u5ea6: {test_acc:.2f}%\")\n</code></pre> <p>\u51fa\u529b\uff1a <pre><code>\u30a8\u30dd\u30c3\u30af: 0 | \u640d\u5931: 0.69293, \u7cbe\u5ea6: 50.00% | \u30c6\u30b9\u30c8\u640d\u5931: 0.69323, \u30c6\u30b9\u30c8\u7cbe\u5ea6: 50.00%\n\u30a8\u30dd\u30c3\u30af: 100 | \u640d\u5931: 0.69276, \u7cbe\u5ea6: 52.75% | \u30c6\u30b9\u30c8\u640d\u5931: 0.69285, \u30c6\u30b9\u30c8\u7cbe\u5ea6: 47.50%\n\u30a8\u30dd\u30c3\u30af: 200 | \u640d\u5931: 0.69257, \u7cbe\u5ea6: 53.12% | \u30c6\u30b9\u30c8\u640d\u5931: 0.69269, \u30c6\u30b9\u30c8\u7cbe\u5ea6: 48.00%\n\u30a8\u30dd\u30c3\u30af: 300 | \u640d\u5931: 0.69238, \u7cbe\u5ea6: 52.50% | \u30c6\u30b9\u30c8\u640d\u5931: 0.69251, \u30c6\u30b9\u30c8\u7cbe\u5ea6: 47.00%\n\u30a8\u30dd\u30c3\u30af: 400 | \u640d\u5931: 0.69219, \u7cbe\u5ea6: 53.00% | \u30c6\u30b9\u30c8\u640d\u5931: 0.69234, \u30c6\u30b9\u30c8\u7cbe\u5ea6: 47.00%\n\u30a8\u30dd\u30c3\u30af: 500 | \u640d\u5931: 0.69200, \u7cbe\u5ea6: 53.00% | \u30c6\u30b9\u30c8\u640d\u5931: 0.69216, \u30c6\u30b9\u30c8\u7cbe\u5ea6: 47.00%\n\u30a8\u30dd\u30c3\u30af: 600 | \u640d\u5931: 0.69182, \u7cbe\u5ea6: 52.75% | \u30c6\u30b9\u30c8\u640d\u5931: 0.69198, \u30c6\u30b9\u30c8\u7cbe\u5ea6: 46.50%\n\u30a8\u30dd\u30c3\u30af: 700 | \u640d\u5931: 0.69163, \u7cbe\u5ea6: 52.75% | \u30c6\u30b9\u30c8\u640d\u5931: 0.69181, \u30c6\u30b9\u30c8\u7cbe\u5ea6: 46.50%\n\u30a8\u30dd\u30c3\u30af: 800 | \u640d\u5931: 0.69144, \u7cbe\u5ea6: 52.75% | \u30c6\u30b9\u30c8\u640d\u5931: 0.69163, \u30c6\u30b9\u30c8\u7cbe\u5ea6: 46.50%\n\u30a8\u30dd\u30c3\u30af: 900 | \u640d\u5931: 0.69126, \u7cbe\u5ea6: 52.50% | \u30c6\u30b9\u30c8\u640d\u5931: 0.69145, \u30c6\u30b9\u30c8\u7cbe\u5ea6: 46.00%\n</code></pre></p>","tags":["PyTorch","\u6df1\u5c64\u5b66\u7fd2","\u5206\u985e","\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af","\u6a5f\u68b0\u5b66\u7fd2","\u4e2d\u7d1a\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5","\u4e8c\u5024\u5206\u985e","\u591a\u30af\u30e9\u30b9\u5206\u985e"]},{"location":"PyTorch/03_pytorch_classification/#64","title":"6.4 \u975e\u7dda\u5f62\u6d3b\u6027\u5316\u95a2\u6570\u3067\u5b66\u7fd2\u3057\u305f\u30e2\u30c7\u30eb\u306e\u8a55\u4fa1","text":"<p>\u8a13\u7df4\u3055\u308c\u305f\u30e2\u30c7\u30eb\u306e\u4e88\u6e2c\u3092\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff1a</p> <pre><code>X_train, y_train = X_train.to(device), y_train.to(device)\nX_test, y_test = X_test.to(device), y_test.to(device)\nmodel_3.eval()\nwith torch.inference_mode():\n    y_logits = model_3(X_test).squeeze()\n    y_sigmoid = torch.sigmoid(y_logits)\n    y_preds = torch.round(y_sigmoid).squeeze()\n\nprint(\"\u30ed\u30b8\u30c3\u30c8:\", y_logits[:10])\nprint(\"\u30b7\u30b0\u30e2\u30a4\u30c9\u5f8c:\", y_sigmoid[:10])\nprint(\"\u4e88\u6e2c:\", y_preds[:10])\nprint(\"\u6b63\u89e3:\", y_test[:10])\n</code></pre> <p>\u51fa\u529b\uff1a <pre><code>\u30ed\u30b8\u30c3\u30c8: tensor([ 0.0579,  0.0834, -0.0096,  0.0914, -0.0713, -0.0642,  0.0245, -0.0113,\n        -0.0082,  0.0840], device='mps:0')\n\u30b7\u30b0\u30e2\u30a4\u30c9\u5f8c: tensor([0.5145, 0.5208, 0.4976, 0.5228, 0.4822, 0.4840, 0.5061, 0.4972, 0.4979,\n        0.5210], device='mps:0')\n\u4e88\u6e2c: tensor([1., 1., 0., 1., 0., 0., 1., 0., 0., 1.], device='mps:0')\n\u6b63\u89e3: tensor([1., 0., 1., 0., 1., 1., 0., 0., 1., 0.], device='mps:0')\n</code></pre></p> <p>\u6c7a\u5b9a\u5883\u754c\u3092\u53ef\u8996\u5316\uff1a</p> <pre><code>from helper_functions import plot_predictions, plot_decision_boundary\n\n# \u30e2\u30c7\u30eb\u306e\u6c7a\u5b9a\u5883\u754c\u3092\u30d7\u30ed\u30c3\u30c8\nplt.figure(figsize=(12, 6))\nplt.subplot(1, 2, 1)\nplt.title(\"\u8a13\u7df4\u30c7\u30fc\u30bf\")\nplot_decision_boundary(model_3, X_train, y_train)\nplt.subplot(1, 2, 2)\nplt.title(\"\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\")\nplot_decision_boundary(model_3, X_test, y_test)\n</code></pre> <p></p> <p>ReLU\u6d3b\u6027\u5316\u95a2\u6570\u3092\u8ffd\u52a0\u3057\u3066\u3082\u3001\u307e\u3060\u5186\u5f62\u30c7\u30fc\u30bf\u3092\u3046\u307e\u304f\u5206\u985e\u3067\u304d\u3066\u3044\u307e\u305b\u3093\u3002\u3053\u308c\u306f\u3001\u30e2\u30c7\u30eb\u306e\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3084\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u3055\u3089\u306b\u8abf\u6574\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3053\u3068\u3092\u793a\u3057\u3066\u3044\u307e\u3059\u3002</p>","tags":["PyTorch","\u6df1\u5c64\u5b66\u7fd2","\u5206\u985e","\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af","\u6a5f\u68b0\u5b66\u7fd2","\u4e2d\u7d1a\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5","\u4e8c\u5024\u5206\u985e","\u591a\u30af\u30e9\u30b9\u5206\u985e"]},{"location":"PyTorch/03_pytorch_classification/#8","title":"8. \u591a\u30af\u30e9\u30b9\u5206\u985e\u30e2\u30c7\u30eb\u306e\u69cb\u7bc9","text":"<p>\u4e8c\u5024\u5206\u985e\u304b\u3089\u591a\u30af\u30e9\u30b9\u5206\u985e\u306b\u9032\u307f\u307e\u3057\u3087\u3046\u3002\u591a\u30af\u30e9\u30b9\u5206\u985e\u306f\u30012\u3064\u4ee5\u4e0a\u306e\u30af\u30e9\u30b9\u304b\u3089\u9078\u629e\u3059\u308b\u554f\u984c\u3067\u3059\uff08\u4f8b\uff1a\u753b\u50cf\u3092\u732b\u3001\u72ac\u3001\u9d8f\u3068\u3057\u3066\u5206\u985e\uff09\u3002</p>","tags":["PyTorch","\u6df1\u5c64\u5b66\u7fd2","\u5206\u985e","\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af","\u6a5f\u68b0\u5b66\u7fd2","\u4e2d\u7d1a\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5","\u4e8c\u5024\u5206\u985e","\u591a\u30af\u30e9\u30b9\u5206\u985e"]},{"location":"PyTorch/03_pytorch_classification/#81","title":"8.1 \u591a\u30af\u30e9\u30b9\u5206\u985e\u7528\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u4f5c\u6210","text":"<p>Scikit-Learn\u306e<code>make_blobs()</code>\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3057\u3066\u3001\u591a\u30af\u30e9\u30b9\u30c7\u30fc\u30bf\u3092\u4f5c\u6210\u3057\u307e\u3059\uff1a</p> <pre><code>import torch\nimport matplotlib.pyplot as plt\nfrom sklearn.datasets import make_blobs\nfrom sklearn.model_selection import train_test_split\n\n# \u30c7\u30fc\u30bf\u4f5c\u6210\u306e\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8a2d\u5b9a\nNUM_CLASSES = 4\nNUM_FEATURES = 2\nRANDOM_SEED = 42\n\n# 1. \u591a\u30af\u30e9\u30b9\u30c7\u30fc\u30bf\u3092\u4f5c\u6210\nX_blob, y_blob = make_blobs(n_samples=1000,\n                            n_features=NUM_FEATURES,\n                            centers=NUM_CLASSES,\n                            cluster_std=1.5,  # \u30af\u30e9\u30b9\u30bf\u30fc\u306b\u5c11\u3057\u5909\u52d5\u3092\u52a0\u3048\u308b\n                            random_state=RANDOM_SEED)\n\n# 2. \u30c7\u30fc\u30bf\u3092\u30c6\u30f3\u30bd\u30eb\u306b\u5909\u63db\nX_blob = torch.from_numpy(X_blob).type(torch.float)\ny_blob = torch.from_numpy(y_blob).type(torch.LongTensor)\n\n# 3. \u8a13\u7df4\u3068\u30c6\u30b9\u30c8\u30bb\u30c3\u30c8\u306b\u5206\u5272\nX_blob_train, X_blob_test, y_blob_train, y_blob_test = train_test_split(X_blob,\n                                                                        y_blob,\n                                                                        test_size=0.2,\n                                                                        random_state=RANDOM_SEED)\n\nprint(X_blob_test[:5])\n# \u30c7\u30fc\u30bf\u3092\u30d7\u30ed\u30c3\u30c8\nplt.figure(figsize=(10, 7))\nplt.scatter(X_blob[:, 0], X_blob[:, 1], c=y_blob, cmap=plt.cm.RdBu)\n</code></pre> <p>\u51fa\u529b\uff1a <pre><code>tensor([[ 4.6675,  4.4878],\n        [-7.9969,  6.8803],\n        [-6.2801, -7.8571],\n        [ 3.6833,  1.1767],\n        [-0.1404, 10.1654]])\n</code></pre></p> <p></p>","tags":["PyTorch","\u6df1\u5c64\u5b66\u7fd2","\u5206\u985e","\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af","\u6a5f\u68b0\u5b66\u7fd2","\u4e2d\u7d1a\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5","\u4e8c\u5024\u5206\u985e","\u591a\u30af\u30e9\u30b9\u5206\u985e"]},{"location":"PyTorch/03_pytorch_classification/#82","title":"8.2 \u591a\u30af\u30e9\u30b9\u5206\u985e\u30e2\u30c7\u30eb\u306e\u69cb\u7bc9","text":"<pre><code>import torch\n\ndevice = \"mps\" if torch.mps.is_available() else \"cpu\"\n</code></pre> <pre><code># \u30e2\u30c7\u30eb\u3092\u69cb\u7bc9\nfrom torch import nn\nclass BlobModel(nn.Module):\n    def __init__(self, input_features, output_features, hidden_units=8):\n        \"\"\"\u591a\u30af\u30e9\u30b9\u5206\u985e\u30e2\u30c7\u30eb\u306e\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u521d\u671f\u5316\n\n        Args:\n            input_features (int): \u30e2\u30c7\u30eb\u3078\u306e\u5165\u529b\u7279\u5fb4\u91cf\u306e\u6570\n            output_features (int): \u30e2\u30c7\u30eb\u306e\u51fa\u529b\u7279\u5fb4\u91cf\u306e\u6570\uff08\u30af\u30e9\u30b9\u6570\uff09\n            hidden_units (int): \u5c64\u9593\u306e\u96a0\u308c\u30e6\u30cb\u30c3\u30c8\u6570\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u306f8\n        \"\"\"\n        super().__init__()\n        self.linear_layer_stack = nn.Sequential(\n            nn.Linear(in_features=input_features, out_features=hidden_units),\n            nn.ReLU(),\n            nn.Linear(in_features=hidden_units, out_features=hidden_units),\n            nn.ReLU(),\n            nn.Linear(in_features=hidden_units, out_features=output_features)\n        )\n    def forward(self, x):\n        return self.linear_layer_stack(x)\n\n# BlobModel\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\u3057\u3001\u30bf\u30fc\u30b2\u30c3\u30c8\u30c7\u30d0\u30a4\u30b9\u306b\u9001\u4fe1\nmodel_4 = BlobModel(input_features=NUM_FEATURES,\n                    output_features=NUM_CLASSES,\n                    hidden_units=8).to(device=device)\nmodel_4\n</code></pre> <p>\u51fa\u529b\uff1a <pre><code>BlobModel(\n  (linear_layer_stack): Sequential(\n    (0): Linear(in_features=2, out_features=8, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=8, out_features=8, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=8, out_features=4, bias=True)\n  )\n)\n</code></pre></p> <pre><code># \u591a\u30af\u30e9\u30b9\u5206\u985e\u7528\u306e\u640d\u5931\u95a2\u6570\u3092\u4f5c\u6210\nloss_fn = nn.CrossEntropyLoss()\n# \u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u3092\u4f5c\u6210\noptimizer = torch.optim.SGD(params=model_4.parameters(),\n                            lr=0.1)\n</code></pre>","tags":["PyTorch","\u6df1\u5c64\u5b66\u7fd2","\u5206\u985e","\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af","\u6a5f\u68b0\u5b66\u7fd2","\u4e2d\u7d1a\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5","\u4e8c\u5024\u5206\u985e","\u591a\u30af\u30e9\u30b9\u5206\u985e"]},{"location":"PyTorch/03_pytorch_classification/#84","title":"8.4 \u591a\u30af\u30e9\u30b9\u5206\u985e\u30e2\u30c7\u30eb\u306e\u4e88\u6e2c\u78ba\u7387\u306e\u53d6\u5f97","text":"<pre><code>model_4.eval()\nwith torch.inference_mode():\n    y_logits = model_4(X_blob_test.to(device))[:5]\n\nprint(\"\u30ed\u30b8\u30c3\u30c8:\", y_logits)\nprint(\"\u6b63\u89e3\u30e9\u30d9\u30eb:\", y_blob_test[:5])\n</code></pre> <p>\u51fa\u529b\uff1a <pre><code>\u30ed\u30b8\u30c3\u30c8: tensor([[-0.7646, -0.7412, -1.5777, -1.1376],\n        [-0.0973, -0.9431, -0.5963, -0.1371],\n        [ 0.2528, -0.2379,  0.1882, -0.0066],\n        [-0.4134, -0.5204, -0.9303, -0.6963],\n        [-0.3118, -1.3736, -1.1991, -0.3834]], device='mps:0')\n\u6b63\u89e3\u30e9\u30d9\u30eb: tensor([1, 3, 2, 1, 0])\n</code></pre></p> <p>\u591a\u30af\u30e9\u30b9\u5206\u985e\u3067\u306f\u3001\u30bd\u30d5\u30c8\u30de\u30c3\u30af\u30b9\u95a2\u6570\u3092\u4f7f\u7528\u3057\u3066\u30ed\u30b8\u30c3\u30c8\u3092\u78ba\u7387\u306b\u5909\u63db\u3057\u307e\u3059\uff1a</p> <pre><code>y_pred_probs = torch.softmax(y_logits, dim=1)\nprint(\"\u30ed\u30b8\u30c3\u30c8:\", y_logits[:5])\nprint(\"\u78ba\u7387:\", y_pred_probs[:5])\n</code></pre> <p>\u51fa\u529b\uff1a <pre><code>\u30ed\u30b8\u30c3\u30c8: tensor([[-0.7646, -0.7412, -1.5777, -1.1376],\n        [-0.0973, -0.9431, -0.5963, -0.1371],\n        [ 0.2528, -0.2379,  0.1882, -0.0066],\n        [-0.4134, -0.5204, -0.9303, -0.6963],\n        [-0.3118, -1.3736, -1.1991, -0.3834]], device='mps:0')\n\u78ba\u7387: tensor([[0.3169, 0.3244, 0.1405, 0.2182],\n        [0.3336, 0.1432, 0.2026, 0.3206],\n        [0.3011, 0.1843, 0.2823, 0.2323],\n        [0.3078, 0.2766, 0.1836, 0.2320],\n        [0.3719, 0.1286, 0.1532, 0.3463]], device='mps:0')\n</code></pre></p> <p>\u30bd\u30d5\u30c8\u30de\u30c3\u30af\u30b9\u95a2\u6570\u306e\u51fa\u529b\u3092\u78ba\u8a8d\uff1a</p> <pre><code># \u6700\u521d\u306e\u30b5\u30f3\u30d7\u30eb\u306e\u30bd\u30d5\u30c8\u30de\u30c3\u30af\u30b9\u51fa\u529b\u306e\u5408\u8a08\nprint(\"\u78ba\u7387:\", y_pred_probs[0])\nprint(\"\u5408\u8a08:\", torch.sum(y_pred_probs[0]))\nprint(\"\u6700\u5927\u5024:\", torch.max(y_pred_probs[0]))\nprint(\"\u6700\u5927\u5024\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\uff08\u4e88\u6e2c\u30af\u30e9\u30b9\uff09:\", torch.argmax(y_pred_probs[0]))\n</code></pre> <p>\u51fa\u529b\uff1a <pre><code>\u78ba\u7387: tensor([0.3169, 0.3244, 0.1405, 0.2182], device='mps:0')\n\u5408\u8a08: tensor(1., device='mps:0')\n\u6700\u5927\u5024: tensor(0.3244, device='mps:0')\n\u6700\u5927\u5024\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\uff08\u4e88\u6e2c\u30af\u30e9\u30b9\uff09: tensor(1, device='mps:0')\n</code></pre></p>","tags":["PyTorch","\u6df1\u5c64\u5b66\u7fd2","\u5206\u985e","\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af","\u6a5f\u68b0\u5b66\u7fd2","\u4e2d\u7d1a\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5","\u4e8c\u5024\u5206\u985e","\u591a\u30af\u30e9\u30b9\u5206\u985e"]},{"location":"PyTorch/03_pytorch_classification/#85","title":"8.5 \u591a\u30af\u30e9\u30b9\u5206\u985e\u30e2\u30c7\u30eb\u306e\u8a13\u7df4\u3068\u30c6\u30b9\u30c8\u30eb\u30fc\u30d7\u306e\u4f5c\u6210","text":"<pre><code>torch.manual_seed(42)\ntorch.mps.manual_seed(42)\n\n# \u591a\u30af\u30e9\u30b9\u5206\u985e\u7528\u306e\u640d\u5931\u95a2\u6570\u3092\u4f5c\u6210\nloss_fn = nn.CrossEntropyLoss()\n# \u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u3092\u4f5c\u6210\noptimizer = torch.optim.SGD(params=model_4.parameters(),\n                            lr=0.1)\n\n# \u30a8\u30dd\u30c3\u30af\u6570\u3092\u8a2d\u5b9a\nepochs = 100\n\n# \u30c7\u30fc\u30bf\u3092\u30bf\u30fc\u30b2\u30c3\u30c8\u30c7\u30d0\u30a4\u30b9\u306b\u914d\u7f6e\nX_blob_train, y_blob_train = X_blob_train.to(device), y_blob_train.to(device)\nX_blob_test, y_blob_test = X_blob_test.to(device), y_blob_test.to(device)\n\nfor epoch in range(epochs):\n    model_4.train()\n\n    y_logits = model_4(X_blob_train)\n    y_pred = torch.softmax(y_logits, dim=1).argmax(dim=1)\n\n    loss = loss_fn(y_logits, y_blob_train)\n    acc = accuracy_fn(y_true=y_blob_train,\n                      y_pred=y_pred)\n    optimizer.zero_grad()\n    loss.backward()\n    optimizer.step()\n\n    model_4.eval()\n    with torch.inference_mode():\n        test_logits = model_4(X_blob_test)\n        test_pred = torch.softmax(test_logits, dim=1).argmax(dim=1)\n\n        test_loss = loss_fn(test_logits, y_blob_test)\n        test_acc = accuracy_fn(y_true=y_blob_test,\n                               y_pred=test_pred)\n        if epoch % 10 == 0:\n            print(f\"\u30a8\u30dd\u30c3\u30af: {epoch} | \u640d\u5931: {loss:.5f}, \u7cbe\u5ea6: {acc:.2f}% | \u30c6\u30b9\u30c8\u640d\u5931: {test_loss:.5f}, \u30c6\u30b9\u30c8\u7cbe\u5ea6: {test_acc:.2f}%\")\n</code></pre> <p>\u51fa\u529b\uff1a <pre><code>\u30a8\u30dd\u30c3\u30af: 0 | \u640d\u5931: 1.15883, \u7cbe\u5ea6: 40.38% | \u30c6\u30b9\u30c8\u640d\u5931: 1.09558, \u30c6\u30b9\u30c8\u7cbe\u5ea6: 48.00%\n\u30a8\u30dd\u30c3\u30af: 10 | \u640d\u5931: 0.64476, \u7cbe\u5ea6: 96.75% | \u30c6\u30b9\u30c8\u640d\u5931: 0.66235, \u30c6\u30b9\u30c8\u7cbe\u5ea6: 97.50%\n\u30a8\u30dd\u30c3\u30af: 20 | \u640d\u5931: 0.42535, \u7cbe\u5ea6: 98.50% | \u30c6\u30b9\u30c8\u640d\u5931: 0.43536, \u30c6\u30b9\u30c8\u7cbe\u5ea6: 99.50%\n\u30a8\u30dd\u30c3\u30af: 30 | \u640d\u5931: 0.25294, \u7cbe\u5ea6: 99.12% | \u30c6\u30b9\u30c8\u640d\u5931: 0.25096, \u30c6\u30b9\u30c8\u7cbe\u5ea6: 99.50%\n\u30a8\u30dd\u30c3\u30af: 40 | \u640d\u5931: 0.11232, \u7cbe\u5ea6: 99.25% | \u30c6\u30b9\u30c8\u640d\u5931: 0.10479, \u30c6\u30b9\u30c8\u7cbe\u5ea6: 99.50%\n\u30a8\u30dd\u30c3\u30af: 50 | \u640d\u5931: 0.06627, \u7cbe\u5ea6: 99.25% | \u30c6\u30b9\u30c8\u640d\u5931: 0.05896, \u30c6\u30b9\u30c8\u7cbe\u5ea6: 99.50%\n\u30a8\u30dd\u30c3\u30af: 60 | \u640d\u5931: 0.05068, \u7cbe\u5ea6: 99.25% | \u30c6\u30b9\u30c8\u640d\u5931: 0.04272, \u30c6\u30b9\u30c8\u7cbe\u5ea6: 99.50%\n\u30a8\u30dd\u30c3\u30af: 70 | \u640d\u5931: 0.04300, \u7cbe\u5ea6: 99.25% | \u30c6\u30b9\u30c8\u640d\u5931: 0.03435, \u30c6\u30b9\u30c8\u7cbe\u5ea6: 99.50%\n\u30a8\u30dd\u30c3\u30af: 80 | \u640d\u5931: 0.03836, \u7cbe\u5ea6: 99.25% | \u30c6\u30b9\u30c8\u640d\u5931: 0.02889, \u30c6\u30b9\u30c8\u7cbe\u5ea6: 99.50%\n\u30a8\u30dd\u30c3\u30af: 90 | \u640d\u5931: 0.03525, \u7cbe\u5ea6: 99.25% | \u30c6\u30b9\u30c8\u640d\u5931: 0.02503, \u30c6\u30b9\u30c8\u7cbe\u5ea6: 99.50%\n</code></pre></p>","tags":["PyTorch","\u6df1\u5c64\u5b66\u7fd2","\u5206\u985e","\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af","\u6a5f\u68b0\u5b66\u7fd2","\u4e2d\u7d1a\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5","\u4e8c\u5024\u5206\u985e","\u591a\u30af\u30e9\u30b9\u5206\u985e"]},{"location":"PyTorch/03_pytorch_classification/#86","title":"8.6 \u591a\u30af\u30e9\u30b9\u5206\u985e\u30e2\u30c7\u30eb\u306e\u4e88\u6e2c\u3068\u8a55\u4fa1","text":"<pre><code># \u4e88\u6e2c\u3092\u5b9f\u884c\nmodel_4.eval()\n\nwith torch.inference_mode():\n    y_logits = model_4(X_blob_test)\n\ny_pred_probs = torch.softmax(y_logits[:10], dim=1)\nprint(\"\u4e88\u6e2c\u78ba\u7387:\")\nprint(y_pred_probs)\nprint(\"\\n\u4e88\u6e2c\u30af\u30e9\u30b9:\", y_pred_probs.argmax(dim=1))\nprint(\"\u6b63\u89e3\u30af\u30e9\u30b9:\", y_blob_test[:10])\n</code></pre> <p>\u51fa\u529b\uff1a <pre><code>\u4e88\u6e2c\u78ba\u7387:\ntensor([[1.3437e-03, 9.9865e-01, 1.2164e-06, 5.3854e-07],\n        [4.9905e-03, 7.4740e-05, 1.0630e-03, 9.9387e-01],\n        [1.3985e-03, 8.6060e-04, 9.9463e-01, 3.1073e-03],\n        [4.7389e-03, 9.9483e-01, 3.1955e-04, 1.1353e-04],\n        [9.9388e-01, 6.0966e-03, 2.4904e-06, 2.2377e-05],\n        [1.3372e-03, 1.1504e-05, 3.0644e-04, 9.9834e-01],\n        [2.9138e-03, 2.1537e-03, 9.8781e-01, 7.1181e-03],\n        [9.9838e-01, 6.0198e-04, 3.4435e-05, 9.7989e-04],\n        [2.8147e-04, 1.5016e-04, 9.9882e-01, 7.5044e-04],\n        [9.9825e-01, 1.4575e-03, 1.5997e-05, 2.7210e-04]], device='mps:0')\n\n\u4e88\u6e2c\u30af\u30e9\u30b9: tensor([1, 3, 2, 1, 0, 3, 2, 0, 2, 0], device='mps:0')\n\u6b63\u89e3\u30af\u30e9\u30b9: tensor([1, 3, 2, 1, 0, 3, 2, 0, 2, 0])\n</code></pre></p> <p><pre><code>plt.figure(figsize=(12, 6))\nplt.subplot(1, 2, 1)\nplt.title(\"Train\")\nplot_decision_boundary(model_4, X_blob_train, y_blob_train)\nplt.subplot(1, 2, 2)\nplt.title(\"test\")\nplot_decision_boundary(model_4, X_blob_test, y_blob_test)\n</code></pre> </p> <p>\u56f35: \u591a\u30af\u30e9\u30b9\u5206\u985e\u306e\u6c7a\u5b9a\u5883\u754c\u3002\u5de6\uff1a\u8a13\u7df4\u30c7\u30fc\u30bf\u3001\u53f3\uff1a\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf</p>","tags":["PyTorch","\u6df1\u5c64\u5b66\u7fd2","\u5206\u985e","\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af","\u6a5f\u68b0\u5b66\u7fd2","\u4e2d\u7d1a\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5","\u4e8c\u5024\u5206\u985e","\u591a\u30af\u30e9\u30b9\u5206\u985e"]},{"location":"PyTorch/03_pytorch_classification/#9","title":"9. \u5b9f\u88c5\u6642\u306e\u6ce8\u610f\u70b9\u3068\u30d9\u30b9\u30c8\u30d7\u30e9\u30af\u30c6\u30a3\u30b9","text":"","tags":["PyTorch","\u6df1\u5c64\u5b66\u7fd2","\u5206\u985e","\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af","\u6a5f\u68b0\u5b66\u7fd2","\u4e2d\u7d1a\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5","\u4e8c\u5024\u5206\u985e","\u591a\u30af\u30e9\u30b9\u5206\u985e"]},{"location":"PyTorch/03_pytorch_classification/#91","title":"9.1 \u30c7\u30fc\u30bf\u578b\u306e\u6ce8\u610f\u70b9","text":"<pre><code># CrossEntropyLoss\u3092\u4f7f\u7528\u3059\u308b\u969b\u306e\u6ce8\u610f\u70b9\n# \u30e9\u30d9\u30eb\u306f\u9577\u6574\u6570\u578b\uff08LongTensor\uff09\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308b\ny_blob_train_long = y_blob_train.long()\ny_blob_test_long = y_blob_test.long()\n\n# BCEWithLogitsLoss\u3092\u4f7f\u7528\u3059\u308b\u969b\u306f\u6d6e\u52d5\u5c0f\u6570\u70b9\u578b\ny_train_float = y_train.float()\ny_test_float = y_test.float()\n</code></pre>","tags":["PyTorch","\u6df1\u5c64\u5b66\u7fd2","\u5206\u985e","\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af","\u6a5f\u68b0\u5b66\u7fd2","\u4e2d\u7d1a\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5","\u4e8c\u5024\u5206\u985e","\u591a\u30af\u30e9\u30b9\u5206\u985e"]},{"location":"PyTorch/03_pytorch_classification/#92","title":"9.2 \u30e2\u30c7\u30eb\u306e\u4fdd\u5b58\u3068\u8aad\u307f\u8fbc\u307f","text":"<pre><code># \u30e2\u30c7\u30eb\u306e\u4fdd\u5b58\ntorch.save(model_4.state_dict(), \"multi_class_model.pth\")\n\n# \u30e2\u30c7\u30eb\u306e\u8aad\u307f\u8fbc\u307f\nloaded_model = BlobModel(input_features=NUM_FEATURES,\n                        output_features=NUM_CLASSES,\n                        hidden_units=8)\nloaded_model.load_state_dict(torch.load(\"multi_class_model.pth\"))\nloaded_model.to(device)\n</code></pre>","tags":["PyTorch","\u6df1\u5c64\u5b66\u7fd2","\u5206\u985e","\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af","\u6a5f\u68b0\u5b66\u7fd2","\u4e2d\u7d1a\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5","\u4e8c\u5024\u5206\u985e","\u591a\u30af\u30e9\u30b9\u5206\u985e"]},{"location":"PyTorch/03_pytorch_classification/#93","title":"9.3 \u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u306e\u30d2\u30f3\u30c8","text":"<pre><code># \u5b66\u7fd2\u7387\u306e\u8abf\u6574\u4f8b\nlearning_rates = [0.001, 0.01, 0.1, 1.0]\nbest_acc = 0\nbest_lr = 0\n\nfor lr in learning_rates:\n    # \u65b0\u3057\u3044\u30e2\u30c7\u30eb\u3068\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u3092\u4f5c\u6210\n    test_model = BlobModel(NUM_FEATURES, NUM_CLASSES, 8).to(device)\n    test_optimizer = torch.optim.SGD(test_model.parameters(), lr=lr)\n\n    # \u7c21\u5358\u306a\u8a13\u7df4\u30eb\u30fc\u30d7\uff08\u7701\u7565\uff09\n    # ...\n\n    # \u6700\u826f\u306e\u5b66\u7fd2\u7387\u3092\u8a18\u9332\n    if test_acc &gt; best_acc:\n        best_acc = test_acc\n        best_lr = lr\n\nprint(f\"\u6700\u9069\u306a\u5b66\u7fd2\u7387: {best_lr}, \u6700\u9ad8\u7cbe\u5ea6: {best_acc:.2f}%\")\n</code></pre>","tags":["PyTorch","\u6df1\u5c64\u5b66\u7fd2","\u5206\u985e","\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af","\u6a5f\u68b0\u5b66\u7fd2","\u4e2d\u7d1a\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5","\u4e8c\u5024\u5206\u985e","\u591a\u30af\u30e9\u30b9\u5206\u985e"]},{"location":"PyTorch/03_pytorch_classification/#10","title":"10. \u3088\u304f\u3042\u308b\u30a8\u30e9\u30fc\u3068\u305d\u306e\u5bfe\u51e6\u6cd5","text":"","tags":["PyTorch","\u6df1\u5c64\u5b66\u7fd2","\u5206\u985e","\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af","\u6a5f\u68b0\u5b66\u7fd2","\u4e2d\u7d1a\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5","\u4e8c\u5024\u5206\u985e","\u591a\u30af\u30e9\u30b9\u5206\u985e"]},{"location":"PyTorch/03_pytorch_classification/#101","title":"10.1 \u5f62\u72b6\u30a8\u30e9\u30fc","text":"<pre><code># \u30a8\u30e9\u30fc\u4f8b: RuntimeError: Expected floating point type for target with class probabilities\n# \u539f\u56e0: CrossEntropyLoss\u3067\u30e9\u30d9\u30eb\u304cfloat\u578b\u306b\u306a\u3063\u3066\u3044\u308b\n# \u89e3\u6c7a\u6cd5: \u30e9\u30d9\u30eb\u3092long\u578b\u306b\u5909\u63db\ny_correct = y_blob_train.long()\n\n# \u30a8\u30e9\u30fc\u4f8b: RuntimeError: The size of tensor a (4) must match the size of tensor b (1)\n# \u539f\u56e0: \u51fa\u529b\u5c64\u306e\u30cb\u30e5\u30fc\u30ed\u30f3\u6570\u3068\u30af\u30e9\u30b9\u6570\u304c\u4e00\u81f4\u3057\u3066\u3044\u306a\u3044\n# \u89e3\u6c7a\u6cd5: \u30e2\u30c7\u30eb\u5b9a\u7fa9\u3092\u78ba\u8a8d\u3057\u3001output_features\u3092\u30af\u30e9\u30b9\u6570\u306b\u5408\u308f\u305b\u308b\n</code></pre>","tags":["PyTorch","\u6df1\u5c64\u5b66\u7fd2","\u5206\u985e","\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af","\u6a5f\u68b0\u5b66\u7fd2","\u4e2d\u7d1a\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5","\u4e8c\u5024\u5206\u985e","\u591a\u30af\u30e9\u30b9\u5206\u985e"]},{"location":"PyTorch/03_pytorch_classification/#102","title":"10.2 \u5b66\u7fd2\u304c\u9032\u307e\u306a\u3044\u5834\u5408","text":"<pre><code># \u5b66\u7fd2\u7387\u304c\u9ad8\u3059\u304e\u308b\u5834\u5408\u306e\u5bfe\u51e6\n# \u75c7\u72b6: \u640d\u5931\u304c\u632f\u52d5\u3059\u308b\u3001NaN\u306b\u306a\u308b\n# \u89e3\u6c7a\u6cd5: \u5b66\u7fd2\u7387\u3092\u4e0b\u3052\u308b\noptimizer = torch.optim.SGD(model.parameters(), lr=0.001)  # 0.1\u304b\u30890.001\u306b\u5909\u66f4\n\n# \u52fe\u914d\u7206\u767a\u306e\u5bfe\u51e6\n# \u75c7\u72b6: \u640d\u5931\u304c\u6025\u6fc0\u306b\u5897\u52a0\u3059\u308b\n# \u89e3\u6c7a\u6cd5: \u52fe\u914d\u30af\u30ea\u30c3\u30d4\u30f3\u30b0\u3092\u4f7f\u7528\ntorch.nn.utils.clip_grad_norm_(model.parameters(), max_norm=1.0)\n</code></pre>","tags":["PyTorch","\u6df1\u5c64\u5b66\u7fd2","\u5206\u985e","\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af","\u6a5f\u68b0\u5b66\u7fd2","\u4e2d\u7d1a\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5","\u4e8c\u5024\u5206\u985e","\u591a\u30af\u30e9\u30b9\u5206\u985e"]},{"location":"PyTorch/03_pytorch_classification/#_4","title":"\u307e\u3068\u3081","text":"<p>\u3053\u306e\u30ac\u30a4\u30c9\u3067\u306f\u3001PyTorch\u3092\u4f7f\u3063\u305f\u5206\u985e\u554f\u984c\u306e\u89e3\u304d\u65b9\u3092\u5b66\u3073\u307e\u3057\u305f\u3002\u4e3b\u8981\u306a\u30dd\u30a4\u30f3\u30c8\u3092\u632f\u308a\u8fd4\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u3002</p>","tags":["PyTorch","\u6df1\u5c64\u5b66\u7fd2","\u5206\u985e","\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af","\u6a5f\u68b0\u5b66\u7fd2","\u4e2d\u7d1a\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5","\u4e8c\u5024\u5206\u985e","\u591a\u30af\u30e9\u30b9\u5206\u985e"]},{"location":"PyTorch/03_pytorch_classification/#_5","title":"\u5b66\u7fd2\u3057\u305f\u30dd\u30a4\u30f3\u30c8","text":"<ol> <li>\u57fa\u672c\u7684\u306a\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3: \u4e8c\u9805\u5206\u985e\u3068\u591a\u30af\u30e9\u30b9\u5206\u985e\u306e\u9055\u3044\u3068\u305d\u308c\u305e\u308c\u306e\u9069\u5207\u306a\u8a2d\u8a08</li> <li>\u30c7\u30fc\u30bf\u6e96\u5099: scikit-learn\u3092\u4f7f\u3063\u305f\u5408\u6210\u30c7\u30fc\u30bf\u306e\u4f5c\u6210\u3068\u524d\u51e6\u7406</li> <li>\u30e2\u30c7\u30eb\u69cb\u7bc9: <code>nn.Module</code>\u3092\u7d99\u627f\u3057\u305f\u30ab\u30b9\u30bf\u30e0\u30e2\u30c7\u30eb\u306e\u4f5c\u6210\u65b9\u6cd5</li> <li>\u8a13\u7df4\u30eb\u30fc\u30d7: PyTorch\u306e\u6a19\u6e96\u7684\u306a5\u30b9\u30c6\u30c3\u30d7\u8a13\u7df4\u30eb\u30fc\u30d7</li> <li>\u6d3b\u6027\u5316\u95a2\u6570\u306e\u91cd\u8981\u6027: \u975e\u7dda\u5f62\u554f\u984c\u306b\u304a\u3051\u308bReLU\u306e\u52b9\u679c</li> <li>\u640d\u5931\u95a2\u6570\u306e\u9078\u629e: \u554f\u984c\u306b\u5fdc\u3058\u305f\u9069\u5207\u306a\u640d\u5931\u95a2\u6570\u306e\u4f7f\u3044\u5206\u3051</li> <li>\u8a55\u4fa1\u65b9\u6cd5: \u69d8\u3005\u306a\u8a55\u4fa1\u6307\u6a19\u306b\u3088\u308b\u7dcf\u5408\u7684\u306a\u6027\u80fd\u8a55\u4fa1</li> </ol>","tags":["PyTorch","\u6df1\u5c64\u5b66\u7fd2","\u5206\u985e","\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af","\u6a5f\u68b0\u5b66\u7fd2","\u4e2d\u7d1a\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5","\u4e8c\u5024\u5206\u985e","\u591a\u30af\u30e9\u30b9\u5206\u985e"]},{"location":"PyTorch/03_pytorch_classification/#_6","title":"\u53c2\u8003\u8cc7\u6599","text":"","tags":["PyTorch","\u6df1\u5c64\u5b66\u7fd2","\u5206\u985e","\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af","\u6a5f\u68b0\u5b66\u7fd2","\u4e2d\u7d1a\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5","\u4e8c\u5024\u5206\u985e","\u591a\u30af\u30e9\u30b9\u5206\u985e"]},{"location":"PyTorch/03_pytorch_classification/#_7","title":"\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8","text":"<ul> <li>PyTorch\u516c\u5f0f\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb</li> <li>PyTorch nn.Module API</li> </ul>","tags":["PyTorch","\u6df1\u5c64\u5b66\u7fd2","\u5206\u985e","\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af","\u6a5f\u68b0\u5b66\u7fd2","\u4e2d\u7d1a\u8005\u5411\u3051","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5","\u4e8c\u5024\u5206\u985e","\u591a\u30af\u30e9\u30b9\u5206\u985e"]},{"location":"PyTorch/04_pytorch_computer_vision/","title":"PyTorch\u3067\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","text":"","tags":["PyTorch","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u6a5f\u68b0\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","\u4e2d\u7d1a\u8005\u5411\u3051","CNN","FashionMNIST","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/04_pytorch_computer_vision/#_1","title":"\u6982\u8981","text":"<p>\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3\u306f\u3001\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u306b\u753b\u50cf\u3092\u7406\u89e3\u3055\u305b\u308b\u6280\u8853\u3067\u3059\u3002\u672c\u8a18\u4e8b\u3067\u306f\u3001PyTorch\u3092\u4f7f\u3063\u3066\u30d5\u30a1\u30c3\u30b7\u30e7\u30f3\u753b\u50cf\u306e\u5206\u985e\u30e2\u30c7\u30eb\u3092\u69cb\u7bc9\u3057\u306a\u304c\u3089\u3001\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3\u306e\u57fa\u790e\u3092\u5b66\u3073\u307e\u3059\u3002</p>","tags":["PyTorch","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u6a5f\u68b0\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","\u4e2d\u7d1a\u8005\u5411\u3051","CNN","FashionMNIST","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/04_pytorch_computer_vision/#_2","title":"\u5b66\u7fd2\u76ee\u6a19","text":"<ul> <li>PyTorch\u306e\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3\u95a2\u9023\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u7406\u89e3</li> <li>\u753b\u50cf\u30c7\u30fc\u30bf\u306e\u524d\u51e6\u7406\u3068DataLoader\u306e\u4f7f\u7528\u65b9\u6cd5</li> <li>\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u3001\u975e\u7dda\u5f62\u3001CNN\u30e2\u30c7\u30eb\u306e\u69cb\u7bc9\u3068\u6bd4\u8f03</li> <li>\u6df7\u540c\u884c\u5217\u306b\u3088\u308b\u8a73\u7d30\u306a\u8a55\u4fa1\u624b\u6cd5</li> </ul>","tags":["PyTorch","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u6a5f\u68b0\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","\u4e2d\u7d1a\u8005\u5411\u3051","CNN","FashionMNIST","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/04_pytorch_computer_vision/#_3","title":"\u524d\u63d0\u77e5\u8b58","text":"<ul> <li>Python\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u57fa\u790e</li> <li>PyTorch\u306e\u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9</li> <li>\u6a5f\u68b0\u5b66\u7fd2\u306e\u57fa\u672c\u6982\u5ff5\uff08\u640d\u5931\u95a2\u6570\u3001\u6700\u9069\u5316\u3001\u30d0\u30c3\u30af\u30d7\u30ed\u30d1\u30b2\u30fc\u30b7\u30e7\u30f3\uff09</li> </ul>","tags":["PyTorch","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u6a5f\u68b0\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","\u4e2d\u7d1a\u8005\u5411\u3051","CNN","FashionMNIST","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/04_pytorch_computer_vision/#_4","title":"\u5b9f\u88c5\u5185\u5bb9","text":"<p>\u672c\u8a18\u4e8b\u3067\u69cb\u7bc9\u3059\u308b\u5185\u5bb9\uff1a</p> \u30c8\u30d4\u30c3\u30af \u5185\u5bb9 0. PyTorch\u306e\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3\u30e9\u30a4\u30d6\u30e9\u30ea <code>torchvision</code>\u3068\u305d\u306e\u69cb\u6210\u8981\u7d20\u306b\u3064\u3044\u3066\u5b66\u7fd2 1. \u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f FashionMNIST\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u53d6\u5f97\u3068\u57fa\u672c\u7684\u306a\u63a2\u7d22 2. \u30c7\u30fc\u30bf\u306e\u6e96\u5099 DataLoader\u3092\u4f7f\u3063\u305f\u30d0\u30c3\u30c1\u51e6\u7406\u306e\u8a2d\u5b9a 3. <code>model_0</code>\uff1a\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u30e2\u30c7\u30eb \u6700\u3082\u30b7\u30f3\u30d7\u30eb\u306a\u30e2\u30c7\u30eb\u306e\u69cb\u7bc9\u3068\u8a13\u7df4 4. <code>model_0</code>\u306e\u4e88\u6e2c\u3068\u8a55\u4fa1 \u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u30e2\u30c7\u30eb\u306e\u6027\u80fd\u8a55\u4fa1 5. \u30c7\u30d0\u30a4\u30b9\u975e\u4f9d\u5b58\u30b3\u30fc\u30c9\u306e\u8a2d\u5b9a GPU/CPU\u3092\u81ea\u52d5\u9078\u629e\u3059\u308b\u30b3\u30fc\u30c9\u306e\u5b9f\u88c5 6. <code>model_1</code>\uff1a\u975e\u7dda\u5f62\u6027\u306e\u8ffd\u52a0 ReLU\u5c64\u3092\u8ffd\u52a0\u3057\u305f\u30e2\u30c7\u30eb\u306e\u691c\u8a3c 7. <code>model_2</code>\uff1a\u7573\u307f\u8fbc\u307f\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af CNN\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306e\u5b9f\u88c5 8. \u30e2\u30c7\u30eb\u6bd4\u8f03 3\u3064\u306e\u30e2\u30c7\u30eb\u306e\u6027\u80fd\u3068\u30c8\u30ec\u30fc\u30c9\u30aa\u30d5\u306e\u5206\u6790 9. \u6700\u826f\u30e2\u30c7\u30eb\u306e\u8a55\u4fa1 \u30e9\u30f3\u30c0\u30e0\u30b5\u30f3\u30d7\u30eb\u3067\u306e\u4e88\u6e2c\u7d50\u679c\u306e\u53ef\u8996\u5316 10. \u6df7\u540c\u884c\u5217\u306e\u4f5c\u6210 \u5206\u985e\u6027\u80fd\u306e\u8a73\u7d30\u306a\u5206\u6790\u624b\u6cd5 11. \u30e2\u30c7\u30eb\u306e\u4fdd\u5b58\u3068\u8aad\u307f\u8fbc\u307f \u8a13\u7df4\u6e08\u307f\u30e2\u30c7\u30eb\u306e\u4fdd\u5b58\u30fb\u5fa9\u5143\u65b9\u6cd5","tags":["PyTorch","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u6a5f\u68b0\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","\u4e2d\u7d1a\u8005\u5411\u3051","CNN","FashionMNIST","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/04_pytorch_computer_vision/#0-pytorch","title":"0. PyTorch\u306e\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3\u30e9\u30a4\u30d6\u30e9\u30ea","text":"<p>\u307e\u305a\u3001PyTorch\u306e\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3\u95a2\u9023\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u3064\u3044\u3066\u7406\u89e3\u3057\u307e\u3057\u3087\u3046\u3002</p> PyTorch\u30e2\u30b8\u30e5\u30fc\u30eb \u6a5f\u80fd <code>torchvision</code> \u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3\u7528\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3001\u30e2\u30c7\u30eb\u3001\u5909\u63db\u51e6\u7406\u3092\u63d0\u4f9b <code>torchvision.datasets</code> \u69d8\u3005\u306a\u753b\u50cf\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\uff08\u5206\u985e\u3001\u7269\u4f53\u691c\u51fa\u306a\u3069\uff09\u3092\u63d0\u4f9b <code>torchvision.models</code> \u4e8b\u524d\u8a13\u7df4\u6e08\u307f\u306e\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3\u30e2\u30c7\u30eb\u3092\u63d0\u4f9b <code>torchvision.transforms</code> \u753b\u50cf\u306e\u524d\u51e6\u7406\u30fb\u30c7\u30fc\u30bf\u62e1\u5f35\u306e\u305f\u3081\u306e\u5909\u63db\u51e6\u7406 <code>torch.utils.data.Dataset</code> PyTorch\u306e\u57fa\u672c\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u30af\u30e9\u30b9 <code>torch.utils.data.DataLoader</code> \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304b\u3089\u30d0\u30c3\u30c1\u3092\u4f5c\u6210\u3059\u308b\u305f\u3081\u306e\u30a4\u30c6\u30ec\u30fc\u30bf <p>\u307e\u305a\u5fc5\u8981\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u3066\u3001\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002</p> <pre><code># PyTorch\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\nimport torch\nfrom torch import nn\n\n# torchvision\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\nimport torchvision\nfrom torchvision import datasets\nfrom torchvision.transforms import ToTensor\n\n# \u53ef\u8996\u5316\u7528\u30e9\u30a4\u30d6\u30e9\u30ea\nimport matplotlib.pyplot as plt\n\n# \u30d0\u30fc\u30b8\u30e7\u30f3\u78ba\u8a8d\n# \u6ce8\u610f\uff1aPyTorch\u306f1.10.0\u4ee5\u4e0a\u3001torchvision\u306f0.11\u4ee5\u4e0a\u304c\u5fc5\u8981\nprint(f\"PyTorch version: {torch.__version__}\\ntorchvision version: {torchvision.__version__}\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c\uff1a <pre><code>PyTorch version: 2.7.0\ntorchvision version: 0.22.0\n</code></pre></p>","tags":["PyTorch","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u6a5f\u68b0\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","\u4e2d\u7d1a\u8005\u5411\u3051","CNN","FashionMNIST","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/04_pytorch_computer_vision/#1","title":"1. \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u53d6\u5f97","text":"<p>\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3\u306e\u5b66\u7fd2\u3092\u59cb\u3081\u308b\u305f\u3081\u306b\u3001FashionMNIST\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002</p> <p>FashionMNIST\u306b\u3064\u3044\u3066\uff1a - 10\u7a2e\u985e\u306e\u30d5\u30a1\u30c3\u30b7\u30e7\u30f3\u30a2\u30a4\u30c6\u30e0\u306e28x28\u30d4\u30af\u30bb\u30eb\u306e\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u753b\u50cf - \u8a13\u7df4\u752860,000\u679a\u3001\u30c6\u30b9\u30c8\u752810,000\u679a\u306e\u753b\u50cf - \u591a\u30af\u30e9\u30b9\u5206\u985e\u554f\u984c\u3068\u3057\u3066\u8a2d\u8a08</p> <p></p> <p>\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u57fa\u672c\u60c5\u5831\u3092\u78ba\u8a8d\u3057\u307e\u3057\u3087\u3046\u3002</p> <pre><code># \u8a13\u7df4\u7528\u30c7\u30fc\u30bf\u306e\u8a2d\u5b9a\ntrain_data = datasets.FashionMNIST(\n    root=\"data\",           # \u30c7\u30fc\u30bf\u306e\u4fdd\u5b58\u5148\n    train=True,           # \u8a13\u7df4\u7528\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\n    download=True,        # \u30c7\u30fc\u30bf\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306f\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\n    transform=ToTensor(), # PIL\u753b\u50cf\u3092PyTorch\u30c6\u30f3\u30bd\u30eb\u306b\u5909\u63db\n    target_transform=None # \u30e9\u30d9\u30eb\u306e\u5909\u63db\uff08\u4eca\u56de\u306f\u4f7f\u7528\u3057\u306a\u3044\uff09\n)\n\n# \u30c6\u30b9\u30c8\u7528\u30c7\u30fc\u30bf\u306e\u8a2d\u5b9a\ntest_data = datasets.FashionMNIST(\n    root=\"data\",\n    train=False,          # \u30c6\u30b9\u30c8\u7528\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\n    download=True,\n    transform=ToTensor()\n)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c\uff1a <pre><code>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 26.4M/26.4M [00:13&lt;00:00, 1.92MB/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 29.5k/29.5k [00:00&lt;00:00, 92.8kB/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 4.42M/4.42M [00:02&lt;00:00, 1.47MB/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5.15k/5.15k [00:00&lt;00:00, 7.49MB/s]\n</code></pre></p>","tags":["PyTorch","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u6a5f\u68b0\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","\u4e2d\u7d1a\u8005\u5411\u3051","CNN","FashionMNIST","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/04_pytorch_computer_vision/#11","title":"1.1 \u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3\u30e2\u30c7\u30eb\u306e\u5165\u51fa\u529b\u5f62\u72b6","text":"<p>\u30c7\u30fc\u30bf\u306e\u8a73\u7d30\u3092\u78ba\u8a8d\u3057\u307e\u3057\u3087\u3046\u3002</p> <pre><code># \u6700\u521d\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u78ba\u8a8d\nimage, label = train_data[0]\nprint(f\"\u753b\u50cf\u306e\u5f62\u72b6: {image.shape}, \u30e9\u30d9\u30eb: {label}\")\n\n# \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u30b5\u30a4\u30ba\u3092\u78ba\u8a8d\nprint(f\"\u8a13\u7df4\u30c7\u30fc\u30bf\u6570: {len(train_data)}, \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u6570: {len(test_data)}\")\n\n# \u30af\u30e9\u30b9\u540d\u3092\u78ba\u8a8d\nclass_names = train_data.classes\nprint(f\"\u30af\u30e9\u30b9\u540d: {class_names}\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c\uff1a <pre><code>\u753b\u50cf\u306e\u5f62\u72b6: torch.Size([1, 28, 28]), \u30e9\u30d9\u30eb: 9\n\u8a13\u7df4\u30c7\u30fc\u30bf\u6570: 60000, \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u6570: 10000\n\u30af\u30e9\u30b9\u540d: ['T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat', 'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']\n</code></pre></p> <p>\u753b\u50cf\u306e\u5f62\u72b6\u306b\u3064\u3044\u3066\uff1a - <code>[1, 28, 28]</code> = <code>[\u30ab\u30e9\u30fc\u30c1\u30e3\u30f3\u30cd\u30eb\u6570, \u9ad8\u3055, \u5e45]</code> - \u30ab\u30e9\u30fc\u30c1\u30e3\u30f3\u30cd\u30eb\u6570\u304c1 = \u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u753b\u50cf - \u3053\u306e\u5f62\u72b6\u306f<code>CHW</code>\uff08Channels, Height, Width\uff09\u5f62\u5f0f</p>","tags":["PyTorch","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u6a5f\u68b0\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","\u4e2d\u7d1a\u8005\u5411\u3051","CNN","FashionMNIST","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/04_pytorch_computer_vision/#12","title":"1.2 \u30c7\u30fc\u30bf\u306e\u53ef\u8996\u5316","text":"<p>\u5b9f\u969b\u306e\u753b\u50cf\u3092\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002</p> <pre><code># \u5358\u4e00\u753b\u50cf\u306e\u8868\u793a\nimage, label = train_data[0]\nprint(f\"\u753b\u50cf\u306e\u5f62\u72b6: {image.shape}\")\nplt.figure(figsize=(6, 6))\nplt.imshow(image.squeeze(), cmap=\"gray\")  # squeeze()\u3067\u6b21\u5143\u3092\u524a\u9664\nplt.title(f\"{class_names[label]} (\u30e9\u30d9\u30eb: {label})\")\nplt.axis(\"off\")\nplt.show()\n</code></pre> <p></p> <p>\u8907\u6570\u306e\u753b\u50cf\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u8868\u793a\u3057\u3066\u3001\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u591a\u69d8\u6027\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002</p> <pre><code># \u8907\u6570\u753b\u50cf\u306e\u30e9\u30f3\u30c0\u30e0\u8868\u793a\ntorch.manual_seed(42)\nfig = plt.figure(figsize=(9, 9))\nrows, cols = 4, 4\n\nfor i in range(1, rows * cols + 1):\n    # \u30e9\u30f3\u30c0\u30e0\u306b\u30b5\u30f3\u30d7\u30eb\u3092\u9078\u629e\n    random_idx = torch.randint(0, len(train_data), size=[1]).item()\n    img, label = train_data[random_idx]\n\n    # \u30b5\u30d6\u30d7\u30ed\u30c3\u30c8\u3092\u4f5c\u6210\n    fig.add_subplot(rows, cols, i)\n    plt.imshow(img.squeeze(), cmap=\"gray\")\n    plt.title(class_names[label])\n    plt.axis(False)\n\nplt.tight_layout()\nplt.show()\n</code></pre> <p></p>","tags":["PyTorch","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u6a5f\u68b0\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","\u4e2d\u7d1a\u8005\u5411\u3051","CNN","FashionMNIST","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/04_pytorch_computer_vision/#2-dataloader","title":"2. DataLoader\u3067\u30c7\u30fc\u30bf\u3092\u6e96\u5099","text":"<p>\u5927\u898f\u6a21\u306a\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u52b9\u7387\u7684\u306b\u51e6\u7406\u3059\u308b\u305f\u3081\u306b\u3001<code>DataLoader</code>\u3092\u4f7f\u7528\u3057\u3066\u30d0\u30c3\u30c1\u51e6\u7406\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002</p> <p>\u30d0\u30c3\u30c1\u51e6\u7406\u306e\u5229\u70b9\uff1a - \u30e1\u30e2\u30ea\u52b9\u7387\u306e\u5411\u4e0a - \u52fe\u914d\u964d\u4e0b\u6cd5\u306e\u5b89\u5b9a\u5316 - \u8a08\u7b97\u306e\u4e26\u5217\u5316</p> <pre><code>from torch.utils.data import DataLoader\n\n# \u30d0\u30c3\u30c1\u30b5\u30a4\u30ba\u306e\u8a2d\u5b9a\uff08\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\uff09\nBATCH_SIZE = 32\n\n# DataLoader\u306e\u4f5c\u6210\ntrain_dataloader = DataLoader(\n    train_data,           # \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\n    batch_size=BATCH_SIZE, # \u30d0\u30c3\u30c1\u30b5\u30a4\u30ba\n    shuffle=True          # \u30a8\u30dd\u30c3\u30af\u3054\u3068\u306b\u30c7\u30fc\u30bf\u3092\u30b7\u30e3\u30c3\u30d5\u30eb\n)\n\ntest_dataloader = DataLoader(\n    test_data,\n    batch_size=BATCH_SIZE,\n    shuffle=False         # \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306f\u30b7\u30e3\u30c3\u30d5\u30eb\u4e0d\u8981\n)\n\n# DataLoader\u306e\u60c5\u5831\u3092\u78ba\u8a8d\nprint(f\"\u8a13\u7df4DataLoader: {len(train_dataloader)} \u30d0\u30c3\u30c1 (\u5404\u30d0\u30c3\u30c1 {BATCH_SIZE} \u30b5\u30f3\u30d7\u30eb)\")\nprint(f\"\u30c6\u30b9\u30c8DataLoader: {len(test_dataloader)} \u30d0\u30c3\u30c1 (\u5404\u30d0\u30c3\u30c1 {BATCH_SIZE} \u30b5\u30f3\u30d7\u30eb)\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c\uff1a <pre><code>\u8a13\u7df4DataLoader: 1875 \u30d0\u30c3\u30c1 (\u5404\u30d0\u30c3\u30c1 32 \u30b5\u30f3\u30d7\u30eb)\n\u30c6\u30b9\u30c8DataLoader: 313 \u30d0\u30c3\u30c1 (\u5404\u30d0\u30c3\u30c1 32 \u30b5\u30f3\u30d7\u30eb)\n</code></pre></p> <p>\u30d0\u30c3\u30c1\u30c7\u30fc\u30bf\u306e\u5f62\u72b6\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002</p> <pre><code># \u30d0\u30c3\u30c1\u30c7\u30fc\u30bf\u306e\u78ba\u8a8d\ntrain_features_batch, train_labels_batch = next(iter(train_dataloader))\nprint(f\"\u30d0\u30c3\u30c1\u753b\u50cf\u306e\u5f62\u72b6: {train_features_batch.shape}\")\nprint(f\"\u30d0\u30c3\u30c1\u30e9\u30d9\u30eb\u306e\u5f62\u72b6: {train_labels_batch.shape}\")\n\n# \u30d0\u30c3\u30c1\u304b\u3089\u5358\u4e00\u30b5\u30f3\u30d7\u30eb\u3092\u8868\u793a\ntorch.manual_seed(42)\nrandom_idx = torch.randint(0, len(train_features_batch), size=[1]).item()\nimg, label = train_features_batch[random_idx], train_labels_batch[random_idx]\n\nplt.figure(figsize=(6, 6))\nplt.imshow(img.squeeze(), cmap=\"gray\")\nplt.title(class_names[label])\nplt.axis(\"off\")\nplt.show()\n\nprint(f\"\u5358\u4e00\u753b\u50cf\u306e\u5f62\u72b6: {img.shape}\")\nprint(f\"\u30e9\u30d9\u30eb: {label} ({class_names[label]})\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c\uff1a <pre><code>\u30d0\u30c3\u30c1\u753b\u50cf\u306e\u5f62\u72b6: torch.Size([32, 1, 28, 28])\n\u30d0\u30c3\u30c1\u30e9\u30d9\u30eb\u306e\u5f62\u72b6: torch.Size([32])\n\u5358\u4e00\u753b\u50cf\u306e\u5f62\u72b6: torch.Size([1, 28, 28])\n\u30e9\u30d9\u30eb: 6 (Shirt)\n</code></pre></p> <p></p>","tags":["PyTorch","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u6a5f\u68b0\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","\u4e2d\u7d1a\u8005\u5411\u3051","CNN","FashionMNIST","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/04_pytorch_computer_vision/#3-model_0","title":"3. <code>model_0</code>\uff1a\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u30e2\u30c7\u30eb\u306e\u69cb\u7bc9","text":"<p>\u6a5f\u68b0\u5b66\u7fd2\u3067\u306f\u3001\u307e\u305a\u6700\u3082\u30b7\u30f3\u30d7\u30eb\u306a\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u30e2\u30c7\u30eb\u3092\u69cb\u7bc9\u3057\u3066\u3001\u5f8c\u306e\u30e2\u30c7\u30eb\u3068\u306e\u6bd4\u8f03\u57fa\u6e96\u3068\u3057\u307e\u3059\u3002</p> <p>\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u30e2\u30c7\u30eb\u306e\u7279\u5fb4\uff1a - 2\u3064\u306e<code>nn.Linear()</code>\u5c64\u3067\u69cb\u6210 - <code>nn.Flatten()</code>\u3067\u753b\u50cf\u30921\u6b21\u5143\u30d9\u30af\u30c8\u30eb\u306b\u5909\u63db - \u8907\u96d1\u306a\u51e6\u7406\u306f\u907f\u3051\u3066\u30b7\u30f3\u30d7\u30eb\u306a\u69cb\u9020</p> <pre><code>from torch import nn\n\nclass FashionMNISTModelV0(nn.Module):\n    def __init__(self, input_shape: int, hidden_units: int, output_shape: int):\n        super().__init__()\n        self.layer_stack = nn.Sequential(\n            nn.Flatten(),  # \u753b\u50cf\u30921\u6b21\u5143\u30d9\u30af\u30c8\u30eb\u306b\u5909\u63db\n            nn.Linear(in_features=input_shape, out_features=hidden_units),\n            nn.Linear(in_features=hidden_units, out_features=output_shape)\n        )\n\n    def forward(self, x):\n        return self.layer_stack(x)\n</code></pre> <p><code>nn.Flatten()</code>\u306e\u52d5\u4f5c\u78ba\u8a8d\uff1a</p> <pre><code># Flatten\u30ec\u30a4\u30e4\u30fc\u306e\u52d5\u4f5c\u3092\u78ba\u8a8d\nflatten_model = nn.Flatten()\nx = train_features_batch[0]  # \u5358\u4e00\u30b5\u30f3\u30d7\u30eb\n\nprint(f\"Flatten\u524d\u306e\u5f62\u72b6: {x.shape} -&gt; [\u30ab\u30e9\u30fc\u30c1\u30e3\u30f3\u30cd\u30eb, \u9ad8\u3055, \u5e45]\")\noutput = flatten_model(x)\nprint(f\"Flatten\u5f8c\u306e\u5f62\u72b6: {output.shape} -&gt; [\u30ab\u30e9\u30fc\u30c1\u30e3\u30f3\u30cd\u30eb, \u9ad8\u3055\u00d7\u5e45]\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c\uff1a <pre><code>Flatten\u524d\u306e\u5f62\u72b6: torch.Size([1, 28, 28]) -&gt; [\u30ab\u30e9\u30fc\u30c1\u30e3\u30f3\u30cd\u30eb, \u9ad8\u3055, \u5e45]\nFlatten\u5f8c\u306e\u5f62\u72b6: torch.Size([1, 784]) -&gt; [\u30ab\u30e9\u30fc\u30c1\u30e3\u30f3\u30cd\u30eb, \u9ad8\u3055\u00d7\u5e45]\n</code></pre></p> <p>\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8a2d\u5b9a\uff1a</p> <pre><code>torch.manual_seed(42)\n\n# \u30e2\u30c7\u30eb\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\nmodel_0 = FashionMNISTModelV0(\n    input_shape=784,              # 28\u00d728=784 \u30d4\u30af\u30bb\u30eb\n    hidden_units=10,              # \u96a0\u308c\u5c64\u306e\u30cb\u30e5\u30fc\u30ed\u30f3\u6570\n    output_shape=len(class_names) # \u30af\u30e9\u30b9\u6570\uff0810\uff09\n)\n\nprint(model_0)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c\uff1a <pre><code>FashionMNISTModelV0(\n  (layer_stack): Sequential(\n    (0): Flatten(start_dim=1, end_dim=-1)\n    (1): Linear(in_features=784, out_features=10, bias=True)\n    (2): Linear(in_features=10, out_features=10, bias=True)\n  )\n)\n</code></pre></p>","tags":["PyTorch","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u6a5f\u68b0\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","\u4e2d\u7d1a\u8005\u5411\u3051","CNN","FashionMNIST","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/04_pytorch_computer_vision/#31","title":"3.1 \u640d\u5931\u95a2\u6570\u3001\u6700\u9069\u5316\u5668\u3001\u8a55\u4fa1\u6307\u6a19\u306e\u8a2d\u5b9a","text":"<pre><code># \u30d8\u30eb\u30d1\u30fc\u95a2\u6570\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\uff08\u6b63\u78ba\u5ea6\u8a08\u7b97\u7528\uff09\nfrom helper_functions import accuracy_fn\n\n# \u640d\u5931\u95a2\u6570\u3068\u6700\u9069\u5316\u5668\u306e\u8a2d\u5b9a\nloss_fn = nn.CrossEntropyLoss()  # \u591a\u30af\u30e9\u30b9\u5206\u985e\u7528\noptimizer = torch.optim.SGD(params=model_0.parameters(), lr=0.1)\n</code></pre> <p>\u30e1\u30e2\uff1ahelper_functions</p>","tags":["PyTorch","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u6a5f\u68b0\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","\u4e2d\u7d1a\u8005\u5411\u3051","CNN","FashionMNIST","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/04_pytorch_computer_vision/#32","title":"3.2 \u5b9f\u9a13\u6642\u9593\u6e2c\u5b9a\u95a2\u6570\u306e\u4f5c\u6210","text":"<p>\u7570\u306a\u308b\u30c7\u30d0\u30a4\u30b9\uff08CPU/GPU\uff09\u3067\u306e\u8a13\u7df4\u6642\u9593\u3092\u6bd4\u8f03\u3059\u308b\u305f\u3081\u3001\u6642\u9593\u6e2c\u5b9a\u95a2\u6570\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002</p> <pre><code>from timeit import default_timer as timer\n\ndef print_train_time(start: float, end: float, device: torch.device = None):\n    \"\"\"\u8a13\u7df4\u6642\u9593\u3092\u8868\u793a\u3059\u308b\u95a2\u6570\n\n    Args:\n        start (float): \u958b\u59cb\u6642\u9593\n        end (float): \u7d42\u4e86\u6642\u9593\n        device (torch.device): \u8a08\u7b97\u30c7\u30d0\u30a4\u30b9\n\n    Returns:\n        float: \u7d4c\u904e\u6642\u9593\uff08\u79d2\uff09\n    \"\"\"\n    total_time = end - start\n    print(f\"\u8a13\u7df4\u6642\u9593 on {device}: {total_time:.3f} \u79d2\")\n    return total_time\n</code></pre>","tags":["PyTorch","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u6a5f\u68b0\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","\u4e2d\u7d1a\u8005\u5411\u3051","CNN","FashionMNIST","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/04_pytorch_computer_vision/#33","title":"3.3 \u8a13\u7df4\u30eb\u30fc\u30d7\u306e\u5b9f\u88c5\u3068\u5b9f\u884c","text":"<p>\u30d0\u30c3\u30c1\u30c7\u30fc\u30bf\u3092\u4f7f\u3063\u305f\u8a13\u7df4\u30eb\u30fc\u30d7\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\u5404\u30d0\u30c3\u30c1\u3067\u640d\u5931\u3068\u6b63\u78ba\u5ea6\u3092\u8a08\u7b97\u3057\u3001\u30a8\u30dd\u30c3\u30af\u3054\u3068\u306b\u5e73\u5747\u5024\u3092\u8868\u793a\u3057\u307e\u3059\u3002</p> <pre><code>from tqdm import tqdm\n\n# \u30b7\u30fc\u30c9\u3068\u6642\u9593\u6e2c\u5b9a\u306e\u958b\u59cb\ntorch.manual_seed(42)\ntrain_time_start_on_cpu = timer()\n\nepochs = 3\n\n# \u8a13\u7df4\u3068\u30c6\u30b9\u30c8\u306e\u30eb\u30fc\u30d7\nfor epoch in tqdm(range(epochs)):\n    print(f\"\u30a8\u30dd\u30c3\u30af: {epoch}\\n-------\")\n\n    ### \u8a13\u7df4\u30d5\u30a7\u30fc\u30ba ###\n    train_loss = 0\n    model_0.train()  # \u8a13\u7df4\u30e2\u30fc\u30c9\u306b\u8a2d\u5b9a\n\n    for batch, (X, y) in enumerate(train_dataloader):\n        # 1. \u9806\u4f1d\u64ad\n        y_pred = model_0(X)\n\n        # 2. \u640d\u5931\u8a08\u7b97\n        loss = loss_fn(y_pred, y)\n        train_loss += loss\n\n        # 3. \u52fe\u914d\u3092\u30bc\u30ed\u306b\n        optimizer.zero_grad()\n\n        # 4. \u9006\u4f1d\u64ad\n        loss.backward()\n\n        # 5. \u30d1\u30e9\u30e1\u30fc\u30bf\u66f4\u65b0\n        optimizer.step()\n\n        # \u9032\u6357\u8868\u793a\n        if batch % 400 == 0:\n            print(f\"\u51e6\u7406\u6e08\u307f\u30b5\u30f3\u30d7\u30eb: {batch * len(X)}/{len(train_dataloader.dataset)}\")\n\n    # \u30d0\u30c3\u30c1\u3042\u305f\u308a\u306e\u5e73\u5747\u640d\u5931\u3092\u8a08\u7b97\n    train_loss /= len(train_dataloader)\n\n    ### \u30c6\u30b9\u30c8\u30d5\u30a7\u30fc\u30ba ###\n    test_loss, test_acc = 0, 0\n    model_0.eval()  # \u8a55\u4fa1\u30e2\u30fc\u30c9\u306b\u8a2d\u5b9a\n\n    with torch.inference_mode():\n        for X, y in test_dataloader:\n            # 1. \u9806\u4f1d\u64ad\n            test_pred = model_0(X)\n\n            # 2. \u640d\u5931\u8a08\u7b97\n            test_loss += loss_fn(test_pred, y)\n\n            # 3. \u6b63\u78ba\u5ea6\u8a08\u7b97\n            test_acc += accuracy_fn(y_true=y, y_pred=test_pred.argmax(dim=1))\n\n        # \u30d0\u30c3\u30c1\u3042\u305f\u308a\u306e\u5e73\u5747\u5024\u3092\u8a08\u7b97\n        test_loss /= len(test_dataloader)\n        test_acc /= len(test_dataloader)\n\n    print(f\"\\n\u8a13\u7df4\u640d\u5931: {train_loss:.5f} | \u30c6\u30b9\u30c8\u640d\u5931: {test_loss:.5f}, \u30c6\u30b9\u30c8\u6b63\u78ba\u5ea6: {test_acc:.2f}%\\n\")\n\n# \u8a13\u7df4\u6642\u9593\u306e\u8a08\u7b97\ntrain_time_end_on_cpu = timer()\ntotal_train_time_model_0 = print_train_time(\n    start=train_time_start_on_cpu,\n    end=train_time_end_on_cpu,\n    device=\"cpu\"\n)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c\uff1a <pre><code>\u30a8\u30dd\u30c3\u30af: 0\n-------\n\u51e6\u7406\u6e08\u307f\u30b5\u30f3\u30d7\u30eb: 0/60000\n\u51e6\u7406\u6e08\u307f\u30b5\u30f3\u30d7\u30eb: 12800/60000\n\u51e6\u7406\u6e08\u307f\u30b5\u30f3\u30d7\u30eb: 25600/60000\n\u51e6\u7406\u6e08\u307f\u30b5\u30f3\u30d7\u30eb: 38400/60000\n\u51e6\u7406\u6e08\u307f\u30b5\u30f3\u30d7\u30eb: 51200/60000\n\n\u8a13\u7df4\u640d\u5931: 0.44395 | \u30c6\u30b9\u30c8\u640d\u5931: 0.46506, \u30c6\u30b9\u30c8\u6b63\u78ba\u5ea6: 83.65%\n\n\u30a8\u30dd\u30c3\u30af: 1\n-------\n\u51e6\u7406\u6e08\u307f\u30b5\u30f3\u30d7\u30eb: 0/60000\n\u51e6\u7406\u6e08\u307f\u30b5\u30f3\u30d7\u30eb: 12800/60000\n\u51e6\u7406\u6e08\u307f\u30b5\u30f3\u30d7\u30eb: 25600/60000\n\u51e6\u7406\u6e08\u307f\u30b5\u30f3\u30d7\u30eb: 38400/60000\n\u51e6\u7406\u6e08\u307f\u30b5\u30f3\u30d7\u30eb: 51200/60000\n\n\u8a13\u7df4\u640d\u5931: 0.43662 | \u30c6\u30b9\u30c8\u640d\u5931: 0.46453, \u30c6\u30b9\u30c8\u6b63\u78ba\u5ea6: 83.89%\n\n\u30a8\u30dd\u30c3\u30af: 2\n-------\n\u51e6\u7406\u6e08\u307f\u30b5\u30f3\u30d7\u30eb: 0/60000\n\u51e6\u7406\u6e08\u307f\u30b5\u30f3\u30d7\u30eb: 12800/60000\n\u51e6\u7406\u6e08\u307f\u30b5\u30f3\u30d7\u30eb: 25600/60000\n\u51e6\u7406\u6e08\u307f\u30b5\u30f3\u30d7\u30eb: 38400/60000\n\u51e6\u7406\u6e08\u307f\u30b5\u30f3\u30d7\u30eb: 51200/60000\n\n\u8a13\u7df4\u640d\u5931: 0.43045 | \u30c6\u30b9\u30c8\u640d\u5931: 0.46594, \u30c6\u30b9\u30c8\u6b63\u78ba\u5ea6: 83.93%\n\n\u8a13\u7df4\u6642\u9593 on cpu: 5.841 \u79d2\n</code></pre></p>","tags":["PyTorch","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u6a5f\u68b0\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","\u4e2d\u7d1a\u8005\u5411\u3051","CNN","FashionMNIST","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/04_pytorch_computer_vision/#4-model_0","title":"4. <code>model_0</code>\u306e\u4e88\u6e2c\u3068\u8a55\u4fa1","text":"<p>\u30e2\u30c7\u30eb\u306e\u6027\u80fd\u3092\u8a55\u4fa1\u3059\u308b\u305f\u3081\u306e\u6c4e\u7528\u95a2\u6570\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\u3053\u306e\u95a2\u6570\u306f\u5f8c\u3067\u4ed6\u306e\u30e2\u30c7\u30eb\u3068\u306e\u6bd4\u8f03\u306b\u3082\u4f7f\u7528\u3057\u307e\u3059\u3002</p> <pre><code>def eval_model(model: torch.nn.Module, \n               data_loader: torch.utils.data.DataLoader, \n               loss_fn: torch.nn.Module, \n               accuracy_fn,\n               device: torch.device = \"cpu\"):\n    \"\"\"\u30e2\u30c7\u30eb\u306e\u8a55\u4fa1\u3092\u884c\u3046\u95a2\u6570\n\n    Args:\n        model: \u8a55\u4fa1\u5bfe\u8c61\u306ePyTorch\u30e2\u30c7\u30eb\n        data_loader: \u8a55\u4fa1\u7528\u30c7\u30fc\u30bf\u30ed\u30fc\u30c0\u30fc\n        loss_fn: \u640d\u5931\u95a2\u6570\n        accuracy_fn: \u6b63\u78ba\u5ea6\u8a08\u7b97\u95a2\u6570\n        device: \u8a08\u7b97\u30c7\u30d0\u30a4\u30b9\n\n    Returns:\n        dict: \u8a55\u4fa1\u7d50\u679c\uff08\u30e2\u30c7\u30eb\u540d\u3001\u640d\u5931\u3001\u6b63\u78ba\u5ea6\uff09\n    \"\"\"\n    loss, acc = 0, 0\n    model.eval()\n\n    with torch.inference_mode():\n        for X, y in data_loader:\n            X, y = X.to(device), y.to(device)\n\n            # \u4e88\u6e2c\u306e\u5b9f\u884c\n            y_pred = model(X)\n\n            # \u640d\u5931\u3068\u6b63\u78ba\u5ea6\u306e\u7d2f\u7a4d\n            loss += loss_fn(y_pred, y)\n            acc += accuracy_fn(y_true=y, y_pred=y_pred.argmax(dim=1))\n\n        # \u30d0\u30c3\u30c1\u3042\u305f\u308a\u306e\u5e73\u5747\u5024\u3092\u8a08\u7b97\n        loss /= len(data_loader)\n        acc /= len(data_loader)\n\n    return {\n        \"model_name\": model.__class__.__name__,\n        \"model_loss\": loss.item(),\n        \"model_acc\": acc\n    }\n\n# `model_0`\u306e\u7d50\u679c\u3092\u8a08\u7b97\ntorch.manual_seed(42)\nmodel_0_results = eval_model(\n    model=model_0,\n    data_loader=test_dataloader,\n    loss_fn=loss_fn,\n    accuracy_fn=accuracy_fn\n)\n\nprint(model_0_results)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c\uff1a <pre><code>{'model_name': 'FashionMNISTModelV0', 'model_loss': 0.46593600511550903, 'model_acc': 83.92571884984025}\n</code></pre></p>","tags":["PyTorch","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u6a5f\u68b0\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","\u4e2d\u7d1a\u8005\u5411\u3051","CNN","FashionMNIST","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/04_pytorch_computer_vision/#5","title":"5. \u30c7\u30d0\u30a4\u30b9\u975e\u4f9d\u5b58\u30b3\u30fc\u30c9\u306e\u8a2d\u5b9a","text":"<p>\u30e2\u30c7\u30eb\u3092GPU\u307e\u305f\u306fCPU\u3067\u81ea\u52d5\u7684\u306b\u5b9f\u884c\u3067\u304d\u308b\u3088\u3046\u3001\u30c7\u30d0\u30a4\u30b9\u975e\u4f9d\u5b58\u30b3\u30fc\u30c9\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002</p> <pre><code># \u30c7\u30d0\u30a4\u30b9\u306e\u81ea\u52d5\u9078\u629e\ndevice = \"mps\" if torch.mps.is_available() else \"cpu\"\nprint(f\"\u4f7f\u7528\u30c7\u30d0\u30a4\u30b9: {device}\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c\uff1a <pre><code>\u4f7f\u7528\u30c7\u30d0\u30a4\u30b9: mps\n</code></pre></p>","tags":["PyTorch","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u6a5f\u68b0\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","\u4e2d\u7d1a\u8005\u5411\u3051","CNN","FashionMNIST","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/04_pytorch_computer_vision/#6-model_1","title":"6. <code>model_1</code>\uff1a\u975e\u7dda\u5f62\u6027\u306e\u8ffd\u52a0","text":"<p>\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u30e2\u30c7\u30eb\u306b\u975e\u7dda\u5f62\u6d3b\u6027\u5316\u95a2\u6570\uff08ReLU\uff09\u3092\u8ffd\u52a0\u3057\u3066\u6027\u80fd\u5411\u4e0a\u3092\u8a66\u307f\u307e\u3059\u3002</p> <pre><code>class FashionMNISTModelV1(nn.Module):\n    def __init__(self, input_shape: int, hidden_units: int, output_shape: int):\n        super().__init__()\n        self.layer_stack = nn.Sequential(\n            nn.Flatten(),\n            nn.Linear(in_features=input_shape, out_features=hidden_units),\n            nn.ReLU(),  # \u975e\u7dda\u5f62\u6d3b\u6027\u5316\u95a2\u6570\u3092\u8ffd\u52a0\n            nn.Linear(in_features=hidden_units, out_features=output_shape),\n            nn.ReLU()   # \u51fa\u529b\u5c64\u306b\u3082\u8ffd\u52a0\n        )\n\n    def forward(self, x: torch.Tensor):\n        return self.layer_stack(x)\n\n# \u30e2\u30c7\u30eb\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\uff08GPU\u306b\u9001\u4fe1\uff09\ntorch.manual_seed(42)\nmodel_1 = FashionMNISTModelV1(\n    input_shape=784,\n    hidden_units=10,\n    output_shape=len(class_names)\n).to(device)\n\nprint(f\"\u30e2\u30c7\u30eb\u306e\u30c7\u30d0\u30a4\u30b9: {next(model_1.parameters()).device}\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c\uff1a <pre><code>\u30e2\u30c7\u30eb\u306e\u30c7\u30d0\u30a4\u30b9: mps:0\n</code></pre></p>","tags":["PyTorch","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u6a5f\u68b0\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","\u4e2d\u7d1a\u8005\u5411\u3051","CNN","FashionMNIST","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/04_pytorch_computer_vision/#61","title":"6.1 \u640d\u5931\u95a2\u6570\u3068\u6700\u9069\u5316\u5668\u306e\u8a2d\u5b9a","text":"<pre><code>loss_fn = nn.CrossEntropyLoss()\noptimizer = torch.optim.SGD(params=model_1.parameters(), lr=0.1)\n</code></pre>","tags":["PyTorch","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u6a5f\u68b0\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","\u4e2d\u7d1a\u8005\u5411\u3051","CNN","FashionMNIST","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/04_pytorch_computer_vision/#62","title":"6.2 \u8a13\u7df4\u30fb\u30c6\u30b9\u30c8\u95a2\u6570\u306e\u4f5c\u6210","text":"<p>\u7e70\u308a\u8fd4\u3057\u4f7f\u7528\u3059\u308b\u305f\u3081\u3001\u8a13\u7df4\u3068\u30c6\u30b9\u30c8\u306e\u51e6\u7406\u3092\u95a2\u6570\u5316\u3057\u307e\u3059\u3002</p> <pre><code>def train_step(model: torch.nn.Module,\n               data_loader: torch.utils.data.DataLoader,\n               loss_fn: torch.nn.Module,\n               optimizer: torch.optim.Optimizer,\n               accuracy_fn,\n               device: torch.device = device):\n    \"\"\"\u8a13\u7df4\u30b9\u30c6\u30c3\u30d7\u3092\u5b9f\u884c\u3059\u308b\u95a2\u6570\"\"\"\n    train_loss, train_acc = 0, 0\n    model.to(device)\n    model.train()\n\n    for batch, (X, y) in enumerate(data_loader):\n        # \u30c7\u30fc\u30bf\u3092GPU\u306b\u9001\u4fe1\n        X, y = X.to(device), y.to(device)\n\n        # 1. \u9806\u4f1d\u64ad\n        y_pred = model(X)\n\n        # 2. \u640d\u5931\u8a08\u7b97\n        loss = loss_fn(y_pred, y)\n        train_loss += loss\n        train_acc += accuracy_fn(y_true=y, y_pred=y_pred.argmax(dim=1))\n\n        # 3. \u52fe\u914d\u3092\u30bc\u30ed\u306b\n        optimizer.zero_grad()\n\n        # 4. \u9006\u4f1d\u64ad\n        loss.backward()\n\n        # 5. \u30d1\u30e9\u30e1\u30fc\u30bf\u66f4\u65b0\n        optimizer.step()\n\n    # \u30d0\u30c3\u30c1\u3042\u305f\u308a\u306e\u5e73\u5747\u5024\u3092\u8a08\u7b97\n    train_loss /= len(data_loader)\n    train_acc /= len(data_loader)\n    print(f\"\u8a13\u7df4\u640d\u5931: {train_loss:.5f} | \u8a13\u7df4\u6b63\u78ba\u5ea6: {train_acc:.2f}%\")\n\ndef test_step(data_loader: torch.utils.data.DataLoader,\n              model: torch.nn.Module,\n              loss_fn: torch.nn.Module,\n              accuracy_fn,\n              device: torch.device = device):\n    \"\"\"\u30c6\u30b9\u30c8\u30b9\u30c6\u30c3\u30d7\u3092\u5b9f\u884c\u3059\u308b\u95a2\u6570\"\"\"\n    test_loss, test_acc = 0, 0\n    model.to(device)\n    model.eval()\n\n    with torch.inference_mode():\n        for X, y in data_loader:\n            X, y = X.to(device), y.to(device)\n\n            # 1. \u9806\u4f1d\u64ad\n            test_pred = model(X)\n\n            # 2. \u640d\u5931\u3068\u6b63\u78ba\u5ea6\u306e\u8a08\u7b97\n            test_loss += loss_fn(test_pred, y)\n            test_acc += accuracy_fn(y_true=y, y_pred=test_pred.argmax(dim=1))\n\n        # \u30d0\u30c3\u30c1\u3042\u305f\u308a\u306e\u5e73\u5747\u5024\u3092\u8a08\u7b97\n        test_loss /= len(data_loader)\n        test_acc /= len(data_loader)\n        print(f\"\u30c6\u30b9\u30c8\u640d\u5931: {test_loss:.5f} | \u30c6\u30b9\u30c8\u6b63\u78ba\u5ea6: {test_acc:.2f}%\\n\")\n</code></pre>","tags":["PyTorch","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u6a5f\u68b0\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","\u4e2d\u7d1a\u8005\u5411\u3051","CNN","FashionMNIST","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/04_pytorch_computer_vision/#63-model_1","title":"6.3 <code>model_1</code>\u306e\u8a13\u7df4\u5b9f\u884c","text":"<pre><code>torch.manual_seed(42)\ntrain_time_start_on_gpu = timer()\n\nepochs = 3\nfor epoch in tqdm(range(epochs)):\n    print(f\"\u30a8\u30dd\u30c3\u30af: {epoch}\\n---------\")\n    train_step(data_loader=train_dataloader, \n               model=model_1, \n               loss_fn=loss_fn,\n               optimizer=optimizer,\n               accuracy_fn=accuracy_fn)\n    test_step(data_loader=test_dataloader,\n              model=model_1,\n              loss_fn=loss_fn,\n              accuracy_fn=accuracy_fn)\n\ntrain_time_end_on_gpu = timer()\ntotal_train_time_model_1 = print_train_time(start=train_time_start_on_gpu,\n                                            end=train_time_end_on_gpu,\n                                            device=device)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c\uff1a <pre><code>\u30a8\u30dd\u30c3\u30af: 0\n---------\n\u8a13\u7df4\u640d\u5931: 1.09199 | \u8a13\u7df4\u6b63\u78ba\u5ea6: 61.34%\n\u30c6\u30b9\u30c8\u640d\u5931: 0.95636 | \u30c6\u30b9\u30c8\u6b63\u78ba\u5ea6: 65.00%\n\n\u30a8\u30dd\u30c3\u30af: 1\n---------\n\u8a13\u7df4\u640d\u5931: 0.78097 | \u8a13\u7df4\u6b63\u78ba\u5ea6: 71.94%\n\u30c6\u30b9\u30c8\u640d\u5931: 0.72611 | \u30c6\u30b9\u30c8\u6b63\u78ba\u5ea6: 73.99%\n\n\u30a8\u30dd\u30c3\u30af: 2\n---------\n\u8a13\u7df4\u640d\u5931: 0.67040 | \u8a13\u7df4\u6b63\u78ba\u5ea6: 75.94%\n\u30c6\u30b9\u30c8\u640d\u5931: 0.69007 | \u30c6\u30b9\u30c8\u6b63\u78ba\u5ea6: 74.81%\n\n\u8a13\u7df4\u6642\u9593 on mps: 13.751 \u79d2\n</code></pre></p>","tags":["PyTorch","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u6a5f\u68b0\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","\u4e2d\u7d1a\u8005\u5411\u3051","CNN","FashionMNIST","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/04_pytorch_computer_vision/#64-model_1","title":"6.4 <code>model_1</code>\u306e\u8a55\u4fa1","text":"<pre><code># \u30c7\u30d0\u30a4\u30b9\u5bfe\u5fdc\u7248\u306eeval_model\u95a2\u6570\u3092\u4f7f\u7528\ntorch.manual_seed(42)\nmodel_1_results = eval_model(\n    model=model_1,\n    data_loader=test_dataloader,\n    loss_fn=loss_fn,\n    accuracy_fn=accuracy_fn,\n    device=device\n)\n\nprint(\"`model_1`\u306e\u7d50\u679c:\", model_1_results)\nprint(\"`model_0`\u306e\u7d50\u679c:\", model_0_results)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c\uff1a <pre><code>`model_1`\u306e\u7d50\u679c: {'model_name': 'FashionMNISTModelV1', 'model_loss': 0.6900655031204224, 'model_acc': 74.810303514377}\n`model_0`\u306e\u7d50\u679c: {'model_name': 'FashionMNISTModelV0', 'model_loss': 0.46593600511550903, 'model_acc': 83.92571884984025}\n</code></pre></p> <p>\u8208\u5473\u6df1\u3044\u7d50\u679c\uff1a </p> <p>\u975e\u7dda\u5f62\u6d3b\u6027\u5316\u95a2\u6570\u3092\u8ffd\u52a0\u3057\u305f<code>model_1</code>\u304c\u3001\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3<code>model_0</code>\u3088\u308a\u3082\u6027\u80fd\u304c\u4f4e\u4e0b\u3057\u307e\u3057\u305f\u3002\u3053\u308c\u306f\u30aa\u30fc\u30d0\u30fc\u30d5\u30a3\u30c3\u30c6\u30a3\u30f3\u30b0\uff08\u904e\u5b66\u7fd2\uff09\u306e\u5146\u5019\u3067\u3042\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002</p> <p>\u30aa\u30fc\u30d0\u30fc\u30d5\u30a3\u30c3\u30c6\u30a3\u30f3\u30b0\u306e\u5bfe\u7b56\uff1a</p> <ol> <li>\u3088\u308a\u5c0f\u3055\u306a/\u7570\u306a\u308b\u30e2\u30c7\u30eb\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306e\u4f7f\u7528</li> <li>\u3088\u308a\u5927\u304d\u306a\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u4f7f\u7528</li> <li>\u6b63\u5247\u5316\u624b\u6cd5\u306e\u9069\u7528</li> </ol>","tags":["PyTorch","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u6a5f\u68b0\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","\u4e2d\u7d1a\u8005\u5411\u3051","CNN","FashionMNIST","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/04_pytorch_computer_vision/#7-model_2cnn","title":"7. <code>model_2</code>\uff1a\u7573\u307f\u8fbc\u307f\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\uff08CNN\uff09","text":"<p>\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3\u306b\u7279\u5316\u3057\u305fCNN\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002CNN Explainer\u306eTinyVGG\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3092\u53c2\u8003\u306b\u3057\u307e\u3059\u3002</p> <p>CNN\u306e\u57fa\u672c\u69cb\u9020\uff1a <code>\u5165\u529b\u5c64 \u2192 [\u7573\u307f\u8fbc\u307f\u5c64 \u2192 \u6d3b\u6027\u5316\u5c64 \u2192 \u30d7\u30fc\u30ea\u30f3\u30b0\u5c64] \u2192 \u51fa\u529b\u5c64</code></p> <p></p>","tags":["PyTorch","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u6a5f\u68b0\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","\u4e2d\u7d1a\u8005\u5411\u3051","CNN","FashionMNIST","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/04_pytorch_computer_vision/#71-cnn","title":"7.1 CNN\u30e2\u30c7\u30eb\u306e\u5b9f\u88c5","text":"<pre><code>class FashionMNISTModelV2(nn.Module):\n    \"\"\"\n    TinyVGG\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3092\u6a21\u5023\u3057\u305fCNN\u30e2\u30c7\u30eb\n    \u53c2\u8003: https://poloclub.github.io/cnn-explainer/\n    \"\"\"\n    def __init__(self, input_shape: int, hidden_units: int, output_shape: int):\n        super().__init__()\n\n        # 1\u3064\u76ee\u306e\u7573\u307f\u8fbc\u307f\u30d6\u30ed\u30c3\u30af\n        self.block_1 = nn.Sequential(\n            nn.Conv2d(in_channels=input_shape, \n                      out_channels=hidden_units, \n                      kernel_size=3,    # 3x3\u306e\u30d5\u30a3\u30eb\u30bf\u30fc\n                      stride=1,         # \u30b9\u30c8\u30e9\u30a4\u30c9\uff08\u30c7\u30d5\u30a9\u30eb\u30c8\uff09\n                      padding=1),       # \u30d1\u30c7\u30a3\u30f3\u30b0\uff08\u51fa\u529b\u30b5\u30a4\u30ba\u3092\u7dad\u6301\uff09\n            nn.ReLU(),\n            nn.Conv2d(in_channels=hidden_units, \n                      out_channels=hidden_units,\n                      kernel_size=3,\n                      stride=1,\n                      padding=1),\n            nn.ReLU(),\n            nn.MaxPool2d(kernel_size=2,    # 2x2\u306e\u6700\u5927\u30d7\u30fc\u30ea\u30f3\u30b0\n                         stride=2)         # \u30b5\u30a4\u30ba\u3092\u534a\u5206\u306b\n        )\n\n        # 2\u3064\u76ee\u306e\u7573\u307f\u8fbc\u307f\u30d6\u30ed\u30c3\u30af\n        self.block_2 = nn.Sequential(\n            nn.Conv2d(hidden_units, hidden_units, 3, padding=1),\n            nn.ReLU(),\n            nn.Conv2d(hidden_units, hidden_units, 3, padding=1),\n            nn.ReLU(),\n            nn.MaxPool2d(2)\n        )\n\n        # \u5206\u985e\u5668\uff08\u5168\u7d50\u5408\u5c64\uff09\n        self.classifier = nn.Sequential(\n            nn.Flatten(),\n            # 28x28 \u2192 14x14 \u2192 7x7 \u306a\u306e\u3067\u3001\u6700\u7d42\u7684\u306bhidden_units*7*7\u306e\u7279\u5fb4\u91cf\n            nn.Linear(in_features=hidden_units*7*7, \n                      out_features=output_shape)\n        )\n\n    def forward(self, x: torch.Tensor):\n        x = self.block_1(x)\n        x = self.block_2(x)\n        x = self.classifier(x)\n        return x\n\n# \u30e2\u30c7\u30eb\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\ntorch.manual_seed(42)\nmodel_2 = FashionMNISTModelV2(\n    input_shape=1,                 # \u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u753b\u50cf\uff081\u30c1\u30e3\u30f3\u30cd\u30eb\uff09\n    hidden_units=10, \n    output_shape=len(class_names)\n).to(device)\n\nprint(model_2)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c\uff1a <pre><code>FashionMNISTModelV2(\n  (block_1): Sequential(\n    (0): Conv2d(1, 10, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (1): ReLU()\n    (2): Conv2d(10, 10, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (3): ReLU()\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  )\n  (block_2): Sequential(\n    (0): Conv2d(10, 10, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (1): ReLU()\n    (2): Conv2d(10, 10, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (3): ReLU()\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  )\n  (classifier): Sequential(\n    (0): Flatten(start_dim=1, end_dim=-1)\n    (1): Linear(in_features=490, out_features=10, bias=True)\n  )\n)\n</code></pre></p>","tags":["PyTorch","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u6a5f\u68b0\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","\u4e2d\u7d1a\u8005\u5411\u3051","CNN","FashionMNIST","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/04_pytorch_computer_vision/#72-nnconv2d","title":"7.2 \u7573\u307f\u8fbc\u307f\u5c64\uff08nn.Conv2d\uff09\u306e\u7406\u89e3","text":"<p>\u7573\u307f\u8fbc\u307f\u5c64\u306e\u52d5\u4f5c\u3092\u8a73\u3057\u304f\u7406\u89e3\u3059\u308b\u305f\u3081\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3067\u5b9f\u9a13\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002</p> <pre><code># \u30c6\u30b9\u30c8\u7528\u306e\u30c0\u30df\u30fc\u30c7\u30fc\u30bf\u3092\u4f5c\u6210\ntorch.manual_seed(42)\nimages = torch.randn(size=(32, 3, 64, 64))  # [\u30d0\u30c3\u30c1\u30b5\u30a4\u30ba, \u30c1\u30e3\u30f3\u30cd\u30eb, \u9ad8\u3055, \u5e45]\ntest_image = images[0]\n\nprint(f\"\u30d0\u30c3\u30c1\u753b\u50cf\u306e\u5f62\u72b6: {images.shape}\")\nprint(f\"\u5358\u4e00\u753b\u50cf\u306e\u5f62\u72b6: {test_image.shape}\")\n\n# \u7573\u307f\u8fbc\u307f\u5c64\u306e\u4f5c\u6210\nconv_layer = nn.Conv2d(in_channels=3,      # \u5165\u529b\u30c1\u30e3\u30f3\u30cd\u30eb\u6570\n                       out_channels=10,     # \u51fa\u529b\u30c1\u30e3\u30f3\u30cd\u30eb\u6570\n                       kernel_size=3,       # \u30d5\u30a3\u30eb\u30bf\u30fc\u30b5\u30a4\u30ba\n                       stride=1,            # \u30b9\u30c8\u30e9\u30a4\u30c9\n                       padding=0)           # \u30d1\u30c7\u30a3\u30f3\u30b0\n\n# \u7573\u307f\u8fbc\u307f\u5c64\u3092\u901a\u3057\u305f\u5f8c\u306e\u5f62\u72b6\noutput = conv_layer(test_image.unsqueeze(dim=0))  # \u30d0\u30c3\u30c1\u6b21\u5143\u3092\u8ffd\u52a0\nprint(f\"\u7573\u307f\u8fbc\u307f\u5f8c\u306e\u5f62\u72b6: {output.shape}\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c\uff1a <pre><code>\u30d0\u30c3\u30c1\u753b\u50cf\u306e\u5f62\u72b6: torch.Size([32, 3, 64, 64])\n\u5358\u4e00\u753b\u50cf\u306e\u5f62\u72b6: torch.Size([3, 64, 64])\n\u7573\u307f\u8fbc\u307f\u5f8c\u306e\u5f62\u72b6: torch.Size([1, 10, 62, 62])\n</code></pre></p> <p>\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u52b9\u679c\u78ba\u8a8d\uff1a</p> <pre><code># \u7570\u306a\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u306e\u7573\u307f\u8fbc\u307f\u5c64\nconv_layer_2 = nn.Conv2d(in_channels=3,\n                         out_channels=10,\n                         kernel_size=(5, 5),  # \u3088\u308a\u5927\u304d\u306a\u30d5\u30a3\u30eb\u30bf\u30fc\n                         stride=2,            # \u3088\u308a\u5927\u304d\u306a\u30b9\u30c8\u30e9\u30a4\u30c9\n                         padding=0)\n\noutput_2 = conv_layer_2(test_image.unsqueeze(dim=0))\nprint(f\"\u7570\u306a\u308b\u8a2d\u5b9a\u3067\u306e\u7573\u307f\u8fbc\u307f\u5f8c\u306e\u5f62\u72b6: {output_2.shape}\")\n\n# \u91cd\u307f\u3068\u30d0\u30a4\u30a2\u30b9\u306e\u5f62\u72b6\u78ba\u8a8d\nprint(f\"\u91cd\u307f\u5f62\u72b6: {conv_layer_2.weight.shape}\")\nprint(f\"\u30d0\u30a4\u30a2\u30b9\u5f62\u72b6: {conv_layer_2.bias.shape}\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c\uff1a <pre><code>\u7570\u306a\u308b\u8a2d\u5b9a\u3067\u306e\u7573\u307f\u8fbc\u307f\u5f8c\u306e\u5f62\u72b6: torch.Size([1, 10, 30, 30])\n\u91cd\u307f\u5f62\u72b6: torch.Size([10, 3, 5, 5])\n\u30d0\u30a4\u30a2\u30b9\u5f62\u72b6: torch.Size([10])\n</code></pre></p>","tags":["PyTorch","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u6a5f\u68b0\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","\u4e2d\u7d1a\u8005\u5411\u3051","CNN","FashionMNIST","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/04_pytorch_computer_vision/#73-nnmaxpool2d","title":"7.3 \u6700\u5927\u30d7\u30fc\u30ea\u30f3\u30b0\u5c64\uff08nn.MaxPool2d\uff09\u306e\u7406\u89e3","text":"<pre><code># \u6700\u5927\u30d7\u30fc\u30ea\u30f3\u30b0\u5c64\u306e\u52d5\u4f5c\u78ba\u8a8d\nmax_pool_layer = nn.MaxPool2d(kernel_size=2)\n\n# \u7573\u307f\u8fbc\u307f \u2192 \u6700\u5927\u30d7\u30fc\u30ea\u30f3\u30b0\u306e\u6d41\u308c\ntest_conv_output = conv_layer(test_image.unsqueeze(dim=0))\ntest_pooled_output = max_pool_layer(test_conv_output)\n\nprint(f\"\u7573\u307f\u8fbc\u307f\u5f8c: {test_conv_output.shape}\")\nprint(f\"\u6700\u5927\u30d7\u30fc\u30ea\u30f3\u30b0\u5f8c: {test_pooled_output.shape}\")\n\n# \u5c0f\u3055\u306a\u30c6\u30f3\u30bd\u30eb\u3067\u306e\u52d5\u4f5c\u78ba\u8a8d\ntorch.manual_seed(42)\nsmall_tensor = torch.randn(size=(1, 1, 2, 2))\nprint(f\"\\n\u5143\u306e\u30c6\u30f3\u30bd\u30eb:\\n{small_tensor}\")\n\npooled_tensor = max_pool_layer(small_tensor)\nprint(f\"\\n\u6700\u5927\u30d7\u30fc\u30ea\u30f3\u30b0\u5f8c:\\n{pooled_tensor}\")\nprint(f\"\u5f62\u72b6\u5909\u5316: {small_tensor.shape} \u2192 {pooled_tensor.shape}\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c\uff1a <pre><code>\u7573\u307f\u8fbc\u307f\u5f8c: torch.Size([1, 10, 62, 62])\n\u6700\u5927\u30d7\u30fc\u30ea\u30f3\u30b0\u5f8c: torch.Size([1, 10, 31, 31])\n\n\u5143\u306e\u30c6\u30f3\u30bd\u30eb:\ntensor([[[[0.3367, 0.1288],\n          [0.2345, 0.2303]]]])\n\n\u6700\u5927\u30d7\u30fc\u30ea\u30f3\u30b0\u5f8c:\ntensor([[[[0.3367]]]])\n\u5f62\u72b6\u5909\u5316: torch.Size([1, 1, 2, 2]) \u2192 torch.Size([1, 1, 1, 1])\n</code></pre></p> <p>\u91cd\u8981\u306a\u6982\u5ff5\uff1a \u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u5404\u5c64\u306f\u3001\u9ad8\u6b21\u5143\u30c7\u30fc\u30bf\u3092\u3088\u308a\u4f4e\u6b21\u5143\u306e\u8868\u73fe\u306b\u5727\u7e2e\u3059\u308b\u3053\u3068\u3067\u3001\u91cd\u8981\u306a\u7279\u5fb4\u3092\u62bd\u51fa\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u306f\u77e5\u80fd\u3068\u3057\u3066\u306e\u5727\u7e2e\u3068\u3044\u3046\u6982\u5ff5\u3068\u3082\u95a2\u9023\u3057\u3066\u3044\u307e\u3059\u3002</p> <p></p>","tags":["PyTorch","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u6a5f\u68b0\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","\u4e2d\u7d1a\u8005\u5411\u3051","CNN","FashionMNIST","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/04_pytorch_computer_vision/#74-model_2","title":"7.4 <code>model_2</code>\u306e\u8a13\u7df4","text":"<pre><code># \u640d\u5931\u95a2\u6570\u3068\u6700\u9069\u5316\u5668\u306e\u8a2d\u5b9a\nloss_fn = nn.CrossEntropyLoss()\noptimizer = torch.optim.SGD(params=model_2.parameters(), lr=0.1)\n\n# \u8a13\u7df4\u306e\u5b9f\u884c\ntorch.manual_seed(42)\ntrain_time_start_model_2 = timer()\n\nepochs = 3\nfor epoch in tqdm(range(epochs)):\n    print(f\"\u30a8\u30dd\u30c3\u30af: {epoch}\\n---------\")\n    train_step(data_loader=train_dataloader, \n               model=model_2, \n               loss_fn=loss_fn,\n               optimizer=optimizer,\n               accuracy_fn=accuracy_fn,\n               device=device)\n    test_step(data_loader=test_dataloader,\n              model=model_2,\n              loss_fn=loss_fn,\n              accuracy_fn=accuracy_fn,\n              device=device)\n\ntrain_time_end_model_2 = timer()\ntotal_train_time_model_2 = print_train_time(start=train_time_start_model_2,\n                                           end=train_time_end_model_2,\n                                           device=device)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c\uff1a <pre><code>\u30a8\u30dd\u30c3\u30af: 0\n---------\n\u8a13\u7df4\u640d\u5931: 0.59410 | \u8a13\u7df4\u6b63\u78ba\u5ea6: 78.41%\n\u30c6\u30b9\u30c8\u640d\u5931: 0.39081 | \u30c6\u30b9\u30c8\u6b63\u78ba\u5ea6: 86.08%\n\n\u30a8\u30dd\u30c3\u30af: 1\n---------\n\u8a13\u7df4\u640d\u5931: 0.35714 | \u8a13\u7df4\u6b63\u78ba\u5ea6: 87.16%\n\u30c6\u30b9\u30c8\u640d\u5931: 0.35427 | \u30c6\u30b9\u30c8\u6b63\u78ba\u5ea6: 87.36%\n\n\u30a8\u30dd\u30c3\u30af: 2\n---------\n\u8a13\u7df4\u640d\u5931: 0.32061 | \u8a13\u7df4\u6b63\u78ba\u5ea6: 88.43%\n\u30c6\u30b9\u30c8\u640d\u5931: 0.32339 | \u30c6\u30b9\u30c8\u6b63\u78ba\u5ea6: 88.47%\n\n\u8a13\u7df4\u6642\u9593 on mps: 19.458 \u79d2\n</code></pre></p>","tags":["PyTorch","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u6a5f\u68b0\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","\u4e2d\u7d1a\u8005\u5411\u3051","CNN","FashionMNIST","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/04_pytorch_computer_vision/#75-model_2","title":"7.5 <code>model_2</code>\u306e\u8a55\u4fa1","text":"<pre><code># `model_2`\u306e\u7d50\u679c\u3092\u53d6\u5f97\nmodel_2_results = eval_model(\n    model=model_2,\n    data_loader=test_dataloader,\n    loss_fn=loss_fn,\n    accuracy_fn=accuracy_fn,\n    device=device\n)\n\nprint(\"`model_2`\uff08CNN\uff09\u306e\u7d50\u679c:\", model_2_results)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c\uff1a <pre><code>`model_2`\uff08CNN\uff09\u306e\u7d50\u679c: {'model_name': 'FashionMNISTModelV2', 'model_loss': 0.3233945667743683, 'model_acc': 88.46845047923323}\n</code></pre></p>","tags":["PyTorch","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u6a5f\u68b0\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","\u4e2d\u7d1a\u8005\u5411\u3051","CNN","FashionMNIST","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/04_pytorch_computer_vision/#8","title":"8. \u30e2\u30c7\u30eb\u7d50\u679c\u3068\u8a13\u7df4\u6642\u9593\u306e\u6bd4\u8f03","text":"<p>3\u3064\u306e\u30e2\u30c7\u30eb\u3092\u7dcf\u5408\u7684\u306b\u6bd4\u8f03\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002</p> <pre><code>import pandas as pd\n\n# \u7d50\u679c\u3092DataFrame\u306b\u307e\u3068\u3081\ncompare_results = pd.DataFrame([model_0_results, model_1_results, model_2_results])\n\n# \u8a13\u7df4\u6642\u9593\u3082\u8ffd\u52a0\ncompare_results[\"training_time\"] = [\n    total_train_time_model_0,\n    total_train_time_model_1,\n    total_train_time_model_2\n]\n\nprint(\"\u30e2\u30c7\u30eb\u6bd4\u8f03\u7d50\u679c:\")\nprint(compare_results)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c\uff1a <pre><code>\u30e2\u30c7\u30eb\u6bd4\u8f03\u7d50\u679c:\n           model_name  model_loss  model_acc  training_time\n0  FashionMNISTModelV0    0.465936  83.925719       5.840571\n1  FashionMNISTModelV1    0.690066  74.810304      13.751049\n2  FashionMNISTModelV2    0.323395  88.468450      19.458489\n</code></pre></p>","tags":["PyTorch","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u6a5f\u68b0\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","\u4e2d\u7d1a\u8005\u5411\u3051","CNN","FashionMNIST","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/04_pytorch_computer_vision/#81","title":"8.1 \u6027\u80fd\u3068\u901f\u5ea6\u306e\u30c8\u30ec\u30fc\u30c9\u30aa\u30d5","text":"<p>\u7d50\u679c\u304b\u3089\u4ee5\u4e0b\u306e\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3059\uff1a</p> <ol> <li>CNN\uff08<code>model_2</code>\uff09\uff1a\u6700\u9ad8\u6027\u80fd\uff0888.47%\uff09\u3060\u304c\u6700\u3082\u8a13\u7df4\u6642\u9593\u304c\u9577\u3044</li> <li>\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\uff08<code>model_0</code>\uff09\uff1a\u30d0\u30e9\u30f3\u30b9\u306e\u826f\u3044\u6027\u80fd\uff0883.93%\uff09\u3068\u77ed\u3044\u8a13\u7df4\u6642\u9593</li> <li>\u975e\u7dda\u5f62\u30e2\u30c7\u30eb\uff08<code>model_1</code>\uff09\uff1a\u6700\u3082\u4f4e\u3044\u6027\u80fd\uff0874.81%\uff09\u3067\u4e2d\u7a0b\u5ea6\u306e\u8a13\u7df4\u6642\u9593</li> </ol> <p>\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9-\u901f\u5ea6\u30c8\u30ec\u30fc\u30c9\u30aa\u30d5\uff1a \u4e00\u822c\u7684\u306b\u3001\u3088\u308a\u8907\u96d1\u306a\u30e2\u30c7\u30eb\u306f\u3088\u308a\u826f\u3044\u6027\u80fd\u3092\u793a\u3057\u307e\u3059\u304c\u3001\u8a13\u7df4\u6642\u9593\u3068\u63a8\u8ad6\u6642\u9593\u304c\u9577\u304f\u306a\u308a\u307e\u3059\u3002</p> <pre><code># \u6b63\u78ba\u5ea6\u306e\u53ef\u8996\u5316\ncompare_results.set_index(\"model_name\")[\"model_acc\"].plot(kind=\"barh\")\nplt.xlabel(\"\u6b63\u78ba\u5ea6 (%)\")\nplt.ylabel(\"\u30e2\u30c7\u30eb\")\nplt.title(\"\u30e2\u30c7\u30eb\u5225\u6b63\u78ba\u5ea6\u6bd4\u8f03\")\nplt.show()\n</code></pre> <p></p>","tags":["PyTorch","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u6a5f\u68b0\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","\u4e2d\u7d1a\u8005\u5411\u3051","CNN","FashionMNIST","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/04_pytorch_computer_vision/#9","title":"9. \u6700\u826f\u30e2\u30c7\u30eb\u3067\u306e\u30e9\u30f3\u30c0\u30e0\u4e88\u6e2c\u3068\u8a55\u4fa1","text":"<p>\u6700\u826f\u6027\u80fd\u3092\u793a\u3057\u305fCNN\u30e2\u30c7\u30eb\uff08model_2\uff09\u3092\u4f7f\u3063\u3066\u3001\u30e9\u30f3\u30c0\u30e0\u30b5\u30f3\u30d7\u30eb\u3067\u8a73\u7d30\u306a\u4e88\u6e2c\u8a55\u4fa1\u3092\u884c\u3044\u307e\u3059\u3002</p>","tags":["PyTorch","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u6a5f\u68b0\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","\u4e2d\u7d1a\u8005\u5411\u3051","CNN","FashionMNIST","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/04_pytorch_computer_vision/#91","title":"9.1 \u4e88\u6e2c\u95a2\u6570\u306e\u4f5c\u6210","text":"<pre><code>def make_predictions(model: torch.nn.Module, data: list, device: torch.device = device):\n    \"\"\"\u30e2\u30c7\u30eb\u3067\u4e88\u6e2c\u3092\u5b9f\u884c\u3059\u308b\u95a2\u6570\n\n    Args:\n        model: \u8a13\u7df4\u6e08\u307f\u30e2\u30c7\u30eb\n        data: \u4e88\u6e2c\u5bfe\u8c61\u306e\u30c7\u30fc\u30bf\u30ea\u30b9\u30c8\n        device: \u8a08\u7b97\u30c7\u30d0\u30a4\u30b9\n\n    Returns:\n        torch.Tensor: \u4e88\u6e2c\u78ba\u7387\u306e\u30c6\u30f3\u30bd\u30eb\n    \"\"\"\n    pred_probs = []\n    model.eval()\n\n    with torch.inference_mode():\n        for sample in data:\n            # \u30b5\u30f3\u30d7\u30eb\u306e\u524d\u51e6\u7406\uff08\u30d0\u30c3\u30c1\u6b21\u5143\u306e\u8ffd\u52a0\u3068\u30c7\u30d0\u30a4\u30b9\u79fb\u52d5\uff09\n            sample = torch.unsqueeze(sample, dim=0).to(device)\n\n            # \u9806\u4f1d\u64ad\uff08\u30ed\u30b8\u30c3\u30c8\u51fa\u529b\uff09\n            pred_logit = model(sample)\n\n            # \u78ba\u7387\u3078\u306e\u5909\u63db\uff08\u30bd\u30d5\u30c8\u30de\u30c3\u30af\u30b9\u9069\u7528\uff09\n            pred_prob = torch.softmax(pred_logit.squeeze(), dim=0)\n\n            # CPU\u306b\u79fb\u52d5\u3057\u3066\u7d50\u679c\u30ea\u30b9\u30c8\u306b\u8ffd\u52a0\n            pred_probs.append(pred_prob.cpu())\n\n    return torch.stack(pred_probs)\n</code></pre>","tags":["PyTorch","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u6a5f\u68b0\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","\u4e2d\u7d1a\u8005\u5411\u3051","CNN","FashionMNIST","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/04_pytorch_computer_vision/#92","title":"9.2 \u30c6\u30b9\u30c8\u30b5\u30f3\u30d7\u30eb\u306e\u6e96\u5099","text":"<pre><code>import random\nrandom.seed(42)\n\n# \u30e9\u30f3\u30c0\u30e0\u306b9\u500b\u306e\u30c6\u30b9\u30c8\u30b5\u30f3\u30d7\u30eb\u3092\u9078\u629e\ntest_samples = []\ntest_labels = []\nfor sample, label in random.sample(list(test_data), k=9):\n    test_samples.append(sample)\n    test_labels.append(label)\n\nprint(f\"\u30c6\u30b9\u30c8\u30b5\u30f3\u30d7\u30eb\u753b\u50cf\u5f62\u72b6: {test_samples[0].shape}\")\nprint(f\"\u30c6\u30b9\u30c8\u30b5\u30f3\u30d7\u30eb\u30e9\u30d9\u30eb: {test_labels[0]} ({class_names[test_labels[0]]})\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c\uff1a <pre><code>\u30c6\u30b9\u30c8\u30b5\u30f3\u30d7\u30eb\u753b\u50cf\u5f62\u72b6: torch.Size([1, 28, 28])\n\u30c6\u30b9\u30c8\u30b5\u30f3\u30d7\u30eb\u30e9\u30d9\u30eb: 5 (Sandal)\n</code></pre></p>","tags":["PyTorch","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u6a5f\u68b0\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","\u4e2d\u7d1a\u8005\u5411\u3051","CNN","FashionMNIST","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/04_pytorch_computer_vision/#93","title":"9.3 \u4e88\u6e2c\u306e\u5b9f\u884c\u3068\u7d50\u679c\u306e\u89e3\u6790","text":"<pre><code># \u4e88\u6e2c\u306e\u5b9f\u884c\npred_probs = make_predictions(model=model_2, data=test_samples)\n\n# \u4e88\u6e2c\u78ba\u7387\u304b\u3089\u4e88\u6e2c\u30af\u30e9\u30b9\u3078\u306e\u5909\u63db\npred_classes = pred_probs.argmax(dim=1)\n\nprint(\"\u4e88\u6e2c\u78ba\u7387\uff08\u6700\u521d\u306e2\u30b5\u30f3\u30d7\u30eb\uff09:\")\nprint(pred_probs[:2])\nprint(f\"\\n\u4e88\u6e2c\u30af\u30e9\u30b9: {pred_classes}\")\nprint(f\"\u6b63\u89e3\u30e9\u30d9\u30eb: {test_labels}\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c\uff1a <pre><code>\u4e88\u6e2c\u78ba\u7387\uff08\u6700\u521d\u306e2\u30b5\u30f3\u30d7\u30eb\uff09:\ntensor([[3.6584e-08, 8.0141e-09, 1.4409e-08, 7.5137e-08, 3.7370e-09, 9.9992e-01,\n         9.6478e-08, 1.4915e-06, 3.9395e-05, 4.1798e-05],\n        [1.1877e-01, 2.9905e-01, 6.0677e-03, 4.2386e-01, 1.0221e-01, 3.5574e-05,\n         4.7972e-02, 2.3109e-04, 2.1487e-05, 1.7808e-03]])\n\n\u4e88\u6e2c\u30af\u30e9\u30b9: tensor([5, 3, 7, 4, 3, 0, 4, 7, 1])\n\u6b63\u89e3\u30e9\u30d9\u30eb: [5, 1, 7, 4, 3, 0, 4, 7, 1]\n</code></pre></p>","tags":["PyTorch","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u6a5f\u68b0\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","\u4e2d\u7d1a\u8005\u5411\u3051","CNN","FashionMNIST","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/04_pytorch_computer_vision/#94","title":"9.4 \u4e88\u6e2c\u7d50\u679c\u306e\u53ef\u8996\u5316","text":"<pre><code># \u4e88\u6e2c\u7d50\u679c\u306e\u53ef\u8996\u5316\nplt.figure(figsize=(9, 9))\nnrows, ncols = 3, 3\n\nfor i, sample in enumerate(test_samples):\n    plt.subplot(nrows, ncols, i+1)\n\n    # \u753b\u50cf\u306e\u8868\u793a\n    plt.imshow(sample.squeeze(), cmap=\"gray\")\n\n    # \u4e88\u6e2c\u3068\u6b63\u89e3\u306e\u30e9\u30d9\u30eb\u53d6\u5f97\n    pred_label = class_names[pred_classes[i]]\n    truth_label = class_names[test_labels[i]]\n\n    # \u30bf\u30a4\u30c8\u30eb\u30c6\u30ad\u30b9\u30c8\u306e\u4f5c\u6210\n    title_text = f\"\u4e88\u6e2c: {pred_label} | \u6b63\u89e3: {truth_label}\"\n\n    # \u6b63\u89e3/\u4e0d\u6b63\u89e3\u306b\u5fdc\u3058\u3066\u8272\u3092\u5909\u66f4\n    if pred_label == truth_label:\n        plt.title(title_text, fontsize=10, c=\"g\")  # \u6b63\u89e3\u306a\u3089\u7dd1\n    else:\n        plt.title(title_text, fontsize=10, c=\"r\")  # \u4e0d\u6b63\u89e3\u306a\u3089\u8d64\n\n    plt.axis(False)\n\nplt.tight_layout()\nplt.show()\n</code></pre> <p>\u7d50\u679c\u5206\u6790\uff1a 9\u500b\u4e2d8\u500b\u3067\u6b63\u78ba\u306a\u4e88\u6e2c\u304c\u3067\u304d\u3066\u304a\u308a\u3001\u30e2\u30c7\u30eb\u306e\u6027\u80fd\u306e\u9ad8\u3055\u3092\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\u552f\u4e00\u306e\u9593\u9055\u3044\u3082\u3001\u4f3c\u305f\u3088\u3046\u306a\u30a2\u30a4\u30c6\u30e0\u9593\u3067\u306e\u6df7\u540c\u3067\u3042\u308a\u3001\u7406\u89e3\u3067\u304d\u308b\u8aa4\u5dee\u3068\u3044\u3048\u307e\u3059\u3002</p>","tags":["PyTorch","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u6a5f\u68b0\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","\u4e2d\u7d1a\u8005\u5411\u3051","CNN","FashionMNIST","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/04_pytorch_computer_vision/#10","title":"10. \u6df7\u540c\u884c\u5217\u306b\u3088\u308b\u8a73\u7d30\u306a\u4e88\u6e2c\u8a55\u4fa1","text":"<p>\u5206\u985e\u30e2\u30c7\u30eb\u306e\u6027\u80fd\u3092\u3088\u308a\u8a73\u7d30\u306b\u5206\u6790\u3059\u308b\u305f\u3081\u3001\u6df7\u540c\u884c\u5217\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\u6df7\u540c\u884c\u5217\u306f\u3001\u30e2\u30c7\u30eb\u304c\u3069\u306e\u30af\u30e9\u30b9\u9593\u3067\u300c\u6df7\u540c\u300d\u3057\u3066\u3044\u308b\u304b\u3092\u8996\u899a\u7684\u306b\u793a\u3057\u307e\u3059\u3002</p>","tags":["PyTorch","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u6a5f\u68b0\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","\u4e2d\u7d1a\u8005\u5411\u3051","CNN","FashionMNIST","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/04_pytorch_computer_vision/#101","title":"10.1 \u5168\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3067\u306e\u4e88\u6e2c","text":"<pre><code>from tqdm import tqdm\n\n# \u5168\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3067\u4e88\u6e2c\u3092\u5b9f\u884c\ny_preds = []\nmodel_2.eval()\n\nwith torch.inference_mode():\n    for X, y in tqdm(test_dataloader, desc=\"\u4e88\u6e2c\u5b9f\u884c\u4e2d\"):\n        X, y = X.to(device), y.to(device)\n\n        # \u9806\u4f1d\u64ad\n        y_logit = model_2(X)\n\n        # \u30ed\u30b8\u30c3\u30c8 \u2192 \u78ba\u7387 \u2192 \u4e88\u6e2c\u30e9\u30d9\u30eb\n        y_pred = torch.softmax(y_logit, dim=1).argmax(dim=1)\n\n        # CPU\u306b\u79fb\u52d5\n        y_preds.append(y_pred.cpu())\n\n# \u4e88\u6e2c\u7d50\u679c\u3092\u7d50\u5408\ny_pred_tensor = torch.cat(y_preds)\nprint(f\"\u4e88\u6e2c\u7d50\u679c\u306e\u30b5\u30a4\u30ba: {y_pred_tensor.shape}\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c\uff1a <pre><code>\u4e88\u6e2c\u5b9f\u884c\u4e2d: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 313/313 [00:00&lt;00:00, 573.80it/s]\n\u4e88\u6e2c\u7d50\u679c\u306e\u30b5\u30a4\u30ba: torch.Size([10000])\n</code></pre></p>","tags":["PyTorch","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u6a5f\u68b0\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","\u4e2d\u7d1a\u8005\u5411\u3051","CNN","FashionMNIST","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/04_pytorch_computer_vision/#102","title":"10.2 \u6df7\u540c\u884c\u5217\u306e\u4f5c\u6210\u3068\u53ef\u8996\u5316","text":"<pre><code>from torchmetrics import ConfusionMatrix\nfrom mlxtend.plotting import plot_confusion_matrix\n\n# \u6df7\u540c\u884c\u5217\u306e\u8a08\u7b97\nconfmat = ConfusionMatrix(num_classes=len(class_names), task='multiclass')\nconfmat_tensor = confmat(preds=y_pred_tensor, target=test_data.targets)\n\n# \u6df7\u540c\u884c\u5217\u306e\u53ef\u8996\u5316\nfig, ax = plot_confusion_matrix(\n    conf_mat=confmat_tensor.numpy(),\n    class_names=class_names,\n    figsize=(10, 7),\n    show_normed=False,  # \u6b63\u898f\u5316\u3057\u306a\u3044\uff08\u5b9f\u969b\u306e\u6570\u3092\u8868\u793a\uff09\n    colorbar=True\n)\nplt.title(\"FashionMNIST \u6df7\u540c\u884c\u5217\")\nplt.show()\n</code></pre>","tags":["PyTorch","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u6a5f\u68b0\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","\u4e2d\u7d1a\u8005\u5411\u3051","CNN","FashionMNIST","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/04_pytorch_computer_vision/#103","title":"10.3 \u6df7\u540c\u884c\u5217\u306e\u89e3\u91c8","text":"<p>\u6df7\u540c\u884c\u5217\u304b\u3089\u4ee5\u4e0b\u306e\u6d1e\u5bdf\u304c\u5f97\u3089\u308c\u307e\u3059\uff1a</p> <ol> <li>\u5bfe\u89d2\u7dda\u4e0a\u306e\u5024\u304c\u9ad8\u3044\uff1a\u5168\u4f53\u7684\u306b\u826f\u597d\u306a\u6027\u80fd</li> <li>\u4e3b\u306a\u6df7\u540c\u30d1\u30bf\u30fc\u30f3\uff1a<ul> <li>\u300cPullover\u300d\u3068\u300cShirt\u300d\u306e\u9593\u3067\u306e\u6df7\u540c</li> <li>\u300cT-shirt/top\u300d\u3068\u300cShirt\u300d\u306e\u9593\u3067\u306e\u6df7\u540c</li> <li>\u3053\u308c\u3089\u306f\u8996\u899a\u7684\u306b\u4f3c\u3066\u3044\u308b\u305f\u3081\u3001\u7406\u89e3\u3067\u304d\u308b\u8aa4\u5dee</li> </ul> </li> <li>\u30e2\u30c7\u30eb\u306e\u5f37\u307f\uff1a<ul> <li>\u300cSandal\u300d\u300cSneaker\u300d\u300cBag\u300d\u306a\u3069\u306f\u9ad8\u3044\u7cbe\u5ea6\u3067\u5206\u985e</li> <li>\u5f62\u72b6\u304c\u660e\u78ba\u306b\u7570\u306a\u308b\u30a2\u30a4\u30c6\u30e0\u306e\u8b58\u5225\u304c\u5f97\u610f</li> </ul> </li> </ol> <p>\u3053\u306e\u60c5\u5831\u306b\u3088\u308a\u3001\u30e2\u30c7\u30eb\u306e\u6539\u5584\u65b9\u5411\u3084\u3001\u3069\u306e\u30af\u30e9\u30b9\u3067\u3088\u308a\u591a\u304f\u306e\u30c7\u30fc\u30bf\u304c\u5fc5\u8981\u304b\u306a\u3069\u306e\u793a\u5506\u304c\u5f97\u3089\u308c\u307e\u3059\u3002</p>","tags":["PyTorch","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u6a5f\u68b0\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","\u4e2d\u7d1a\u8005\u5411\u3051","CNN","FashionMNIST","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/04_pytorch_computer_vision/#11_1","title":"11. \u6700\u826f\u30e2\u30c7\u30eb\u306e\u4fdd\u5b58\u3068\u8aad\u307f\u8fbc\u307f","text":"<p>\u8a13\u7df4\u6e08\u307f\u30e2\u30c7\u30eb\u3092\u5c06\u6765\u4f7f\u7528\u3059\u308b\u305f\u3081\u3001\u4fdd\u5b58\u3068\u8aad\u307f\u8fbc\u307f\u306e\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002</p>","tags":["PyTorch","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u6a5f\u68b0\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","\u4e2d\u7d1a\u8005\u5411\u3051","CNN","FashionMNIST","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/04_pytorch_computer_vision/#111","title":"11.1 \u30e2\u30c7\u30eb\u306e\u4fdd\u5b58","text":"<pre><code>from pathlib import Path\n\n# \u30e2\u30c7\u30eb\u4fdd\u5b58\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u4f5c\u6210\nMODEL_PATH = Path(\"models\")\nMODEL_PATH.mkdir(parents=True, exist_ok=True)\n\n# \u4fdd\u5b58\u30d1\u30b9\u306e\u8a2d\u5b9a\nMODEL_NAME = \"03_pytorch_computer_vision_model_2.pth\"\nMODEL_SAVE_PATH = MODEL_PATH / MODEL_NAME\n\n# \u30e2\u30c7\u30eb\u306e\u72b6\u614b\u8f9e\u66f8\u3092\u4fdd\u5b58\nprint(f\"\u30e2\u30c7\u30eb\u3092\u4fdd\u5b58\u4e2d: {MODEL_SAVE_PATH}\")\ntorch.save(obj=model_2.state_dict(), f=MODEL_SAVE_PATH)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c\uff1a <pre><code>\u30e2\u30c7\u30eb\u3092\u4fdd\u5b58\u4e2d: models/03_pytorch_computer_vision_model_2.pth\n</code></pre></p>","tags":["PyTorch","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u6a5f\u68b0\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","\u4e2d\u7d1a\u8005\u5411\u3051","CNN","FashionMNIST","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/04_pytorch_computer_vision/#112","title":"11.2 \u30e2\u30c7\u30eb\u306e\u8aad\u307f\u8fbc\u307f","text":"<pre><code># \u65b0\u3057\u3044\u30e2\u30c7\u30eb\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u4f5c\u6210\nloaded_model_2 = FashionMNISTModelV2(\n    input_shape=1,\n    hidden_units=10,\n    output_shape=10\n)\n\n# \u4fdd\u5b58\u3055\u308c\u305f\u72b6\u614b\u8f9e\u66f8\u306e\u8aad\u307f\u8fbc\u307f\nloaded_model_2.load_state_dict(torch.load(f=MODEL_SAVE_PATH))\n\n# \u30c7\u30d0\u30a4\u30b9\u306b\u79fb\u52d5\nloaded_model_2 = loaded_model_2.to(device)\n\nprint(\"\u30e2\u30c7\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u5b8c\u4e86\")\n</code></pre>","tags":["PyTorch","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u6a5f\u68b0\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","\u4e2d\u7d1a\u8005\u5411\u3051","CNN","FashionMNIST","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/04_pytorch_computer_vision/#113","title":"11.3 \u8aad\u307f\u8fbc\u307f\u30e2\u30c7\u30eb\u306e\u691c\u8a3c","text":"<pre><code># \u8aad\u307f\u8fbc\u3093\u3060\u30e2\u30c7\u30eb\u306e\u8a55\u4fa1\ntorch.manual_seed(42)\nloaded_model_2_results = eval_model(\n    model=loaded_model_2,\n    data_loader=test_dataloader,\n    loss_fn=loss_fn,\n    accuracy_fn=accuracy_fn,\n    device=device\n)\n\nprint(\"\u8aad\u307f\u8fbc\u3093\u3060\u30e2\u30c7\u30eb\u306e\u7d50\u679c:\", loaded_model_2_results)\nprint(\"\u5143\u306e\u30e2\u30c7\u30eb\u306e\u7d50\u679c:\", model_2_results)\n\n# \u7d50\u679c\u306e\u4e00\u81f4\u78ba\u8a8d\nresults_match = torch.isclose(\n    torch.tensor(model_2_results[\"model_loss\"]),\n    torch.tensor(loaded_model_2_results[\"model_loss\"]),\n    atol=1e-08,\n    rtol=0.0001\n)\nprint(f\"\u7d50\u679c\u304c\u4e00\u81f4\u3057\u3066\u3044\u308b\u304b: {results_match}\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c\uff1a <pre><code>\u8aad\u307f\u8fbc\u3093\u3060\u30e2\u30c7\u30eb\u306e\u7d50\u679c: {'model_name': 'FashionMNISTModelV2', 'model_loss': 0.3233945667743683, 'model_acc': 88.46845047923323}\n\u5143\u306e\u30e2\u30c7\u30eb\u306e\u7d50\u679c: {'model_name': 'FashionMNISTModelV2', 'model_loss': 0.3233945667743683, 'model_acc': 88.46845047923323}\n\u7d50\u679c\u304c\u4e00\u81f4\u3057\u3066\u3044\u308b\u304b: tensor(True)\n</code></pre></p>","tags":["PyTorch","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u6a5f\u68b0\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","\u4e2d\u7d1a\u8005\u5411\u3051","CNN","FashionMNIST","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/04_pytorch_computer_vision/#_5","title":"\u307e\u3068\u3081","text":"<p>\u672c\u8a18\u4e8b\u3067\u306f\u3001PyTorch\u3092\u4f7f\u3063\u305f\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3\u306e\u57fa\u790e\u3092\u5b66\u3073\u307e\u3057\u305f\u3002</p>","tags":["PyTorch","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u6a5f\u68b0\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","\u4e2d\u7d1a\u8005\u5411\u3051","CNN","FashionMNIST","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/04_pytorch_computer_vision/#_6","title":"\u5b66\u7fd2\u3057\u305f\u91cd\u8981\u30dd\u30a4\u30f3\u30c8","text":"<ol> <li> <p>\u30c7\u30fc\u30bf\u6e96\u5099\u306e\u91cd\u8981\u6027\uff1a</p> <ul> <li><code>torchvision.datasets</code>\u3067\u306e\u30c7\u30fc\u30bf\u53d6\u5f97</li> <li><code>DataLoader</code>\u3067\u306e\u30d0\u30c3\u30c1\u51e6\u7406</li> <li>\u753b\u50cf\u30c7\u30fc\u30bf\u306e\u5f62\u72b6\u7406\u89e3\uff08CHW\u5f62\u5f0f\uff09</li> </ul> </li> <li> <p>\u30e2\u30c7\u30eb\u8a2d\u8a08\u306e\u6bd4\u8f03\uff1a</p> <ul> <li>\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\uff08\u7dda\u5f62\u5c64\u306e\u307f\uff09</li> <li>\u975e\u7dda\u5f62\u6d3b\u6027\u5316\u95a2\u6570\u306e\u8ffd\u52a0</li> <li>CNN\uff08\u7573\u307f\u8fbc\u307f\uff09\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3</li> </ul> </li> <li> <p>\u6027\u80fd\u8a55\u4fa1\u624b\u6cd5\uff1a</p> <ul> <li>\u57fa\u672c\u7684\u306a\u640d\u5931\u30fb\u6b63\u78ba\u5ea6\u8a08\u7b97</li> <li>\u6df7\u540c\u884c\u5217\u306b\u3088\u308b\u8a73\u7d30\u5206\u6790</li> <li>\u8996\u899a\u7684\u306a\u4e88\u6e2c\u7d50\u679c\u78ba\u8a8d</li> </ul> </li> <li> <p>\u5b9f\u8df5\u7684\u306a\u30b9\u30ad\u30eb\uff1a</p> <ul> <li>\u30c7\u30d0\u30a4\u30b9\u975e\u4f9d\u5b58\u30b3\u30fc\u30c9\u306e\u66f8\u304d\u65b9</li> <li>\u30e2\u30c7\u30eb\u306e\u4fdd\u5b58\u30fb\u8aad\u307f\u8fbc\u307f</li> <li>\u5b9f\u9a13\u7d50\u679c\u306e\u6bd4\u8f03\u30fb\u53ef\u8996\u5316</li> </ul> </li> </ol>","tags":["PyTorch","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u6a5f\u68b0\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","\u4e2d\u7d1a\u8005\u5411\u3051","CNN","FashionMNIST","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/04_pytorch_computer_vision/#_7","title":"\u6ce8\u610f\u4e8b\u9805\u3068\u30c8\u30e9\u30d6\u30eb\u30b7\u30e5\u30fc\u30c6\u30a3\u30f3\u30b0","text":"<ol> <li> <p>\u30e1\u30e2\u30ea\u4e0d\u8db3\u30a8\u30e9\u30fc\uff1a</p> <ul> <li>\u30d0\u30c3\u30c1\u30b5\u30a4\u30ba\u3092\u5c0f\u3055\u304f\u3059\u308b</li> <li>\u753b\u50cf\u30b5\u30a4\u30ba\u3092\u7e2e\u5c0f\u3059\u308b</li> <li>\u30b0\u30e9\u30c7\u30fc\u30b7\u30e7\u30f3\u84c4\u7a4d\u3092\u4f7f\u7528\u3059\u308b</li> </ul> </li> <li> <p>GPU\u95a2\u9023\u306e\u554f\u984c\uff1a</p> <ul> <li>CUDA/MPS\u5bfe\u5fdc\u306e\u78ba\u8a8d</li> <li>\u30c7\u30d0\u30a4\u30b9\u9593\u3067\u306e\u30c6\u30f3\u30bd\u30eb\u79fb\u52d5\u306e\u78ba\u8a8d</li> <li>\u30e1\u30e2\u30ea\u30af\u30ea\u30a2\uff08<code>torch.cuda.empty_cache()</code>\uff09</li> </ul> </li> <li> <p>\u5b66\u7fd2\u304c\u9032\u307e\u306a\u3044\u5834\u5408\uff1a</p> <ul> <li>\u5b66\u7fd2\u7387\u306e\u8abf\u6574</li> <li>\u640d\u5931\u95a2\u6570\u306e\u78ba\u8a8d</li> <li>\u30c7\u30fc\u30bf\u306e\u6b63\u898f\u5316</li> <li>\u52fe\u914d\u7206\u767a/\u6d88\u5931\u306e\u78ba\u8a8d</li> </ul> </li> <li> <p>\u904e\u5b66\u7fd2\u306e\u5bfe\u7b56\uff1a</p> <ul> <li>\u8a13\u7df4\u30c7\u30fc\u30bf\u306e\u5897\u52a0</li> <li>\u6b63\u5247\u5316\u624b\u6cd5\u306e\u9069\u7528</li> <li>Early Stopping</li> <li>\u30e2\u30c7\u30eb\u306e\u7c21\u7d20\u5316</li> </ul> </li> </ol>","tags":["PyTorch","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u6a5f\u68b0\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","\u4e2d\u7d1a\u8005\u5411\u3051","CNN","FashionMNIST","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/04_pytorch_computer_vision/#_8","title":"\u53c2\u8003\u30ea\u30bd\u30fc\u30b9","text":"<ul> <li>PyTorch\u516c\u5f0f\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb</li> <li>CNN Explainer - CNN\u306e\u52d5\u4f5c\u3092\u53ef\u8996\u5316</li> <li>torchvision.models - \u4e8b\u524d\u8a13\u7df4\u6e08\u307f\u30e2\u30c7\u30eb</li> <li>Papers With Code - \u6700\u65b0\u306e\u7814\u7a76\u8ad6\u6587\u3068\u5b9f\u88c5</li> </ul>","tags":["PyTorch","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u6a5f\u68b0\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","\u4e2d\u7d1a\u8005\u5411\u3051","CNN","FashionMNIST","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/05_pytorch_custom_datasets/","title":"PyTorch\u30ab\u30b9\u30bf\u30e0\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8 - \u753b\u50cf\u5206\u985e\u30e2\u30c7\u30eb\u306e\u69cb\u7bc9","text":"","tags":["PyTorch","\u30ab\u30b9\u30bf\u30e0\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8","\u753b\u50cf\u5206\u985e","\u30c7\u30fc\u30bf\u62e1\u5f35","TinyVGG","\u4e2d\u7d1a\u8005\u5411\u3051","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","CNN","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/05_pytorch_custom_datasets/#_1","title":"\u6982\u8981","text":"<p>\u3053\u306e\u30ce\u30fc\u30c8\u30d6\u30c3\u30af\u3067\u306f\u3001PyTorch\u3092\u4f7f\u7528\u3057\u3066\u30ab\u30b9\u30bf\u30e0\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u4f5c\u6210\u3057\u3001\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3\u30e2\u30c7\u30eb\u3092\u69cb\u7bc9\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u7fd2\u3057\u307e\u3059\u3002\u5177\u4f53\u7684\u306b\u306f\u3001pizza\u3001steak\u3001sushi\u306e3\u3064\u306e\u30af\u30e9\u30b9\u306e\u753b\u50cf\u3092\u5206\u985e\u3059\u308b\u30e2\u30c7\u30eb\u3092\u69cb\u7bc9\u3057\u307e\u3059\u3002</p>","tags":["PyTorch","\u30ab\u30b9\u30bf\u30e0\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8","\u753b\u50cf\u5206\u985e","\u30c7\u30fc\u30bf\u62e1\u5f35","TinyVGG","\u4e2d\u7d1a\u8005\u5411\u3051","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","CNN","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/05_pytorch_custom_datasets/#_2","title":"\u5b66\u7fd2\u76ee\u6a19","text":"<ul> <li>PyTorch\u3067\u30ab\u30b9\u30bf\u30e0\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u30af\u30e9\u30b9\u306e\u4f5c\u6210\u65b9\u6cd5\u3092\u7406\u89e3\u3059\u308b</li> <li><code>torchvision.datasets.ImageFolder</code>\u306e\u4f7f\u7528\u65b9\u6cd5\u3092\u7fd2\u5f97\u3059\u308b</li> <li>\u30c7\u30fc\u30bf\u62e1\u5f35\uff08data augmentation\uff09\u306e\u52b9\u679c\u3092\u7406\u89e3\u3059\u308b</li> <li>TinyVGG\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3092\u5b9f\u88c5\u3057\u3001\u8a13\u7df4\u3059\u308b</li> <li>\u640d\u5931\u66f2\u7dda\u306e\u89e3\u91c8\u3068\u30aa\u30fc\u30d0\u30fc\u30d5\u30a3\u30c3\u30c6\u30a3\u30f3\u30b0/\u30a2\u30f3\u30c0\u30fc\u30d5\u30a3\u30c3\u30c6\u30a3\u30f3\u30b0\u306e\u5bfe\u7b56\u3092\u5b66\u3076</li> </ul>","tags":["PyTorch","\u30ab\u30b9\u30bf\u30e0\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8","\u753b\u50cf\u5206\u985e","\u30c7\u30fc\u30bf\u62e1\u5f35","TinyVGG","\u4e2d\u7d1a\u8005\u5411\u3051","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","CNN","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/05_pytorch_custom_datasets/#_3","title":"\u524d\u63d0\u77e5\u8b58","text":"<ul> <li>Python\u57fa\u790e\u77e5\u8b58</li> <li>PyTorch\u306e\u57fa\u672c\u6982\u5ff5\uff08\u30c6\u30f3\u30bd\u30eb\u3001\u81ea\u52d5\u5fae\u5206\uff09</li> <li>\u7573\u307f\u8fbc\u307f\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\uff08CNN\uff09\u306e\u57fa\u790e</li> <li>\u6a5f\u68b0\u5b66\u7fd2\u306e\u57fa\u672c\u6982\u5ff5\uff08\u8a13\u7df4\u3001\u691c\u8a3c\u3001\u30c6\u30b9\u30c8\uff09</li> </ul>","tags":["PyTorch","\u30ab\u30b9\u30bf\u30e0\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8","\u753b\u50cf\u5206\u985e","\u30c7\u30fc\u30bf\u62e1\u5f35","TinyVGG","\u4e2d\u7d1a\u8005\u5411\u3051","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","CNN","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/05_pytorch_custom_datasets/#_4","title":"\u5b9f\u88c5\u5185\u5bb9","text":"","tags":["PyTorch","\u30ab\u30b9\u30bf\u30e0\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8","\u753b\u50cf\u5206\u985e","\u30c7\u30fc\u30bf\u62e1\u5f35","TinyVGG","\u4e2d\u7d1a\u8005\u5411\u3051","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","CNN","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/05_pytorch_custom_datasets/#0-pytorch","title":"0. PyTorch\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\u3068\u30c7\u30d0\u30a4\u30b9\u8a2d\u5b9a","text":"<p>\u307e\u305a\u3001\u5fc5\u8981\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u3001\u30c7\u30d0\u30a4\u30b9\u306b\u4f9d\u5b58\u3057\u306a\u3044\u30b3\u30fc\u30c9\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002</p> <pre><code>import torch\nfrom torch import nn\n\n# PyTorch\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u78ba\u8a8d\uff08torch &gt;= 1.10.0\u304c\u5fc5\u8981\uff09\ntorch.__version__\n</code></pre> <p>\u51fa\u529b\u7d50\u679c\uff1a <pre><code>'2.7.0'\n</code></pre></p> <pre><code># \u30c7\u30d0\u30a4\u30b9\u306b\u4f9d\u5b58\u3057\u306a\u3044\u30b3\u30fc\u30c9\u306e\u8a2d\u5b9a\ndevice = \"mps\" if torch.mps.is_available() else \"cpu\"\ndevice\n</code></pre> <p>\u51fa\u529b\u7d50\u679c\uff1a <pre><code>'mps'\n</code></pre></p> <p>\u89e3\u8aac\uff1a\u3053\u306e\u8a2d\u5b9a\u306b\u3088\u308a\u3001\u5229\u7528\u53ef\u80fd\u306a\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\uff08GPU/CPU\uff09\u306b\u5fdc\u3058\u3066\u6700\u9069\u306a\u30c7\u30d0\u30a4\u30b9\u304c\u81ea\u52d5\u9078\u629e\u3055\u308c\u307e\u3059\u3002</p>","tags":["PyTorch","\u30ab\u30b9\u30bf\u30e0\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8","\u753b\u50cf\u5206\u985e","\u30c7\u30fc\u30bf\u62e1\u5f35","TinyVGG","\u4e2d\u7d1a\u8005\u5411\u3051","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","CNN","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/05_pytorch_custom_datasets/#1","title":"1. \u30c7\u30fc\u30bf\u306e\u53d6\u5f97","text":"<p>\u4eca\u56de\u4f7f\u7528\u3059\u308b\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306f\u3001Food101\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u30b5\u30d6\u30bb\u30c3\u30c8\u3067\u3059\u3002Food101\u306f101\u7a2e\u985e\u306e\u98df\u3079\u7269\u306e\u753b\u50cf\u3092\u542b\u3080\u4eba\u6c17\u306e\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3067\u3059\u3002</p> <p>\u79c1\u305f\u3061\u306f3\u3064\u306e\u30af\u30e9\u30b9\uff08pizza\u3001steak\u3001sushi\uff09\u306b\u7d5e\u308a\u3001\u305d\u308c\u305e\u308c\u30e9\u30f3\u30c0\u30e0\u306b10%\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002</p> <pre><code>import requests\nimport zipfile\nfrom pathlib import Path\n\n# \u30c7\u30fc\u30bf\u30d5\u30a9\u30eb\u30c0\u306e\u30d1\u30b9\u3092\u8a2d\u5b9a\ndata_path = Path(\"data/\")\nimage_path = data_path / \"pizza_steak_sushi\"\n\n# \u753b\u50cf\u30d5\u30a9\u30eb\u30c0\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u3001\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u6e96\u5099\nif image_path.is_dir():\n    print(f\"{image_path} \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304c\u5b58\u5728\u3057\u307e\u3059\u3002\")\nelse:\n    print(f\"{image_path} \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304c\u898b\u3064\u304b\u308a\u307e\u305b\u3093\u3002\u4f5c\u6210\u4e2d...\")\n    image_path.mkdir(parents=True, exist_ok=True)\n\n    # pizza\u3001steak\u3001sushi\u30c7\u30fc\u30bf\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\n    with open(data_path / \"pizza_steak_sushi.zip\", \"wb\") as f:\n        request = requests.get(\"https://github.com/vinsmoke-three/deeplearning-with-pytorch/raw/main/data/pizza_steak_sushi.zip\")\n        print(\"pizza\u3001steak\u3001sushi\u30c7\u30fc\u30bf\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u4e2d...\")\n        f.write(request.content)\n\n    # zip\u30d5\u30a1\u30a4\u30eb\u3092\u89e3\u51cd\n    with zipfile.ZipFile(data_path / \"pizza_steak_sushi.zip\", \"r\") as zip_ref:\n        print(\"pizza\u3001steak\u3001sushi\u30c7\u30fc\u30bf\u3092\u89e3\u51cd\u4e2d...\") \n        zip_ref.extractall(image_path)\n</code></pre> <p>\u51fa\u529b\u7d50\u679c\uff1a <pre><code>data/pizza_steak_sushi \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304c\u898b\u3064\u304b\u308a\u307e\u305b\u3093\u3002\u4f5c\u6210\u4e2d...\npizza\u3001steak\u3001sushi\u30c7\u30fc\u30bf\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u4e2d...\npizza\u3001steak\u3001sushi\u30c7\u30fc\u30bf\u3092\u89e3\u51cd\u4e2d...\n</code></pre></p>","tags":["PyTorch","\u30ab\u30b9\u30bf\u30e0\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8","\u753b\u50cf\u5206\u985e","\u30c7\u30fc\u30bf\u62e1\u5f35","TinyVGG","\u4e2d\u7d1a\u8005\u5411\u3051","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","CNN","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/05_pytorch_custom_datasets/#2","title":"2. \u30c7\u30fc\u30bf\u306e\u7406\u89e3\u3068\u6e96\u5099","text":"<p>\u30c7\u30fc\u30bf\u306e\u63a2\u7d22\u306f\u6a5f\u68b0\u5b66\u7fd2\u306e\u6700\u521d\u306e\u91cd\u8981\u306a\u30b9\u30c6\u30c3\u30d7\u3067\u3059\u3002\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u69cb\u9020\u3092\u7406\u89e3\u3057\u307e\u3057\u3087\u3046\u3002</p> <p>\u30c7\u30fc\u30bf\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u6a19\u6e96\u7684\u306a\u753b\u50cf\u5206\u985e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3067\u683c\u7d0d\u3055\u308c\u3066\u3044\u307e\u3059\uff1a</p> <pre><code>pizza_steak_sushi/\n    train/\n        pizza/\n            image01.jpeg\n            image02.jpeg\n            ...\n        steak/\n            image24.jpeg\n            ...\n        sushi/\n            image37.jpeg\n            ...\n    test/\n        pizza/\n        steak/\n        sushi/\n</code></pre> <pre><code>import os\ndef walk_through_dir(dir_path):\n    \"\"\"\n    \u6307\u5b9a\u3055\u308c\u305f\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u30d1\u30b9\u306e\u5185\u5bb9\u3092\u8868\u793a\u3057\u307e\u3059\u3002\n    Args:\n        dir_path (str or pathlib.Path): \u5bfe\u8c61\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\n\n    Returns:\n        \u5404\u30b5\u30d6\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u5185\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u6570\u3068\u753b\u50cf\u6570\u3092\u51fa\u529b\n    \"\"\"\n    for dirpath, dirnames, filenames in os.walk(dir_path):\n        print(f\"'{dirpath}' \u306b\u306f {len(dirnames)} \u500b\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3068 {len(filenames)} \u500b\u306e\u753b\u50cf\u304c\u3042\u308a\u307e\u3059\u3002\")\n</code></pre> <pre><code>walk_through_dir(image_path)\n</code></pre> <p>\u51fa\u529b\u7d50\u679c\uff1a <pre><code>'data/pizza_steak_sushi' \u306b\u306f 2 \u500b\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3068 0 \u500b\u306e\u753b\u50cf\u304c\u3042\u308a\u307e\u3059\u3002\n'data/pizza_steak_sushi/test' \u306b\u306f 3 \u500b\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3068 0 \u500b\u306e\u753b\u50cf\u304c\u3042\u308a\u307e\u3059\u3002\n'data/pizza_steak_sushi/test/steak' \u306b\u306f 0 \u500b\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3068 19 \u500b\u306e\u753b\u50cf\u304c\u3042\u308a\u307e\u3059\u3002\n'data/pizza_steak_sushi/test/sushi' \u306b\u306f 0 \u500b\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3068 31 \u500b\u306e\u753b\u50cf\u304c\u3042\u308a\u307e\u3059\u3002\n'data/pizza_steak_sushi/test/pizza' \u306b\u306f 0 \u500b\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3068 25 \u500b\u306e\u753b\u50cf\u304c\u3042\u308a\u307e\u3059\u3002\n'data/pizza_steak_sushi/train' \u306b\u306f 3 \u500b\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3068 0 \u500b\u306e\u753b\u50cf\u304c\u3042\u308a\u307e\u3059\u3002\n'data/pizza_steak_sushi/train/steak' \u306b\u306f 0 \u500b\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3068 75 \u500b\u306e\u753b\u50cf\u304c\u3042\u308a\u307e\u3059\u3002\n'data/pizza_steak_sushi/train/sushi' \u306b\u306f 0 \u500b\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3068 72 \u500b\u306e\u753b\u50cf\u304c\u3042\u308a\u307e\u3059\u3002\n'data/pizza_steak_sushi/train/pizza' \u306b\u306f 0 \u500b\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3068 78 \u500b\u306e\u753b\u50cf\u304c\u3042\u308a\u307e\u3059\u3002\n</code></pre></p> <p>\u8a13\u7df4\u7528\u3068\u691c\u8a3c\u7528\u306e\u30d1\u30b9\u3092\u8a2d\u5b9a\u3057\u307e\u3057\u3087\u3046\uff1a</p> <pre><code># \u8a13\u7df4\u7528\u3068\u691c\u8a3c\u7528\u306e\u30d1\u30b9\u3092\u8a2d\u5b9a\ntrain_dir = image_path / \"train\"\ntest_dir = image_path / \"test\"\n\ntrain_dir, test_dir\n</code></pre> <p>\u51fa\u529b\u7d50\u679c\uff1a <pre><code>(PosixPath('data/pizza_steak_sushi/train'),\n PosixPath('data/pizza_steak_sushi/test'))\n</code></pre></p>","tags":["PyTorch","\u30ab\u30b9\u30bf\u30e0\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8","\u753b\u50cf\u5206\u985e","\u30c7\u30fc\u30bf\u62e1\u5f35","TinyVGG","\u4e2d\u7d1a\u8005\u5411\u3051","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","CNN","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/05_pytorch_custom_datasets/#21","title":"2.1 \u753b\u50cf\u306e\u53ef\u8996\u5316","text":"<p>\u30c7\u30fc\u30bf\u63a2\u7d22\u306b\u304a\u3044\u3066\u53ef\u8996\u5316\u306f\u6975\u3081\u3066\u91cd\u8981\u3067\u3059\u3002\u30e9\u30f3\u30c0\u30e0\u306a\u753b\u50cf\u3092\u8868\u793a\u3057\u3066\u30c7\u30fc\u30bf\u3092\u7406\u89e3\u3057\u307e\u3057\u3087\u3046\u3002</p> <pre><code>import random\nfrom PIL import Image\n\n# \u30b7\u30fc\u30c9\u3092\u8a2d\u5b9a\nrandom.seed(42)\n\n# 1. \u3059\u3079\u3066\u306e\u753b\u50cf\u30d1\u30b9\u3092\u53d6\u5f97\uff08*\u306f\u300c\u4efb\u610f\u306e\u7d44\u307f\u5408\u308f\u305b\u300d\u3092\u610f\u5473\uff09\nimage_path_list = list(image_path.glob(\"*/*/*.jpg\"))\n\n# 2. \u30e9\u30f3\u30c0\u30e0\u306a\u753b\u50cf\u30d1\u30b9\u3092\u53d6\u5f97\nrandom_image_path = random.choice(image_path_list)\n\n# 3. \u30d1\u30b9\u540d\u304b\u3089\u753b\u50cf\u30af\u30e9\u30b9\u3092\u53d6\u5f97\nimage_class = random_image_path.parent.stem\n\n# 4. \u753b\u50cf\u3092\u958b\u304f\nimg = Image.open(random_image_path)\n\n# 5. \u30e1\u30bf\u30c7\u30fc\u30bf\u3092\u51fa\u529b\nprint(f\"\u30e9\u30f3\u30c0\u30e0\u753b\u50cf\u30d1\u30b9: {random_image_path}\")\nprint(f\"\u753b\u50cf\u30af\u30e9\u30b9: {image_class}\")\nprint(f\"\u753b\u50cf\u306e\u9ad8\u3055: {img.height}\") \nprint(f\"\u753b\u50cf\u306e\u5e45: {img.width}\")\nimg\n</code></pre> <p>\u51fa\u529b\u7d50\u679c\uff1a <pre><code>\u30e9\u30f3\u30c0\u30e0\u753b\u50cf\u30d1\u30b9: data/pizza_steak_sushi/test/pizza/2236338.jpg\n\u753b\u50cf\u30af\u30e9\u30b9: pizza\n\u753b\u50cf\u306e\u9ad8\u3055: 512\n\u753b\u50cf\u306e\u5e45: 512\n</code></pre></p> <p></p> <p><code>matplotlib</code>\u3067\u3082\u540c\u69d8\u306b\u8868\u793a\u3067\u304d\u307e\u3059\uff1a</p> <pre><code>import numpy as np\nimport matplotlib.pyplot as plt\n\n# \u753b\u50cf\u3092\u914d\u5217\u306b\u5909\u63db\nimg_as_array = np.asarray(img)\n\n# matplotlib\u3067\u753b\u50cf\u3092\u30d7\u30ed\u30c3\u30c8\nplt.figure(figsize=(10, 7))\nplt.imshow(img_as_array)\nplt.title(f\"\u753b\u50cf\u30af\u30e9\u30b9: {image_class} | \u753b\u50cf\u5f62\u72b6: {img_as_array.shape} -&gt; [\u9ad8\u3055, \u5e45, \u30ab\u30e9\u30fc\u30c1\u30e3\u30f3\u30cd\u30eb]\")\nplt.axis(False);\n</code></pre> <p></p>","tags":["PyTorch","\u30ab\u30b9\u30bf\u30e0\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8","\u753b\u50cf\u5206\u985e","\u30c7\u30fc\u30bf\u62e1\u5f35","TinyVGG","\u4e2d\u7d1a\u8005\u5411\u3051","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","CNN","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/05_pytorch_custom_datasets/#3","title":"3. \u30c7\u30fc\u30bf\u306e\u5909\u63db","text":"<p>PyTorch\u3067\u30c7\u30fc\u30bf\u3092\u4f7f\u7528\u3059\u308b\u524d\u306b\u3001\u4ee5\u4e0b\u306e\u5909\u63db\u304c\u5fc5\u8981\u3067\u3059\uff1a</p> <ol> <li>\u30c6\u30f3\u30bd\u30eb\uff08\u753b\u50cf\u306e\u6570\u5024\u8868\u73fe\uff09\u3078\u306e\u5909\u63db</li> <li><code>torch.utils.data.Dataset</code>\u3068<code>torch.utils.data.DataLoader</code>\u3078\u306e\u5909\u63db</li> </ol>","tags":["PyTorch","\u30ab\u30b9\u30bf\u30e0\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8","\u753b\u50cf\u5206\u985e","\u30c7\u30fc\u30bf\u62e1\u5f35","TinyVGG","\u4e2d\u7d1a\u8005\u5411\u3051","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","CNN","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/05_pytorch_custom_datasets/#31-torchvisiontransforms","title":"3.1 <code>torchvision.transforms</code>\u306b\u3088\u308b\u30c7\u30fc\u30bf\u5909\u63db","text":"<p><code>torchvision.transforms</code>\u306f\u3001\u753b\u50cf\u3092\u30c6\u30f3\u30bd\u30eb\u306b\u5909\u63db\u3057\u3001\u30c7\u30fc\u30bf\u62e1\u5f35\u3092\u884c\u3046\u305f\u3081\u306e\u591a\u304f\u306e\u4e8b\u524d\u69cb\u7bc9\u3055\u308c\u305f\u30e1\u30bd\u30c3\u30c9\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002</p> <p>\u4ee5\u4e0b\u306e\u5909\u63db\u30b9\u30c6\u30c3\u30d7\u3092\u5b9f\u88c5\u3057\u307e\u3059\uff1a 1. <code>transforms.Resize()</code>\u3067\u753b\u50cf\u306e\u30b5\u30a4\u30ba\u3092512x512\u304b\u308964x64\u306b\u30ea\u30b5\u30a4\u30ba 2. <code>transforms.RandomHorizontalFlip()</code>\u3067\u30e9\u30f3\u30c0\u30e0\u306b\u6c34\u5e73\u65b9\u5411\u306b\u53cd\u8ee2 3. <code>transforms.ToTensor()</code>\u3067PIL\u753b\u50cf\u3092PyTorch\u30c6\u30f3\u30bd\u30eb\u306b\u5909\u63db</p> <pre><code>import torch\nfrom torch.utils.data import DataLoader\nfrom torchvision import datasets, transforms\n\n# \u753b\u50cf\u5909\u63db\u3092\u5b9a\u7fa9\ndata_transform = transforms.Compose([\n    # \u753b\u50cf\u309264x64\u306b\u30ea\u30b5\u30a4\u30ba\n    transforms.Resize(size=(64, 64)),\n    # 50%\u306e\u78ba\u7387\u3067\u6c34\u5e73\u65b9\u5411\u306b\u30e9\u30f3\u30c0\u30e0\u53cd\u8ee2\n    transforms.RandomHorizontalFlip(p=0.5),\n    # \u753b\u50cf\u3092torch.Tensor\u306b\u5909\u63db\uff08\u30d4\u30af\u30bb\u30eb\u5024\u30820-255\u304b\u30890.0-1.0\u306b\u5909\u63db\uff09\n    transforms.ToTensor()\n])\n</code></pre> <p>\u5909\u63db\u3092\u53ef\u8996\u5316\u3059\u308b\u95a2\u6570\u3092\u4f5c\u6210\u3057\u307e\u3057\u3087\u3046\uff1a</p> <pre><code>def plot_transformed_images(image_paths, transform, n=3, seed=42):\n    \"\"\"\u753b\u50cf\u30d1\u30b9\u306e\u30ea\u30b9\u30c8\u304b\u3089\u30e9\u30f3\u30c0\u30e0\u306a\u753b\u50cf\u3092\u30d7\u30ed\u30c3\u30c8\u3057\u307e\u3059\u3002\n\n    Args:\n        image_paths (list): \u5bfe\u8c61\u753b\u50cf\u30d1\u30b9\u306e\u30ea\u30b9\u30c8\n        transform (PyTorch Transforms): \u753b\u50cf\u306b\u9069\u7528\u3059\u308b\u5909\u63db\n        n (int, optional): \u30d7\u30ed\u30c3\u30c8\u3059\u308b\u753b\u50cf\u6570. \u30c7\u30d5\u30a9\u30eb\u30c8 3\n        seed (int, optional): \u30e9\u30f3\u30c0\u30e0\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u306e\u30b7\u30fc\u30c9. \u30c7\u30d5\u30a9\u30eb\u30c8 42\n    \"\"\"\n    random.seed(seed)\n    random_image_paths = random.sample(image_paths, k=n)\n    for image_path in random_image_paths:\n        with Image.open(image_path) as f:\n            fig, ax = plt.subplots(1, 2)\n            ax[0].imshow(f) \n            ax[0].set_title(f\"\u30aa\u30ea\u30b8\u30ca\u30eb \\n\u30b5\u30a4\u30ba: {f.size}\")\n            ax[0].axis(\"off\")\n\n            # \u753b\u50cf\u3092\u5909\u63db\u3057\u3066\u30d7\u30ed\u30c3\u30c8\n            # permute()\u3067matplotlib\u7528\u306b\u5f62\u72b6\u3092\u5909\u66f4\uff08PyTorch\u306e\u30c7\u30d5\u30a9\u30eb\u30c8[C, H, W]\u3092matplotlib\u306e[H, W, C]\u306b\uff09\n            transformed_image = transform(f).permute(1, 2, 0) \n            ax[1].imshow(transformed_image) \n            ax[1].set_title(f\"\u5909\u63db\u5f8c \\n\u30b5\u30a4\u30ba: {transformed_image.shape}\")\n            ax[1].axis(\"off\")\n\n            fig.suptitle(f\"\u30af\u30e9\u30b9: {image_path.parent.stem}\", fontsize=16)\n\nplot_transformed_images(image_path_list, \n                        transform=data_transform, \n                        n=3)\n</code></pre> <p> </p> <p>\u91cd\u8981\u306a\u30dd\u30a4\u30f3\u30c8\uff1a\u753b\u50cf\u306e\u30b5\u30a4\u30ba\u304c\u5927\u304d\u3044\u307b\u3069\u3001\u30e2\u30c7\u30eb\u306f\u3088\u308a\u591a\u304f\u306e\u60c5\u5831\u3092\u62bd\u51fa\u3067\u304d\u307e\u3059\u304c\u3001\u8a08\u7b97\u91cf\u3082\u5897\u52a0\u3057\u307e\u3059\u3002</p>","tags":["PyTorch","\u30ab\u30b9\u30bf\u30e0\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8","\u753b\u50cf\u5206\u985e","\u30c7\u30fc\u30bf\u62e1\u5f35","TinyVGG","\u4e2d\u7d1a\u8005\u5411\u3051","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","CNN","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/05_pytorch_custom_datasets/#4-1imagefolder","title":"4. \u30aa\u30d7\u30b7\u30e7\u30f31\uff1a<code>ImageFolder</code>\u306b\u3088\u308b\u753b\u50cf\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f","text":"<p>\u30c7\u30fc\u30bf\u304c\u6a19\u6e96\u7684\u306a\u753b\u50cf\u5206\u985e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306e\u5834\u5408\u3001<code>torchvision.datasets.ImageFolder</code>\u3092\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002</p> <pre><code># ImageFolder\u3092\u4f7f\u7528\u3057\u3066\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u4f5c\u6210\nfrom torchvision import datasets\ntrain_data = datasets.ImageFolder(root=train_dir, # \u753b\u50cf\u306e\u5bfe\u8c61\u30d5\u30a9\u30eb\u30c0\n                                  transform=data_transform, # \u30c7\u30fc\u30bf\uff08\u753b\u50cf\uff09\u306b\u5b9f\u884c\u3059\u308b\u5909\u63db\n                                  target_transform=None) # \u30e9\u30d9\u30eb\u306b\u5b9f\u884c\u3059\u308b\u5909\u63db\uff08\u5fc5\u8981\u306a\u5834\u5408\uff09\n\ntest_data = datasets.ImageFolder(root=test_dir, \n                                 transform=data_transform)\n\nprint(f\"\u8a13\u7df4\u30c7\u30fc\u30bf:\\n{train_data}\\n\u691c\u8a3c\u30c7\u30fc\u30bf:\\n{test_data}\")\n</code></pre> <p>\u51fa\u529b\u7d50\u679c\uff1a <pre><code>\u8a13\u7df4\u30c7\u30fc\u30bf:\nDataset ImageFolder\n    Number of datapoints: 225\n    Root location: data/pizza_steak_sushi/train\n    StandardTransform\nTransform: Compose(\n               Resize(size=(64, 64), interpolation=bilinear, max_size=None, antialias=True)\n               RandomHorizontalFlip(p=0.5)\n               ToTensor()\n           )\n\u691c\u8a3c\u30c7\u30fc\u30bf:\nDataset ImageFolder\n    Number of datapoints: 75\n    Root location: data/pizza_steak_sushi/test\n    StandardTransform\nTransform: Compose(\n               Resize(size=(64, 64), interpolation=bilinear, max_size=None, antialias=True)\n               RandomHorizontalFlip(p=0.5)\n               ToTensor()\n           )\n</code></pre></p> <p>\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u5c5e\u6027\u3092\u78ba\u8a8d\u3057\u307e\u3057\u3087\u3046\uff1a</p> <pre><code># \u30af\u30e9\u30b9\u540d\u3092\u30ea\u30b9\u30c8\u3068\u3057\u3066\u53d6\u5f97\nclass_names = train_data.classes\nclass_names\n</code></pre> <p>\u51fa\u529b\u7d50\u679c\uff1a <pre><code>['pizza', 'steak', 'sushi']\n</code></pre></p> <pre><code># \u30af\u30e9\u30b9\u540d\u3092\u8f9e\u66f8\u3068\u3057\u3066\u53d6\u5f97\nclass_dict = train_data.class_to_idx\nclass_dict\n</code></pre> <p>\u51fa\u529b\u7d50\u679c\uff1a <pre><code>{'pizza': 0, 'steak': 1, 'sushi': 2}\n</code></pre></p> <pre><code># \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u9577\u3055\u3092\u78ba\u8a8d\nlen(train_data), len(test_data)\n</code></pre> <p>\u51fa\u529b\u7d50\u679c\uff1a <pre><code>(225, 75)\n</code></pre></p> <p>\u500b\u5225\u306e\u30b5\u30f3\u30d7\u30eb\u3068\u30e9\u30d9\u30eb\u3092\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff1a</p> <pre><code>img, label = train_data[0][0], train_data[0][1]\nprint(f\"\u753b\u50cf\u30c6\u30f3\u30bd\u30eb:\\n{img}\")\nprint(f\"\u753b\u50cf\u5f62\u72b6: {img.shape}\")\nprint(f\"\u753b\u50cf\u30c7\u30fc\u30bf\u578b: {img.dtype}\")\nprint(f\"\u753b\u50cf\u30e9\u30d9\u30eb: {label}\")\nprint(f\"\u30e9\u30d9\u30eb\u30c7\u30fc\u30bf\u578b: {type(label)}\")\n</code></pre> <p>\u51fa\u529b\u7d50\u679c\uff1a <pre><code>\u753b\u50cf\u30c6\u30f3\u30bd\u30eb:\ntensor([[[0.1137, 0.1020, 0.0980,  ..., 0.1255, 0.1216, 0.1176],\n         [0.1059, 0.0980, 0.0980,  ..., 0.1294, 0.1294, 0.1294],\n         ...\n\u753b\u50cf\u5f62\u72b6: torch.Size([3, 64, 64])\n\u753b\u50cf\u30c7\u30fc\u30bf\u578b: torch.float32\n\u753b\u50cf\u30e9\u30d9\u30eb: 0\n\u30e9\u30d9\u30eb\u30c7\u30fc\u30bf\u578b: &lt;class 'int'&gt;\n</code></pre></p> <p>\u91cd\u8981\uff1a\u753b\u50cf\u306f<code>CHW</code>\uff08\u30ab\u30e9\u30fc\u30c1\u30e3\u30f3\u30cd\u30eb\u3001\u9ad8\u3055\u3001\u5e45\uff09\u306e\u5f62\u5f0f\u3067\u3059\u304c\u3001<code>matplotlib</code>\u306f<code>HWC</code>\u3092\u671f\u5f85\u3059\u308b\u305f\u3081\u3001\u8868\u793a\u6642\u306f<code>permute()</code>\u3067\u6b21\u5143\u3092\u4e26\u3073\u66ff\u3048\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002</p> <pre><code># \u6b21\u5143\u306e\u9806\u5e8f\u3092\u4e26\u3073\u66ff\u3048\nimg_permute = img.permute(1, 2, 0)\n\n# \u7570\u306a\u308b\u5f62\u72b6\u3092\u51fa\u529b\uff08permute\u524d\u5f8c\uff09\nprint(f\"\u30aa\u30ea\u30b8\u30ca\u30eb\u5f62\u72b6: {img.shape} -&gt; [\u30ab\u30e9\u30fc\u30c1\u30e3\u30f3\u30cd\u30eb, \u9ad8\u3055, \u5e45]\")\nprint(f\"permute\u5f8c\u306e\u5f62\u72b6: {img_permute.shape} -&gt; [\u9ad8\u3055, \u5e45, \u30ab\u30e9\u30fc\u30c1\u30e3\u30f3\u30cd\u30eb]\")\n\n# \u753b\u50cf\u3092\u30d7\u30ed\u30c3\u30c8\nplt.figure(figsize=(10, 7))\nplt.imshow(img.permute(1, 2, 0))\nplt.axis(\"off\")\nplt.title(class_names[label], fontsize=14);\n</code></pre> <p></p>","tags":["PyTorch","\u30ab\u30b9\u30bf\u30e0\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8","\u753b\u50cf\u5206\u985e","\u30c7\u30fc\u30bf\u62e1\u5f35","TinyVGG","\u4e2d\u7d1a\u8005\u5411\u3051","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","CNN","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/05_pytorch_custom_datasets/#41-dataloader","title":"4.1 <code>DataLoader</code>\u3078\u306e\u5909\u63db","text":"<p><code>Dataset</code>\u3092<code>DataLoader</code>\u306b\u5909\u63db\u3057\u3066\u30a4\u30c6\u30e9\u30d6\u30eb\u306b\u3057\u3001\u30e2\u30c7\u30eb\u304c\u30b5\u30f3\u30d7\u30eb\u3068\u76ee\u6a19\u5024\u306e\u95a2\u4fc2\u3092\u5b66\u7fd2\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002</p> <pre><code># DataLoader\u3092\u4f5c\u6210\nfrom torch.utils.data import DataLoader\ntrain_dataloader = DataLoader(dataset=train_data, \n                              batch_size=1, # \u30d0\u30c3\u30c1\u3042\u305f\u308a\u306e\u30b5\u30f3\u30d7\u30eb\u6570\n                              num_workers=1, # \u30c7\u30fc\u30bf\u30ed\u30fc\u30c7\u30a3\u30f3\u30b0\u306e\u30b5\u30d6\u30d7\u30ed\u30bb\u30b9\u6570\n                              shuffle=True) # \u30c7\u30fc\u30bf\u3092\u30b7\u30e3\u30c3\u30d5\u30eb\u3059\u308b\u304b\n\ntest_dataloader = DataLoader(dataset=test_data, \n                             batch_size=1, \n                             num_workers=1, \n                             shuffle=False) # \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306f\u901a\u5e38\u30b7\u30e3\u30c3\u30d5\u30eb\u3057\u306a\u3044\n\ntrain_dataloader, test_dataloader\n</code></pre> <p>\u5f62\u72b6\u3092\u78ba\u8a8d\u3057\u307e\u3057\u3087\u3046\uff1a</p> <pre><code>img, label = next(iter(train_dataloader))\n\n# \u30d0\u30c3\u30c1\u30b5\u30a4\u30ba\u304c1\u306b\u306a\u308a\u307e\u3059\nprint(f\"\u753b\u50cf\u5f62\u72b6: {img.shape} -&gt; [\u30d0\u30c3\u30c1\u30b5\u30a4\u30ba, \u30ab\u30e9\u30fc\u30c1\u30e3\u30f3\u30cd\u30eb, \u9ad8\u3055, \u5e45]\")\nprint(f\"\u30e9\u30d9\u30eb\u5f62\u72b6: {label.shape}\")\n</code></pre> <p>\u51fa\u529b\u7d50\u679c\uff1a <pre><code>\u753b\u50cf\u5f62\u72b6: torch.Size([1, 3, 64, 64]) -&gt; [\u30d0\u30c3\u30c1\u30b5\u30a4\u30ba, \u30ab\u30e9\u30fc\u30c1\u30e3\u30f3\u30cd\u30eb, \u9ad8\u3055, \u5e45]\n\u30e9\u30d9\u30eb\u5f62\u72b6: torch.Size([1])\n</code></pre></p>","tags":["PyTorch","\u30ab\u30b9\u30bf\u30e0\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8","\u753b\u50cf\u5206\u985e","\u30c7\u30fc\u30bf\u62e1\u5f35","TinyVGG","\u4e2d\u7d1a\u8005\u5411\u3051","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","CNN","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/05_pytorch_custom_datasets/#5-2dataset","title":"5. \u30aa\u30d7\u30b7\u30e7\u30f32\uff1a\u30ab\u30b9\u30bf\u30e0<code>Dataset</code>\u306b\u3088\u308b\u753b\u50cf\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f","text":"<p>\u4e8b\u524d\u69cb\u7bc9\u3055\u308c\u305f<code>Dataset</code>\u95a2\u6570\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u3001\u72ec\u81ea\u306e\u30ab\u30b9\u30bf\u30e0<code>Dataset</code>\u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002</p> <p><code>torch.utils.data.Dataset</code>\u3092\u30b5\u30d6\u30af\u30e9\u30b9\u5316\u3057\u3066\u30ab\u30b9\u30bf\u30e0<code>Dataset</code>\u3092\u4f5c\u6210\u3057\u307e\u3057\u3087\u3046\uff1a</p> <pre><code>import os\nimport pathlib\nimport torch\n\nfrom PIL import Image\nfrom torch.utils.data import Dataset\nfrom torchvision import transforms\nfrom typing import Tuple, Dict, List\n</code></pre>","tags":["PyTorch","\u30ab\u30b9\u30bf\u30e0\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8","\u753b\u50cf\u5206\u985e","\u30c7\u30fc\u30bf\u62e1\u5f35","TinyVGG","\u4e2d\u7d1a\u8005\u5411\u3051","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","CNN","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/05_pytorch_custom_datasets/#51","title":"5.1 \u30af\u30e9\u30b9\u540d\u3092\u53d6\u5f97\u3059\u308b\u30d8\u30eb\u30d1\u30fc\u95a2\u6570\u306e\u4f5c\u6210","text":"<pre><code>def find_classes(directory: str) -&gt; Tuple[List[str], Dict[str, int]]:\n    \"\"\"\u5bfe\u8c61\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u5185\u306e\u30af\u30e9\u30b9\u30d5\u30a9\u30eb\u30c0\u540d\u3092\u898b\u3064\u3051\u307e\u3059\u3002\n\n    \u5bfe\u8c61\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304c\u6a19\u6e96\u7684\u306a\u753b\u50cf\u5206\u985e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3067\u3042\u308b\u3053\u3068\u3092\u524d\u63d0\u3068\u3057\u307e\u3059\u3002\n\n    Args:\n        directory (str): \u30af\u30e9\u30b9\u540d\u3092\u8aad\u307f\u8fbc\u3080\u5bfe\u8c61\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\n\n    Returns:\n        Tuple[List[str], Dict[str, int]]: (\u30af\u30e9\u30b9\u540d\u306e\u30ea\u30b9\u30c8, dict(\u30af\u30e9\u30b9\u540d: \u30a4\u30f3\u30c7\u30c3\u30af\u30b9...))\n\n    \u4f8b:\n        find_classes(\"food_images/train\")\n        &gt;&gt;&gt; ([\"class_1\", \"class_2\"], {\"class_1\": 0, ...})\n    \"\"\"\n    # 1. \u5bfe\u8c61\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u30b9\u30ad\u30e3\u30f3\u3057\u3066\u30af\u30e9\u30b9\u540d\u3092\u53d6\u5f97\n    classes = sorted(entry.name for entry in os.scandir(directory) if entry.is_dir())\n\n    # 2. \u30af\u30e9\u30b9\u540d\u304c\u898b\u3064\u304b\u3089\u306a\u3044\u5834\u5408\u306f\u30a8\u30e9\u30fc\u3092\u767a\u751f\n    if not classes:\n        raise FileNotFoundError(f\"{directory}\u3067\u30af\u30e9\u30b9\u304c\u898b\u3064\u304b\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002\")\n\n    # 3. \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u30e9\u30d9\u30eb\u306e\u8f9e\u66f8\u3092\u4f5c\u6210\uff08\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u306f\u6587\u5b57\u5217\u3088\u308a\u6570\u5024\u3092\u597d\u3080\uff09\n    class_to_idx = {cls_name: i for i, cls_name in enumerate(classes)}\n    return classes, class_to_idx\n</code></pre> <pre><code>find_classes(str(train_dir))\n</code></pre> <p>\u51fa\u529b\u7d50\u679c\uff1a <pre><code>(['pizza', 'steak', 'sushi'], {'pizza': 0, 'steak': 1, 'sushi': 2})\n</code></pre></p>","tags":["PyTorch","\u30ab\u30b9\u30bf\u30e0\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8","\u753b\u50cf\u5206\u985e","\u30c7\u30fc\u30bf\u62e1\u5f35","TinyVGG","\u4e2d\u7d1a\u8005\u5411\u3051","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","CNN","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/05_pytorch_custom_datasets/#52-imagefolderdataset","title":"5.2 <code>ImageFolder</code>\u3092\u8907\u88fd\u3059\u308b\u30ab\u30b9\u30bf\u30e0<code>Dataset</code>\u306e\u4f5c\u6210","text":"<pre><code># \u30ab\u30b9\u30bf\u30e0\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u30af\u30e9\u30b9\u3092\u4f5c\u6210\uff08torch.utils.data.Dataset\u3092\u7d99\u627f\uff09\nfrom torch.utils.data import Dataset\n\n# 1. torch.utils.data.Dataset\u3092\u30b5\u30d6\u30af\u30e9\u30b9\u5316\nclass ImageFolderCustom(Dataset):\n\n    # 2. targ_dir\u3068transform\uff08\u30aa\u30d7\u30b7\u30e7\u30f3\uff09\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u521d\u671f\u5316\n    def __init__(self, targ_dir: str, transform=None) -&gt; None:\n\n        # 3. \u30af\u30e9\u30b9\u5c5e\u6027\u3092\u4f5c\u6210\n        # \u3059\u3079\u3066\u306e\u753b\u50cf\u30d1\u30b9\u3092\u53d6\u5f97\n        self.paths = list(pathlib.Path(targ_dir).glob(\"*/*.jpg\"))\n        # \u5909\u63db\u3092\u8a2d\u5b9a\n        self.transform = transform\n        # classes\u3068class_to_idx\u5c5e\u6027\u3092\u4f5c\u6210\n        self.classes, self.class_to_idx = find_classes(targ_dir)\n\n    # 4. \u753b\u50cf\u3092\u8aad\u307f\u8fbc\u3080\u95a2\u6570\u3092\u4f5c\u6210\n    def load_image(self, index: int) -&gt; Image.Image:\n        \"\u30d1\u30b9\u3092\u901a\u3058\u3066\u753b\u50cf\u3092\u958b\u3044\u3066\u8fd4\u3057\u307e\u3059\u3002\"\n        image_path = self.paths[index]\n        return Image.open(image_path) \n\n    # 5. __len__()\u30e1\u30bd\u30c3\u30c9\u3092\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\uff08\u63a8\u5968\uff09\n    def __len__(self) -&gt; int:\n        \"\u30b5\u30f3\u30d7\u30eb\u306e\u7dcf\u6570\u3092\u8fd4\u3057\u307e\u3059\u3002\"\n        return len(self.paths)\n\n    # 6. __getitem__()\u30e1\u30bd\u30c3\u30c9\u3092\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\uff08\u5fc5\u9808\uff09\n    def __getitem__(self, index: int) -&gt; Tuple[torch.Tensor, int]:\n        \"\u30c7\u30fc\u30bf\u306e1\u30b5\u30f3\u30d7\u30eb\u3001\u30c7\u30fc\u30bf\u3068\u30e9\u30d9\u30eb\uff08X, y\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002\"\n        img = self.load_image(index)\n        class_name  = self.paths[index].parent.name # data_folder/class_name/image.jpeg\u306e\u30d1\u30b9\u3092\u671f\u5f85\n        class_idx = self.class_to_idx[class_name]\n\n        # \u5fc5\u8981\u306b\u5fdc\u3058\u3066\u5909\u63db\n        if self.transform:\n            return self.transform(img), class_idx # \u30c7\u30fc\u30bf\u3001\u30e9\u30d9\u30eb\uff08X, y\uff09\u3092\u8fd4\u3059\n        else:\n            return img, class_idx # \u30c7\u30fc\u30bf\u3001\u30e9\u30d9\u30eb\uff08X, y\uff09\u3092\u8fd4\u3059\n</code></pre> <p>\u30ab\u30b9\u30bf\u30e0\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3057\u3087\u3046\uff1a</p> <pre><code># \u8a13\u7df4\u7528\u5909\u63db\uff08\u30c7\u30fc\u30bf\u62e1\u5f35\u3042\u308a\uff09\ntrain_transforms = transforms.Compose([\n    transforms.Resize((64, 64)),\n    transforms.RandomHorizontalFlip(p=0.5),\n    transforms.ToTensor()\n])\n\n# \u30c6\u30b9\u30c8\u7528\u5909\u63db\uff08\u30c7\u30fc\u30bf\u62e1\u5f35\u306a\u3057\u3001\u30ea\u30b5\u30a4\u30ba\u306e\u307f\uff09\ntest_transforms = transforms.Compose([\n    transforms.Resize((64, 64)),\n    transforms.ToTensor()\n])\n</code></pre> <pre><code>train_data_custom = ImageFolderCustom(targ_dir=train_dir, \n                                      transform=train_transforms)\ntest_data_custom = ImageFolderCustom(targ_dir=test_dir, \n                                     transform=test_transforms)\ntrain_data_custom, test_data_custom\n</code></pre> <pre><code># \u7b49\u4fa1\u6027\u3092\u30c1\u30a7\u30c3\u30af\nprint((len(train_data_custom) == len(train_data)) &amp; (len(test_data_custom) == len(test_data)))\nprint(train_data_custom.classes == train_data.classes)\nprint(train_data_custom.class_to_idx == train_data.class_to_idx)\n</code></pre> <p>\u51fa\u529b\u7d50\u679c\uff1a <pre><code>True\nTrue\nTrue\n</code></pre></p>","tags":["PyTorch","\u30ab\u30b9\u30bf\u30e0\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8","\u753b\u50cf\u5206\u985e","\u30c7\u30fc\u30bf\u62e1\u5f35","TinyVGG","\u4e2d\u7d1a\u8005\u5411\u3051","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","CNN","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/05_pytorch_custom_datasets/#6","title":"6. \u30c7\u30fc\u30bf\u62e1\u5f35\u306e\u4ed6\u306e\u5f62\u5f0f","text":"<p>\u30c7\u30fc\u30bf\u62e1\u5f35\u306f\u3001\u8a13\u7df4\u30c7\u30fc\u30bf\u306e\u591a\u69d8\u6027\u3092\u4eba\u5de5\u7684\u306b\u5897\u52a0\u3055\u305b\u308b\u30d7\u30ed\u30bb\u30b9\u3067\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u30e2\u30c7\u30eb\u306e\u3088\u308a\u826f\u3044\u6c4e\u5316\u80fd\u529b\uff08\u5b66\u7fd2\u3057\u305f\u30d1\u30bf\u30fc\u30f3\u304c\u672a\u6765\u306e\u672a\u77e5\u306e\u4f8b\u306b\u3088\u308a\u5805\u7262\uff09\u3092\u5f97\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p> <p><code>transforms.TrivialAugmentWide()</code>\u3092\u4f7f\u7528\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff1a</p> <pre><code>from torchvision import transforms\n\ntrain_transforms = transforms.Compose([\n    transforms.Resize((224, 224)),\n    transforms.TrivialAugmentWide(num_magnitude_bins=31), # \u5f37\u5ea6\u30ec\u30d9\u30eb\n    transforms.ToTensor() # \u3059\u3079\u3066\u30920\u30681\u306e\u9593\u306b\u3059\u308b\u305f\u3081ToTensor()\u3092\u6700\u5f8c\u306b\u4f7f\u7528\n])\n\n# \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u306f\u30c7\u30fc\u30bf\u62e1\u5f35\u306f\u4e0d\u8981\ntest_transforms = transforms.Compose([\n    transforms.Resize((224, 224)), \n    transforms.ToTensor()\n])\n</code></pre>","tags":["PyTorch","\u30ab\u30b9\u30bf\u30e0\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8","\u753b\u50cf\u5206\u985e","\u30c7\u30fc\u30bf\u62e1\u5f35","TinyVGG","\u4e2d\u7d1a\u8005\u5411\u3051","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","CNN","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/05_pytorch_custom_datasets/#7-0tinyvgg","title":"7. \u30e2\u30c7\u30eb0\uff1a\u30c7\u30fc\u30bf\u62e1\u5f35\u306a\u3057\u306eTinyVGG","text":"","tags":["PyTorch","\u30ab\u30b9\u30bf\u30e0\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8","\u753b\u50cf\u5206\u985e","\u30c7\u30fc\u30bf\u62e1\u5f35","TinyVGG","\u4e2d\u7d1a\u8005\u5411\u3051","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","CNN","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/05_pytorch_custom_datasets/#71-0","title":"7.1 \u30e2\u30c7\u30eb0\u7528\u306e\u30c7\u30fc\u30bf\u8aad\u307f\u8fbc\u307f","text":"<pre><code># \u30b7\u30f3\u30d7\u30eb\u306a\u5909\u63db\u3092\u4f5c\u6210\nsimple_transform = transforms.Compose([ \n    transforms.Resize((64, 64)),\n    transforms.ToTensor(),\n])\n</code></pre> <pre><code># 1. \u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3093\u3067\u5909\u63db\nfrom torchvision import datasets\ntrain_data_simple = datasets.ImageFolder(root=train_dir, transform=simple_transform)\ntest_data_simple = datasets.ImageFolder(root=test_dir, transform=simple_transform)\n\n# 2. DataLoader\u306b\u5909\u63db\nimport os\nfrom torch.utils.data import DataLoader\n\n# \u30d0\u30c3\u30c1\u30b5\u30a4\u30ba\u3068\u30ef\u30fc\u30ab\u30fc\u6570\u3092\u8a2d\u5b9a\nBATCH_SIZE = 32\nNUM_WORKERS = 0\nprint(f\"\u30d0\u30c3\u30c1\u30b5\u30a4\u30ba{BATCH_SIZE}\u3001{NUM_WORKERS}\u30ef\u30fc\u30ab\u30fc\u3067DataLoader\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\")\n\n# DataLoader\u3092\u4f5c\u6210\ntrain_dataloader_simple = DataLoader(train_data_simple, \n                                     batch_size=BATCH_SIZE, \n                                     shuffle=True, \n                                     num_workers=NUM_WORKERS)\n\ntest_dataloader_simple = DataLoader(test_data_simple, \n                                    batch_size=BATCH_SIZE, \n                                    shuffle=False, \n                                    num_workers=NUM_WORKERS)\n</code></pre>","tags":["PyTorch","\u30ab\u30b9\u30bf\u30e0\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8","\u753b\u50cf\u5206\u985e","\u30c7\u30fc\u30bf\u62e1\u5f35","TinyVGG","\u4e2d\u7d1a\u8005\u5411\u3051","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","CNN","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/05_pytorch_custom_datasets/#72-tinyvgg","title":"7.2 TinyVGG\u30e2\u30c7\u30eb\u30af\u30e9\u30b9\u306e\u4f5c\u6210","text":"<pre><code>class TinyVGG(nn.Module):\n    \"\"\"\n    TinyVGG\u30e2\u30c7\u30eb\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3: \n    https://poloclub.github.io/cnn-explainer/\n    \"\"\"\n    def __init__(self, input_shape: int, hidden_units: int, output_shape: int) -&gt; None:\n        super().__init__()\n        self.conv_block_1 = nn.Sequential(\n            nn.Conv2d(in_channels=input_shape, \n                      out_channels=hidden_units, \n                      kernel_size=3, # \u753b\u50cf\u4e0a\u3092\u79fb\u52d5\u3059\u308b\u6b63\u65b9\u5f62\u306e\u5927\u304d\u3055\n                      stride=1, # \u30c7\u30d5\u30a9\u30eb\u30c8\n                      padding=1), # \"valid\"\uff08\u30d1\u30c7\u30a3\u30f3\u30b0\u306a\u3057\uff09\u307e\u305f\u306f\"same\"\uff08\u51fa\u529b\u304c\u5165\u529b\u3068\u540c\u3058\u5f62\u72b6\uff09\u307e\u305f\u306f\u7279\u5b9a\u306e\u6570\u5024\n            nn.ReLU(),\n            nn.Conv2d(in_channels=hidden_units, \n                      out_channels=hidden_units,\n                      kernel_size=3,\n                      stride=1,\n                      padding=1),\n            nn.ReLU(),\n            nn.MaxPool2d(kernel_size=2,\n                         stride=2) # \u30c7\u30d5\u30a9\u30eb\u30c8\u306estride\u5024\u306fkernel_size\u3068\u540c\u3058\n        )\n        self.conv_block_2 = nn.Sequential(\n            nn.Conv2d(hidden_units, hidden_units, kernel_size=3, padding=1),\n            nn.ReLU(),\n            nn.Conv2d(hidden_units, hidden_units, kernel_size=3, padding=1),\n            nn.ReLU(),\n            nn.MaxPool2d(2)\n        )\n        self.classifier = nn.Sequential(\n            nn.Flatten(),\n            # \u3053\u306ein_features\u5f62\u72b6\u306f\u3069\u3053\u304b\u3089\u6765\u305f\u306e\u304b\uff1f\n            # \u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u5404\u5c64\u304c\u5165\u529b\u30c7\u30fc\u30bf\u306e\u5f62\u72b6\u3092\u5727\u7e2e\u30fb\u5909\u66f4\u3059\u308b\u305f\u3081\n            nn.Linear(in_features=hidden_units*16*16,\n                      out_features=output_shape)\n        )\n\n    def forward(self, x: torch.Tensor):\n        x = self.conv_block_1(x)\n        x = self.conv_block_2(x)\n        x = self.classifier(x)\n        return x\n\ntorch.manual_seed(42)\nmodel_0 = TinyVGG(input_shape=3, # \u30ab\u30e9\u30fc\u30c1\u30e3\u30f3\u30cd\u30eb\u6570\uff08RGB\u306e\u5834\u54083\uff09\n                  hidden_units=10, \n                  output_shape=len(train_data.classes)).to(device)\nmodel_0\n</code></pre> <p>\u51fa\u529b\u7d50\u679c\uff1a <pre><code>TinyVGG(\n  (conv_block_1): Sequential(\n    (0): Conv2d(3, 10, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (1): ReLU()\n    (2): Conv2d(10, 10, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (3): ReLU()\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  )\n  (conv_block_2): Sequential(\n    (0): Conv2d(10, 10, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (1): ReLU()\n    (2): Conv2d(10, 10, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (3): ReLU()\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  )\n  (classifier): Sequential(\n    (0): Flatten(start_dim=1, end_dim=-1)\n    (1): Linear(in_features=2560, out_features=3, bias=True)\n  )\n)\n</code></pre></p>","tags":["PyTorch","\u30ab\u30b9\u30bf\u30e0\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8","\u753b\u50cf\u5206\u985e","\u30c7\u30fc\u30bf\u62e1\u5f35","TinyVGG","\u4e2d\u7d1a\u8005\u5411\u3051","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","CNN","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/05_pytorch_custom_datasets/#73","title":"7.3 \u5358\u4e00\u753b\u50cf\u3067\u306e\u9806\u4f1d\u64ad\u30c6\u30b9\u30c8","text":"<p>\u30e2\u30c7\u30eb\u3092\u30c6\u30b9\u30c8\u3059\u308b\u826f\u3044\u65b9\u6cd5\u306f\u3001\u5358\u4e00\u306e\u30c7\u30fc\u30bf\u3067\u9806\u4f1d\u64ad\u3092\u884c\u3046\u3053\u3068\u3067\u3059\uff1a</p> <pre><code># 1. DataLoader\u304b\u3089\u753b\u50cf\u3068\u30e9\u30d9\u30eb\u306e\u30d0\u30c3\u30c1\u3092\u53d6\u5f97\nimg_batch, label_batch = next(iter(train_dataloader_simple))\n\n# 2. \u30d0\u30c3\u30c1\u304b\u3089\u5358\u4e00\u753b\u50cf\u3092\u53d6\u5f97\u3057\u3001\u30e2\u30c7\u30eb\u306b\u5408\u3046\u3088\u3046\u306bunsqueeze\nimg_single, label_single = img_batch[0].unsqueeze(dim=0), label_batch[0]\nprint(f\"\u5358\u4e00\u753b\u50cf\u5f62\u72b6: {img_single.shape}\\n\")\n\n# 3. \u5358\u4e00\u753b\u50cf\u3067\u9806\u4f1d\u64ad\u3092\u5b9f\u884c\nmodel_0.eval()\nwith torch.inference_mode():\n    pred = model_0(img_single.to(device))\n\n# 4. \u7d50\u679c\u3092\u51fa\u529b\u3057\u3001\u30e2\u30c7\u30eb\u306e\u30ed\u30b8\u30c3\u30c8 \u2192 \u4e88\u6e2c\u78ba\u7387 \u2192 \u4e88\u6e2c\u30e9\u30d9\u30eb\u306b\u5909\u63db\nprint(f\"\u51fa\u529b\u30ed\u30b8\u30c3\u30c8:\\n{pred}\\n\")\nprint(f\"\u51fa\u529b\u4e88\u6e2c\u78ba\u7387:\\n{torch.softmax(pred, dim=1)}\\n\")\nprint(f\"\u51fa\u529b\u4e88\u6e2c\u30e9\u30d9\u30eb:\\n{torch.argmax(torch.softmax(pred, dim=1), dim=1)}\\n\")\nprint(f\"\u5b9f\u969b\u306e\u30e9\u30d9\u30eb:\\n{label_single}\")\n</code></pre> <p>\u51fa\u529b\u7d50\u679c\uff1a <pre><code>\u5358\u4e00\u753b\u50cf\u5f62\u72b6: torch.Size([1, 3, 64, 64])\n\n\u51fa\u529b\u30ed\u30b8\u30c3\u30c8:\ntensor([[0.0578, 0.0634, 0.0352]], device='mps:0')\n\n\u51fa\u529b\u4e88\u6e2c\u78ba\u7387:\ntensor([[0.3352, 0.3371, 0.3277]], device='mps:0')\n\n\u51fa\u529b\u4e88\u6e2c\u30e9\u30d9\u30eb:\ntensor([1], device='mps:0')\n\n\u5b9f\u969b\u306e\u30e9\u30d9\u30eb:\n2\n</code></pre></p>","tags":["PyTorch","\u30ab\u30b9\u30bf\u30e0\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8","\u753b\u50cf\u5206\u985e","\u30c7\u30fc\u30bf\u62e1\u5f35","TinyVGG","\u4e2d\u7d1a\u8005\u5411\u3051","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","CNN","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/05_pytorch_custom_datasets/#74-torchinfo","title":"7.4 <code>torchinfo</code>\u306b\u3088\u308b\u30e2\u30c7\u30eb\u5f62\u72b6\u306e\u78ba\u8a8d","text":"<p><code>torchinfo</code>\u3092\u4f7f\u7528\u3057\u3066\u30e2\u30c7\u30eb\u306e\u8a73\u7d30\u60c5\u5831\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\uff1a</p> <pre><code>from torchinfo import summary\nsummary(model_0, input_size=[1, 3, 64, 64]) # \u4f8b\u306e\u5165\u529b\u30b5\u30a4\u30ba\u3067\u30c6\u30b9\u30c8\u30d1\u30b9\n</code></pre> <p>\u51fa\u529b\u7d50\u679c\uff1a <pre><code>==========================================================================================\nLayer (type:depth-idx)                   Output Shape              Param #\n==========================================================================================\nTinyVGG                                  [1, 3]                    --\n\u251c\u2500Sequential: 1-1                        [1, 10, 32, 32]           --\n\u2502    \u2514\u2500Conv2d: 2-1                       [1, 10, 64, 64]           280\n\u2502    \u2514\u2500ReLU: 2-2                         [1, 10, 64, 64]           --\n\u2502    \u2514\u2500Conv2d: 2-3                       [1, 10, 64, 64]           910\n\u2502    \u2514\u2500ReLU: 2-4                         [1, 10, 64, 64]           --\n\u2502    \u2514\u2500MaxPool2d: 2-5                    [1, 10, 32, 32]           --\n\u251c\u2500Sequential: 1-2                        [1, 10, 16, 16]           --\n\u2502    \u2514\u2500Conv2d: 2-6                       [1, 10, 32, 32]           910\n\u2502    \u2514\u2500ReLU: 2-7                         [1, 10, 32, 32]           --\n\u2502    \u2514\u2500Conv2d: 2-8                       [1, 10, 32, 32]           910\n\u2502    \u2514\u2500ReLU: 2-9                         [1, 10, 32, 32]           --\n\u2502    \u2514\u2500MaxPool2d: 2-10                   [1, 10, 16, 16]           --\n\u251c\u2500Sequential: 1-3                        [1, 3]                    --\n\u2502    \u2514\u2500Flatten: 2-11                     [1, 2560]                 --\n\u2502    \u2514\u2500Linear: 2-12                      [1, 3]                    7,683\n==========================================================================================\nTotal params: 10,693\nTrainable params: 10,693\nNon-trainable params: 0\nTotal mult-adds (Units.MEGABYTES): 6.75\n==========================================================================================\n</code></pre></p>","tags":["PyTorch","\u30ab\u30b9\u30bf\u30e0\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8","\u753b\u50cf\u5206\u985e","\u30c7\u30fc\u30bf\u62e1\u5f35","TinyVGG","\u4e2d\u7d1a\u8005\u5411\u3051","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","CNN","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/05_pytorch_custom_datasets/#75","title":"7.5 \u8a13\u7df4\u30fb\u30c6\u30b9\u30c8\u30eb\u30fc\u30d7\u95a2\u6570\u306e\u4f5c\u6210","text":"<p>3\u3064\u306e\u95a2\u6570\u3092\u4f5c\u6210\u3057\u307e\u3059\uff1a 1. <code>train_step()</code> - \u30e2\u30c7\u30eb\u3092\u8a13\u7df4 2. <code>test_step()</code> - \u30e2\u30c7\u30eb\u3092\u8a55\u4fa1 3. <code>train()</code> - 1\u30682\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u5b9f\u884c</p> <pre><code>def train_step(model: torch.nn.Module, \n               dataloader: torch.utils.data.DataLoader, \n               loss_fn: torch.nn.Module, \n               optimizer: torch.optim.Optimizer):\n    # \u30e2\u30c7\u30eb\u3092\u8a13\u7df4\u30e2\u30fc\u30c9\u306b\u8a2d\u5b9a\n    model.train()\n\n    # \u8a13\u7df4\u640d\u5931\u3068\u8a13\u7df4\u7cbe\u5ea6\u306e\u5024\u3092\u8a2d\u5b9a\n    train_loss, train_acc = 0, 0\n\n    # \u30c7\u30fc\u30bf\u30ed\u30fc\u30c0\u30fc\u306e\u30c7\u30fc\u30bf\u30d0\u30c3\u30c1\u3092\u30eb\u30fc\u30d7\n    for batch, (X, y) in enumerate(dataloader):\n        # \u30c7\u30fc\u30bf\u3092\u5bfe\u8c61\u30c7\u30d0\u30a4\u30b9\u306b\u9001\u4fe1\n        X, y = X.to(device), y.to(device)\n\n        # 1. \u9806\u4f1d\u64ad\n        y_pred = model(X)\n\n        # 2. \u640d\u5931\u3092\u8a08\u7b97\u30fb\u84c4\u7a4d\n        loss = loss_fn(y_pred, y)\n        train_loss += loss.item() \n\n        # 3. \u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u30fc\u306e\u30bc\u30ed\u52fe\u914d\n        optimizer.zero_grad()\n\n        # 4. \u640d\u5931\u306e\u9006\u4f1d\u64ad\n        loss.backward()\n\n        # 5. \u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u30fc\u306e\u30b9\u30c6\u30c3\u30d7\n        optimizer.step()\n\n        # \u5168\u30d0\u30c3\u30c1\u306b\u308f\u305f\u3063\u3066\u7cbe\u5ea6\u30e1\u30c8\u30ea\u30af\u30b9\u3092\u8a08\u7b97\u30fb\u84c4\u7a4d\n        y_pred_class = torch.argmax(torch.softmax(y_pred, dim=1), dim=1)\n        train_acc += (y_pred_class == y).sum().item()/len(y_pred)\n\n    # \u30d0\u30c3\u30c1\u3054\u3068\u306e\u5e73\u5747\u640d\u5931\u3068\u7cbe\u5ea6\u3092\u53d6\u5f97\u3059\u308b\u305f\u3081\u306b\u30e1\u30c8\u30ea\u30af\u30b9\u3092\u8abf\u6574\n    train_loss = train_loss / len(dataloader)\n    train_acc = train_acc / len(dataloader)\n    return train_loss, train_acc\n</code></pre> <pre><code>def test_step(model: torch.nn.Module, \n              dataloader: torch.utils.data.DataLoader, \n              loss_fn: torch.nn.Module):\n    # \u30e2\u30c7\u30eb\u3092\u8a55\u4fa1\u30e2\u30fc\u30c9\u306b\u8a2d\u5b9a\n    model.eval() \n\n    # \u30c6\u30b9\u30c8\u640d\u5931\u3068\u30c6\u30b9\u30c8\u7cbe\u5ea6\u306e\u5024\u3092\u8a2d\u5b9a\n    test_loss, test_acc = 0, 0\n\n    # \u63a8\u8ad6\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u30de\u30cd\u30fc\u30b8\u30e3\u30fc\u3092\u30aa\u30f3\n    with torch.inference_mode():\n        # DataLoader\u30d0\u30c3\u30c1\u3092\u30eb\u30fc\u30d7\n        for batch, (X, y) in enumerate(dataloader):\n            # \u30c7\u30fc\u30bf\u3092\u5bfe\u8c61\u30c7\u30d0\u30a4\u30b9\u306b\u9001\u4fe1\n            X, y = X.to(device), y.to(device)\n\n            # 1. \u9806\u4f1d\u64ad\n            test_pred_logits = model(X)\n\n            # 2. \u640d\u5931\u3092\u8a08\u7b97\u30fb\u84c4\u7a4d\n            loss = loss_fn(test_pred_logits, y)\n            test_loss += loss.item()\n\n            # \u7cbe\u5ea6\u3092\u8a08\u7b97\u30fb\u84c4\u7a4d\n            test_pred_labels = test_pred_logits.argmax(dim=1)\n            test_acc += ((test_pred_labels == y).sum().item()/len(test_pred_labels))\n\n    # \u30d0\u30c3\u30c1\u3054\u3068\u306e\u5e73\u5747\u640d\u5931\u3068\u7cbe\u5ea6\u3092\u53d6\u5f97\u3059\u308b\u305f\u3081\u306b\u30e1\u30c8\u30ea\u30af\u30b9\u3092\u8abf\u6574\n    test_loss = test_loss / len(dataloader)\n    test_acc = test_acc / len(dataloader)\n    return test_loss, test_acc\n</code></pre> <pre><code>from tqdm import tqdm\n\n# 1. \u8a13\u7df4\u3068\u30c6\u30b9\u30c8\u30b9\u30c6\u30c3\u30d7\u306b\u5fc5\u8981\u306a\u69d8\u3005\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u53d7\u3051\u53d6\u308b\ndef train(model: torch.nn.Module, \n          train_dataloader: torch.utils.data.DataLoader, \n          test_dataloader: torch.utils.data.DataLoader, \n          optimizer: torch.optim.Optimizer,\n          loss_fn: torch.nn.Module = nn.CrossEntropyLoss(),\n          epochs: int = 5):\n\n    # 2. \u7a7a\u306e\u7d50\u679c\u8f9e\u66f8\u3092\u4f5c\u6210\n    results = {\"train_loss\": [],\n        \"train_acc\": [],\n        \"test_loss\": [],\n        \"test_acc\": []\n    }\n\n    # 3. \u30a8\u30dd\u30c3\u30af\u6570\u5206\u3001\u8a13\u7df4\u3068\u30c6\u30b9\u30c8\u30b9\u30c6\u30c3\u30d7\u3092\u30eb\u30fc\u30d7\n    for epoch in tqdm(range(epochs)):\n        train_loss, train_acc = train_step(model=model,\n                                           dataloader=train_dataloader,\n                                           loss_fn=loss_fn,\n                                           optimizer=optimizer)\n        test_loss, test_acc = test_step(model=model,\n            dataloader=test_dataloader,\n            loss_fn=loss_fn)\n\n        # 4. \u9032\u884c\u72b6\u6cc1\u3092\u51fa\u529b\n        print(\n            f\"\u30a8\u30dd\u30c3\u30af: {epoch+1} | \"\n            f\"train_loss: {train_loss:.4f} | \"\n            f\"train_acc: {train_acc:.4f} | \"\n            f\"test_loss: {test_loss:.4f} | \"\n            f\"test_acc: {test_acc:.4f}\"\n        )\n\n        # 5. \u7d50\u679c\u8f9e\u66f8\u3092\u66f4\u65b0\n        # \u3059\u3079\u3066\u306e\u30c7\u30fc\u30bf\u304cCPU\u306b\u79fb\u52d5\u3055\u308c\u3001\u4fdd\u5b58\u7528\u306bfloat\u306b\u5909\u63db\u3055\u308c\u308b\u3053\u3068\u3092\u78ba\u8a8d\n        results[\"train_loss\"].append(train_loss.item() if isinstance(train_loss, torch.Tensor) else train_loss)\n        results[\"train_acc\"].append(train_acc.item() if isinstance(train_acc, torch.Tensor) else train_acc)\n        results[\"test_loss\"].append(test_loss.item() if isinstance(test_loss, torch.Tensor) else test_loss)\n        results[\"test_acc\"].append(test_acc.item() if isinstance(test_acc, torch.Tensor) else test_acc)\n\n    # 6. \u30a8\u30dd\u30c3\u30af\u7d42\u4e86\u6642\u306b\u6e80\u305f\u3055\u308c\u305f\u7d50\u679c\u3092\u8fd4\u3059\n    return results\n</code></pre>","tags":["PyTorch","\u30ab\u30b9\u30bf\u30e0\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8","\u753b\u50cf\u5206\u985e","\u30c7\u30fc\u30bf\u62e1\u5f35","TinyVGG","\u4e2d\u7d1a\u8005\u5411\u3051","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","CNN","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/05_pytorch_custom_datasets/#77-0","title":"7.7 \u30e2\u30c7\u30eb0\u306e\u8a13\u7df4\u3068\u8a55\u4fa1","text":"<pre><code># \u30e9\u30f3\u30c0\u30e0\u30b7\u30fc\u30c9\u3092\u8a2d\u5b9a\ntorch.manual_seed(42) \ntorch.cuda.manual_seed(42)\n\n# \u30a8\u30dd\u30c3\u30af\u6570\u3092\u8a2d\u5b9a\nNUM_EPOCHS = 5\n\n# TinyVGG\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u518d\u4f5c\u6210\nmodel_0 = TinyVGG(input_shape=3, # \u30ab\u30e9\u30fc\u30c1\u30e3\u30f3\u30cd\u30eb\u6570\uff08RGB\u306e\u5834\u54083\uff09\n                  hidden_units=10, \n                  output_shape=len(train_data.classes)).to(device)\n\n# \u640d\u5931\u95a2\u6570\u3068\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u30fc\u3092\u8a2d\u5b9a\nloss_fn = nn.CrossEntropyLoss()\noptimizer = torch.optim.Adam(params=model_0.parameters(), lr=0.001)\n\n# \u30bf\u30a4\u30de\u30fc\u3092\u958b\u59cb\nfrom timeit import default_timer as timer \nstart_time = timer()\n\n# model_0\u3092\u8a13\u7df4\nmodel_0_results = train(model=model_0, \n                        train_dataloader=train_dataloader_simple,\n                        test_dataloader=test_dataloader_simple,\n                        optimizer=optimizer,\n                        loss_fn=loss_fn, \n                        epochs=NUM_EPOCHS)\n\n# \u30bf\u30a4\u30de\u30fc\u3092\u7d42\u4e86\u3057\u3001\u6240\u8981\u6642\u9593\u3092\u51fa\u529b\nend_time = timer()\nprint(f\"\u7dcf\u8a13\u7df4\u6642\u9593: {end_time-start_time:.3f} \u79d2\")\n</code></pre> <p>\u51fa\u529b\u7d50\u679c\uff1a <pre><code>\u30a8\u30dd\u30c3\u30af: 1 | train_loss: 1.1078 | train_acc: 0.2578 | test_loss: 1.1360 | test_acc: 0.2604\n\u30a8\u30dd\u30c3\u30af: 2 | train_loss: 1.0847 | train_acc: 0.4258 | test_loss: 1.1620 | test_acc: 0.1979\n\u30a8\u30dd\u30c3\u30af: 3 | train_loss: 1.1157 | train_acc: 0.2930 | test_loss: 1.1697 | test_acc: 0.1979\n\u30a8\u30dd\u30c3\u30af: 4 | train_loss: 1.0956 | train_acc: 0.4141 | test_loss: 1.1384 | test_acc: 0.1979\n\u30a8\u30dd\u30c3\u30af: 5 | train_loss: 1.0985 | train_acc: 0.2930 | test_loss: 1.1427 | test_acc: 0.1979\n\u7dcf\u8a13\u7df4\u6642\u9593: 4.032 \u79d2\n</code></pre></p>","tags":["PyTorch","\u30ab\u30b9\u30bf\u30e0\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8","\u753b\u50cf\u5206\u985e","\u30c7\u30fc\u30bf\u62e1\u5f35","TinyVGG","\u4e2d\u7d1a\u8005\u5411\u3051","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","CNN","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/05_pytorch_custom_datasets/#78-0","title":"7.8 \u30e2\u30c7\u30eb0\u306e\u640d\u5931\u66f2\u7dda\u3092\u30d7\u30ed\u30c3\u30c8","text":"<p>\u640d\u5931\u66f2\u7dda\u306f\u30e2\u30c7\u30eb\u306e\u6642\u9593\u7d4c\u904e\u306b\u4f34\u3046\u7d50\u679c\u3092\u8868\u793a\u3057\u3001\u30e2\u30c7\u30eb\u306e\u6027\u80fd\u8a55\u4fa1\u306b\u512a\u308c\u305f\u65b9\u6cd5\u3067\u3059\u3002</p> <pre><code>def plot_loss_curves(results: Dict[str, List[float]]):\n    \"\"\"\u7d50\u679c\u8f9e\u66f8\u306e\u8a13\u7df4\u66f2\u7dda\u3092\u30d7\u30ed\u30c3\u30c8\u3057\u307e\u3059\u3002\n\n    Args:\n        results (dict): \u5024\u306e\u30ea\u30b9\u30c8\u3092\u542b\u3080\u8f9e\u66f8, \u4f8b:\n            {\"train_loss\": [...],\n             \"train_acc\": [...],\n             \"test_loss\": [...],\n             \"test_acc\": [...]}\n    \"\"\"\n\n    # \u7d50\u679c\u8f9e\u66f8\u306e\u640d\u5931\u5024\u3092\u53d6\u5f97\uff08\u8a13\u7df4\u3068\u691c\u8a3c\uff09\n    loss = results['train_loss']\n    test_loss = results['test_loss']\n\n    # \u7d50\u679c\u8f9e\u66f8\u306e\u7cbe\u5ea6\u5024\u3092\u53d6\u5f97\uff08\u8a13\u7df4\u3068\u691c\u8a3c\uff09\n    accuracy = results['train_acc']\n    test_accuracy = results['test_acc']\n\n    # \u30a8\u30dd\u30c3\u30af\u6570\u3092\u8a08\u7b97\n    epochs = range(len(results['train_loss']))\n\n    # \u30d7\u30ed\u30c3\u30c8\u3092\u8a2d\u5b9a\n    plt.figure(figsize=(15, 7))\n\n    # \u640d\u5931\u3092\u30d7\u30ed\u30c3\u30c8\n    plt.subplot(1, 2, 1)\n    plt.plot(epochs, loss, label='train_loss')\n    plt.plot(epochs, test_loss, label='test_loss')\n    plt.title('\u640d\u5931')\n    plt.xlabel('\u30a8\u30dd\u30c3\u30af')\n    plt.legend()\n\n    # \u7cbe\u5ea6\u3092\u30d7\u30ed\u30c3\u30c8\n    plt.subplot(1, 2, 2)\n    plt.plot(epochs, accuracy, label='train_accuracy')\n    plt.plot(epochs, test_accuracy, label='test_accuracy')\n    plt.title('\u7cbe\u5ea6')\n    plt.xlabel('\u30a8\u30dd\u30c3\u30af')\n    plt.legend();\n\nplot_loss_curves(model_0_results)\n</code></pre> <p></p> <p>\u89e3\u6790\uff1a\u7d50\u679c\u304c\u4e0d\u5b89\u5b9a\u3067\u3001\u30e2\u30c7\u30eb\u306e\u6027\u80fd\u306f\u826f\u304f\u3042\u308a\u307e\u305b\u3093\u3002\u3053\u308c\u306f\u5178\u578b\u7684\u306a\u30a2\u30f3\u30c0\u30fc\u30d5\u30a3\u30c3\u30c6\u30a3\u30f3\u30b0\u306e\u5146\u5019\u3067\u3059\u3002</p>","tags":["PyTorch","\u30ab\u30b9\u30bf\u30e0\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8","\u753b\u50cf\u5206\u985e","\u30c7\u30fc\u30bf\u62e1\u5f35","TinyVGG","\u4e2d\u7d1a\u8005\u5411\u3051","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","CNN","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/05_pytorch_custom_datasets/#8","title":"8. \u7406\u60f3\u7684\u306a\u640d\u5931\u66f2\u7dda\u3068\u306f","text":"<p>\u8a13\u7df4\u30fb\u691c\u8a3c\u640d\u5931\u66f2\u7dda\u306e\u89b3\u5bdf\u306f\u3001\u30e2\u30c7\u30eb\u306e\u30aa\u30fc\u30d0\u30fc\u30d5\u30a3\u30c3\u30c6\u30a3\u30f3\u30b0\u3092\u78ba\u8a8d\u3059\u308b\u512a\u308c\u305f\u65b9\u6cd5\u3067\u3059\u3002</p> <p></p> <p>\u91cd\u8981\u306a\u30dd\u30a4\u30f3\u30c8\uff1a - \u30a2\u30f3\u30c0\u30fc\u30d5\u30a3\u30c3\u30c6\u30a3\u30f3\u30b0\uff1a\u8a13\u7df4\u30fb\u691c\u8a3c\u640d\u5931\u304c\u671f\u5f85\u3088\u308a\u9ad8\u3044 - \u30aa\u30fc\u30d0\u30fc\u30d5\u30a3\u30c3\u30c6\u30a3\u30f3\u30b0\uff1a\u691c\u8a3c\u640d\u5931\u304c\u8a13\u7df4\u640d\u5931\u3088\u308a\u5927\u5e45\u306b\u9ad8\u3044 - \u7406\u60f3\u7684\uff1a\u8a13\u7df4\u30fb\u691c\u8a3c\u640d\u5931\u66f2\u7dda\u304c\u6642\u9593\u3068\u3068\u3082\u306b\u8fd1\u3065\u304f</p>","tags":["PyTorch","\u30ab\u30b9\u30bf\u30e0\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8","\u753b\u50cf\u5206\u985e","\u30c7\u30fc\u30bf\u62e1\u5f35","TinyVGG","\u4e2d\u7d1a\u8005\u5411\u3051","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","CNN","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/05_pytorch_custom_datasets/#81","title":"8.1 \u30aa\u30fc\u30d0\u30fc\u30d5\u30a3\u30c3\u30c6\u30a3\u30f3\u30b0\u3078\u306e\u5bfe\u51e6\u6cd5","text":"\u30aa\u30fc\u30d0\u30fc\u30d5\u30a3\u30c3\u30c6\u30a3\u30f3\u30b0\u9632\u6b62\u6cd5 \u8aac\u660e \u3088\u308a\u591a\u304f\u306e\u30c7\u30fc\u30bf\u3092\u53d6\u5f97 \u3088\u308a\u591a\u304f\u306e\u30c7\u30fc\u30bf\u306f\u3001\u30e2\u30c7\u30eb\u306b\u3088\u308a\u6c4e\u5316\u53ef\u80fd\u306a\u30d1\u30bf\u30fc\u30f3\u3092\u5b66\u7fd2\u3059\u308b\u6a5f\u4f1a\u3092\u63d0\u4f9b \u30e2\u30c7\u30eb\u306e\u7c21\u7d20\u5316 \u5c64\u6570\u3084\u96a0\u308c\u30e6\u30cb\u30c3\u30c8\u6570\u3092\u6e1b\u3089\u3059 \u30c7\u30fc\u30bf\u62e1\u5f35\u306e\u4f7f\u7528 \u8a13\u7df4\u30c7\u30fc\u30bf\u3092\u4eba\u5de5\u7684\u306b\u5909\u66f4\u3057\u3001\u5b66\u7fd2\u3092\u56f0\u96e3\u306b\u3059\u308b \u8ee2\u79fb\u5b66\u7fd2\u306e\u4f7f\u7528 \u4e8b\u524d\u8a13\u7df4\u3055\u308c\u305f\u30e2\u30c7\u30eb\u306e\u91cd\u307f\u3092\u6d3b\u7528 \u30c9\u30ed\u30c3\u30d7\u30a2\u30a6\u30c8\u5c64\u306e\u4f7f\u7528 \u30e9\u30f3\u30c0\u30e0\u306b\u63a5\u7d9a\u3092\u524a\u9664\u3057\u3066\u30e2\u30c7\u30eb\u3092\u7c21\u7d20\u5316 \u5b66\u7fd2\u7387\u6e1b\u8870\u306e\u4f7f\u7528 \u8a13\u7df4\u304c\u9032\u3080\u306b\u3064\u308c\u3066\u5b66\u7fd2\u7387\u3092\u5f90\u3005\u306b\u4e0b\u3052\u308b \u65e9\u671f\u505c\u6b62\u306e\u4f7f\u7528 \u30aa\u30fc\u30d0\u30fc\u30d5\u30a3\u30c3\u30c6\u30a3\u30f3\u30b0\u304c\u59cb\u307e\u308b\u524d\u306b\u8a13\u7df4\u3092\u505c\u6b62","tags":["PyTorch","\u30ab\u30b9\u30bf\u30e0\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8","\u753b\u50cf\u5206\u985e","\u30c7\u30fc\u30bf\u62e1\u5f35","TinyVGG","\u4e2d\u7d1a\u8005\u5411\u3051","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","CNN","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/05_pytorch_custom_datasets/#82","title":"8.2 \u30a2\u30f3\u30c0\u30fc\u30d5\u30a3\u30c3\u30c6\u30a3\u30f3\u30b0\u3078\u306e\u5bfe\u51e6\u6cd5","text":"\u30a2\u30f3\u30c0\u30fc\u30d5\u30a3\u30c3\u30c6\u30a3\u30f3\u30b0\u9632\u6b62\u6cd5 \u8aac\u660e \u5c64/\u30e6\u30cb\u30c3\u30c8\u3092\u30e2\u30c7\u30eb\u306b\u8ffd\u52a0 \u30e2\u30c7\u30eb\u306e\u4e88\u6e2c\u529b\u3092\u5897\u52a0 \u5b66\u7fd2\u7387\u3092\u8abf\u6574 \u5b66\u7fd2\u7387\u304c\u9ad8\u3059\u304e\u308b\u5834\u5408\u306f\u4e0b\u3052\u308b \u8ee2\u79fb\u5b66\u7fd2\u306e\u4f7f\u7528 \u4e8b\u524d\u8a13\u7df4\u3055\u308c\u305f\u30e2\u30c7\u30eb\u306e\u30d1\u30bf\u30fc\u30f3\u3092\u6d3b\u7528 \u3088\u308a\u9577\u3044\u6642\u9593\u8a13\u7df4 \u30e2\u30c7\u30eb\u306b\u3088\u308a\u591a\u304f\u306e\u5b66\u7fd2\u6642\u9593\u3092\u63d0\u4f9b \u6b63\u5247\u5316\u3092\u6e1b\u3089\u3059 \u30aa\u30fc\u30d0\u30fc\u30d5\u30a3\u30c3\u30c6\u30a3\u30f3\u30b0\u9632\u6b62\u3092\u7de9\u3081\u308b","tags":["PyTorch","\u30ab\u30b9\u30bf\u30e0\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8","\u753b\u50cf\u5206\u985e","\u30c7\u30fc\u30bf\u62e1\u5f35","TinyVGG","\u4e2d\u7d1a\u8005\u5411\u3051","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","CNN","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/05_pytorch_custom_datasets/#9-1tinyvgg","title":"9. \u30e2\u30c7\u30eb1\uff1a\u30c7\u30fc\u30bf\u62e1\u5f35\u3042\u308a\u306eTinyVGG","text":"<p>\u30c7\u30fc\u30bf\u62e1\u5f35\u3092\u4f7f\u7528\u3057\u3066\u6027\u80fd\u6539\u5584\u3092\u8a66\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002</p>","tags":["PyTorch","\u30ab\u30b9\u30bf\u30e0\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8","\u753b\u50cf\u5206\u985e","\u30c7\u30fc\u30bf\u62e1\u5f35","TinyVGG","\u4e2d\u7d1a\u8005\u5411\u3051","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","CNN","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/05_pytorch_custom_datasets/#91","title":"9.1 \u30c7\u30fc\u30bf\u62e1\u5f35\u4ed8\u304d\u5909\u63db\u306e\u4f5c\u6210","text":"<pre><code># TrivialAugment\u3067\u8a13\u7df4\u5909\u63db\u3092\u4f5c\u6210\ntrain_transform_trivial_augment = transforms.Compose([\n    transforms.Resize((64, 64)),\n    transforms.TrivialAugmentWide(num_magnitude_bins=31), # \u5f37\u5ea6\u30ec\u30d9\u30eb\n    transforms.ToTensor() \n])\n\n# \u30c6\u30b9\u30c8\u5909\u63db\u3092\u4f5c\u6210\uff08\u30c7\u30fc\u30bf\u62e1\u5f35\u306a\u3057\uff09\ntest_transform = transforms.Compose([\n    transforms.Resize((64, 64)),\n    transforms.ToTensor()\n])\n</code></pre>","tags":["PyTorch","\u30ab\u30b9\u30bf\u30e0\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8","\u753b\u50cf\u5206\u985e","\u30c7\u30fc\u30bf\u62e1\u5f35","TinyVGG","\u4e2d\u7d1a\u8005\u5411\u3051","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","CNN","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/05_pytorch_custom_datasets/#92-datasetdataloader","title":"9.2 \u8a13\u7df4\u30fb\u30c6\u30b9\u30c8<code>Dataset</code>\u3068<code>DataLoader</code>\u306e\u4f5c\u6210","text":"<pre><code># \u753b\u50cf\u30d5\u30a9\u30eb\u30c0\u3092Dataset\u306b\u5909\u63db\ntrain_data_augmented = datasets.ImageFolder(train_dir, transform=train_transform_trivial_augment)\ntest_data_simple = datasets.ImageFolder(test_dir, transform=test_transform)\n\n# Dataset\u3092DataLoader\u306b\u5909\u63db\nimport os\nBATCH_SIZE = 32\nNUM_WORKERS = 0\n\ntorch.manual_seed(42)\ntrain_dataloader_augmented = DataLoader(train_data_augmented, \n                                        batch_size=BATCH_SIZE, \n                                        shuffle=True,\n                                        num_workers=NUM_WORKERS)\n\ntest_dataloader_simple = DataLoader(test_data_simple, \n                                    batch_size=BATCH_SIZE, \n                                    shuffle=False, \n                                    num_workers=NUM_WORKERS)\n</code></pre>","tags":["PyTorch","\u30ab\u30b9\u30bf\u30e0\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8","\u753b\u50cf\u5206\u985e","\u30c7\u30fc\u30bf\u62e1\u5f35","TinyVGG","\u4e2d\u7d1a\u8005\u5411\u3051","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","CNN","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/05_pytorch_custom_datasets/#93-1","title":"9.3 \u30e2\u30c7\u30eb1\u306e\u69cb\u7bc9\u3068\u8a13\u7df4","text":"<pre><code># model_1\u3092\u4f5c\u6210\u3057\u3001\u5bfe\u8c61\u30c7\u30d0\u30a4\u30b9\u306b\u9001\u4fe1\ntorch.manual_seed(42)\nmodel_1 = TinyVGG(\n    input_shape=3,\n    hidden_units=10,\n    output_shape=len(train_data_augmented.classes)).to(device)\n\n# \u30e9\u30f3\u30c0\u30e0\u30b7\u30fc\u30c9\u3092\u8a2d\u5b9a\ntorch.manual_seed(42) \ntorch.cuda.manual_seed(42)\n\n# \u30a8\u30dd\u30c3\u30af\u6570\u3092\u8a2d\u5b9a\nNUM_EPOCHS = 5\n\n# \u640d\u5931\u95a2\u6570\u3068\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u30fc\u3092\u8a2d\u5b9a\nloss_fn = nn.CrossEntropyLoss()\noptimizer = torch.optim.Adam(params=model_1.parameters(), lr=0.001)\n\n# \u30bf\u30a4\u30de\u30fc\u3092\u958b\u59cb\nstart_time = timer()\n\n# model_1\u3092\u8a13\u7df4\nmodel_1_results = train(model=model_1, \n                        train_dataloader=train_dataloader_augmented,\n                        test_dataloader=test_dataloader_simple,\n                        optimizer=optimizer,\n                        loss_fn=loss_fn, \n                        epochs=NUM_EPOCHS)\n\n# \u30bf\u30a4\u30de\u30fc\u3092\u7d42\u4e86\u3057\u3001\u6240\u8981\u6642\u9593\u3092\u51fa\u529b\nend_time = timer()\nprint(f\"\u7dcf\u8a13\u7df4\u6642\u9593: {end_time-start_time:.3f} \u79d2\")\n</code></pre> <p>\u51fa\u529b\u7d50\u679c\uff1a <pre><code>\u30a8\u30dd\u30c3\u30af: 1 | train_loss: 1.1067 | train_acc: 0.2422 | test_loss: 1.1080 | test_acc: 0.2604\n\u30a8\u30dd\u30c3\u30af: 2 | train_loss: 1.0755 | train_acc: 0.4258 | test_loss: 1.1510 | test_acc: 0.2604\n\u30a8\u30dd\u30c3\u30af: 3 | train_loss: 1.1447 | train_acc: 0.3047 | test_loss: 1.1637 | test_acc: 0.2604\n\u30a8\u30dd\u30c3\u30af: 4 | train_loss: 1.0901 | train_acc: 0.4258 | test_loss: 1.1019 | test_acc: 0.2604\n\u30a8\u30dd\u30c3\u30af: 5 | train_loss: 1.1028 | train_acc: 0.3047 | test_loss: 1.0948 | test_acc: 0.2604\n\u7dcf\u8a13\u7df4\u6642\u9593: 3.256 \u79d2\n</code></pre></p>","tags":["PyTorch","\u30ab\u30b9\u30bf\u30e0\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8","\u753b\u50cf\u5206\u985e","\u30c7\u30fc\u30bf\u62e1\u5f35","TinyVGG","\u4e2d\u7d1a\u8005\u5411\u3051","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","CNN","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/05_pytorch_custom_datasets/#94-1","title":"9.4 \u30e2\u30c7\u30eb1\u306e\u640d\u5931\u66f2\u7dda\u3092\u30d7\u30ed\u30c3\u30c8","text":"<pre><code>plot_loss_curves(model_1_results)\n</code></pre> <p>\u89e3\u6790\uff1a\u30c7\u30fc\u30bf\u62e1\u5f35\u3092\u4f7f\u7528\u3057\u3066\u3082\u3001\u6027\u80fd\u306f\u5927\u5e45\u306b\u6539\u5584\u3055\u308c\u307e\u305b\u3093\u3067\u3057\u305f\u3002\u3053\u308c\u306f\u3001\u30e2\u30c7\u30eb\u304c\u307e\u3060\u30a2\u30f3\u30c0\u30fc\u30d5\u30a3\u30c3\u30c6\u30a3\u30f3\u30b0\u3057\u3066\u3044\u308b\u3053\u3068\u3092\u793a\u3057\u3066\u3044\u307e\u3059\u3002</p>","tags":["PyTorch","\u30ab\u30b9\u30bf\u30e0\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8","\u753b\u50cf\u5206\u985e","\u30c7\u30fc\u30bf\u62e1\u5f35","TinyVGG","\u4e2d\u7d1a\u8005\u5411\u3051","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","CNN","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/05_pytorch_custom_datasets/#10","title":"10. \u30e2\u30c7\u30eb\u7d50\u679c\u306e\u6bd4\u8f03","text":"<pre><code>import pandas as pd\nmodel_0_df = pd.DataFrame(model_0_results)\nmodel_1_df = pd.DataFrame(model_1_results)\n\n# \u30e2\u30c7\u30eb\u6bd4\u8f03\u30d7\u30ed\u30c3\u30c8\nplt.figure(figsize=(15, 10))\n\n# \u30a8\u30dd\u30c3\u30af\u6570\u3092\u53d6\u5f97\nepochs = range(len(model_0_df))\n\n# \u8a13\u7df4\u640d\u5931\u3092\u30d7\u30ed\u30c3\u30c8\nplt.subplot(2, 2, 1)\nplt.plot(epochs, model_0_df[\"train_loss\"], label=\"\u30e2\u30c7\u30eb 0\")\nplt.plot(epochs, model_1_df[\"train_loss\"], label=\"\u30e2\u30c7\u30eb 1\")\nplt.title(\"\u8a13\u7df4\u640d\u5931\")\nplt.xlabel(\"\u30a8\u30dd\u30c3\u30af\")\nplt.legend()\n\n# \u30c6\u30b9\u30c8\u640d\u5931\u3092\u30d7\u30ed\u30c3\u30c8\nplt.subplot(2, 2, 2)\nplt.plot(epochs, model_0_df[\"test_loss\"], label=\"\u30e2\u30c7\u30eb 0\")\nplt.plot(epochs, model_1_df[\"test_loss\"], label=\"\u30e2\u30c7\u30eb 1\")\nplt.title(\"\u30c6\u30b9\u30c8\u640d\u5931\")\nplt.xlabel(\"\u30a8\u30dd\u30c3\u30af\")\nplt.legend()\n\n# \u8a13\u7df4\u7cbe\u5ea6\u3092\u30d7\u30ed\u30c3\u30c8\nplt.subplot(2, 2, 3)\nplt.plot(epochs, model_0_df[\"train_acc\"], label=\"\u30e2\u30c7\u30eb 0\")\nplt.plot(epochs, model_1_df[\"train_acc\"], label=\"\u30e2\u30c7\u30eb 1\")\nplt.title(\"\u8a13\u7df4\u7cbe\u5ea6\")\nplt.xlabel(\"\u30a8\u30dd\u30c3\u30af\")\nplt.legend()\n\n# \u30c6\u30b9\u30c8\u7cbe\u5ea6\u3092\u30d7\u30ed\u30c3\u30c8\nplt.subplot(2, 2, 4)\nplt.plot(epochs, model_0_df[\"test_acc\"], label=\"\u30e2\u30c7\u30eb 0\")\nplt.plot(epochs, model_1_df[\"test_acc\"], label=\"\u30e2\u30c7\u30eb 1\")\nplt.title(\"\u30c6\u30b9\u30c8\u7cbe\u5ea6\")\nplt.xlabel(\"\u30a8\u30dd\u30c3\u30af\")\nplt.legend();\n</code></pre> <p>\u89e3\u6790\uff1a\u4e21\u30e2\u30c7\u30eb\u3068\u3082\u540c\u69d8\u306b\u4f4e\u3044\u6027\u80fd\u3092\u793a\u3057\u3001\u4e0d\u5b89\u5b9a\u306a\u7d50\u679c\uff08\u30e1\u30c8\u30ea\u30af\u30b9\u304c\u6025\u6fc0\u306b\u4e0a\u4e0b\uff09\u3092\u793a\u3057\u3066\u3044\u307e\u3059\u3002</p>","tags":["PyTorch","\u30ab\u30b9\u30bf\u30e0\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8","\u753b\u50cf\u5206\u985e","\u30c7\u30fc\u30bf\u62e1\u5f35","TinyVGG","\u4e2d\u7d1a\u8005\u5411\u3051","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","CNN","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/05_pytorch_custom_datasets/#11","title":"11. \u30ab\u30b9\u30bf\u30e0\u753b\u50cf\u3067\u306e\u4e88\u6e2c","text":"<p>\u8a13\u7df4\u3055\u308c\u305f\u30e2\u30c7\u30eb\u3092\u72ec\u81ea\u306e\u753b\u50cf\u3067\u8a66\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002</p>","tags":["PyTorch","\u30ab\u30b9\u30bf\u30e0\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8","\u753b\u50cf\u5206\u985e","\u30c7\u30fc\u30bf\u62e1\u5f35","TinyVGG","\u4e2d\u7d1a\u8005\u5411\u3051","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","CNN","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/05_pytorch_custom_datasets/#111-pytorch","title":"11.1 PyTorch\u306b\u3088\u308b\u30ab\u30b9\u30bf\u30e0\u753b\u50cf\u306e\u8aad\u307f\u8fbc\u307f","text":"<pre><code># \u30ab\u30b9\u30bf\u30e0\u753b\u50cf\u30d1\u30b9\u3092\u8a2d\u5b9a\ncustom_image_path = data_path / \"sushi.jpg\"\n\nimport torchvision\n\n# \u30ab\u30b9\u30bf\u30e0\u753b\u50cf\u3092\u8aad\u307f\u8fbc\u307f\ncustom_image_uint8 = torchvision.io.read_image(str(custom_image_path))\n\nprint(f\"\u30ab\u30b9\u30bf\u30e0\u753b\u50cf\u5f62\u72b6: {custom_image_uint8.shape}\\n\")\nprint(f\"\u30ab\u30b9\u30bf\u30e0\u753b\u50cf\u30c7\u30fc\u30bf\u578b: {custom_image_uint8.dtype}\")\n</code></pre> <p>\u51fa\u529b\u7d50\u679c\uff1a <pre><code>\u30ab\u30b9\u30bf\u30e0\u753b\u50cf\u5f62\u72b6: torch.Size([3, 4032, 3024])\n\u30ab\u30b9\u30bf\u30e0\u753b\u50cf\u30c7\u30fc\u30bf\u578b: torch.uint8\n</code></pre></p> <p>\u91cd\u8981\uff1a\u30e2\u30c7\u30eb\u306f<code>torch.float32</code>\u3067<code>[0, 1]</code>\u306e\u5024\u3092\u671f\u5f85\u3057\u307e\u3059\u304c\u3001\u753b\u50cf\u306f<code>torch.uint8</code>\u3067<code>[0, 255]</code>\u306e\u5024\u3067\u3059\u3002\u5909\u63db\u304c\u5fc5\u8981\u3067\u3059\u3002</p> <pre><code># \u30ab\u30b9\u30bf\u30e0\u753b\u50cf\u3092\u8aad\u307f\u8fbc\u307f\u3001\u30c6\u30f3\u30bd\u30eb\u5024\u3092float32\u306b\u5909\u63db\ncustom_image = torchvision.io.read_image(str(custom_image_path)).type(torch.float32)\n\n# \u753b\u50cf\u30d4\u30af\u30bb\u30eb\u5024\u3092255\u3067\u5272\u3063\u3066[0, 1]\u306e\u7bc4\u56f2\u306b\u3059\u308b\ncustom_image = custom_image / 255. \n\nprint(f\"\u30ab\u30b9\u30bf\u30e0\u753b\u50cf\u5f62\u72b6: {custom_image.shape}\\n\")\nprint(f\"\u30ab\u30b9\u30bf\u30e0\u753b\u50cf\u30c7\u30fc\u30bf\u578b: {custom_image.dtype}\")\n</code></pre> <p>\u51fa\u529b\u7d50\u679c\uff1a <pre><code>\u30ab\u30b9\u30bf\u30e0\u753b\u50cf\u5f62\u72b6: torch.Size([3, 4032, 3024])\n\u30ab\u30b9\u30bf\u30e0\u753b\u50cf\u30c7\u30fc\u30bf\u578b: torch.float32\n</code></pre></p>","tags":["PyTorch","\u30ab\u30b9\u30bf\u30e0\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8","\u753b\u50cf\u5206\u985e","\u30c7\u30fc\u30bf\u62e1\u5f35","TinyVGG","\u4e2d\u7d1a\u8005\u5411\u3051","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","CNN","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/05_pytorch_custom_datasets/#112-pytorch","title":"11.2 \u8a13\u7df4\u6e08\u307fPyTorch\u30e2\u30c7\u30eb\u3067\u306e\u30ab\u30b9\u30bf\u30e0\u753b\u50cf\u4e88\u6e2c","text":"<p>\u753b\u50cf\u3092\u8868\u793a\u3057\u3066\u78ba\u8a8d\u3057\u307e\u3057\u3087\u3046\uff1a</p> <pre><code># \u30ab\u30b9\u30bf\u30e0\u753b\u50cf\u3092\u30d7\u30ed\u30c3\u30c8\nplt.imshow(custom_image.permute(1, 2, 0)) # CHW -&gt; HWC\u306b\u6b21\u5143\u3092\u5909\u66f4\nplt.title(f\"\u753b\u50cf\u5f62\u72b6: {custom_image.shape}\")\nplt.axis(False);\n</code></pre> <p></p> <p>\u753b\u50cf\u306e\u30b5\u30a4\u30ba\u3092\u8a13\u7df4\u30c7\u30fc\u30bf\u3068\u540c\u3058\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff1a</p> <pre><code># \u753b\u50cf\u3092\u30ea\u30b5\u30a4\u30ba\u3059\u308b\u5909\u63db\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u3092\u4f5c\u6210\ncustom_image_transform = transforms.Compose([\n    transforms.Resize((64, 64)),\n])\n\n# \u5bfe\u8c61\u753b\u50cf\u3092\u5909\u63db\ncustom_image_transformed = custom_image_transform(custom_image)\n\nprint(f\"\u30aa\u30ea\u30b8\u30ca\u30eb\u5f62\u72b6: {custom_image.shape}\")\nprint(f\"\u65b0\u3057\u3044\u5f62\u72b6: {custom_image_transformed.shape}\")\n</code></pre> <p>\u51fa\u529b\u7d50\u679c\uff1a <pre><code>\u30aa\u30ea\u30b8\u30ca\u30eb\u5f62\u72b6: torch.Size([3, 4032, 3024])\n\u65b0\u3057\u3044\u5f62\u72b6: torch.Size([3, 64, 64])\n</code></pre></p> <p>\u6700\u7d42\u7684\u306b\u4e88\u6e2c\u3092\u5b9f\u884c\uff1a</p> <pre><code>model_1.eval()\nwith torch.inference_mode():\n    # \u753b\u50cf\u306b\u8ffd\u52a0\u306e\u6b21\u5143\u3092\u8ffd\u52a0\n    custom_image_transformed_with_batch_size = custom_image_transformed.unsqueeze(dim=0)\n\n    # \u7570\u306a\u308b\u5f62\u72b6\u3092\u51fa\u529b\n    print(f\"\u5909\u63db\u3055\u308c\u305f\u30ab\u30b9\u30bf\u30e0\u753b\u50cf\u5f62\u72b6: {custom_image_transformed.shape}\")\n    print(f\"unsqueeze\u3055\u308c\u305f\u30ab\u30b9\u30bf\u30e0\u753b\u50cf\u5f62\u72b6: {custom_image_transformed_with_batch_size.shape}\")\n\n    # \u8ffd\u52a0\u6b21\u5143\u3092\u6301\u3064\u753b\u50cf\u3067\u4e88\u6e2c\u3092\u5b9f\u884c\n    custom_image_pred = model_1(custom_image_transformed.unsqueeze(dim=0).to(device))\n</code></pre> <p>\u51fa\u529b\u7d50\u679c\uff1a <pre><code>\u5909\u63db\u3055\u308c\u305f\u30ab\u30b9\u30bf\u30e0\u753b\u50cf\u5f62\u72b6: torch.Size([3, 64, 64])\nunsqueeze\u3055\u308c\u305f\u30ab\u30b9\u30bf\u30e0\u753b\u50cf\u5f62\u72b6: torch.Size([1, 3, 64, 64])\n</code></pre></p> <p>\u91cd\u8981\u306a\u30dd\u30a4\u30f3\u30c8\uff1a\u4ee5\u4e0b\u306e3\u3064\u306f\u3001\u6df1\u5c64\u5b66\u7fd2\u3068PyTorch\u3067\u6700\u3082\u4e00\u822c\u7684\u306a\u554f\u984c\u3067\u3059\uff1a</p> <ol> <li>\u9593\u9055\u3063\u305f\u30c7\u30fc\u30bf\u578b - \u30e2\u30c7\u30eb\u306f<code>torch.float32</code>\u3092\u671f\u5f85\u3059\u308b\u304c\u3001\u5143\u306e\u753b\u50cf\u306f<code>uint8</code></li> <li>\u9593\u9055\u3063\u305f\u30c7\u30d0\u30a4\u30b9 - \u30e2\u30c7\u30eb\u306f\u5bfe\u8c61\u30c7\u30d0\u30a4\u30b9\uff08GPU\uff09\u306b\u3042\u308b\u304c\u3001\u30c7\u30fc\u30bf\u304c\u307e\u3060\u79fb\u52d5\u3055\u308c\u3066\u3044\u306a\u3044</li> <li>\u9593\u9055\u3063\u305f\u5f62\u72b6 - \u30e2\u30c7\u30eb\u306f<code>[N, C, H, W]</code>\u306e\u5f62\u72b6\u3092\u671f\u5f85\u3059\u308b\u304c\u3001\u30ab\u30b9\u30bf\u30e0\u753b\u50cf\u306f<code>[C, H, W]</code></li> </ol> <p>\u4e88\u6e2c\u7d50\u679c\u3092\u78ba\u8a8d\u3057\u307e\u3057\u3087\u3046\uff1a</p> <pre><code># \u4e88\u6e2c\u30ed\u30b8\u30c3\u30c8\u3092\u51fa\u529b\nprint(f\"\u4e88\u6e2c\u30ed\u30b8\u30c3\u30c8: {custom_image_pred}\")\n\n# \u30ed\u30b8\u30c3\u30c8 \u2192 \u4e88\u6e2c\u78ba\u7387\u306b\u5909\u63db\uff08\u591a\u30af\u30e9\u30b9\u5206\u985e\u7528\u306btorch.softmax()\u3092\u4f7f\u7528\uff09\ncustom_image_pred_probs = torch.softmax(custom_image_pred, dim=1)\nprint(f\"\u4e88\u6e2c\u78ba\u7387: {custom_image_pred_probs}\")\n\n# \u4e88\u6e2c\u78ba\u7387 \u2192 \u4e88\u6e2c\u30e9\u30d9\u30eb\u306b\u5909\u63db\ncustom_image_pred_label = torch.argmax(custom_image_pred_probs, dim=1)\nprint(f\"\u4e88\u6e2c\u30e9\u30d9\u30eb: {custom_image_pred_label}\")\n</code></pre> <p>\u51fa\u529b\u7d50\u679c\uff1a <pre><code>\u4e88\u6e2c\u30ed\u30b8\u30c3\u30c8: tensor([[ 0.0928, -0.1096, -0.0082]], device='mps:0')\n\u4e88\u6e2c\u78ba\u7387: tensor([[0.3676, 0.3002, 0.3322]], device='mps:0')\n\u4e88\u6e2c\u30e9\u30d9\u30eb: tensor([0], device='mps:0')\n</code></pre></p> <pre><code># \u4e88\u6e2c\u3055\u308c\u305f\u30e9\u30d9\u30eb\u3092\u898b\u3064\u3051\u308b\ncustom_image_pred_class = class_names[custom_image_pred_label.cpu()] # \u4e88\u6e2c\u30e9\u30d9\u30eb\u3092CPU\u306b\u3001\u305d\u3046\u3067\u306a\u3044\u3068\u30a8\u30e9\u30fc\ncustom_image_pred_class\n</code></pre> <p>\u51fa\u529b\u7d50\u679c\uff1a <pre><code>'pizza'\n</code></pre></p> <p>\u89e3\u6790\uff1a\u30e2\u30c7\u30eb\u306f\u300cpizza\u300d\u3068\u4e88\u6e2c\u3057\u307e\u3057\u305f\u304c\u3001\u4e88\u6e2c\u78ba\u7387\u304c\u307b\u307c\u540c\u7b49\uff08\u7d0433%\u305a\u3064\uff09\u3067\u3042\u308b\u3053\u3068\u304b\u3089\u3001\u30e2\u30c7\u30eb\u304c\u5b9f\u969b\u306b\u306f\u63a8\u6e2c\u3057\u3066\u3044\u308b\u3060\u3051\u3067\u3042\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002</p>","tags":["PyTorch","\u30ab\u30b9\u30bf\u30e0\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8","\u753b\u50cf\u5206\u985e","\u30c7\u30fc\u30bf\u62e1\u5f35","TinyVGG","\u4e2d\u7d1a\u8005\u5411\u3051","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","CNN","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/05_pytorch_custom_datasets/#113","title":"11.3 \u30ab\u30b9\u30bf\u30e0\u753b\u50cf\u4e88\u6e2c\u306e\u305f\u3081\u306e\u95a2\u6570\u4f5c\u6210","text":"<p>\u6bce\u56de\u540c\u3058\u624b\u9806\u3092\u7e70\u308a\u8fd4\u3059\u306e\u306f\u9762\u5012\u306a\u306e\u3067\u3001\u518d\u5229\u7528\u53ef\u80fd\u306a\u95a2\u6570\u3092\u4f5c\u6210\u3057\u307e\u3057\u3087\u3046\uff1a</p> <pre><code>def pred_and_plot_image(model: torch.nn.Module, \n                        image_path: str, \n                        class_names: List[str] = None, \n                        transform=None,\n                        device: torch.device = device):\n    \"\"\"\u5bfe\u8c61\u753b\u50cf\u3067\u4e88\u6e2c\u3092\u884c\u3044\u3001\u753b\u50cf\u3068\u4e88\u6e2c\u7d50\u679c\u3092\u30d7\u30ed\u30c3\u30c8\u3057\u307e\u3059\u3002\"\"\"\n\n    # 1. \u753b\u50cf\u3092\u8aad\u307f\u8fbc\u307f\u3001\u30c6\u30f3\u30bd\u30eb\u5024\u3092float32\u306b\u5909\u63db\n    target_image = torchvision.io.read_image(str(image_path)).type(torch.float32)\n\n    # 2. \u753b\u50cf\u30d4\u30af\u30bb\u30eb\u5024\u3092255\u3067\u5272\u3063\u3066[0, 1]\u306e\u7bc4\u56f2\u306b\u3059\u308b\n    target_image = target_image / 255. \n\n    # 3. \u5fc5\u8981\u306b\u5fdc\u3058\u3066\u5909\u63db\n    if transform:\n        target_image = transform(target_image)\n\n    # 4. \u30e2\u30c7\u30eb\u304c\u5bfe\u8c61\u30c7\u30d0\u30a4\u30b9\u306b\u3042\u308b\u3053\u3068\u3092\u78ba\u8a8d\n    model.to(device)\n\n    # 5. \u30e2\u30c7\u30eb\u8a55\u4fa1\u30e2\u30fc\u30c9\u3068\u63a8\u8ad6\u30e2\u30fc\u30c9\u3092\u30aa\u30f3\n    model.eval()\n    with torch.inference_mode():\n        # \u753b\u50cf\u306b\u8ffd\u52a0\u306e\u6b21\u5143\u3092\u8ffd\u52a0\n        target_image = target_image.unsqueeze(dim=0)\n\n        # \u8ffd\u52a0\u6b21\u5143\u3092\u6301\u3064\u753b\u50cf\u3067\u4e88\u6e2c\u3092\u5b9f\u884c\u3057\u3001\u5bfe\u8c61\u30c7\u30d0\u30a4\u30b9\u306b\u9001\u4fe1\n        target_image_pred = model(target_image.to(device))\n\n    # 6. \u30ed\u30b8\u30c3\u30c8 \u2192 \u4e88\u6e2c\u78ba\u7387\u306b\u5909\u63db\uff08\u591a\u30af\u30e9\u30b9\u5206\u985e\u7528\u306btorch.softmax()\u3092\u4f7f\u7528\uff09\n    target_image_pred_probs = torch.softmax(target_image_pred, dim=1)\n\n    # 7. \u4e88\u6e2c\u78ba\u7387 \u2192 \u4e88\u6e2c\u30e9\u30d9\u30eb\u306b\u5909\u63db\n    target_image_pred_label = torch.argmax(target_image_pred_probs, dim=1)\n\n    # 8. \u4e88\u6e2c\u3068\u4e88\u6e2c\u78ba\u7387\u3068\u5171\u306b\u753b\u50cf\u3092\u30d7\u30ed\u30c3\u30c8\n    plt.imshow(target_image.squeeze().permute(1, 2, 0)) # matplotlib\u306b\u9069\u3057\u305f \u30b5\u30a4\u30ba\u306b\u3059\u308b\n    if class_names:\n        title = f\"\u4e88\u6e2c: {class_names[target_image_pred_label.cpu()]} | \u78ba\u7387: {target_image_pred_probs.max().cpu():.3f}\"\n    else: \n        title = f\"\u4e88\u6e2c: {target_image_pred_label} | \u78ba\u7387: {target_image_pred_probs.max().cpu():.3f}\"\n    plt.title(title)\n    plt.axis(False);\n</code></pre> <p>\u95a2\u6570\u3092\u30c6\u30b9\u30c8\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff1a</p> <p><pre><code># \u30ab\u30b9\u30bf\u30e0\u753b\u50cf\u3067\u4e88\u6e2c\npred_and_plot_image(model=model_1,\n                    image_path=custom_image_path,\n                    class_names=class_names,\n                    transform=custom_image_transform,\n                    device=device)\n</code></pre> \u4e88\u6e2c\u7d50\u679c\u306f\u4e0d\u6b63\u89e3\u3067\u3059\u306d\u3002</p> <p></p>","tags":["PyTorch","\u30ab\u30b9\u30bf\u30e0\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8","\u753b\u50cf\u5206\u985e","\u30c7\u30fc\u30bf\u62e1\u5f35","TinyVGG","\u4e2d\u7d1a\u8005\u5411\u3051","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","CNN","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/05_pytorch_custom_datasets/#_5","title":"\u307e\u3068\u3081","text":"<p>\u3053\u306e\u30ce\u30fc\u30c8\u30d6\u30c3\u30af\u3067\u306f\u4ee5\u4e0b\u3092\u5b66\u7fd2\u3057\u307e\u3057\u305f\uff1a</p>","tags":["PyTorch","\u30ab\u30b9\u30bf\u30e0\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8","\u753b\u50cf\u5206\u985e","\u30c7\u30fc\u30bf\u62e1\u5f35","TinyVGG","\u4e2d\u7d1a\u8005\u5411\u3051","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","CNN","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/05_pytorch_custom_datasets/#_6","title":"\u4e3b\u8981\u306a\u5b66\u7fd2\u30dd\u30a4\u30f3\u30c8","text":"<ol> <li>\u30ab\u30b9\u30bf\u30e0\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u4f5c\u6210</li> <li><code>torchvision.datasets.ImageFolder</code>\u306e\u4f7f\u7528\u65b9\u6cd5</li> <li> <p><code>torch.utils.data.Dataset</code>\u306e\u30b5\u30d6\u30af\u30e9\u30b9\u5316\u306b\u3088\u308b\u30ab\u30b9\u30bf\u30e0\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u4f5c\u6210</p> </li> <li> <p>\u30c7\u30fc\u30bf\u5909\u63db\u3068\u30c7\u30fc\u30bf\u62e1\u5f35</p> </li> <li><code>torchvision.transforms</code>\u306b\u3088\u308b\u753b\u50cf\u524d\u51e6\u7406</li> <li> <p><code>TrivialAugmentWide</code>\u306b\u3088\u308b\u30c7\u30fc\u30bf\u62e1\u5f35\u306e\u52b9\u679c</p> </li> <li> <p>TinyVGG\u30e2\u30c7\u30eb\u306e\u5b9f\u88c5</p> </li> <li>\u7573\u307f\u8fbc\u307f\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u69cb\u7bc9</li> <li> <p>\u8a13\u7df4\u30fb\u8a55\u4fa1\u30eb\u30fc\u30d7\u306e\u5b9f\u88c5</p> </li> <li> <p>\u30e2\u30c7\u30eb\u8a55\u4fa1\u3068\u6539\u5584</p> </li> <li>\u640d\u5931\u66f2\u7dda\u306b\u3088\u308b\u6027\u80fd\u5206\u6790</li> <li> <p>\u30aa\u30fc\u30d0\u30fc\u30d5\u30a3\u30c3\u30c6\u30a3\u30f3\u30b0/\u30a2\u30f3\u30c0\u30fc\u30d5\u30a3\u30c3\u30c6\u30a3\u30f3\u30b0\u306e\u8a3a\u65ad</p> </li> <li> <p>\u5b9f\u8df5\u7684\u306a\u4e88\u6e2c</p> </li> <li>\u30ab\u30b9\u30bf\u30e0\u753b\u50cf\u3067\u306e\u4e88\u6e2c\u5b9f\u884c</li> <li>\u30c7\u30fc\u30bf\u578b\u30fb\u30c7\u30d0\u30a4\u30b9\u30fb\u5f62\u72b6\u306e\u91cd\u8981\u6027</li> </ol>","tags":["PyTorch","\u30ab\u30b9\u30bf\u30e0\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8","\u753b\u50cf\u5206\u985e","\u30c7\u30fc\u30bf\u62e1\u5f35","TinyVGG","\u4e2d\u7d1a\u8005\u5411\u3051","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","CNN","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/05_pytorch_custom_datasets/#_7","title":"\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u6539\u5584\u306e\u305f\u3081\u306e\u63d0\u6848","text":"<p>\u73fe\u5728\u306e\u30e2\u30c7\u30eb\u306f\u660e\u3089\u304b\u306b\u30a2\u30f3\u30c0\u30fc\u30d5\u30a3\u30c3\u30c6\u30a3\u30f3\u30b0\u3057\u3066\u3044\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u6539\u5584\u7b56\u3092\u691c\u8a0e\u3067\u304d\u307e\u3059\uff1a</p> <ol> <li>\u30e2\u30c7\u30eb\u5bb9\u91cf\u306e\u5897\u52a0\uff1a\u96a0\u308c\u30e6\u30cb\u30c3\u30c8\u6570\u3084\u5c64\u6570\u3092\u5897\u3084\u3059</li> <li>\u8a13\u7df4\u6642\u9593\u306e\u5ef6\u9577\uff1a\u3088\u308a\u591a\u304f\u306e\u30a8\u30dd\u30c3\u30af\u3067\u8a13\u7df4</li> <li>\u5b66\u7fd2\u7387\u306e\u8abf\u6574\uff1a\u7570\u306a\u308b\u5b66\u7fd2\u7387\u3092\u8a66\u3059</li> <li>\u8ee2\u79fb\u5b66\u7fd2\u306e\u4f7f\u7528\uff1a\u4e8b\u524d\u8a13\u7df4\u3055\u308c\u305f\u30e2\u30c7\u30eb\u3092\u6d3b\u7528</li> <li>\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u62e1\u5f35\uff1a\u3088\u308a\u591a\u304f\u306e\u8a13\u7df4\u30c7\u30fc\u30bf\u3092\u53ce\u96c6</li> </ol>","tags":["PyTorch","\u30ab\u30b9\u30bf\u30e0\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8","\u753b\u50cf\u5206\u985e","\u30c7\u30fc\u30bf\u62e1\u5f35","TinyVGG","\u4e2d\u7d1a\u8005\u5411\u3051","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","CNN","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/05_pytorch_custom_datasets/#_8","title":"\u91cd\u8981\u306a\u6559\u8a13","text":"<ul> <li>\u5c0f\u3055\u304f\u59cb\u3081\u308b\uff1a\u30b7\u30f3\u30d7\u30eb\u306a\u30e2\u30c7\u30eb\u304b\u3089\u958b\u59cb\u3057\u3001\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u8907\u96d1\u5316</li> <li>\u53ef\u8996\u5316\u306e\u91cd\u8981\u6027\uff1a\u30c7\u30fc\u30bf\u3068\u7d50\u679c\u306e\u53ef\u8996\u5316\u306f\u7406\u89e3\u306b\u4e0d\u53ef\u6b20</li> <li>\u5b9f\u9a13\u306e\u8a18\u9332\uff1a\u7570\u306a\u308b\u8a2d\u5b9a\u3092\u8a66\u3057\u3001\u7d50\u679c\u3092\u6bd4\u8f03</li> <li>\u30a8\u30e9\u30fc\u306e\u7406\u89e3\uff1a\u30c7\u30fc\u30bf\u578b\u3001\u30c7\u30d0\u30a4\u30b9\u3001\u5f62\u72b6\u30a8\u30e9\u30fc\u306f\u4e00\u822c\u7684</li> </ul> <p>\u3053\u306e\u30ce\u30fc\u30c8\u30d6\u30c3\u30af\u306f\u3001PyTorch\u3067\u30ab\u30b9\u30bf\u30e0\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u6271\u3046\u57fa\u790e\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002\u5b9f\u969b\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u306f\u3001\u3088\u308a\u5927\u304d\u306a\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3001\u3088\u308a\u8907\u96d1\u306a\u30e2\u30c7\u30eb\u3001\u305d\u3057\u3066\u8ee2\u79fb\u5b66\u7fd2\u306e\u6d3b\u7528\u3092\u691c\u8a0e\u3059\u308b\u3053\u3068\u306b\u306a\u308b\u3067\u3057\u3087\u3046\u3002</p>","tags":["PyTorch","\u30ab\u30b9\u30bf\u30e0\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8","\u753b\u50cf\u5206\u985e","\u30c7\u30fc\u30bf\u62e1\u5f35","TinyVGG","\u4e2d\u7d1a\u8005\u5411\u3051","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","CNN","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/06_pytorch_modular/","title":"PyTorch \u30e2\u30b8\u30e5\u30fc\u30eb\u5316\u3068\u30b9\u30af\u30ea\u30d7\u30c8\u30e2\u30fc\u30c9","text":"","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u30e2\u30b8\u30e5\u30fc\u30eb\u5316","Python","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","\u4e0a\u7d1a\u8005\u5411\u3051","\u30b9\u30af\u30ea\u30d7\u30c8\u30e2\u30fc\u30c9","\u518d\u5229\u7528","ML\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5","\u30b3\u30fc\u30c9\u7d44\u7e54\u5316"]},{"location":"PyTorch/06_pytorch_modular/#_1","title":"\u6982\u8981","text":"<p>\u672c\u8a18\u4e8b\u3067\u306f\u3001PyTorch\u3092\u4f7f\u7528\u3057\u3066Jupyter\u30ce\u30fc\u30c8\u30d6\u30c3\u30af\u306e\u30b3\u30fc\u30c9\u3092\u518d\u5229\u7528\u53ef\u80fd\u306a\u30e2\u30b8\u30e5\u30fc\u30eb\u306b\u5909\u63db\u3059\u308b\u65b9\u6cd5\u3092\u8a73\u3057\u304f\u89e3\u8aac\u3057\u307e\u3059\u3002\u5b9f\u969b\u306e\u753b\u50cf\u5206\u985e\u30bf\u30b9\u30af\uff08pizza\u3001steak\u3001sushi\u5206\u985e\uff09\u3092\u4f8b\u306b\u3001\u30c7\u30fc\u30bf\u51e6\u7406\u304b\u3089\u30e2\u30c7\u30eb\u8a13\u7df4\u307e\u3067\u5168\u3066\u306e\u5de5\u7a0b\u3092\u30e2\u30b8\u30e5\u30fc\u30eb\u5316\u3057\u3001\u6700\u7d42\u7684\u306b1\u884c\u306e\u30b3\u30de\u30f3\u30c9\u3067\u6a5f\u68b0\u5b66\u7fd2\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u3092\u5b9f\u884c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002</p>","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u30e2\u30b8\u30e5\u30fc\u30eb\u5316","Python","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","\u4e0a\u7d1a\u8005\u5411\u3051","\u30b9\u30af\u30ea\u30d7\u30c8\u30e2\u30fc\u30c9","\u518d\u5229\u7528","ML\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5","\u30b3\u30fc\u30c9\u7d44\u7e54\u5316"]},{"location":"PyTorch/06_pytorch_modular/#_2","title":"\u5b66\u7fd2\u76ee\u6a19","text":"<ul> <li>\u30b9\u30af\u30ea\u30d7\u30c8\u30e2\u30fc\u30c9\u3067Python\u30d5\u30a1\u30a4\u30eb\u3092\u81ea\u52d5\u751f\u6210\u3059\u308b\u65b9\u6cd5</li> <li>\u30c7\u30fc\u30bf\u51e6\u7406\u3001\u30e2\u30c7\u30eb\u69cb\u7bc9\u3001\u8a13\u7df4\u30eb\u30fc\u30d7\u3092\u500b\u5225\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u306b\u5206\u96e2</li> <li>\u52b9\u7387\u7684\u306a\u6a5f\u68b0\u5b66\u7fd2\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u69cb\u9020\u306e\u8a2d\u8a08</li> <li>\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u304b\u3089\u6a5f\u68b0\u5b66\u7fd2\u30e2\u30c7\u30eb\u3092\u8a13\u7df4\u3059\u308b\u624b\u6cd5</li> </ul>","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u30e2\u30b8\u30e5\u30fc\u30eb\u5316","Python","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","\u4e0a\u7d1a\u8005\u5411\u3051","\u30b9\u30af\u30ea\u30d7\u30c8\u30e2\u30fc\u30c9","\u518d\u5229\u7528","ML\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5","\u30b3\u30fc\u30c9\u7d44\u7e54\u5316"]},{"location":"PyTorch/06_pytorch_modular/#_3","title":"\u524d\u63d0\u77e5\u8b58","text":"<ul> <li>Python\u57fa\u790e\uff08\u95a2\u6570\u3001\u30af\u30e9\u30b9\u3001\u30e2\u30b8\u30e5\u30fc\u30eb\uff09</li> <li>PyTorch\u306e\u57fa\u672c\u7684\u306a\u4f7f\u7528\u65b9\u6cd5</li> <li>\u753b\u50cf\u5206\u985e\u30bf\u30b9\u30af\u306e\u7406\u89e3</li> <li>Jupyter Notebook\u307e\u305f\u306fGoogle Colab\u306e\u4f7f\u7528\u7d4c\u9a13</li> </ul>","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u30e2\u30b8\u30e5\u30fc\u30eb\u5316","Python","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","\u4e0a\u7d1a\u8005\u5411\u3051","\u30b9\u30af\u30ea\u30d7\u30c8\u30e2\u30fc\u30c9","\u518d\u5229\u7528","ML\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5","\u30b3\u30fc\u30c9\u7d44\u7e54\u5316"]},{"location":"PyTorch/06_pytorch_modular/#_4","title":"\u30b9\u30af\u30ea\u30d7\u30c8\u30e2\u30fc\u30c9\u3068\u306f\uff1f","text":"<p>\u30b9\u30af\u30ea\u30d7\u30c8\u30e2\u30fc\u30c9\u306f\u3001Jupyter Notebook\u306e\u30bb\u30eb\u30de\u30b8\u30c3\u30af\u3092\u4f7f\u7528\u3057\u3066\u3001\u7279\u5b9a\u306e\u30bb\u30eb\u3092Python\u30b9\u30af\u30ea\u30d7\u30c8\u30d5\u30a1\u30a4\u30eb\u306b\u5909\u63db\u3059\u308b\u6a5f\u80fd\u3067\u3059\u3002</p> <p>\u4f8b\u3048\u3070\u3001\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u30bb\u30eb\u3067\u5b9f\u884c\u3059\u308b\u3068\uff1a</p> <pre><code>%%writefile hello_world.py\nprint(\"hello world, machine learning is fun!\")\n</code></pre> <p><code>hello_world.py</code>\u3068\u3044\u3046Python\u30d5\u30a1\u30a4\u30eb\u304c\u4f5c\u6210\u3055\u308c\u3001\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u304b\u3089\u5b9f\u884c\u3067\u304d\u307e\u3059\uff1a</p> <pre><code>python hello_world.py\n&gt;&gt;&gt; hello world, machine learning is fun!\n</code></pre>","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u30e2\u30b8\u30e5\u30fc\u30eb\u5316","Python","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","\u4e0a\u7d1a\u8005\u5411\u3051","\u30b9\u30af\u30ea\u30d7\u30c8\u30e2\u30fc\u30c9","\u518d\u5229\u7528","ML\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5","\u30b3\u30fc\u30c9\u7d44\u7e54\u5316"]},{"location":"PyTorch/06_pytorch_modular/#writefile","title":"\u4e3b\u8981\u306a\u30bb\u30eb\u30de\u30b8\u30c3\u30af\uff1a<code>%%writefile</code>","text":"<p><code>%%writefile filename</code>\u3092\u30bb\u30eb\u306e\u6700\u521d\u306b\u8a18\u8ff0\u3059\u308b\u3053\u3068\u3067\u3001\u305d\u306e\u30bb\u30eb\u306e\u5185\u5bb9\u3092\u6307\u5b9a\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u540d\u3067\u4fdd\u5b58\u3067\u304d\u307e\u3059\u3002</p> <p>Q: \u5fc5\u305a\u3053\u306e\u65b9\u6cd5\u3067Python\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u304b\uff1f</p> <p>A: \u3044\u3044\u3048\u3002\u3053\u308c\u306f\u591a\u304f\u306e\u65b9\u6cd5\u306e1\u3064\u3067\u3059\u3002\u76f4\u63a5Python\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u66f8\u304d\u59cb\u3081\u308b\u3053\u3068\u3082\u53ef\u80fd\u3067\u3059\u3002\u305f\u3060\u3057\u3001Jupyter/Google Colab\u30ce\u30fc\u30c8\u30d6\u30c3\u30af\u306f\u6a5f\u68b0\u5b66\u7fd2\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u4e00\u822c\u7684\u306a\u958b\u59cb\u65b9\u6cd5\u306a\u306e\u3067\u3001<code>%%writefile</code>\u30de\u30b8\u30c3\u30af\u30b3\u30de\u30f3\u30c9\u3092\u77e5\u3063\u3066\u304a\u304f\u3068\u4fbf\u5229\u3067\u3059\u3002</p>","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u30e2\u30b8\u30e5\u30fc\u30eb\u5316","Python","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","\u4e0a\u7d1a\u8005\u5411\u3051","\u30b9\u30af\u30ea\u30d7\u30c8\u30e2\u30fc\u30c9","\u518d\u5229\u7528","ML\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5","\u30b3\u30fc\u30c9\u7d44\u7e54\u5316"]},{"location":"PyTorch/06_pytorch_modular/#_5","title":"\u6700\u7d42\u7684\u306a\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u9020","text":"<p>\u672c\u8a18\u4e8b\u3092\u5b8c\u4e86\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u6574\u7406\u3055\u308c\u305f\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u9020\u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\uff1a</p> <pre><code>deeplearning-with-pytorch/\n\u251c\u2500\u2500 going_modular/\n\u2502   \u251c\u2500\u2500 data_setup.py      # \u30c7\u30fc\u30bf\u51e6\u7406\u30e2\u30b8\u30e5\u30fc\u30eb\n\u2502   \u251c\u2500\u2500 engine.py          # \u8a13\u7df4\u30fb\u8a55\u4fa1\u30a8\u30f3\u30b8\u30f3\n\u2502   \u251c\u2500\u2500 model_builder.py   # \u30e2\u30c7\u30eb\u69cb\u7bc9\u30e2\u30b8\u30e5\u30fc\u30eb\n\u2502   \u251c\u2500\u2500 train.py          # \u30e1\u30a4\u30f3\u8a13\u7df4\u30b9\u30af\u30ea\u30d7\u30c8\n\u2502   \u2514\u2500\u2500 utils.py          # \u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u95a2\u6570\n\u251c\u2500\u2500 models/\n\u2502   \u251c\u2500\u2500 05_going_modular_cell_mode_tinyvgg_model.pth\n\u2502   \u2514\u2500\u2500 05_going_modular_script_mode_tinyvgg_model.pth\n\u2514\u2500\u2500 data/\n    \u2514\u2500\u2500 pizza_steak_sushi/\n        \u251c\u2500\u2500 train/\n        \u2502   \u251c\u2500\u2500 pizza/\n        \u2502   \u251c\u2500\u2500 steak/\n        \u2502   \u2514\u2500\u2500 sushi/\n        \u2514\u2500\u2500 test/\n            \u251c\u2500\u2500 pizza/\n            \u251c\u2500\u2500 steak/\n            \u2514\u2500\u2500 sushi/\n</code></pre> <p>\u3053\u306e\u69cb\u9020\u306b\u3088\u308a\u3001\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3067\u30e2\u30c7\u30eb\u3092\u8a13\u7df4\u3067\u304d\u307e\u3059\uff1a</p> <pre><code># \u30ce\u30fc\u30c8\u30d6\u30c3\u30af\u5185\u304b\u3089\n!python going_modular/train.py\n\n# \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u304b\u3089\npython going_modular/train.py\n</code></pre>","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u30e2\u30b8\u30e5\u30fc\u30eb\u5316","Python","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","\u4e0a\u7d1a\u8005\u5411\u3051","\u30b9\u30af\u30ea\u30d7\u30c8\u30e2\u30fc\u30c9","\u518d\u5229\u7528","ML\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5","\u30b3\u30fc\u30c9\u7d44\u7e54\u5316"]},{"location":"PyTorch/06_pytorch_modular/#0-python","title":"0. Python\u30b9\u30af\u30ea\u30d7\u30c8\u683c\u7d0d\u30d5\u30a9\u30eb\u30c0\u306e\u4f5c\u6210","text":"<p>\u30e2\u30b8\u30e5\u30fc\u30eb\u5316\u3057\u305f\u30b3\u30fc\u30c9\u3092\u683c\u7d0d\u3059\u308b\u30d5\u30a9\u30eb\u30c0\u3092\u4f5c\u6210\u3057\u307e\u3057\u3087\u3046\u3002</p> <pre><code>import os\n\nos.makedirs(\"going_modular\", exist_ok=True)\n</code></pre>","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u30e2\u30b8\u30e5\u30fc\u30eb\u5316","Python","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","\u4e0a\u7d1a\u8005\u5411\u3051","\u30b9\u30af\u30ea\u30d7\u30c8\u30e2\u30fc\u30c9","\u518d\u5229\u7528","ML\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5","\u30b3\u30fc\u30c9\u7d44\u7e54\u5316"]},{"location":"PyTorch/06_pytorch_modular/#1","title":"1. \u30c7\u30fc\u30bf\u306e\u53d6\u5f97","text":"<p>\u753b\u50cf\u5206\u985e\u30bf\u30b9\u30af\u7528\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\uff08pizza\u3001steak\u3001sushi\u753b\u50cf\uff09\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u307e\u3059\u3002</p> <pre><code>import os\nimport zipfile\nfrom pathlib import Path\nimport requests\n\n# \u30c7\u30fc\u30bf\u30d5\u30a9\u30eb\u30c0\u306e\u30d1\u30b9\u8a2d\u5b9a\ndata_path = Path(\"data/\")\nimage_path = data_path / \"pizza_steak_sushi\"\n\n# \u753b\u50cf\u30d5\u30a9\u30eb\u30c0\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u3001\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u6e96\u5099\nif image_path.is_dir():\n    print(f\"{image_path} \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304c\u5b58\u5728\u3057\u307e\u3059\u3002\")\nelse:\n    print(f\"{image_path} \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304c\u898b\u3064\u304b\u308a\u307e\u305b\u3093\u3002\u4f5c\u6210\u4e2d...\")\n    image_path.mkdir(parents=True, exist_ok=True)\n\n# pizza\u3001steak\u3001sushi\u30c7\u30fc\u30bf\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\nwith open(data_path / \"pizza_steak_sushi.zip\", \"wb\") as f:\n    request = requests.get(\"https://github.com/vinsmoke-three/deeplearning-with-pytorch/raw/main/data/pizza_steak_sushi.zip\")\n    print(\"pizza\u3001steak\u3001sushi\u30c7\u30fc\u30bf\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u4e2d...\")\n    f.write(request.content)\n\n# zip\u30d5\u30a1\u30a4\u30eb\u306e\u89e3\u51cd\nwith zipfile.ZipFile(data_path / \"pizza_steak_sushi.zip\", \"r\") as zip_ref:\n    print(\"pizza\u3001steak\u3001sushi\u30c7\u30fc\u30bf\u3092\u89e3\u51cd\u4e2d...\") \n    zip_ref.extractall(image_path)\n\n# zip\u30d5\u30a1\u30a4\u30eb\u306e\u524a\u9664\nos.remove(data_path / \"pizza_steak_sushi.zip\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c\uff1a <pre><code>data/pizza_steak_sushi \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304c\u5b58\u5728\u3057\u307e\u3059\u3002\npizza\u3001steak\u3001sushi\u30c7\u30fc\u30bf\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u4e2d...\npizza\u3001steak\u3001sushi\u30c7\u30fc\u30bf\u3092\u89e3\u51cd\u4e2d...\n</code></pre></p> <p>\u8a13\u7df4\u7528\u3068\u30c6\u30b9\u30c8\u7528\u306e\u30d1\u30b9\u3092\u8a2d\u5b9a\uff1a</p> <pre><code># \u8a13\u7df4\u7528\u304a\u3088\u3073\u30c6\u30b9\u30c8\u7528\u30d1\u30b9\u306e\u8a2d\u5b9a\ntrain_dir = image_path / \"train\"\ntest_dir = image_path / \"test\"\n\nprint(f\"\u8a13\u7df4\u30c7\u30fc\u30bf\u30d1\u30b9: {train_dir}\")\nprint(f\"\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u30d1\u30b9: {test_dir}\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c\uff1a <pre><code>(PosixPath('data/pizza_steak_sushi/train'),\n PosixPath('data/pizza_steak_sushi/test'))\n</code></pre></p>","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u30e2\u30b8\u30e5\u30fc\u30eb\u5316","Python","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","\u4e0a\u7d1a\u8005\u5411\u3051","\u30b9\u30af\u30ea\u30d7\u30c8\u30e2\u30fc\u30c9","\u518d\u5229\u7528","ML\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5","\u30b3\u30fc\u30c9\u7d44\u7e54\u5316"]},{"location":"PyTorch/06_pytorch_modular/#2-datasetdataloader","title":"2. Dataset\u3068DataLoader\u306e\u4f5c\u6210","text":"<p>PyTorch\u306e<code>Dataset</code>\u3068<code>DataLoader</code>\u3092\u4f7f\u7528\u3057\u3066\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u307f\u53ef\u80fd\u306a\u5f62\u5f0f\u306b\u5909\u63db\u3057\u307e\u3059\u3002</p> <pre><code>from torchvision import datasets, transforms\n\n# \u30b7\u30f3\u30d7\u30eb\u306a\u5909\u63db\u51e6\u7406\u3092\u4f5c\u6210\ndata_transform = transforms.Compose([ \n    transforms.Resize((64, 64)),    # \u753b\u50cf\u309264x64\u306b\u30ea\u30b5\u30a4\u30ba\n    transforms.ToTensor(),          # \u30c6\u30f3\u30bd\u30eb\u306b\u5909\u63db\n])\n\n# ImageFolder\u3092\u4f7f\u7528\u3057\u3066\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u4f5c\u6210\ntrain_data = datasets.ImageFolder(root=train_dir,           # \u753b\u50cf\u306e\u5bfe\u8c61\u30d5\u30a9\u30eb\u30c0\n                                  transform=data_transform,  # \u753b\u50cf\u306b\u9069\u7528\u3059\u308b\u5909\u63db\n                                  target_transform=None)     # \u30e9\u30d9\u30eb\u306b\u9069\u7528\u3059\u308b\u5909\u63db\uff08\u5fc5\u8981\u306b\u5fdc\u3058\u3066\uff09\n\ntest_data = datasets.ImageFolder(root=test_dir, \n                                 transform=data_transform)\n\nprint(f\"\u8a13\u7df4\u30c7\u30fc\u30bf:\\n{train_data}\\n\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf:\\n{test_data}\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c\uff1a <pre><code>\u8a13\u7df4\u30c7\u30fc\u30bf:\nDataset ImageFolder\n    Number of datapoints: 225\n    Root location: data/pizza_steak_sushi/train\n    StandardTransform\nTransform: Compose(\n               Resize(size=(64, 64), interpolation=bilinear, max_size=None, antialias=True)\n               ToTensor()\n           )\n\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf:\nDataset ImageFolder\n    Number of datapoints: 75\n    Root location: data/pizza_steak_sushi/test\n    StandardTransform\nTransform: Compose(\n               Resize(size=(64, 64), interpolation=bilinear, max_size=None, antialias=True)\n               ToTensor()\n           )\n</code></pre></p> <p>\u30af\u30e9\u30b9\u540d\u3068\u6570\u5024\u30e9\u30d9\u30eb\u306e\u5bfe\u5fdc\u3092\u78ba\u8a8d\uff1a</p> <pre><code># \u30af\u30e9\u30b9\u540d\u3092\u30ea\u30b9\u30c8\u3068\u3057\u3066\u53d6\u5f97\nclass_names = train_data.classes\nprint(f\"\u30af\u30e9\u30b9\u540d: {class_names}\")\n\n# \u30af\u30e9\u30b9\u540d\u3068\u6570\u5024\u306e\u8f9e\u66f8\u3082\u53d6\u5f97\u53ef\u80fd\nclass_dict = train_data.class_to_idx\nprint(f\"\u30af\u30e9\u30b9\u8f9e\u66f8: {class_dict}\")\n\n# \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u9577\u3055\u3092\u78ba\u8a8d\nprint(f\"\u30c7\u30fc\u30bf\u6570 - \u8a13\u7df4: {len(train_data)}, \u30c6\u30b9\u30c8: {len(test_data)}\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c\uff1a <pre><code>\u30af\u30e9\u30b9\u540d: ['pizza', 'steak', 'sushi']\n\u30af\u30e9\u30b9\u8f9e\u66f8: {'pizza': 0, 'steak': 1, 'sushi': 2}\n\u30c7\u30fc\u30bf\u6570 - \u8a13\u7df4: 225, \u30c6\u30b9\u30c8: 75\n</code></pre></p> <p>DataLoader\u306e\u4f5c\u6210\uff1a</p> <pre><code>from torch.utils.data import DataLoader\n\ntrain_dataloader = DataLoader(dataset=train_data, \n                              batch_size=1,     # \u30d0\u30c3\u30c1\u3042\u305f\u308a\u306e\u30b5\u30f3\u30d7\u30eb\u6570\n                              num_workers=0,    # \u30c7\u30fc\u30bf\u30ed\u30fc\u30c7\u30a3\u30f3\u30b0\u7528\u306e\u30b5\u30d6\u30d7\u30ed\u30bb\u30b9\u6570\n                              shuffle=True)     # \u30c7\u30fc\u30bf\u3092\u30b7\u30e3\u30c3\u30d5\u30eb\u3059\u308b\u304b\n\ntest_dataloader = DataLoader(dataset=test_data, \n                             batch_size=1, \n                             num_workers=0, \n                             shuffle=False)    # \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306f\u901a\u5e38\u30b7\u30e3\u30c3\u30d5\u30eb\u4e0d\u8981\n\nprint(f\"DataLoader\u4f5c\u6210\u5b8c\u4e86\")\n</code></pre> <p>\u5358\u4e00\u753b\u50cf\u306e\u5f62\u72b6\u3092\u78ba\u8a8d\uff1a</p> <pre><code># \u5358\u4e00\u753b\u50cf\u306e\u30b5\u30a4\u30ba/\u5f62\u72b6\u3092\u78ba\u8a8d\nimg, label = next(iter(train_dataloader))\n\nprint(f\"\u753b\u50cf\u5f62\u72b6: {img.shape} -&gt; [batch_size, color_channels, height, width]\")\nprint(f\"\u30e9\u30d9\u30eb\u5f62\u72b6: {label.shape}\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c\uff1a <pre><code>\u753b\u50cf\u5f62\u72b6: torch.Size([1, 3, 64, 64]) -&gt; [batch_size, color_channels, height, width]\n\u30e9\u30d9\u30eb\u5f62\u72b6: torch.Size([1])\n</code></pre></p>","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u30e2\u30b8\u30e5\u30fc\u30eb\u5316","Python","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","\u4e0a\u7d1a\u8005\u5411\u3051","\u30b9\u30af\u30ea\u30d7\u30c8\u30e2\u30fc\u30c9","\u518d\u5229\u7528","ML\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5","\u30b3\u30fc\u30c9\u7d44\u7e54\u5316"]},{"location":"PyTorch/06_pytorch_modular/#21-datasetdataloader","title":"2.1 Dataset\u3068DataLoader\u4f5c\u6210\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u5316","text":"<p>\u4e0a\u8a18\u306e\u51e6\u7406\u3092\u518d\u5229\u7528\u53ef\u80fd\u306a<code>data_setup.py</code>\u30b9\u30af\u30ea\u30d7\u30c8\u306b\u5909\u63db\u3057\u307e\u3059\u3002</p> <pre><code>%%writefile going_modular/data_setup.py\n\"\"\"\n\u753b\u50cf\u5206\u985e\u30c7\u30fc\u30bf\u7528\u306ePyTorch DataLoader\u3092\u4f5c\u6210\u3059\u308b\u6a5f\u80fd\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002\n\"\"\"\nimport os\n\nfrom torch.utils.data import DataLoader\nfrom torchvision import datasets, transforms\n\nNUM_WORKERS = os.cpu_count()\n\ndef create_dataloaders(\n    train_dir: str, \n    test_dir: str, \n    transform: transforms.Compose, \n    batch_size: int, \n    num_workers: int=NUM_WORKERS\n):\n  \"\"\"\u8a13\u7df4\u7528\u304a\u3088\u3073\u8a55\u4fa1\u7528DataLoader\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\n  \u8a13\u7df4\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3068\u30c6\u30b9\u30c8\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u30d1\u30b9\u3092\u53d7\u3051\u53d6\u308a\u3001\n  PyTorch Dataset\u304a\u3088\u3073DataLoader\u306b\u5909\u63db\u3057\u307e\u3059\u3002\n\n  Args:\n    train_dir: \u8a13\u7df4\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u30d1\u30b9\n    test_dir: \u30c6\u30b9\u30c8\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u30d1\u30b9\n    transform: \u8a13\u7df4\u30fb\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u9069\u7528\u3059\u308btorchvision\u5909\u63db\n    batch_size: \u5404DataLoader\u306e\u30d0\u30c3\u30c1\u3042\u305f\u308a\u306e\u30b5\u30f3\u30d7\u30eb\u6570\n    num_workers: DataLoader\u3042\u305f\u308a\u306e\u30ef\u30fc\u30ab\u30fc\u6570\n\n  Returns:\n    (train_dataloader, test_dataloader, class_names)\u306e\u30bf\u30d7\u30eb\n    class_names\u306f\u5bfe\u8c61\u30af\u30e9\u30b9\u306e\u30ea\u30b9\u30c8\n\n    \u4f7f\u7528\u4f8b:\n      train_dataloader, test_dataloader, class_names = \\\n        = create_dataloaders(train_dir=path/to/train_dir,\n                             test_dir=path/to/test_dir,\n                             transform=some_transform,\n                             batch_size=32,\n                             num_workers=4)\n  \"\"\"\n  # ImageFolder\u3092\u4f7f\u7528\u3057\u3066\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u4f5c\u6210\n  train_data = datasets.ImageFolder(train_dir, transform=transform)\n  test_data = datasets.ImageFolder(test_dir, transform=transform)\n\n  # \u30af\u30e9\u30b9\u540d\u3092\u53d6\u5f97\n  class_names = train_data.classes\n\n  # \u753b\u50cf\u3092DataLoader\u306b\u5909\u63db\n  train_dataloader = DataLoader(\n      train_data,\n      batch_size=batch_size,\n      shuffle=True,\n      num_workers=num_workers,\n      pin_memory=True,\n  )\n  test_dataloader = DataLoader(\n      test_data,\n      batch_size=batch_size,\n      shuffle=False,\n      num_workers=num_workers,\n      pin_memory=True,\n  )\n\n  return train_dataloader, test_dataloader, class_names\n</code></pre>","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u30e2\u30b8\u30e5\u30fc\u30eb\u5316","Python","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","\u4e0a\u7d1a\u8005\u5411\u3051","\u30b9\u30af\u30ea\u30d7\u30c8\u30e2\u30fc\u30c9","\u518d\u5229\u7528","ML\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5","\u30b3\u30fc\u30c9\u7d44\u7e54\u5316"]},{"location":"PyTorch/06_pytorch_modular/#3-tinyvgg","title":"3. \u30e2\u30c7\u30eb\u4f5c\u6210\uff08TinyVGG\uff09","text":"<p>CNN Explainer\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8\u304b\u3089\u53c2\u8003\u306b\u3057\u305fTinyVGG\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002</p> <pre><code>import torch\nfrom torch import nn \n\nclass TinyVGG(nn.Module):\n    \"\"\"TinyVGG\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\n    CNN explainer\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8\u306eTinyVGG\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3092PyTorch\u3067\u518d\u73fe\u3057\u307e\u3059\u3002\n    \u5143\u306e\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3: https://poloclub.github.io/cnn-explainer/\n\n    Args:\n    input_shape: \u5165\u529b\u30c1\u30e3\u30f3\u30cd\u30eb\u6570\u3092\u8868\u3059\u6574\u6570\n    hidden_units: \u5c64\u9593\u306e\u96a0\u308c\u30e6\u30cb\u30c3\u30c8\u6570\u3092\u8868\u3059\u6574\u6570\n    output_shape: \u51fa\u529b\u30e6\u30cb\u30c3\u30c8\u6570\u3092\u8868\u3059\u6574\u6570\n    \"\"\"\n    def __init__(self, input_shape: int, hidden_units: int, output_shape: int) -&gt; None:\n        super().__init__()\n        # \u7b2c1\u7573\u307f\u8fbc\u307f\u30d6\u30ed\u30c3\u30af\n        self.conv_block_1 = nn.Sequential(\n          nn.Conv2d(in_channels=input_shape, \n                    out_channels=hidden_units, \n                    kernel_size=3, \n                    stride=1, \n                    padding=0),  \n          nn.ReLU(),\n          nn.Conv2d(in_channels=hidden_units, \n                    out_channels=hidden_units,\n                    kernel_size=3,\n                    stride=1,\n                    padding=0),\n          nn.ReLU(),\n          nn.MaxPool2d(kernel_size=2, stride=2)\n        )\n        # \u7b2c2\u7573\u307f\u8fbc\u307f\u30d6\u30ed\u30c3\u30af\n        self.conv_block_2 = nn.Sequential(\n          nn.Conv2d(hidden_units, hidden_units, kernel_size=3, padding=0),\n          nn.ReLU(),\n          nn.Conv2d(hidden_units, hidden_units, kernel_size=3, padding=0),\n          nn.ReLU(),\n          nn.MaxPool2d(2)\n        )\n        # \u5206\u985e\u5668\n        self.classifier = nn.Sequential(\n          nn.Flatten(),\n          # \u3053\u306ein_features\u5f62\u72b6\u306f\u3069\u3053\u304b\u3089\u6765\u308b\u306e\u304b\uff1f\n          # \u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u5404\u5c64\u304c\u5165\u529b\u30c7\u30fc\u30bf\u306e\u5f62\u72b6\u3092\u5727\u7e2e\u30fb\u5909\u66f4\u3059\u308b\u305f\u3081\n          nn.Linear(in_features=hidden_units*13*13,\n                    out_features=output_shape)\n        )\n\n    def forward(self, x: torch.Tensor):\n        x = self.conv_block_1(x)\n        x = self.conv_block_2(x)\n        x = self.classifier(x)\n        return x\n</code></pre> <p>\u30e2\u30c7\u30eb\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\u3057\u3001\u5bfe\u8c61\u30c7\u30d0\u30a4\u30b9\u306b\u914d\u7f6e\uff1a</p> <pre><code>import torch\n\ndevice = \"mps\" if torch.mps.is_available() else \"cpu\"\n\n# \u30e2\u30c7\u30eb\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\ntorch.manual_seed(42)\nmodel_0 = TinyVGG(input_shape=3,                     # \u30ab\u30e9\u30fc\u30c1\u30e3\u30f3\u30cd\u30eb\u6570\uff08RGB\u306a\u306e\u30673\uff09\n                  hidden_units=10, \n                  output_shape=len(train_data.classes)).to(device)\nprint(model_0)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c\uff1a <pre><code>TinyVGG(\n  (conv_block_1): Sequential(\n    (0): Conv2d(3, 10, kernel_size=(3, 3), stride=(1, 1))\n    (1): ReLU()\n    (2): Conv2d(10, 10, kernel_size=(3, 3), stride=(1, 1))\n    (3): ReLU()\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  )\n  (conv_block_2): Sequential(\n    (0): Conv2d(10, 10, kernel_size=(3, 3), stride=(1, 1))\n    (1): ReLU()\n    (2): Conv2d(10, 10, kernel_size=(3, 3), stride=(1, 1))\n    (3): ReLU()\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  )\n  (classifier): Sequential(\n    (0): Flatten(start_dim=1, end_dim=-1)\n    (1): Linear(in_features=1690, out_features=3, bias=True)\n  )\n)\n</code></pre></p> <p>\u30c0\u30df\u30fc\u9806\u4f1d\u64ad\u3067\u30e2\u30c7\u30eb\u3092\u30c6\u30b9\u30c8\uff1a</p> <pre><code># 1. DataLoader\u304b\u3089\u753b\u50cf\u3068\u30e9\u30d9\u30eb\u306e\u30d0\u30c3\u30c1\u3092\u53d6\u5f97\nimg_batch, label_batch = next(iter(train_dataloader))\n\n# 2. \u30d0\u30c3\u30c1\u304b\u3089\u5358\u4e00\u753b\u50cf\u3092\u53d6\u5f97\u3057\u3001\u30e2\u30c7\u30eb\u306b\u9069\u5408\u3059\u308b\u5f62\u72b6\u306bunsqueeze\nimg_single, label_single = img_batch[0].unsqueeze(dim=0), label_batch[0]\nprint(f\"\u5358\u4e00\u753b\u50cf\u5f62\u72b6: {img_single.shape}\\n\")\n\n# 3. \u5358\u4e00\u753b\u50cf\u3067\u9806\u4f1d\u64ad\u3092\u5b9f\u884c\nmodel_0.eval()\nwith torch.inference_mode():\n    pred = model_0(img_single.to(device))\n\n# 4. \u7d50\u679c\u3092\u51fa\u529b\u3057\u3001\u30e2\u30c7\u30eblogits -&gt; \u4e88\u6e2c\u78ba\u7387 -&gt; \u4e88\u6e2c\u30e9\u30d9\u30eb\u306b\u5909\u63db\nprint(f\"\u51fa\u529blogits:\\n{pred}\\n\")\nprint(f\"\u51fa\u529b\u4e88\u6e2c\u78ba\u7387:\\n{torch.softmax(pred, dim=1)}\\n\")\nprint(f\"\u51fa\u529b\u4e88\u6e2c\u30e9\u30d9\u30eb:\\n{torch.argmax(torch.softmax(pred, dim=1), dim=1)}\\n\")\nprint(f\"\u5b9f\u969b\u306e\u30e9\u30d9\u30eb:\\n{label_single}\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c\uff1a <pre><code>\u5358\u4e00\u753b\u50cf\u5f62\u72b6: torch.Size([1, 3, 64, 64])\n\n\u51fa\u529blogits:\ntensor([[ 0.0208, -0.0019,  0.0095]], device='mps:0')\n\n\u51fa\u529b\u4e88\u6e2c\u78ba\u7387:\ntensor([[0.3371, 0.3295, 0.3333]], device='mps:0')\n\n\u51fa\u529b\u4e88\u6e2c\u30e9\u30d9\u30eb:\ntensor([0], device='mps:0')\n\n\u5b9f\u969b\u306e\u30e9\u30d9\u30eb:\n0\n</code></pre></p>","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u30e2\u30b8\u30e5\u30fc\u30eb\u5316","Python","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","\u4e0a\u7d1a\u8005\u5411\u3051","\u30b9\u30af\u30ea\u30d7\u30c8\u30e2\u30fc\u30c9","\u518d\u5229\u7528","ML\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5","\u30b3\u30fc\u30c9\u7d44\u7e54\u5316"]},{"location":"PyTorch/06_pytorch_modular/#31","title":"3.1 \u30e2\u30c7\u30eb\u4f5c\u6210\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u5316","text":"<p>TinyVGG\u30e2\u30c7\u30eb\u3092<code>model_builder.py</code>\u30b9\u30af\u30ea\u30d7\u30c8\u306b\u5909\u63db\u3057\u307e\u3059\u3002</p> <pre><code>%%writefile going_modular/model_builder.py\n\"\"\"\nTinyVGG\u30e2\u30c7\u30eb\u3092\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3059\u308bPyTorch\u30e2\u30c7\u30eb\u30b3\u30fc\u30c9\u3092\u542b\u307f\u307e\u3059\u3002\n\"\"\"\nimport torch\nfrom torch import nn\n\nclass TinyVGG(nn.Module):\n    \"\"\"TinyVGG\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\n    CNN explainer\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8\u306eTinyVGG\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3092PyTorch\u3067\u518d\u73fe\u3057\u307e\u3059\u3002\n    \u5143\u306e\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3: https://poloclub.github.io/cnn-explainer/\n\n    Args:\n    input_shape: \u5165\u529b\u30c1\u30e3\u30f3\u30cd\u30eb\u6570\u3092\u8868\u3059\u6574\u6570\n    hidden_units: \u5c64\u9593\u306e\u96a0\u308c\u30e6\u30cb\u30c3\u30c8\u6570\u3092\u8868\u3059\u6574\u6570\n    output_shape: \u51fa\u529b\u30e6\u30cb\u30c3\u30c8\u6570\u3092\u8868\u3059\u6574\u6570\n    \"\"\"\n    def __init__(self, input_shape: int, hidden_units: int, output_shape: int) -&gt; None:\n        super().__init__()\n        self.conv_block_1 = nn.Sequential(\n          nn.Conv2d(in_channels=input_shape, \n                    out_channels=hidden_units, \n                    kernel_size=3, \n                    stride=1, \n                    padding=0),  \n          nn.ReLU(),\n          nn.Conv2d(in_channels=hidden_units, \n                    out_channels=hidden_units,\n                    kernel_size=3,\n                    stride=1,\n                    padding=0),\n          nn.ReLU(),\n          nn.MaxPool2d(kernel_size=2, stride=2)\n        )\n        self.conv_block_2 = nn.Sequential(\n          nn.Conv2d(hidden_units, hidden_units, kernel_size=3, padding=0),\n          nn.ReLU(),\n          nn.Conv2d(hidden_units, hidden_units, kernel_size=3, padding=0),\n          nn.ReLU(),\n          nn.MaxPool2d(2)\n        )\n        # auto calculate flatten_size\n        with torch.no_grad():\n            dummy_input = torch.zeros(1, input_shape, image_size, image_size)\n            x = self.conv_block_1(dummy_input)\n            x = self.conv_block_2(x)\n            flatten_size = x.view(1, -1).shape[1]  # or flatten_size = x[0].numel()\n\n        self.classifier = nn.Sequential(\n          nn.Flatten(),\n          # \u3053\u306ein_features\u5f62\u72b6\u306e\u7531\u6765\u306b\u3064\u3044\u3066\uff1a\n          # \u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u5404\u5c64\u304c\u5165\u529b\u30c7\u30fc\u30bf\u306e\u5f62\u72b6\u3092\u5727\u7e2e\u30fb\u5909\u66f4\u3059\u308b\u305f\u3081\n          nn.Linear(in_features=flatten_size,\n                    out_features=output_shape)\n        )\n\n    def forward(self, x: torch.Tensor):\n        x = self.conv_block_1(x)\n        x = self.conv_block_2(x)\n        x = self.classifier(x)\n        return x\n</code></pre> <p>\u30b9\u30af\u30ea\u30d7\u30c8\u304b\u3089TinyVGG\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\uff1a</p> <pre><code>import torch\nfrom going_modular import model_builder\n\ndevice = \"mps\" if torch.mps.is_available() else \"cpu\"\n\n# \"model_builder.py\"\u30b9\u30af\u30ea\u30d7\u30c8\u304b\u3089\u30e2\u30c7\u30eb\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\ntorch.manual_seed(42)\nmodel_1 = model_builder.TinyVGG(input_shape=3,                   # \u30ab\u30e9\u30fc\u30c1\u30e3\u30f3\u30cd\u30eb\u6570\uff08RGB\u306a\u306e\u30673\uff09\n                                hidden_units=10, \n                                output_shape=len(class_names)).to(device)\nprint(model_1)\n</code></pre>","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u30e2\u30b8\u30e5\u30fc\u30eb\u5316","Python","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","\u4e0a\u7d1a\u8005\u5411\u3051","\u30b9\u30af\u30ea\u30d7\u30c8\u30e2\u30fc\u30c9","\u518d\u5229\u7528","ML\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5","\u30b3\u30fc\u30c9\u7d44\u7e54\u5316"]},{"location":"PyTorch/06_pytorch_modular/#4","title":"4. \u8a13\u7df4\u30fb\u30c6\u30b9\u30c8\u95a2\u6570\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u5316","text":"<p>\u518d\u5229\u7528\u53ef\u80fd\u306a<code>train_step()</code>\u3001<code>test_step()</code>\u3001<code>train()</code>\u95a2\u6570\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002</p> <p>\u3053\u308c\u3089\u306e\u95a2\u6570\u3092<code>engine.py</code>\u30b9\u30af\u30ea\u30d7\u30c8\u306b\u307e\u3068\u3081\u307e\u3059\u3002\u3053\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u304c\u8a13\u7df4\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306e\u300c\u30a8\u30f3\u30b8\u30f3\u300d\u3068\u306a\u308a\u307e\u3059\u3002</p> <pre><code>%%writefile going_modular/engine.py\n\"\"\"\nPyTorch\u30e2\u30c7\u30eb\u306e\u8a13\u7df4\u30fb\u30c6\u30b9\u30c8\u7528\u95a2\u6570\u3092\u542b\u307f\u307e\u3059\u3002\n\"\"\"\nfrom typing import Dict, List, Tuple\n\nimport torch\nfrom tqdm import tqdm\n\ndef train_step(model: torch.nn.Module, \n               dataloader: torch.utils.data.DataLoader, \n               loss_fn: torch.nn.Module, \n               optimizer: torch.optim.Optimizer,\n               device: torch.device) -&gt; Tuple[float, float]:\n    \"\"\"PyTorch\u30e2\u30c7\u30eb\u30921\u30a8\u30dd\u30c3\u30af\u8a13\u7df4\u3057\u307e\u3059\u3002\n\n    \u5bfe\u8c61PyTorch\u30e2\u30c7\u30eb\u3092\u8a13\u7df4\u30e2\u30fc\u30c9\u306b\u3057\u3001\u5fc5\u8981\u306a\u8a13\u7df4\u30b9\u30c6\u30c3\u30d7\n    \uff08\u9806\u4f1d\u64ad\u3001\u640d\u5931\u8a08\u7b97\u3001\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u30fc\u30b9\u30c6\u30c3\u30d7\uff09\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\n\n    Args:\n    model: \u8a13\u7df4\u3059\u308bPyTorch\u30e2\u30c7\u30eb\n    dataloader: \u30e2\u30c7\u30eb\u8a13\u7df4\u7528\u306eDataLoader\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\n    loss_fn: \u6700\u5c0f\u5316\u3059\u308bPyTorch\u640d\u5931\u95a2\u6570\n    optimizer: \u640d\u5931\u95a2\u6570\u6700\u5c0f\u5316\u3092\u652f\u63f4\u3059\u308bPyTorch\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u30fc\n    device: \u8a08\u7b97\u5bfe\u8c61\u30c7\u30d0\u30a4\u30b9\uff08\u4f8b\uff1a\"cuda\"\u307e\u305f\u306f\"cpu\"\uff09\n\n    Returns:\n    \u8a13\u7df4\u640d\u5931\u3068\u8a13\u7df4\u7cbe\u5ea6\u30e1\u30c8\u30ea\u30af\u30b9\u306e\u30bf\u30d7\u30eb\n    \u5f62\u5f0f\uff1a(train_loss, train_accuracy)\u3002\u4f8b\uff1a(0.1112, 0.8743)\n    \"\"\"\n    # \u30e2\u30c7\u30eb\u3092\u8a13\u7df4\u30e2\u30fc\u30c9\u306b\u8a2d\u5b9a\n    model.train()\n\n    # \u8a13\u7df4\u640d\u5931\u3068\u8a13\u7df4\u7cbe\u5ea6\u306e\u5024\u3092\u8a2d\u5b9a\n    train_loss, train_acc = 0, 0\n\n    # \u30c7\u30fc\u30bf\u30ed\u30fc\u30c0\u30fc\u306e\u30c7\u30fc\u30bf\u30d0\u30c3\u30c1\u3092\u30eb\u30fc\u30d7\n    for batch, (X, y) in enumerate(dataloader):\n        # \u30c7\u30fc\u30bf\u3092\u5bfe\u8c61\u30c7\u30d0\u30a4\u30b9\u306b\u9001\u4fe1\n        X, y = X.to(device), y.to(device)\n\n        # 1. \u9806\u4f1d\u64ad\n        y_pred = model(X)\n\n        # 2. \u640d\u5931\u3092\u8a08\u7b97\u30fb\u84c4\u7a4d\n        loss = loss_fn(y_pred, y)\n        train_loss += loss.item() \n\n        # 3. \u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u30fc\u306e\u30bc\u30ed\u52fe\u914d\n        optimizer.zero_grad()\n\n        # 4. \u640d\u5931\u306e\u9006\u4f1d\u64ad\n        loss.backward()\n\n        # 5. \u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u30fc\u30b9\u30c6\u30c3\u30d7\n        optimizer.step()\n\n        # \u5168\u30d0\u30c3\u30c1\u3067\u7cbe\u5ea6\u30e1\u30c8\u30ea\u30af\u30b9\u3092\u8a08\u7b97\u30fb\u84c4\u7a4d\n        y_pred_class = torch.argmax(torch.softmax(y_pred, dim=1), dim=1)\n        train_acc += (y_pred_class == y).sum().item()/len(y_pred)\n\n    # \u30d0\u30c3\u30c1\u3042\u305f\u308a\u306e\u5e73\u5747\u640d\u5931\u3068\u7cbe\u5ea6\u3092\u53d6\u5f97\u3059\u308b\u3088\u3046\u30e1\u30c8\u30ea\u30af\u30b9\u3092\u8abf\u6574\n    train_loss = train_loss / len(dataloader)\n    train_acc = train_acc / len(dataloader)\n    return train_loss, train_acc\n\ndef test_step(model: torch.nn.Module, \n              dataloader: torch.utils.data.DataLoader, \n              loss_fn: torch.nn.Module,\n              device: torch.device) -&gt; Tuple[float, float]:\n    \"\"\"PyTorch\u30e2\u30c7\u30eb\u30921\u30a8\u30dd\u30c3\u30af\u30c6\u30b9\u30c8\u3057\u307e\u3059\u3002\n\n    \u5bfe\u8c61PyTorch\u30e2\u30c7\u30eb\u3092\"eval\"\u30e2\u30fc\u30c9\u306b\u3057\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3067\n    \u9806\u4f1d\u64ad\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\n\n    Args:\n    model: \u30c6\u30b9\u30c8\u3059\u308bPyTorch\u30e2\u30c7\u30eb\n    dataloader: \u30e2\u30c7\u30eb\u30c6\u30b9\u30c8\u7528\u306eDataLoader\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\n    loss_fn: \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u640d\u5931\u8a08\u7b97\u7528PyTorch\u640d\u5931\u95a2\u6570\n    device: \u8a08\u7b97\u5bfe\u8c61\u30c7\u30d0\u30a4\u30b9\uff08\u4f8b\uff1a\"cuda\"\u307e\u305f\u306f\"cpu\"\uff09\n\n    Returns:\n    \u30c6\u30b9\u30c8\u640d\u5931\u3068\u30c6\u30b9\u30c8\u7cbe\u5ea6\u30e1\u30c8\u30ea\u30af\u30b9\u306e\u30bf\u30d7\u30eb\n    \u5f62\u5f0f\uff1a(test_loss, test_accuracy)\u3002\u4f8b\uff1a(0.0223, 0.8985)\n    \"\"\"\n    # \u30e2\u30c7\u30eb\u3092\u8a55\u4fa1\u30e2\u30fc\u30c9\u306b\u8a2d\u5b9a\n    model.eval() \n\n    # \u30c6\u30b9\u30c8\u640d\u5931\u3068\u30c6\u30b9\u30c8\u7cbe\u5ea6\u306e\u5024\u3092\u8a2d\u5b9a\n    test_loss, test_acc = 0, 0\n\n    # \u63a8\u8ad6\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u30de\u30cd\u30fc\u30b8\u30e3\u30fc\u3092\u30aa\u30f3\n    with torch.inference_mode():\n        # DataLoader\u30d0\u30c3\u30c1\u3092\u30eb\u30fc\u30d7\n        for batch, (X, y) in enumerate(dataloader):\n            # \u30c7\u30fc\u30bf\u3092\u5bfe\u8c61\u30c7\u30d0\u30a4\u30b9\u306b\u9001\u4fe1\n            X, y = X.to(device), y.to(device)\n\n            # 1. \u9806\u4f1d\u64ad\n            test_pred_logits = model(X)\n\n            # 2. \u640d\u5931\u3092\u8a08\u7b97\u30fb\u84c4\u7a4d\n            loss = loss_fn(test_pred_logits, y)\n            test_loss += loss.item()\n\n            # \u7cbe\u5ea6\u3092\u8a08\u7b97\u30fb\u84c4\u7a4d\n            test_pred_labels = test_pred_logits.argmax(dim=1)\n            test_acc += ((test_pred_labels == y).sum().item()/len(test_pred_labels))\n\n    # \u30d0\u30c3\u30c1\u3042\u305f\u308a\u306e\u5e73\u5747\u640d\u5931\u3068\u7cbe\u5ea6\u3092\u53d6\u5f97\u3059\u308b\u3088\u3046\u30e1\u30c8\u30ea\u30af\u30b9\u3092\u8abf\u6574\n    test_loss = test_loss / len(dataloader)\n    test_acc = test_acc / len(dataloader)\n    return test_loss, test_acc\n\ndef train(model: torch.nn.Module, \n          train_dataloader: torch.utils.data.DataLoader, \n          test_dataloader: torch.utils.data.DataLoader, \n          optimizer: torch.optim.Optimizer,\n          loss_fn: torch.nn.Module,\n          epochs: int,\n          device: torch.device) -&gt; Dict[str, List[float]]:\n    \"\"\"PyTorch\u30e2\u30c7\u30eb\u3092\u8a13\u7df4\u30fb\u30c6\u30b9\u30c8\u3057\u307e\u3059\u3002\n\n    \u5bfe\u8c61PyTorch\u30e2\u30c7\u30eb\u3092train_step()\u304a\u3088\u3073test_step()\u95a2\u6570\u3092\u901a\u3058\u3066\n    \u6307\u5b9a\u30a8\u30dd\u30c3\u30af\u6570\u5206\u5b9f\u884c\u3057\u3001\u540c\u4e00\u30a8\u30dd\u30c3\u30af\u30eb\u30fc\u30d7\u5185\u3067\u30e2\u30c7\u30eb\u3092\n    \u8a13\u7df4\u30fb\u30c6\u30b9\u30c8\u3057\u307e\u3059\u3002\n\n    \u8a55\u4fa1\u30e1\u30c8\u30ea\u30af\u30b9\u3092\u8a08\u7b97\u3001\u51fa\u529b\u3001\u4fdd\u5b58\u3057\u307e\u3059\u3002\n\n    Args:\n    model: \u8a13\u7df4\u30fb\u30c6\u30b9\u30c8\u3059\u308bPyTorch\u30e2\u30c7\u30eb\n    train_dataloader: \u30e2\u30c7\u30eb\u8a13\u7df4\u7528DataLoader\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\n    test_dataloader: \u30e2\u30c7\u30eb\u30c6\u30b9\u30c8\u7528DataLoader\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\n    optimizer: \u640d\u5931\u95a2\u6570\u6700\u5c0f\u5316\u3092\u652f\u63f4\u3059\u308bPyTorch\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u30fc\n    loss_fn: \u4e21\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u640d\u5931\u8a08\u7b97\u7528PyTorch\u640d\u5931\u95a2\u6570\n    epochs: \u8a13\u7df4\u30a8\u30dd\u30c3\u30af\u6570\u3092\u8868\u3059\u6574\u6570\n    device: \u8a08\u7b97\u5bfe\u8c61\u30c7\u30d0\u30a4\u30b9\uff08\u4f8b\uff1a\"cuda\"\u307e\u305f\u306f\"cpu\"\uff09\n\n    Returns:\n    \u8a13\u7df4\u30fb\u30c6\u30b9\u30c8\u640d\u5931\u304a\u3088\u3073\u8a13\u7df4\u30fb\u30c6\u30b9\u30c8\u7cbe\u5ea6\u30e1\u30c8\u30ea\u30af\u30b9\u306e\u8f9e\u66f8\n    \u5404\u30e1\u30c8\u30ea\u30af\u30b9\u306f\u30a8\u30dd\u30c3\u30af\u3054\u3068\u306e\u5024\u3092\u30ea\u30b9\u30c8\u3067\u4fdd\u6301\n    \u5f62\u5f0f\uff1a{train_loss: [...],\n          train_acc: [...],\n          test_loss: [...],\n          test_acc: [...]} \n    \u4f8b\uff08epochs=2\u306e\u5834\u5408\uff09\uff1a\n         {train_loss: [2.0616, 1.0537],\n          train_acc: [0.3945, 0.3945],\n          test_loss: [1.2641, 1.5706],\n          test_acc: [0.3400, 0.2973]} \n    \"\"\"\n    # \u7a7a\u306e\u7d50\u679c\u8f9e\u66f8\u3092\u4f5c\u6210\n    results = {\"train_loss\": [],\n               \"train_acc\": [],\n               \"test_loss\": [],\n               \"test_acc\": []\n    }\n\n    # \u6307\u5b9a\u30a8\u30dd\u30c3\u30af\u6570\u5206\u3001\u8a13\u7df4\u30fb\u30c6\u30b9\u30c8\u30b9\u30c6\u30c3\u30d7\u3092\u30eb\u30fc\u30d7\n    for epoch in tqdm(range(epochs)):\n        train_loss, train_acc = train_step(model=model,\n                                          dataloader=train_dataloader,\n                                          loss_fn=loss_fn,\n                                          optimizer=optimizer,\n                                          device=device)\n        test_loss, test_acc = test_step(model=model,\n          dataloader=test_dataloader,\n          loss_fn=loss_fn,\n          device=device)\n\n        # \u9032\u884c\u72b6\u6cc1\u3092\u51fa\u529b\n        print(\n          f\"Epoch: {epoch+1} | \"\n          f\"train_loss: {train_loss:.4f} | \"\n          f\"train_acc: {train_acc:.4f} | \"\n          f\"test_loss: {test_loss:.4f} | \"\n          f\"test_acc: {test_acc:.4f}\"\n        )\n\n        # \u7d50\u679c\u8f9e\u66f8\u3092\u66f4\u65b0\n        results[\"train_loss\"].append(train_loss)\n        results[\"train_acc\"].append(train_acc)\n        results[\"test_loss\"].append(test_loss)\n        results[\"test_acc\"].append(test_acc)\n\n    # \u30a8\u30dd\u30c3\u30af\u7d42\u4e86\u6642\u306b\u5165\u529b\u3055\u308c\u305f\u7d50\u679c\u3092\u8fd4\u3059\n    return results\n</code></pre>","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u30e2\u30b8\u30e5\u30fc\u30eb\u5316","Python","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","\u4e0a\u7d1a\u8005\u5411\u3051","\u30b9\u30af\u30ea\u30d7\u30c8\u30e2\u30fc\u30c9","\u518d\u5229\u7528","ML\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5","\u30b3\u30fc\u30c9\u7d44\u7e54\u5316"]},{"location":"PyTorch/06_pytorch_modular/#5","title":"5. \u30e2\u30c7\u30eb\u4fdd\u5b58\u95a2\u6570\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u5316","text":"<p><code>save_model()</code>\u95a2\u6570\u3092<code>utils.py</code>\uff08\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u306e\u7565\uff09\u30b9\u30af\u30ea\u30d7\u30c8\u306b\u8ffd\u52a0\u3057\u307e\u3059\u3002</p> <pre><code>%%writefile going_modular/utils.py\n\"\"\"\nPyTorch\u30e2\u30c7\u30eb\u8a13\u7df4\u30fb\u4fdd\u5b58\u7528\u306e\u5404\u7a2e\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u95a2\u6570\u3092\u542b\u307f\u307e\u3059\u3002\n\"\"\"\nfrom pathlib import Path\nimport torch\n\ndef save_model(model: torch.nn.Module,\n               target_dir: str,\n               model_name: str):\n    \"\"\"PyTorch\u30e2\u30c7\u30eb\u3092\u5bfe\u8c61\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u4fdd\u5b58\u3057\u307e\u3059\u3002\n\n    Args:\n    model: \u4fdd\u5b58\u3059\u308b\u5bfe\u8c61PyTorch\u30e2\u30c7\u30eb\n    target_dir: \u30e2\u30c7\u30eb\u4fdd\u5b58\u7528\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\n    model_name: \u4fdd\u5b58\u30e2\u30c7\u30eb\u306e\u30d5\u30a1\u30a4\u30eb\u540d\u3002\".pth\"\u307e\u305f\u306f\".pt\"\u306e\n      \u30d5\u30a1\u30a4\u30eb\u62e1\u5f35\u5b50\u3092\u542b\u3080\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\n\n    \u4f7f\u7528\u4f8b:\n    save_model(model=model_0,\n               target_dir=\"models\",\n               model_name=\"05_going_modular_tingvgg_model.pth\")\n    \"\"\"\n    # \u5bfe\u8c61\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u4f5c\u6210\n    target_dir_path = Path(target_dir)\n    target_dir_path.mkdir(parents=True, exist_ok=True)\n\n    # \u30e2\u30c7\u30eb\u4fdd\u5b58\u30d1\u30b9\u3092\u4f5c\u6210\n    assert model_name.endswith(\".pth\") or model_name.endswith(\".pt\"), \"model_name\u306f'.pt'\u307e\u305f\u306f'.pth'\u3067\u7d42\u308f\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\"\n    model_save_path = target_dir_path / model_name\n\n    # \u30e2\u30c7\u30eb\u306estate_dict()\u3092\u4fdd\u5b58\n    print(f\"[INFO] \u30e2\u30c7\u30eb\u3092\u4ee5\u4e0b\u306b\u4fdd\u5b58: {model_save_path}\")\n    torch.save(obj=model.state_dict(), f=model_save_path)\n</code></pre>","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u30e2\u30b8\u30e5\u30fc\u30eb\u5316","Python","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","\u4e0a\u7d1a\u8005\u5411\u3051","\u30b9\u30af\u30ea\u30d7\u30c8\u30e2\u30fc\u30c9","\u518d\u5229\u7528","ML\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5","\u30b3\u30fc\u30c9\u7d44\u7e54\u5316"]},{"location":"PyTorch/06_pytorch_modular/#6","title":"6. \u30e2\u30c7\u30eb\u306e\u8a13\u7df4\u3001\u8a55\u4fa1\u3001\u4fdd\u5b58","text":"<p>\u4e0a\u8a18\u3067\u4f5c\u6210\u3057\u305f\u95a2\u6570\u3092\u6d3b\u7528\u3057\u3066\u30e2\u30c7\u30eb\u3092\u8a13\u7df4\u3001\u30c6\u30b9\u30c8\u3001\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58\u3057\u307e\u3057\u3087\u3046\u3002</p> <pre><code># \u30e9\u30f3\u30c0\u30e0\u30b7\u30fc\u30c9\u3092\u8a2d\u5b9a\ntorch.manual_seed(42) \ntorch.cuda.manual_seed(42)\n\n# \u30a8\u30dd\u30c3\u30af\u6570\u3092\u8a2d\u5b9a\nNUM_EPOCHS = 5\n\n# TinyVGG\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u518d\u4f5c\u6210\nmodel_0 = TinyVGG(input_shape=3,                     # \u30ab\u30e9\u30fc\u30c1\u30e3\u30f3\u30cd\u30eb\u6570\uff08RGB\u306a\u306e\u30673\uff09\n                  hidden_units=10, \n                  output_shape=len(train_data.classes)).to(device)\n\n# \u640d\u5931\u95a2\u6570\u3068\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u30fc\u3092\u8a2d\u5b9a\nloss_fn = nn.CrossEntropyLoss()\noptimizer = torch.optim.Adam(params=model_0.parameters(), lr=0.001)\n\n# \u30bf\u30a4\u30de\u30fc\u3092\u958b\u59cb\nfrom timeit import default_timer as timer \nstart_time = timer()\n\n# model_0\u3092\u8a13\u7df4\nmodel_0_results = train(model=model_0, \n                        train_dataloader=train_dataloader,\n                        test_dataloader=test_dataloader,\n                        optimizer=optimizer,\n                        loss_fn=loss_fn, \n                        epochs=NUM_EPOCHS,\n                        device=device)\n\n# \u30bf\u30a4\u30de\u30fc\u3092\u7d42\u4e86\u3057\u3001\u6240\u8981\u6642\u9593\u3092\u51fa\u529b\nend_time = timer()\nprint(f\"[INFO] \u7dcf\u8a13\u7df4\u6642\u9593: {end_time-start_time:.3f}\u79d2\")\n\n# \u30e2\u30c7\u30eb\u3092\u4fdd\u5b58\nsave_model(model=model_0,\n           target_dir=\"models\",\n           model_name=\"05_going_modular_cell_mode_tinyvgg_model.pth\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c\uff1a <pre><code> 20%|\u2588\u2588        | 1/5 [00:01&lt;00:04,  1.13s/it]\nEpoch: 1 | train_loss: 1.0898 | train_acc: 0.4000 | test_loss: 1.0590 | test_acc: 0.3733\n\n 40%|\u2588\u2588\u2588\u2588      | 2/5 [00:02&lt;00:03,  1.11s/it]\nEpoch: 2 | train_loss: 1.0113 | train_acc: 0.5067 | test_loss: 0.9919 | test_acc: 0.4400\n\n 60%|\u2588\u2588\u2588\u2588\u2588\u2588    | 3/5 [00:03&lt;00:02,  1.12s/it]\nEpoch: 3 | train_loss: 0.9729 | train_acc: 0.5289 | test_loss: 0.9899 | test_acc: 0.4533\n\n 80%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  | 4/5 [00:04&lt;00:01,  1.11s/it]\nEpoch: 4 | train_loss: 0.9062 | train_acc: 0.5556 | test_loss: 0.9867 | test_acc: 0.4667\n\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5/5 [00:05&lt;00:00,  1.11s/it]\nEpoch: 5 | train_loss: 0.8973 | train_acc: 0.5867 | test_loss: 1.0007 | test_acc: 0.4800\n[INFO] \u7dcf\u8a13\u7df4\u6642\u9593: 5.566\u79d2\n[INFO] \u30e2\u30c7\u30eb\u3092\u4ee5\u4e0b\u306b\u4fdd\u5b58: models/05_going_modular_cell_mode_tinyvgg_model.pth\n</code></pre></p>","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u30e2\u30b8\u30e5\u30fc\u30eb\u5316","Python","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","\u4e0a\u7d1a\u8005\u5411\u3051","\u30b9\u30af\u30ea\u30d7\u30c8\u30e2\u30fc\u30c9","\u518d\u5229\u7528","ML\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5","\u30b3\u30fc\u30c9\u7d44\u7e54\u5316"]},{"location":"PyTorch/06_pytorch_modular/#61","title":"6.1 \u30e2\u30c7\u30eb\u8a13\u7df4\u3001\u8a55\u4fa1\u3001\u4fdd\u5b58\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u5316","text":"<p>\u5168\u3066\u306e\u30e2\u30b8\u30e5\u30e9\u30fc\u30d5\u30a1\u30a4\u30eb\u3092\u5358\u4e00\u30b9\u30af\u30ea\u30d7\u30c8<code>train.py</code>\u306b\u7d71\u5408\u3057\u307e\u3059\u3002</p> <p>\u3053\u308c\u306b\u3088\u308a\u3001\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u304b\u3089\u4e00\u884c\u3067\u30e2\u30c7\u30eb\u3092\u8a13\u7df4\u3067\u304d\u307e\u3059\uff1a</p> <ul> <li><code>python going_modular/train.py</code></li> <li>\u30ce\u30fc\u30c8\u30d6\u30c3\u30af\u5185: <code>!python going_modular/train.py</code></li> </ul> <p>\u5b9f\u88c5\u624b\u9806\uff1a</p> <ol> <li>\u5fc5\u8981\u306a\u4f9d\u5b58\u95a2\u4fc2\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\uff08<code>torch</code>\u3001<code>os</code>\u3001<code>torchvision.transforms</code>\u3001<code>going_modular</code>\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u5168\u30b9\u30af\u30ea\u30d7\u30c8\uff09</li> <li>\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8a2d\u5b9a\uff08\u30d0\u30c3\u30c1\u30b5\u30a4\u30ba\u3001\u30a8\u30dd\u30c3\u30af\u6570\u3001\u5b66\u7fd2\u7387\u3001\u96a0\u308c\u30e6\u30cb\u30c3\u30c8\u6570\uff09</li> <li>\u8a13\u7df4\u30fb\u30c6\u30b9\u30c8\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u8a2d\u5b9a</li> <li>\u30c7\u30d0\u30a4\u30b9\u975e\u4f9d\u5b58\u30b3\u30fc\u30c9\u306e\u8a2d\u5b9a</li> <li>\u5fc5\u8981\u306a\u30c7\u30fc\u30bf\u5909\u63db\u306e\u4f5c\u6210</li> <li><code>data_setup.py</code>\u3067DataLoader\u4f5c\u6210</li> <li><code>model_builder.py</code>\u3067\u30e2\u30c7\u30eb\u4f5c\u6210</li> <li>\u640d\u5931\u95a2\u6570\u3068\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u30fc\u306e\u8a2d\u5b9a</li> <li><code>engine.py</code>\u3067\u30e2\u30c7\u30eb\u8a13\u7df4</li> <li><code>utils.py</code>\u3067\u30e2\u30c7\u30eb\u4fdd\u5b58</li> </ol> <pre><code>%%writefile going_modular/train.py\n\"\"\"\n\u30c7\u30d0\u30a4\u30b9\u975e\u4f9d\u5b58\u30b3\u30fc\u30c9\u3092\u4f7f\u7528\u3057\u3066PyTorch\u753b\u50cf\u5206\u985e\u30e2\u30c7\u30eb\u3092\u8a13\u7df4\u3057\u307e\u3059\u3002\n\"\"\"\n\nimport os\nimport torch\nfrom torchvision import transforms\nimport data_setup, engine, model_builder, utils\n\n# \u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8a2d\u5b9a\nNUM_EPOCHS = 5\nBATCH_SIZE = 32\nHIDDEN_UNITS = 10\nLEARNING_RATE = 0.001\n\n# \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u8a2d\u5b9a\ntrain_dir = \"data/pizza_steak_sushi/train\"\ntest_dir = \"data/pizza_steak_sushi/test\"\n\n# \u5bfe\u8c61\u30c7\u30d0\u30a4\u30b9\u306e\u8a2d\u5b9a\ndevice = \"mps\" if torch.mps.is_available() else \"cpu\"\n\n# \u5909\u63db\u51e6\u7406\u3092\u4f5c\u6210\ndata_transform = transforms.Compose([\n  transforms.Resize((64, 64)),\n  transforms.ToTensor()\n])\n\n# data_setup.py\u3092\u6d3b\u7528\u3057\u3066DataLoader\u3092\u4f5c\u6210\ntrain_dataloader, test_dataloader, class_names = data_setup.create_dataloaders(\n    train_dir=train_dir,\n    test_dir=test_dir,\n    transform=data_transform,\n    batch_size=BATCH_SIZE\n)\n\n# model_builder.py\u3092\u6d3b\u7528\u3057\u3066\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\nmodel = model_builder.TinyVGG(\n    input_shape=3,\n    hidden_units=HIDDEN_UNITS,\n    output_shape=len(class_names)\n).to(device)\n\n# \u640d\u5931\u95a2\u6570\u3068\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u30fc\u3092\u8a2d\u5b9a\nloss_fn = torch.nn.CrossEntropyLoss()\noptimizer = torch.optim.Adam(model.parameters(), lr=LEARNING_RATE)\n\n# engine.py\u3092\u6d3b\u7528\u3057\u3066\u8a13\u7df4\u3092\u958b\u59cb\nengine.train(model=model,\n             train_dataloader=train_dataloader,\n             test_dataloader=test_dataloader,\n             loss_fn=loss_fn,\n             optimizer=optimizer,\n             epochs=NUM_EPOCHS,\n             device=device)\n\n# utils.py\u3092\u6d3b\u7528\u3057\u3066\u30e2\u30c7\u30eb\u3092\u4fdd\u5b58\nutils.save_model(model=model,\n                 target_dir=\"models\",\n                 model_name=\"05_going_modular_script_mode_tinyvgg_model.pth\")\n</code></pre>","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u30e2\u30b8\u30e5\u30fc\u30eb\u5316","Python","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","\u4e0a\u7d1a\u8005\u5411\u3051","\u30b9\u30af\u30ea\u30d7\u30c8\u30e2\u30fc\u30c9","\u518d\u5229\u7528","ML\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5","\u30b3\u30fc\u30c9\u7d44\u7e54\u5316"]},{"location":"PyTorch/06_pytorch_modular/#_6","title":"\u6700\u7d42\u7684\u306a\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u9020","text":"<p>\u5b8c\u6210\u3057\u305f\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u9020\uff1a <pre><code>data/\n  pizza_steak_sushi/\n    train/\n      pizza/\n        train_image_01.jpeg\n        train_image_02.jpeg\n        ...\n      steak/\n      sushi/\n    test/\n      pizza/\n        test_image_01.jpeg\n        test_image_02.jpeg\n        ...\n      steak/\n      sushi/\ngoing_modular/\n  data_setup.py      # \u30c7\u30fc\u30bf\u51e6\u7406\u6a5f\u80fd\n  engine.py          # \u8a13\u7df4\u30fb\u30c6\u30b9\u30c8\u6a5f\u80fd\n  model_builder.py   # \u30e2\u30c7\u30eb\u69cb\u7bc9\u6a5f\u80fd\n  train.py          # \u30e1\u30a4\u30f3\u8a13\u7df4\u30b9\u30af\u30ea\u30d7\u30c8\n  utils.py          # \u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u6a5f\u80fd\nmodels/\n  saved_model.pth\n</code></pre></p>","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u30e2\u30b8\u30e5\u30fc\u30eb\u5316","Python","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","\u4e0a\u7d1a\u8005\u5411\u3051","\u30b9\u30af\u30ea\u30d7\u30c8\u30e2\u30fc\u30c9","\u518d\u5229\u7528","ML\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5","\u30b3\u30fc\u30c9\u7d44\u7e54\u5316"]},{"location":"PyTorch/06_pytorch_modular/#_7","title":"\u7d71\u5408\u5b9f\u884c","text":"<p>\u5b8c\u6210\u3057\u305f<code>train.py</code>\u30d5\u30a1\u30a4\u30eb\u3092\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u304b\u3089\u5b9f\u884c\u3057\u307e\u3059\uff1a</p> <pre><code>!python going_modular/train.py\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c\uff1a <pre><code>  0%|                                                     | 0/5 [00:00&lt;?, ?it/s]\n/Users/user/miniconda3/envs/deep-learning/lib/python3.12/site-packages/torch/utils/data/dataloader.py:683: UserWarning: 'pin_memory' argument is set as true but not supported on MPS now, then device pinned memory won't be used.\n  warnings.warn(warn_msg)\nEpoch: 1 | train_loss: 1.1013 | train_acc: 0.3047 | test_loss: 1.1212 | test_acc: 0.2604\n 20%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588                                    | 1/5 [00:00&lt;00:03,  1.08it/s]\nEpoch: 2 | train_loss: 1.1039 | train_acc: 0.2969 | test_loss: 1.1335 | test_acc: 0.1979\n 40%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588                           | 2/5 [00:01&lt;00:02,  1.11it/s]\nEpoch: 3 | train_loss: 1.1109 | train_acc: 0.3164 | test_loss: 1.1282 | test_acc: 0.2812\n 60%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588                  | 3/5 [00:02&lt;00:01,  1.11it/s]\nEpoch: 4 | train_loss: 1.1010 | train_acc: 0.3086 | test_loss: 1.0961 | test_acc: 0.2604\n 80%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588         | 4/5 [00:03&lt;00:00,  1.12it/s]\nEpoch: 5 | train_loss: 1.0763 | train_acc: 0.4727 | test_loss: 1.1035 | test_acc: 0.2396\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5/5 [00:04&lt;00:00,  1.11it/s]\n[INFO] \u30e2\u30c7\u30eb\u3092\u4ee5\u4e0b\u306b\u4fdd\u5b58: models/05_going_modular_script_mode_tinyvgg_model.pth\n</code></pre></p>","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u30e2\u30b8\u30e5\u30fc\u30eb\u5316","Python","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","\u4e0a\u7d1a\u8005\u5411\u3051","\u30b9\u30af\u30ea\u30d7\u30c8\u30e2\u30fc\u30c9","\u518d\u5229\u7528","ML\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5","\u30b3\u30fc\u30c9\u7d44\u7e54\u5316"]},{"location":"PyTorch/06_pytorch_modular/#_8","title":"\u307e\u3068\u3081","text":"<p>\u7d20\u6674\u3089\u3057\u3044\u6210\u679c\u3067\u3059\uff01</p> <p>\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u4e00\u884c\u3067\u30e2\u30c7\u30eb\u3092\u8a13\u7df4\u3067\u304d\u307e\u3057\u305f\u3002</p> <p>\u5b9f\u88c5\u306b\u306f\u76f8\u5f53\u306a\u91cf\u306e\u30b3\u30fc\u30c9\u304c\u5fc5\u8981\u3067\u3057\u305f\u304c\u3001\u3053\u308c\u3067<code>.py</code>\u30d5\u30a1\u30a4\u30eb\u5f62\u5f0f\u306e\u30b3\u30fc\u30c9\u3092\u4f55\u5ea6\u3067\u3082\u30a4\u30f3\u30dd\u30fc\u30c8\u30fb\u518d\u5229\u7528\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002</p>","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u30e2\u30b8\u30e5\u30fc\u30eb\u5316","Python","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","\u4e0a\u7d1a\u8005\u5411\u3051","\u30b9\u30af\u30ea\u30d7\u30c8\u30e2\u30fc\u30c9","\u518d\u5229\u7528","ML\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5","\u30b3\u30fc\u30c9\u7d44\u7e54\u5316"]},{"location":"PyTorch/06_pytorch_modular/#_9","title":"\u5b66\u7fd2\u30dd\u30a4\u30f3\u30c8\u306e\u632f\u308a\u8fd4\u308a","text":"<ol> <li>\u30e2\u30b8\u30e5\u30fc\u30eb\u5316\u306e\u5229\u70b9: \u30ce\u30fc\u30c8\u30d6\u30c3\u30af\u306e\u30b3\u30fc\u30c9\u3092\u518d\u5229\u7528\u53ef\u80fd\u306aPython\u30b9\u30af\u30ea\u30d7\u30c8\u306b\u5909\u63db</li> <li>\u8cac\u4efb\u5206\u96e2: \u30c7\u30fc\u30bf\u51e6\u7406\u3001\u30e2\u30c7\u30eb\u69cb\u7bc9\u3001\u8a13\u7df4\u3001\u4fdd\u5b58\u306e\u5404\u6a5f\u80fd\u3092\u500b\u5225\u30e2\u30b8\u30e5\u30fc\u30eb\u306b\u5206\u96e2</li> <li>\u30b9\u30af\u30ea\u30d7\u30c8\u30e2\u30fc\u30c9: <code>%%writefile</code>\u30de\u30b8\u30c3\u30af\u30b3\u30de\u30f3\u30c9\u3092\u4f7f\u7528\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u81ea\u52d5\u751f\u6210</li> <li>\u52b9\u7387\u7684\u306a\u30ef\u30fc\u30af\u30d5\u30ed\u30fc: \u4e00\u5ea6\u306e\u8a2d\u5b9a\u3067\u7e70\u308a\u8fd4\u3057\u5b9f\u884c\u53ef\u80fd\u306a\u6a5f\u68b0\u5b66\u7fd2\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3</li> <li>\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5b9f\u884c: \u30ce\u30fc\u30c8\u30d6\u30c3\u30af\u74b0\u5883\u306b\u4f9d\u5b58\u3057\u306a\u3044\u5b9f\u884c\u74b0\u5883\u306e\u69cb\u7bc9</li> </ol>","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u30e2\u30b8\u30e5\u30fc\u30eb\u5316","Python","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","\u4e0a\u7d1a\u8005\u5411\u3051","\u30b9\u30af\u30ea\u30d7\u30c8\u30e2\u30fc\u30c9","\u518d\u5229\u7528","ML\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5","\u30b3\u30fc\u30c9\u7d44\u7e54\u5316"]},{"location":"PyTorch/06_pytorch_modular/#_10","title":"\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u6700\u9069\u5316\u306e\u30d2\u30f3\u30c8","text":"<ul> <li>\u5927\u898f\u6a21\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8: <code>num_workers</code>\u3092\u5897\u3084\u3057\u3066\u30c7\u30fc\u30bf\u30ed\u30fc\u30c7\u30a3\u30f3\u30b0\u3092\u9ad8\u901f\u5316</li> <li>GPU\u4f7f\u7528: MPS\u5bfe\u5fdc\u74b0\u5883\u3067\u306f\u81ea\u52d5\u7684\u306bGPU\u304c\u4f7f\u7528\u3055\u308c\u307e\u3059</li> <li>\u30d0\u30c3\u30c1\u30b5\u30a4\u30ba\u8abf\u6574: \u30e1\u30e2\u30ea\u306b\u5fdc\u3058\u3066\u30d0\u30c3\u30c1\u30b5\u30a4\u30ba\u3092\u8abf\u6574\u3057\u3066\u304f\u3060\u3055\u3044</li> </ul> <p>\u3053\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u5316\u624b\u6cd5\u306b\u3088\u308a\u3001\u52b9\u7387\u7684\u3067\u4fdd\u5b88\u6027\u306e\u9ad8\u3044\u6a5f\u68b0\u5b66\u7fd2\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u69cb\u7bc9\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\u5404\u30e2\u30b8\u30e5\u30fc\u30eb\u306f\u72ec\u7acb\u3057\u3066 \u30c6\u30b9\u30c8\u30fb\u30c7\u30d0\u30c3\u30b0\u304c\u53ef\u80fd\u3067\u3001\u30c1\u30fc\u30e0\u958b\u767a\u306b\u3082\u9069\u7528\u3067\u304d\u307e\u3059\u3002</p>","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u30e2\u30b8\u30e5\u30fc\u30eb\u5316","Python","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","\u4e0a\u7d1a\u8005\u5411\u3051","\u30b9\u30af\u30ea\u30d7\u30c8\u30e2\u30fc\u30c9","\u518d\u5229\u7528","ML\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5","\u30b3\u30fc\u30c9\u7d44\u7e54\u5316"]},{"location":"PyTorch/07_pytorch_transfer_learning/","title":"PyTorch\u8ee2\u79fb\u5b66\u7fd2 - \u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u3067\u753b\u50cf\u5206\u985e\u7cbe\u5ea6\u3092\u5287\u7684\u306b\u5411\u4e0a\u3055\u305b\u308b","text":"","tags":["PyTorch","\u8ee2\u79fb\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","EfficientNet","\u6a5f\u68b0\u5b66\u7fd2","\u4e0a\u7d1a\u8005\u5411\u3051","\u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/07_pytorch_transfer_learning/#_1","title":"\u6982\u8981","text":"<p>\u3053\u308c\u307e\u3067\u3044\u304f\u3064\u304b\u306e\u30e2\u30c7\u30eb\u3092\u624b\u4f5c\u308a\u3067\u69cb\u7bc9\u3057\u3066\u304d\u307e\u3057\u305f\u304c\u3001\u6027\u80fd\u306f\u671f\u5f85\u901a\u308a\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002</p> <p>\u65e2\u5b58\u306e\u9ad8\u6027\u80fd\u306a\u30e2\u30c7\u30eb\u3092\u81ea\u5206\u306e\u554f\u984c\u306b\u6d3b\u7528\u3067\u304d\u306a\u3044\u304b\uff1f\u3068\u8003\u3048\u305f\u3053\u3068\u306f\u3042\u308a\u307e\u305b\u3093\u304b\uff1f</p> <p>\u6df1\u5c64\u5b66\u7fd2\u306e\u4e16\u754c\u3067\u306f\u3001\u305d\u306e\u7b54\u3048\u306f\u591a\u304f\u306e\u5834\u5408\u300cYes\u300d\u3067\u3059\u3002</p> <p>\u672c\u8a18\u4e8b\u3067\u306f\u3001\u8ee2\u79fb\u5b66\u7fd2\uff08Transfer Learning\uff09\u3068\u3044\u3046\u5f37\u529b\u306a\u6280\u8853\u3092\u4f7f\u3063\u3066\u3001FoodVision Mini\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u6027\u80fd\u3092\u5287\u7684\u306b\u5411\u4e0a\u3055\u305b\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002</p>","tags":["PyTorch","\u8ee2\u79fb\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","EfficientNet","\u6a5f\u68b0\u5b66\u7fd2","\u4e0a\u7d1a\u8005\u5411\u3051","\u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/07_pytorch_transfer_learning/#_2","title":"\u5b66\u7fd2\u76ee\u6a19","text":"<p>\u3053\u306e\u8a18\u4e8b\u3092\u8aad\u3080\u3053\u3068\u3067\u3001\u4ee5\u4e0b\u306e\u30b9\u30ad\u30eb\u3092\u8eab\u306b\u3064\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a</p> <ul> <li>\u8ee2\u79fb\u5b66\u7fd2\u306e\u6982\u5ff5\u3068\u5229\u70b9\u306e\u7406\u89e3</li> <li>PyTorch\u306e\u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u306e\u6d3b\u7528\u65b9\u6cd5</li> <li>\u30e2\u30c7\u30eb\u306e\u5c64\u306e\u51cd\u7d50\u3068\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u6280\u8853</li> <li>\u5b9f\u969b\u306e\u753b\u50cf\u30c7\u30fc\u30bf\u3067\u306e\u6027\u80fd\u691c\u8a3c</li> </ul>","tags":["PyTorch","\u8ee2\u79fb\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","EfficientNet","\u6a5f\u68b0\u5b66\u7fd2","\u4e0a\u7d1a\u8005\u5411\u3051","\u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/07_pytorch_transfer_learning/#_3","title":"\u524d\u63d0\u77e5\u8b58","text":"<ul> <li>PyTorch\u306e\u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9</li> <li>CNN\u306e\u57fa\u672c\u6982\u5ff5</li> <li>\u753b\u50cf\u5206\u985e\u306e\u57fa\u790e\u77e5\u8b58</li> <li>DataLoader\u306e\u4f7f\u7528\u7d4c\u9a13</li> </ul>","tags":["PyTorch","\u8ee2\u79fb\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","EfficientNet","\u6a5f\u68b0\u5b66\u7fd2","\u4e0a\u7d1a\u8005\u5411\u3051","\u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/07_pytorch_transfer_learning/#_4","title":"\u8ee2\u79fb\u5b66\u7fd2\u3068\u306f\uff1f","text":"<p>\u8ee2\u79fb\u5b66\u7fd2\u306f\u3001\u4ed6\u306e\u554f\u984c\u3067\u5b66\u7fd2\u3057\u305f\u30e2\u30c7\u30eb\u306e\u30d1\u30bf\u30fc\u30f3\uff08\u91cd\u307f\u3068\u3082\u547c\u3070\u308c\u308b\uff09\u3092\u3001\u81ea\u5206\u306e\u554f\u984c\u306b\u5fdc\u7528\u3059\u308b\u6280\u8853\u3067\u3059\u3002</p> <p>\u4f8b\u3048\u3070\uff1a - ImageNet\uff08\u6570\u767e\u4e07\u679a\u306e\u69d8\u3005\u306a\u7269\u4f53\u753b\u50cf\uff09\u3067\u5b66\u7fd2\u3057\u305f\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3\u30e2\u30c7\u30eb\u306e\u30d1\u30bf\u30fc\u30f3\u3092\u3001FoodVision Mini\u30e2\u30c7\u30eb\u306b\u6d3b\u7528 - \u5927\u91cf\u306e\u30c6\u30ad\u30b9\u30c8\u30c7\u30fc\u30bf\u3067\u5b66\u7fd2\u3057\u305f\u8a00\u8a9e\u30e2\u30c7\u30eb\u306e\u30d1\u30bf\u30fc\u30f3\u3092\u3001\u30c6\u30ad\u30b9\u30c8\u5206\u985e\u554f\u984c\u306e\u57fa\u76e4\u3068\u3057\u3066\u4f7f\u7528</p> <p>\u57fa\u672c\u7684\u306a\u8003\u3048\u65b9\u306f\uff1a\u9ad8\u6027\u80fd\u306a\u65e2\u5b58\u30e2\u30c7\u30eb\u3092\u898b\u3064\u3051\u3066\u3001\u81ea\u5206\u306e\u554f\u984c\u306b\u9069\u7528\u3059\u308b\u3053\u3068\u3067\u3059\u3002</p> <p>\u8ee2\u79fb\u5b66\u7fd2\u3092\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3\u3068\u81ea\u7136\u8a00\u8a9e\u51e6\u7406\uff08NLP\uff09\u306b\u9069\u7528\u3057\u305f\u4f8b\u3002\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3\u3067\u306f\u3001ImageNet\u306e\u6570\u767e\u4e07\u679a\u306e\u753b\u50cf\u3067\u5b66\u7fd2\u3057\u305f\u30d1\u30bf\u30fc\u30f3\u3092\u5225\u306e\u554f\u984c\u306b\u9069\u7528\u3057\u3001NLP\u3067\u306f\u8a00\u8a9e\u30e2\u30c7\u30eb\u304cWikipedia\u5168\u4f53\uff08\u307e\u305f\u306f\u305d\u308c\u4ee5\u4e0a\uff09\u3092\u8aad\u3093\u3067\u8a00\u8a9e\u306e\u69cb\u9020\u3092\u5b66\u7fd2\u3057\u3001\u305d\u306e\u77e5\u8b58\u3092\u5225\u306e\u554f\u984c\u306b\u9069\u7528\u3057\u307e\u3059\u3002</p>","tags":["PyTorch","\u8ee2\u79fb\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","EfficientNet","\u6a5f\u68b0\u5b66\u7fd2","\u4e0a\u7d1a\u8005\u5411\u3051","\u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/07_pytorch_transfer_learning/#_5","title":"\u8ee2\u79fb\u5b66\u7fd2\u3092\u4f7f\u3046\u7406\u7531","text":"<p>\u8ee2\u79fb\u5b66\u7fd2\u306b\u306f\u4e3b\u306b2\u3064\u306e\u5229\u70b9\u304c\u3042\u308a\u307e\u3059\uff1a</p>","tags":["PyTorch","\u8ee2\u79fb\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","EfficientNet","\u6a5f\u68b0\u5b66\u7fd2","\u4e0a\u7d1a\u8005\u5411\u3051","\u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/07_pytorch_transfer_learning/#1","title":"1. \u5b9f\u8a3c\u6e08\u307f\u306e\u65e2\u5b58\u30e2\u30c7\u30eb\u306e\u6d3b\u7528","text":"<p>\u81ea\u5206\u306e\u554f\u984c\u306b\u985e\u4f3c\u3057\u305f\u554f\u984c\u3067\u8a3c\u660e\u3055\u308c\u305f\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3092\u6d3b\u7528\u3067\u304d\u307e\u3059\u3002</p>","tags":["PyTorch","\u8ee2\u79fb\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","EfficientNet","\u6a5f\u68b0\u5b66\u7fd2","\u4e0a\u7d1a\u8005\u5411\u3051","\u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/07_pytorch_transfer_learning/#2","title":"2. \u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u306e\u77e5\u8b58\u306e\u5229\u7528","text":"<p>\u985e\u4f3c\u30c7\u30fc\u30bf\u3067\u65e2\u306b\u5b66\u7fd2\u6e08\u307f\u306e\u30e2\u30c7\u30eb\u3092\u6d3b\u7528\u3067\u304d\u308b\u305f\u3081\u3001\u5c11\u306a\u3044\u30ab\u30b9\u30bf\u30e0\u30c7\u30fc\u30bf\u3067\u512a\u308c\u305f\u7d50\u679c\u3092\u9054\u6210\u3067\u304d\u307e\u3059\u3002</p> <p>\u7814\u7a76\u3068\u5b9f\u8df5\u306e\u4e21\u65b9\u3067\u8ee2\u79fb\u5b66\u7fd2\u306e\u4f7f\u7528\u304c\u652f\u6301\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u30b9\u30af\u30e9\u30c3\u30c1\u304b\u3089\u306e\u5b66\u7fd2\u3068\u8ee2\u79fb\u5b66\u7fd2\u306e\u3069\u3061\u3089\u304c\u5b9f\u8df5\u7684\u306b\u512a\u308c\u3066\u3044\u308b\u304b\u3092\u8abf\u67fb\u3057\u305f\u7814\u7a76\u3067\u306f\u3001\u30b3\u30b9\u30c8\u3068\u6642\u9593\u306e\u89b3\u70b9\u304b\u3089\u8ee2\u79fb\u5b66\u7fd2\u304c\u5727\u5012\u7684\u306b\u6709\u76ca\u3067\u3042\u308b\u3053\u3068\u304c\u5224\u660e\u3057\u307e\u3057\u305f\u3002</p>","tags":["PyTorch","\u8ee2\u79fb\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","EfficientNet","\u6a5f\u68b0\u5b66\u7fd2","\u4e0a\u7d1a\u8005\u5411\u3051","\u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/07_pytorch_transfer_learning/#_6","title":"\u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u306e\u5165\u624b\u5148","text":"<p>\u6df1\u5c64\u5b66\u7fd2\u306e\u4e16\u754c\u306f\u7d20\u6674\u3089\u3057\u3044\u5834\u6240\u3067\u3059\u3002\u591a\u304f\u306e\u4eba\u3005\u304c\u81ea\u5206\u306e\u7814\u7a76\u6210\u679c\u3092\u5171\u6709\u3057\u3066\u3044\u307e\u3059\u3002</p> <p>\u6700\u65b0\u306e\u6700\u5148\u7aef\u7814\u7a76\u306e\u30b3\u30fc\u30c9\u3068\u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u306f\u3001\u8ad6\u6587\u767a\u8868\u304b\u3089\u6570\u65e5\u4ee5\u5185\u306b\u30ea\u30ea\u30fc\u30b9\u3055\u308c\u308b\u3053\u3068\u304c\u591a\u3044\u3067\u3059\u3002</p> \u5834\u6240 \u63d0\u4f9b\u5185\u5bb9 \u30ea\u30f3\u30af PyTorch\u30c9\u30e1\u30a4\u30f3\u30e9\u30a4\u30d6\u30e9\u30ea \u5404PyTorch\u30c9\u30e1\u30a4\u30f3\u30e9\u30a4\u30d6\u30e9\u30ea\uff08<code>torchvision</code>\u3001<code>torchtext</code>\uff09\u306b\u306f\u4f55\u3089\u304b\u306e\u5f62\u3067\u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u3089\u306e\u30e2\u30c7\u30eb\u306fPyTorch\u5185\u3067\u76f4\u63a5\u52d5\u4f5c\u3057\u307e\u3059\u3002 <code>torchvision.models</code>, <code>torchtext.models</code>, <code>torchaudio.models</code> HuggingFace Hub \u4e16\u754c\u4e2d\u306e\u7d44\u7e54\u306b\u3088\u308b\u3001\u69d8\u3005\u306a\u30c9\u30e1\u30a4\u30f3\uff08\u8996\u899a\u3001\u30c6\u30ad\u30b9\u30c8\u3001\u97f3\u58f0\u306a\u3069\uff09\u306e\u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3002\u591a\u69d8\u306a\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3082\u63d0\u4f9b\u3002 models, datasets <code>timm</code>\uff08PyTorch Image Models\uff09\u30e9\u30a4\u30d6\u30e9\u30ea \u6700\u65b0\u304b\u3064\u6700\u9ad8\u306e\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3\u30e2\u30c7\u30eb\u306e\u307b\u307c\u3059\u3079\u3066\u3092PyTorch\u30b3\u30fc\u30c9\u3067\u63d0\u4f9b\u3002\u305d\u306e\u4ed6\u591a\u304f\u306e\u6709\u7528\u306a\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3\u6a5f\u80fd\u3082\u542b\u3080\u3002 GitHub Paperswithcode \u6700\u65b0\u306e\u6700\u5148\u7aef\u6a5f\u68b0\u5b66\u7fd2\u8ad6\u6587\u3068\u30b3\u30fc\u30c9\u5b9f\u88c5\u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3002\u7570\u306a\u308b\u30bf\u30b9\u30af\u3067\u306e\u30e2\u30c7\u30eb\u6027\u80fd\u306e\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u3082\u78ba\u8a8d\u53ef\u80fd\u3002 paperswithcode.com <p>\u91cd\u8981\u306a\u30dd\u30a4\u30f3\u30c8\uff1a \u4e0a\u8a18\u306e\u3088\u3046\u306a\u9ad8\u54c1\u8cea\u306a\u30ea\u30bd\u30fc\u30b9\u3078\u306e\u30a2\u30af\u30bb\u30b9\u304c\u3042\u308b\u3053\u3068\u304b\u3089\u3001\u53d6\u308a\u7d44\u3080\u6df1\u5c64\u5b66\u7fd2\u554f\u984c\u306e\u958b\u59cb\u6642\u306b\u306f\u300c\u81ea\u5206\u306e\u554f\u984c\u306b\u5bfe\u3059\u308b\u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u306f\u5b58\u5728\u3059\u308b\u304b\uff1f\u300d\u3068\u554f\u3046\u3053\u3068\u304c\u4e00\u822c\u7684\u306a\u5b9f\u8df5\u3068\u306a\u308b\u3079\u304d\u3067\u3059\u3002</p> <p>\u6f14\u7fd2\uff1a <code>torchvision.models</code>\u3068HuggingFace Hub Models page\u30925\u5206\u9593\u63a2\u7d22\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\u4f55\u3092\u767a\u898b\u3057\u307e\u3057\u305f\u304b\uff1f</p>","tags":["PyTorch","\u8ee2\u79fb\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","EfficientNet","\u6a5f\u68b0\u5b66\u7fd2","\u4e0a\u7d1a\u8005\u5411\u3051","\u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/07_pytorch_transfer_learning/#_7","title":"\u5b9f\u88c5\u5185\u5bb9","text":"<p><code>torchvision.models</code>\u304b\u3089\u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u3092\u53d6\u5f97\u3057\u3001FoodVision Mini\u554f\u984c\u306b\u5408\u308f\u305b\u3066\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3057\u307e\u3059\u3002</p> \u30c8\u30d4\u30c3\u30af \u5185\u5bb9 0. \u74b0\u5883\u8a2d\u5b9a \u904e\u53bb\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u6709\u7528\u306a\u30b3\u30fc\u30c9\u3092\u591a\u304f\u4f5c\u6210\u3057\u305f\u306e\u3067\u3001\u305d\u308c\u3089\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u518d\u5229\u7528\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002 1. \u30c7\u30fc\u30bf\u53d6\u5f97 \u4f7f\u7528\u3057\u3066\u304d\u305f\u30d4\u30b6\u3001\u30b9\u30c6\u30fc\u30ad\u3001\u5bff\u53f8\u306e\u753b\u50cf\u5206\u985e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u53d6\u5f97\u3057\u3001\u30e2\u30c7\u30eb\u7d50\u679c\u306e\u6539\u5584\u3092\u8a66\u307f\u307e\u3059\u3002 2. Datasets\u3068DataLoaders\u306e\u4f5c\u6210 \u7b2c06\u7ae0\u3067\u4f5c\u6210\u3057\u305f<code>data_setup.py</code>\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u4f7f\u7528\u3057\u3066DataLoaders\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002 3. \u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u306e\u53d6\u5f97\u3068\u30ab\u30b9\u30bf\u30de\u30a4\u30ba <code>torchvision.models</code>\u304b\u3089\u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3001\u81ea\u5206\u306e\u554f\u984c\u306b\u5408\u308f\u305b\u3066\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3057\u307e\u3059\u3002 4. \u30e2\u30c7\u30eb\u8a13\u7df4 \u65b0\u3057\u3044\u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u304c\u30d4\u30b6\u3001\u30b9\u30c6\u30fc\u30ad\u3001\u5bff\u53f8\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3067\u3069\u306e\u3088\u3046\u306b\u52d5\u4f5c\u3059\u308b\u304b\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002\u524d\u7ae0\u3067\u4f5c\u6210\u3057\u305f\u8a13\u7df4\u95a2\u6570\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 5. \u640d\u5931\u66f2\u7dda\u306e\u53ef\u8996\u5316\u306b\u3088\u308b\u30e2\u30c7\u30eb\u8a55\u4fa1 \u6700\u521d\u306e\u8ee2\u79fb\u5b66\u7fd2\u30e2\u30c7\u30eb\u306e\u6027\u80fd\u306f\u3069\u3046\u3067\u3057\u305f\u304b\uff1f\u904e\u5b66\u7fd2\u3084\u672a\u5b66\u7fd2\u306f\u767a\u751f\u3057\u307e\u3057\u305f\u304b\uff1f 6. \u30c6\u30b9\u30c8\u30bb\u30c3\u30c8\u306e\u753b\u50cf\u3067\u306e\u4e88\u6e2c \u30e2\u30c7\u30eb\u306e\u8a55\u4fa1\u6307\u6a19\u3092\u78ba\u8a8d\u3059\u308b\u3053\u3068\u3082\u91cd\u8981\u3067\u3059\u304c\u3001\u30c6\u30b9\u30c8\u30b5\u30f3\u30d7\u30eb\u3067\u306e\u4e88\u6e2c\u3092\u8996\u899a\u5316\u3059\u308b\u3053\u3068\u3082\u540c\u69d8\u306b\u91cd\u8981\u3067\u3059\u3002\u53ef\u8996\u5316\u3001\u53ef\u8996\u5316\u3001\u53ef\u8996\u5316\uff01","tags":["PyTorch","\u8ee2\u79fb\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","EfficientNet","\u6a5f\u68b0\u5b66\u7fd2","\u4e0a\u7d1a\u8005\u5411\u3051","\u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/07_pytorch_transfer_learning/#0","title":"0. \u74b0\u5883\u8a2d\u5b9a","text":"<p>\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306b\u5fc5\u8981\u306a\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u30a4\u30f3\u30dd\u30fc\u30c8/\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u958b\u59cb\u3057\u307e\u3057\u3087\u3046\u3002</p> <p>\u30b3\u30fc\u30c9\u306e\u8a18\u8ff0\u3092\u7bc0\u7d04\u3059\u308b\u305f\u3081\u3001\u524d\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u4f5c\u6210\u3057\u305fPython\u30b9\u30af\u30ea\u30d7\u30c8\uff08<code>data_setup.py</code>\u3084<code>engine.py</code>\u306a\u3069\uff09\u3092\u6d3b\u7528\u3057\u307e\u3059\u3002</p> <p>\u307e\u305f\u3001\u5f8c\u3067\u30e2\u30c7\u30eb\u306e\u8996\u899a\u7684\u8868\u73fe\u3092\u63d0\u4f9b\u3059\u308b\u306e\u306b\u5f79\u7acb\u3064<code>torchinfo</code>\u30d1\u30c3\u30b1\u30fc\u30b8\u3082\u53d6\u5f97\u3057\u307e\u3059\u3002</p> <pre><code># \u901a\u5e38\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\u3092\u7d9a\u884c\nimport matplotlib.pyplot as plt\nimport torch\nimport torchvision\n\nfrom torch import nn\nfrom torchvision import transforms\nfrom torchinfo import summary\n# pip install -q torchinfo\nfrom going_modular import data_setup, engine\n</code></pre> <p>\u30c7\u30d0\u30a4\u30b9\u975e\u4f9d\u5b58\u30b3\u30fc\u30c9\u3092\u8a2d\u5b9a\u3057\u307e\u3057\u3087\u3046\u3002</p> <pre><code># \u30c7\u30d0\u30a4\u30b9\u975e\u4f9d\u5b58\u30b3\u30fc\u30c9\u306e\u8a2d\u5b9a\ndevice = \"mps\" if torch.mps.is_available() else \"cpu\"\ndevice\n</code></pre> <pre><code>'mps'\n</code></pre>","tags":["PyTorch","\u8ee2\u79fb\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","EfficientNet","\u6a5f\u68b0\u5b66\u7fd2","\u4e0a\u7d1a\u8005\u5411\u3051","\u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/07_pytorch_transfer_learning/#1_1","title":"1. \u30c7\u30fc\u30bf\u53d6\u5f97","text":"<p>\u8ee2\u79fb\u5b66\u7fd2\u3092\u4f7f\u7528\u3059\u308b\u524d\u306b\u3001\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304c\u5fc5\u8981\u3067\u3059\u3002</p> <p>\u8ee2\u79fb\u5b66\u7fd2\u3068\u4ee5\u524d\u306e\u30e2\u30c7\u30eb\u69cb\u7bc9\u306e\u8a66\u307f\u3092\u6bd4\u8f03\u3059\u308b\u305f\u3081\u3001FoodVision Mini\u3067\u4f7f\u7528\u3057\u3066\u304d\u305f\u540c\u3058\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u307e\u3059\u3002</p> <p>GitHub\u304b\u3089<code>pizza_steak_sushi.zip</code>\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u89e3\u51cd\u3059\u308b\u30b3\u30fc\u30c9\u3092\u66f8\u304d\u307e\u3057\u3087\u3046\u3002</p> <p>\u30c7\u30fc\u30bf\u304c\u65e2\u306b\u5b58\u5728\u3059\u308b\u5834\u5408\u306f\u518d\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u306a\u3044\u3088\u3046\u306b\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002</p> <pre><code>import os\nimport zipfile\n\nfrom pathlib import Path\n\nimport requests\n\n# \u30c7\u30fc\u30bf\u30d5\u30a9\u30eb\u30c0\u3078\u306e\u30d1\u30b9\u3092\u8a2d\u5b9a\ndata_path = Path(\"data/\")\nimage_path = data_path / \"pizza_steak_sushi\"\n\n# \u753b\u50cf\u30d5\u30a9\u30eb\u30c0\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u3001\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u6e96\u5099...\nif image_path.is_dir():\n    print(f\"{image_path} \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304c\u5b58\u5728\u3057\u307e\u3059\u3002\")\nelse:\n    print(f\"{image_path} \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304c\u898b\u3064\u304b\u308a\u307e\u305b\u3093\u3002\u4f5c\u6210\u3057\u307e\u3059...\")\n    image_path.mkdir(parents=True, exist_ok=True)\n\n    # \u30d4\u30b6\u3001\u30b9\u30c6\u30fc\u30ad\u3001\u5bff\u53f8\u30c7\u30fc\u30bf\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\n    with open(data_path / \"pizza_steak_sushi.zip\", \"wb\") as f:\n        request = requests.get(\"https://github.com/vinsmoke-three/deeplearning-with-pytorch/raw/main/data/pizza_steak_sushi.zip\")\n        print(\"\u30d4\u30b6\u3001\u30b9\u30c6\u30fc\u30ad\u3001\u5bff\u53f8\u30c7\u30fc\u30bf\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u4e2d...\")\n        f.write(request.content)\n\n    # \u30d4\u30b6\u3001\u30b9\u30c6\u30fc\u30ad\u3001\u5bff\u53f8\u30c7\u30fc\u30bf\u3092\u89e3\u51cd\n    with zipfile.ZipFile(data_path / \"pizza_steak_sushi.zip\", \"r\") as zip_ref:\n        print(\"\u30d4\u30b6\u3001\u30b9\u30c6\u30fc\u30ad\u3001\u5bff\u53f8\u30c7\u30fc\u30bf\u3092\u89e3\u51cd\u4e2d...\") \n        zip_ref.extractall(image_path)\n\n    # .zip\u30d5\u30a1\u30a4\u30eb\u3092\u524a\u9664\n    os.remove(data_path / \"pizza_steak_sushi.zip\")\n</code></pre> <pre><code>data/pizza_steak_sushi \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304c\u5b58\u5728\u3057\u307e\u3059\u3002\n</code></pre> <p>\u8a13\u7df4\u3068\u30c6\u30b9\u30c8\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3078\u306e\u30d1\u30b9\u3092\u4f5c\u6210\u3057\u307e\u3057\u3087\u3046\u3002</p> <pre><code># \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u8a2d\u5b9a\ntrain_dir = image_path / \"train\"\ntest_dir = image_path / \"test\"\n</code></pre>","tags":["PyTorch","\u8ee2\u79fb\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","EfficientNet","\u6a5f\u68b0\u5b66\u7fd2","\u4e0a\u7d1a\u8005\u5411\u3051","\u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/07_pytorch_transfer_learning/#2-datasetsdataloaders","title":"2. Datasets\u3068DataLoaders\u306e\u4f5c\u6210","text":"","tags":["PyTorch","\u8ee2\u79fb\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","EfficientNet","\u6a5f\u68b0\u5b66\u7fd2","\u4e0a\u7d1a\u8005\u5411\u3051","\u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/07_pytorch_transfer_learning/#21-torchvisionmodels","title":"2.1 <code>torchvision.models</code>\u7528\u306e\u5909\u63db\u306e\u4f5c\u6210\uff08\u624b\u52d5\u4f5c\u6210\uff09","text":"<p>\u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u3092\u4f7f\u7528\u3059\u308b\u969b\u306f\u3001\u30e2\u30c7\u30eb\u306b\u5165\u529b\u3059\u308b\u30ab\u30b9\u30bf\u30e0\u30c7\u30fc\u30bf\u304c\u3001\u30e2\u30c7\u30eb\u306e\u5143\u306e\u8a13\u7df4\u30c7\u30fc\u30bf\u3068\u540c\u3058\u65b9\u6cd5\u3067\u6e96\u5099\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u91cd\u8981\u3067\u3059\u3002</p> <p><code>torchvision</code> v0.13+\u4ee5\u524d\u3067\u306f\u3001<code>torchvision.models</code>\u306e\u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u7528\u306e\u5909\u63db\u3092\u4f5c\u6210\u3059\u308b\u305f\u3081\u3001\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u8a18\u8f09\u3055\u308c\u3066\u3044\u307e\u3057\u305f\uff1a</p> <p>\u3059\u3079\u3066\u306e\u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u306f\u3001\u540c\u3058\u65b9\u6cd5\u3067\u6b63\u898f\u5316\u3055\u308c\u305f\u5165\u529b\u753b\u50cf\u3092\u671f\u5f85\u3057\u307e\u3059\u3002\u3064\u307e\u308a\u3001\u5f62\u72b6 (3 x H x W) \u306e3\u30c1\u30e3\u30f3\u30cd\u30ebRGB\u753b\u50cf\u306e\u30df\u30cb\u30d0\u30c3\u30c1\u3067\u3001H\u3068W\u306f\u5c11\u306a\u304f\u3068\u3082224\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002</p> <p>\u753b\u50cf\u306f <code>[0, 1]</code> \u306e\u7bc4\u56f2\u306b\u30ed\u30fc\u30c9\u3057\u3001<code>mean = [0.485, 0.456, 0.406]</code> \u3068 <code>std = [0.229, 0.224, 0.225]</code> \u3092\u4f7f\u7528\u3057\u3066\u6b63\u898f\u5316\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002</p> <p>\u6b63\u898f\u5316\u306b\u306f\u4ee5\u4e0b\u306e\u5909\u63db\u3092\u4f7f\u7528\u3067\u304d\u307e\u3059\uff1a</p> <pre><code>normalize = transforms.Normalize(mean=[0.485, 0.456, 0.406],\n                                 std=[0.229, 0.224, 0.225])\n</code></pre> <p>\u826f\u3044\u30cb\u30e5\u30fc\u30b9\u306f\u3001\u4e0a\u8a18\u306e\u5909\u63db\u3092\u4ee5\u4e0b\u306e\u7d44\u307f\u5408\u308f\u305b\u3067\u5b9f\u73fe\u3067\u304d\u308b\u3053\u3068\u3067\u3059\uff1a</p> \u5909\u63db\u756a\u53f7 \u5fc5\u8981\u306a\u5909\u63db \u5909\u63db\u3092\u5b9f\u884c\u3059\u308b\u30b3\u30fc\u30c9 1 \u30b5\u30a4\u30ba <code>[batch_size, 3, height, width]</code> \u306e\u30df\u30cb\u30d0\u30c3\u30c1\uff08height\u3068width\u306f\u5c11\u306a\u304f\u3068\u3082224x224\uff09 <code>torchvision.transforms.Resize()</code> \u3067\u753b\u50cf\u3092 <code>[3, 224, 224]</code> \u306b\u30ea\u30b5\u30a4\u30ba\u3057\u3001<code>torch.utils.data.DataLoader()</code> \u3067\u753b\u50cf\u306e\u30d0\u30c3\u30c1\u3092\u4f5c\u6210 2 0\u30681\u306e\u9593\u306e\u5024 <code>torchvision.transforms.ToTensor()</code> 3 <code>[0.485, 0.456, 0.406]</code> \u306e\u5e73\u5747\uff08\u5404\u30ab\u30e9\u30fc\u30c1\u30e3\u30f3\u30cd\u30eb\u5168\u4f53\u306e\u5024\uff09 <code>torchvision.transforms.Normalize(mean=...)</code> \u3067\u753b\u50cf\u306e\u5e73\u5747\u3092\u8abf\u6574 4 <code>[0.229, 0.224, 0.225]</code> \u306e\u6a19\u6e96\u504f\u5dee\uff08\u5404\u30ab\u30e9\u30fc\u30c1\u30e3\u30f3\u30cd\u30eb\u5168\u4f53\u306e\u5024\uff09 <code>torchvision.transforms.Normalize(std=...)</code> \u3067\u753b\u50cf\u306e\u6a19\u6e96\u504f\u5dee\u3092\u8abf\u6574 <p>\u6ce8\u610f\uff1a <code>torchvision.models</code>\u306e\u4e00\u90e8\u306e\u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u306f\u3001<code>[3, 224, 224]</code>\u3068\u306f\u7570\u306a\u308b\u30b5\u30a4\u30ba\u3092\u53d6\u308a\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001<code>[3, 240, 240]</code>\u3092\u53d6\u308b\u3082\u306e\u3082\u3042\u308a\u307e\u3059\u3002\u7279\u5b9a\u306e\u5165\u529b\u753b\u50cf\u30b5\u30a4\u30ba\u306b\u3064\u3044\u3066\u306f\u3001\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <p>\u8cea\u554f\uff1a \u5e73\u5747\u3068\u6a19\u6e96\u504f\u5dee\u306e\u5024\u306f\u3069\u3053\u304b\u3089\u6765\u305f\u306e\u3067\u3059\u304b\uff1f\u306a\u305c\u3053\u308c\u3092\u884c\u3046\u5fc5\u8981\u304c\u3042\u308b\u306e\u3067\u3059\u304b\uff1f</p> <p>\u3053\u308c\u3089\u306e\u5024\u306f\u30c7\u30fc\u30bf\u304b\u3089\u8a08\u7b97\u3055\u308c\u307e\u3057\u305f\u3002\u5177\u4f53\u7684\u306b\u306f\u3001\u753b\u50cf\u306e\u30b5\u30d6\u30bb\u30c3\u30c8\u5168\u4f53\u3067\u5e73\u5747\u3068\u6a19\u6e96\u504f\u5dee\u3092\u53d6\u308b\u3053\u3068\u306b\u3088\u3063\u3066\u3001ImageNet\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304b\u3089\u8a08\u7b97\u3055\u308c\u307e\u3057\u305f\u3002</p> <p>\u307e\u305f\u3001\u3053\u308c\u3092\u884c\u3046\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306f\u901a\u5e38\u3001\u9069\u5207\u306a\u30c7\u30fc\u30bf\u5206\u5e03\u3092\u81ea\u5206\u3067\u628a\u63e1\u3059\u308b\u80fd\u529b\u304c\u3042\u308a\u307e\u3059\uff08\u5e73\u5747\u3068\u6a19\u6e96\u504f\u5dee\u304c\u3069\u3053\u306b\u3042\u308b\u5fc5\u8981\u304c\u3042\u308b\u304b\u3092\u81ea\u5206\u3067\u8a08\u7b97\u3057\u307e\u3059\uff09\u304c\u3001\u958b\u59cb\u6642\u306b\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u304c\u3088\u308a\u826f\u3044\u6027\u80fd\u3092\u3088\u308a\u65e9\u304f\u9054\u6210\u3059\u308b\u306e\u306b\u5f79\u7acb\u3061\u307e\u3059\u3002</p> <p>\u4e0a\u8a18\u306e\u624b\u9806\u3092\u5b9f\u884c\u3059\u308b\u305f\u3081\u306b\u3001\u4e00\u9023\u306e<code>torchvision.transforms</code>\u3092\u69cb\u6210\u3057\u307e\u3057\u3087\u3046\u3002</p> <pre><code># \u5909\u63db\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u3092\u624b\u52d5\u3067\u4f5c\u6210\uff08torchvision &lt; 0.13\u3067\u5fc5\u8981\uff09\nmanual_transforms = transforms.Compose([\n    transforms.Resize((224, 224)), # 1. \u3059\u3079\u3066\u306e\u753b\u50cf\u3092224x224\u306b\u30ea\u30b7\u30a7\u30a4\u30d7\uff08\u4e00\u90e8\u306e\u30e2\u30c7\u30eb\u3067\u306f\u7570\u306a\u308b\u30b5\u30a4\u30ba\u304c\u5fc5\u8981\u306a\u5834\u5408\u304c\u3042\u308a\u307e\u3059\uff09\n    transforms.ToTensor(), # 2. \u753b\u50cf\u306e\u5024\u30920\u30681\u306e\u9593\u306b\u5909\u63db\n    transforms.Normalize(mean=[0.485, 0.456, 0.406], # 3. [0.485, 0.456, 0.406]\u306e\u5e73\u5747\uff08\u5404\u30ab\u30e9\u30fc\u30c1\u30e3\u30f3\u30cd\u30eb\u5168\u4f53\uff09\n                         std=[0.229, 0.224, 0.225]) # 4. [0.229, 0.224, 0.225]\u306e\u6a19\u6e96\u504f\u5dee\uff08\u5404\u30ab\u30e9\u30fc\u30c1\u30e3\u30f3\u30cd\u30eb\u5168\u4f53\uff09\n])\n</code></pre> <p>\u7d20\u6674\u3089\u3057\u3044\uff01\u624b\u52d5\u3067\u4f5c\u6210\u3057\u305f\u4e00\u9023\u306e\u5909\u63db\u304c\u753b\u50cf\u3092\u6e96\u5099\u3059\u308b\u6e96\u5099\u304c\u3067\u304d\u307e\u3057\u305f\u3002\u8a13\u7df4\u3068\u30c6\u30b9\u30c8\u7528\u306eDataLoaders\u3092\u4f5c\u6210\u3057\u307e\u3057\u3087\u3046\u3002</p> <p><code>data_setup.py</code>\u30b9\u30af\u30ea\u30d7\u30c8\u306e<code>create_dataloaders</code>\u95a2\u6570\u3092\u4f7f\u7528\u3057\u3066\u3053\u308c\u3089\u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002</p> <p>\u30e2\u30c7\u30eb\u304c\u4e00\u5ea6\u306b32\u30b5\u30f3\u30d7\u30eb\u306e\u30df\u30cb\u30d0\u30c3\u30c1\u3092\u898b\u308b\u3088\u3046\u306b<code>batch_size=32</code>\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002</p> <p>\u305d\u3057\u3066\u3001<code>transform=manual_transforms</code>\u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u4e0a\u8a18\u3067\u4f5c\u6210\u3057\u305f\u5909\u63db\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u3092\u4f7f\u7528\u3057\u3066\u753b\u50cf\u3092\u5909\u63db\u3067\u304d\u307e\u3059\u3002</p> <pre><code># \u8a13\u7df4\u3068\u30c6\u30b9\u30c8\u7528\u306eDataLoaders\u3092\u4f5c\u6210\u3057\u3001\u30af\u30e9\u30b9\u540d\u306e\u30ea\u30b9\u30c8\u3082\u53d6\u5f97\ntrain_dataloader, test_dataloader, class_names = data_setup.create_dataloaders(train_dir=str(train_dir),\n                                                                               test_dir=str(test_dir),\n                                                                               transform=manual_transforms, # \u753b\u50cf\u3092\u30ea\u30b5\u30a4\u30ba\u30010\u301c1\u306b\u5909\u63db\u3001\u6b63\u898f\u5316\n                                                                               batch_size=32) # \u30df\u30cb\u30d0\u30c3\u30c1\u30b5\u30a4\u30ba\u309232\u306b\u8a2d\u5b9a\n\ntrain_dataloader, test_dataloader, class_names\n</code></pre> <pre><code>(&lt;torch.utils.data.dataloader.DataLoader at 0x3537e8170&gt;,\n &lt;torch.utils.data.dataloader.DataLoader at 0x35296dd00&gt;,\n ['pizza', 'steak', 'sushi'])\n</code></pre>","tags":["PyTorch","\u8ee2\u79fb\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","EfficientNet","\u6a5f\u68b0\u5b66\u7fd2","\u4e0a\u7d1a\u8005\u5411\u3051","\u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/07_pytorch_transfer_learning/#22-torchvisionmodels","title":"2.2 <code>torchvision.models</code>\u7528\u306e\u5909\u63db\u306e\u4f5c\u6210\uff08\u81ea\u52d5\u4f5c\u6210\uff09","text":"<p>\u524d\u8ff0\u306e\u3088\u3046\u306b\u3001\u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u3092\u4f7f\u7528\u3059\u308b\u969b\u306f\u3001\u30e2\u30c7\u30eb\u306b\u5165\u529b\u3059\u308b\u30ab\u30b9\u30bf\u30e0\u30c7\u30fc\u30bf\u304c\u3001\u30e2\u30c7\u30eb\u306e\u5143\u306e\u8a13\u7df4\u30c7\u30fc\u30bf\u3068\u540c\u3058\u65b9\u6cd5\u3067\u6e96\u5099\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u91cd\u8981\u3067\u3059\u3002</p> <p>\u4e0a\u8a18\u3067\u306f\u3001\u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u7528\u306e\u5909\u63db\u3092\u624b\u52d5\u3067\u4f5c\u6210\u3059\u308b\u65b9\u6cd5\u3092\u898b\u307e\u3057\u305f\u3002</p> <p>\u3057\u304b\u3057\u3001<code>torchvision</code> v0.13+\u4ee5\u964d\u3001\u81ea\u52d5\u5909\u63db\u4f5c\u6210\u6a5f\u80fd\u304c\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002</p> <p><code>torchvision.models</code>\u304b\u3089\u30e2\u30c7\u30eb\u3092\u8a2d\u5b9a\u3057\u3001\u4f7f\u7528\u3057\u305f\u3044\u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u306e\u91cd\u307f\u3092\u9078\u629e\u3059\u308b\u5834\u5408\u3001\u4f8b\u3048\u3070\u4ee5\u4e0b\u3092\u4f7f\u7528\u3057\u305f\u3044\u3068\u3057\u307e\u3059\uff1a</p> <pre><code>weights = torchvision.models.EfficientNet_B0_Weights.DEFAULT\n</code></pre> <p>\u3053\u3053\u3067\uff1a * <code>EfficientNet_B0_Weights</code>\u306f\u4f7f\u7528\u3057\u305f\u3044\u30e2\u30c7\u30eb\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306e\u91cd\u307f\u3067\u3059\uff08<code>torchvision.models</code>\u306b\u306f\u591a\u304f\u306e\u7570\u306a\u308b\u30e2\u30c7\u30eb\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u3042\u308a\u307e\u3059\uff09 * <code>DEFAULT</code>\u306f\u5229\u7528\u53ef\u80fd\u306a\u6700\u9ad8\u306e\u91cd\u307f\uff08ImageNet\u3067\u306e\u6700\u9ad8\u6027\u80fd\uff09\u3092\u610f\u5473\u3057\u307e\u3059     * \u6ce8\u610f\uff1a \u9078\u629e\u3059\u308b\u30e2\u30c7\u30eb\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306b\u3088\u3063\u3066\u3001<code>IMAGENET_V1</code>\u3084<code>IMAGENET_V2</code>\u306a\u3069\u306e\u4ed6\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u3082\u8868\u793a\u3055\u308c\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\u4e00\u822c\u7684\u306b\u3001\u30d0\u30fc\u30b8\u30e7\u30f3\u756a\u53f7\u304c\u9ad8\u3044\u307b\u3069\u826f\u597d\u3067\u3059\u3002\u305f\u3060\u3057\u3001\u5229\u7528\u53ef\u80fd\u306a\u6700\u9ad8\u306e\u3082\u306e\u304c\u5fc5\u8981\u306a\u5834\u5408\u306f\u3001<code>DEFAULT</code>\u304c\u6700\u3082\u7c21\u5358\u306a\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u3059\u3002\u8a73\u7d30\u306b\u3064\u3044\u3066\u306f\u3001<code>torchvision.models</code>\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <p>\u8a66\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002</p> <pre><code># \u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u306e\u91cd\u307f\u306e\u30bb\u30c3\u30c8\u3092\u53d6\u5f97\nweights = torchvision.models.EfficientNet_B0_Weights.DEFAULT # .DEFAULT = ImageNet\u3067\u306e\u4e8b\u524d\u5b66\u7fd2\u304b\u3089\u5229\u7528\u53ef\u80fd\u306a\u6700\u9ad8\u306e\u91cd\u307f\nweights\n</code></pre> <pre><code>EfficientNet_B0_Weights.IMAGENET1K_V1\n</code></pre> <p>\u305d\u3057\u3066\u3001<code>weights</code>\u306b\u95a2\u9023\u3059\u308b\u5909\u63db\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u305f\u3081\u306b\u3001<code>transforms()</code>\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002</p> <p>\u3053\u308c\u306f\u672c\u8cea\u7684\u306b\u300cImageNet\u4e0a\u3067<code>EfficientNet_B0_Weights</code>\u3092\u8a13\u7df4\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3055\u308c\u305f\u30c7\u30fc\u30bf\u5909\u63db\u3092\u53d6\u5f97\u3059\u308b\u300d\u3068\u8a00\u3063\u3066\u3044\u307e\u3059\u3002</p> <pre><code># \u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u91cd\u307f\u3092\u4f5c\u6210\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3055\u308c\u305f\u5909\u63db\u3092\u53d6\u5f97\nauto_transforms = weights.transforms()\nauto_transforms\n</code></pre> <pre><code>ImageClassification(\n    crop_size=[224]\n    resize_size=[256]\n    mean=[0.485, 0.456, 0.406]\n    std=[0.229, 0.224, 0.225]\n    interpolation=InterpolationMode.BICUBIC\n)\n</code></pre> <p><code>auto_transforms</code>\u304c<code>manual_transforms</code>\u3068\u975e\u5e38\u306b\u4f3c\u3066\u3044\u308b\u3053\u3068\u306b\u6ce8\u76ee\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u552f\u4e00\u306e\u9055\u3044\u306f\u3001<code>auto_transforms</code>\u304c\u9078\u629e\u3057\u305f\u30e2\u30c7\u30eb\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306b\u4ed8\u5c5e\u3057\u3066\u3044\u305f\u306e\u306b\u5bfe\u3057\u3001<code>manual_transforms</code>\u306f\u624b\u52d5\u3067\u4f5c\u6210\u3059\u308b\u5fc5\u8981\u304c\u3042\u3063\u305f\u3053\u3068\u3067\u3059\u3002</p> <p><code>weights.transforms()</code>\u3092\u901a\u3058\u3066\u81ea\u52d5\u7684\u306b\u5909\u63db\u3092\u4f5c\u6210\u3059\u308b\u5229\u70b9\u306f\u3001\u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u304c\u8a13\u7df4\u6642\u306b\u4f7f\u7528\u3057\u305f\u306e\u3068\u540c\u3058\u30c7\u30fc\u30bf\u5909\u63db\u3092\u78ba\u5b9f\u306b\u4f7f\u7528\u3067\u304d\u308b\u3053\u3068\u3067\u3059\u3002</p> <p>\u305f\u3060\u3057\u3001\u81ea\u52d5\u4f5c\u6210\u3055\u308c\u305f\u5909\u63db\u3092\u4f7f\u7528\u3059\u308b\u30c8\u30ec\u30fc\u30c9\u30aa\u30d5\u306f\u3001\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u306e\u6b20\u5982\u3067\u3059\u3002</p> <p>\u4ee5\u524d\u3068\u540c\u69d8\u306b<code>auto_transforms</code>\u3092\u4f7f\u7528\u3057\u3066<code>create_dataloaders()</code>\u3067DataLoaders\u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002</p> <pre><code># \u8a13\u7df4\u3068\u30c6\u30b9\u30c8\u7528\u306eDataLoaders\u3092\u4f5c\u6210\u3057\u3001\u30af\u30e9\u30b9\u540d\u306e\u30ea\u30b9\u30c8\u3082\u53d6\u5f97\ntrain_dataloader, test_dataloader, class_names = data_setup.create_dataloaders(train_dir=str(train_dir),\n                                                                               test_dir=str(test_dir),\n                                                                               transform=auto_transforms, # \u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u3068\u540c\u3058\u30c7\u30fc\u30bf\u5909\u63db\u3092\u81ea\u5206\u306e\u30c7\u30fc\u30bf\u306b\u5b9f\u884c\n                                                                               batch_size=32) # \u30df\u30cb\u30d0\u30c3\u30c1\u30b5\u30a4\u30ba\u309232\u306b\u8a2d\u5b9a\n\ntrain_dataloader, test_dataloader, class_names\n</code></pre> <pre><code>(&lt;torch.utils.data.dataloader.DataLoader at 0x35466bfb0&gt;,\n &lt;torch.utils.data.dataloader.DataLoader at 0x3537bbda0&gt;,\n ['pizza', 'steak', 'sushi'])\n</code></pre>","tags":["PyTorch","\u8ee2\u79fb\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","EfficientNet","\u6a5f\u68b0\u5b66\u7fd2","\u4e0a\u7d1a\u8005\u5411\u3051","\u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/07_pytorch_transfer_learning/#3","title":"3. \u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u306e\u53d6\u5f97","text":"<p>\u3055\u3066\u3001\u3053\u3053\u304b\u3089\u304c\u697d\u3057\u3044\u90e8\u5206\u3067\u3059\uff01</p> <p>\u904e\u53bb\u6570\u56de\u306e\u30ce\u30fc\u30c8\u30d6\u30c3\u30af\u3067\u306f\u3001PyTorch\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u30bc\u30ed\u304b\u3089\u69cb\u7bc9\u3057\u3066\u304d\u307e\u3057\u305f\u3002</p> <p>\u305d\u308c\u306f\u826f\u3044\u30b9\u30ad\u30eb\u3067\u3059\u304c\u3001\u30e2\u30c7\u30eb\u306e\u6027\u80fd\u306f\u671f\u5f85\u901a\u308a\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002</p> <p>\u305d\u3053\u3067\u8ee2\u79fb\u5b66\u7fd2\u306e\u51fa\u756a\u3067\u3059\u3002</p> <p>\u8ee2\u79fb\u5b66\u7fd2\u306e\u5168\u4f53\u7684\u306a\u30a2\u30a4\u30c7\u30a2\u306f\u3001\u81ea\u5206\u306e\u554f\u984c\u7a7a\u9593\u3068\u985e\u4f3c\u3057\u305f\u554f\u984c\u3067\u65e2\u306b\u826f\u597d\u306a\u6027\u80fd\u3092\u793a\u3057\u3066\u3044\u308b\u30e2\u30c7\u30eb\u3092\u53d6\u5f97\u3057\u3001\u81ea\u5206\u306e\u7528\u9014\u306b\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3059\u308b\u3053\u3068\u3067\u3059\u3002</p> <p>\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3\u554f\u984c\uff08FoodVision Mini\u3067\u306e\u753b\u50cf\u5206\u985e\uff09\u306b\u53d6\u308a\u7d44\u3093\u3067\u3044\u308b\u306e\u3067\u3001<code>torchvision.models</code>\u3067\u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u5206\u985e\u30e2\u30c7\u30eb\u3092\u898b\u3064\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p> <p>\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u63a2\u7d22\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u4e00\u822c\u7684\u306a\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u30d0\u30c3\u30af\u30dc\u30fc\u30f3\u304c\u591a\u6570\u898b\u3064\u304b\u308a\u307e\u3059\uff1a</p> \u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u30d0\u30c3\u30af\u30dc\u30fc\u30f3 \u30b3\u30fc\u30c9 ResNet <code>torchvision.models.resnet18()</code>, <code>torchvision.models.resnet50()</code>... VGG\uff08TinyVGG\u3067\u4f7f\u7528\u3057\u305f\u3082\u306e\u3068\u985e\u4f3c\uff09 <code>torchvision.models.vgg16()</code> EfficientNet <code>torchvision.models.efficientnet_b0()</code>, <code>torchvision.models.efficientnet_b1()</code>... VisionTransformer\uff08ViT\uff09 <code>torchvision.models.vit_b_16()</code>, <code>torchvision.models.vit_b_32()</code>... ConvNeXt <code>torchvision.models.convnext_tiny()</code>, <code>torchvision.models.convnext_small()</code>... <code>torchvision.models</code>\u3067\u5229\u7528\u53ef\u80fd\u306a\u305d\u306e\u4ed6 <code>torchvision.models...</code>","tags":["PyTorch","\u8ee2\u79fb\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","EfficientNet","\u6a5f\u68b0\u5b66\u7fd2","\u4e0a\u7d1a\u8005\u5411\u3051","\u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/07_pytorch_transfer_learning/#31","title":"3.1 \u3069\u306e\u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u3092\u4f7f\u7528\u3059\u3079\u304d\u304b\uff1f","text":"<p>\u305d\u308c\u306f\u554f\u984c\u3084\u4f5c\u696d\u3057\u3066\u3044\u308b\u30c7\u30d0\u30a4\u30b9\u306b\u3088\u3063\u3066\u7570\u306a\u308a\u307e\u3059\u3002</p> <p>\u4e00\u822c\u7684\u306b\u3001\u30e2\u30c7\u30eb\u540d\u306e\u6570\u5b57\u304c\u9ad8\u3044\u307b\u3069\uff08\u4f8b\uff1a<code>efficientnet_b0()</code> \u2192 <code>efficientnet_b1()</code> \u2192 <code>efficientnet_b7()</code>\uff09\u3001\u6027\u80fd\u306f\u5411\u4e0a\u3057\u307e\u3059\u304c\u3001\u30e2\u30c7\u30eb\u306f\u5927\u304d\u304f\u306a\u308a\u307e\u3059\u3002</p> <p>\u6027\u80fd\u306e\u5411\u4e0a\u306f\u5e38\u306b\u826f\u3044\u3068\u601d\u3046\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3088\u306d\uff1f</p> <p>\u305d\u308c\u306f\u6b63\u3057\u3044\u3067\u3059\u304c\u3001\u4e00\u90e8\u306e\u9ad8\u6027\u80fd\u30e2\u30c7\u30eb\u306f\u4e00\u90e8\u306e\u30c7\u30d0\u30a4\u30b9\u306b\u306f\u5927\u304d\u3059\u304e\u307e\u3059\u3002</p> <p>\u4f8b\u3048\u3070\u3001\u30e2\u30d0\u30a4\u30eb\u30c7\u30d0\u30a4\u30b9\u3067\u30e2\u30c7\u30eb\u3092\u5b9f\u884c\u3057\u305f\u3044\u5834\u5408\u3001\u30c7\u30d0\u30a4\u30b9\u306e\u9650\u3089\u308c\u305f\u8a08\u7b97\u30ea\u30bd\u30fc\u30b9\u3092\u8003\u616e\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u3001\u3088\u308a\u5c0f\u3055\u306a\u30e2\u30c7\u30eb\u3092\u63a2\u3059\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002</p> <p>\u3057\u304b\u3057\u3001\u7121\u5236\u9650\u306e\u8a08\u7b97\u529b\u304c\u3042\u308b\u5834\u5408\u3001The Bitter Lesson\u304c\u8ff0\u3079\u308b\u3088\u3046\u306b\u3001\u53ef\u80fd\u306a\u9650\u308a\u5927\u304d\u304f\u3001\u8a08\u7b97\u91cf\u306e\u591a\u3044\u30e2\u30c7\u30eb\u3092\u9078\u3076\u3067\u3057\u3087\u3046\u3002</p> <p>\u3053\u306e\u6027\u80fd vs. \u901f\u5ea6 vs. \u30b5\u30a4\u30ba\u306e\u30c8\u30ec\u30fc\u30c9\u30aa\u30d5\u3092\u7406\u89e3\u3059\u308b\u3053\u3068\u306f\u3001\u6642\u9593\u3068\u5b9f\u8df5\u3092\u901a\u3058\u3066\u8eab\u306b\u3064\u304d\u307e\u3059\u3002</p> <p>\u79c1\u306b\u3068\u3063\u3066\u306f\u3001<code>efficientnet_bX</code>\u30e2\u30c7\u30eb\u3067\u826f\u3044\u30d0\u30e9\u30f3\u30b9\u3092\u898b\u3064\u3051\u307e\u3057\u305f\u3002</p>","tags":["PyTorch","\u8ee2\u79fb\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","EfficientNet","\u6a5f\u68b0\u5b66\u7fd2","\u4e0a\u7d1a\u8005\u5411\u3051","\u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/07_pytorch_transfer_learning/#32","title":"3.2 \u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u306e\u8a2d\u5b9a","text":"<p>\u4f7f\u7528\u3059\u308b\u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u306f<code>torchvision.models.efficientnet_b0()</code>\u3067\u3059\u3002</p> <p>\u3053\u306e\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306f\u8ad6\u6587EfficientNet: Rethinking Model Scaling for Convolutional Neural Networks\u304b\u3089\u306e\u3082\u306e\u3067\u3059\u3002</p> <p>\u4f5c\u6210\u4e88\u5b9a\u306e\u5185\u5bb9\u306e\u4f8b\uff1a<code>torchvision.models</code>\u306e\u4e8b\u524d\u5b66\u7fd2\u6e08\u307f<code>EfficientNet_B0</code>\u30e2\u30c7\u30eb\u306e\u51fa\u529b\u5c64\u3092\u30d4\u30b6\u3001\u30b9\u30c6\u30fc\u30ad\u3001\u5bff\u53f8\u753b\u50cf\u306e\u5206\u985e\u7528\u9014\u306b\u8abf\u6574\u3057\u307e\u3059\u3002</p> <p>\u5909\u63db\u3092\u4f5c\u6210\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3057\u305f\u306e\u3068\u540c\u3058\u30b3\u30fc\u30c9\u3092\u4f7f\u7528\u3057\u3066\u3001<code>EfficientNet_B0</code>\u4e8b\u524d\u5b66\u7fd2\u6e08\u307fImageNet\u91cd\u307f\u3092\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002</p> <pre><code>weights = torchvision.models.EfficientNet_B0_Weights.DEFAULT # .DEFAULT = ImageNet\u3067\u5229\u7528\u53ef\u80fd\u306a\u6700\u9ad8\u306e\u91cd\u307f\n</code></pre> <p>\u3053\u308c\u306f\u3001\u30e2\u30c7\u30eb\u304c\u65e2\u306b\u6570\u767e\u4e07\u679a\u306e\u753b\u50cf\u3067\u8a13\u7df4\u3055\u308c\u3066\u304a\u308a\u3001\u753b\u50cf\u30c7\u30fc\u30bf\u306e\u826f\u597d\u306a\u57fa\u672c\u8868\u73fe\u3092\u6301\u3063\u3066\u3044\u308b\u3053\u3068\u3092\u610f\u5473\u3057\u307e\u3059\u3002</p> <p>\u3053\u306ePyTorch\u7248\u306e\u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u306f\u3001ImageNet\u306e1000\u30af\u30e9\u30b9\u5168\u4f53\u3067\u7d0477.7%\u306e\u7cbe\u5ea6\u3092\u9054\u6210\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p> <p>\u307e\u305f\u3001\u30bf\u30fc\u30b2\u30c3\u30c8\u30c7\u30d0\u30a4\u30b9\u306b\u9001\u4fe1\u3057\u307e\u3059\u3002</p> <pre><code># \u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u91cd\u307f\u3067\u30e2\u30c7\u30eb\u3092\u8a2d\u5b9a\u3057\u3001\u30bf\u30fc\u30b2\u30c3\u30c8\u30c7\u30d0\u30a4\u30b9\u306b\u9001\u4fe1\nweights = torchvision.models.EfficientNet_B0_Weights.DEFAULT # .DEFAULT = \u5229\u7528\u53ef\u80fd\u306a\u6700\u9ad8\u306e\u91cd\u307f \nmodel = torchvision.models.efficientnet_b0(weights=weights).to(device)\nmodel.classifier\n#model # \u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u3092\u89e3\u9664\u3057\u3066\u51fa\u529b\uff08\u975e\u5e38\u306b\u9577\u3044\u3067\u3059\uff09\n</code></pre> <pre><code>Sequential(\n  (0): Dropout(p=0.2, inplace=True)\n  (1): Linear(in_features=1280, out_features=1000, bias=True)\n)\n</code></pre> <p>\u30e2\u30c7\u30eb\u3092\u5370\u5237\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u3082\u306e\u304c\u5f97\u3089\u308c\u307e\u3059\uff1a</p> <p></p> <p>\u591a\u304f\u306e\u5c64\u304c\u3042\u308a\u307e\u3059\u3002</p> <p>\u3053\u308c\u306f\u8ee2\u79fb\u5b66\u7fd2\u306e\u5229\u70b9\u306e1\u3064\u3067\u3059\u3002\u4e16\u754c\u3067\u6700\u9ad8\u306e\u30a8\u30f3\u30b8\u30cb\u30a2\u306e\u4e00\u90e8\u306b\u3088\u3063\u3066\u4f5c\u3089\u308c\u305f\u65e2\u5b58\u306e\u30e2\u30c7\u30eb\u3092\u53d6\u5f97\u3057\u3001\u81ea\u5206\u306e\u554f\u984c\u306b\u9069\u7528\u3059\u308b\u3053\u3068\u3067\u3059\u3002</p> <p><code>efficientnet_b0</code>\u306f\u4e3b\u306b3\u3064\u306e\u90e8\u5206\u3067\u69cb\u6210\u3055\u308c\u3066\u3044\u307e\u3059\uff1a</p> <ol> <li><code>features</code> - \u8996\u899a\u30c7\u30fc\u30bf\u306e\u57fa\u672c\u8868\u73fe\u3092\u5b66\u7fd2\u3059\u308b\u305f\u3081\u306e\u7573\u307f\u8fbc\u307f\u5c64\u3068\u305d\u306e\u4ed6\u306e\u69d8\u3005\u306a\u6d3b\u6027\u5316\u5c64\u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\uff08\u3053\u306e\u57fa\u672c\u8868\u73fe/\u5c64\u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306f\u7279\u5fb4\u91cf\u307e\u305f\u306f\u7279\u5fb4\u62bd\u51fa\u5668\u3068\u547c\u3070\u308c\u308b\u3053\u3068\u304c\u591a\u304f\u3001\u300c\u30e2\u30c7\u30eb\u306e\u57fa\u672c\u5c64\u306f\u753b\u50cf\u306e\u7570\u306a\u308b\u7279\u5fb4\u91cf\u3092\u5b66\u7fd2\u3059\u308b\u300d\uff09</li> <li><code>avgpool</code> - <code>features</code>\u5c64\u306e\u51fa\u529b\u306e\u5e73\u5747\u3092\u53d6\u308a\u3001\u7279\u5fb4\u30d9\u30af\u30c8\u30eb\u306b\u5909\u63db</li> <li><code>classifier</code> - \u7279\u5fb4\u30d9\u30af\u30c8\u30eb\u3092\u5fc5\u8981\u306a\u51fa\u529b\u30af\u30e9\u30b9\u6570\u3068\u540c\u3058\u6b21\u5143\u306e\u30d9\u30af\u30c8\u30eb\u306b\u5909\u63db\uff08<code>efficientnet_b0</code>\u306fImageNet\u3067\u4e8b\u524d\u5b66\u7fd2\u3055\u308c\u3066\u304a\u308a\u3001ImageNet\u306b\u306f1000\u30af\u30e9\u30b9\u304c\u3042\u308b\u305f\u3081\u3001<code>out_features=1000</code>\u304c\u30c7\u30d5\u30a9\u30eb\u30c8\uff09</li> </ol>","tags":["PyTorch","\u8ee2\u79fb\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","EfficientNet","\u6a5f\u68b0\u5b66\u7fd2","\u4e0a\u7d1a\u8005\u5411\u3051","\u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/07_pytorch_transfer_learning/#33-torchinfosummary","title":"3.3 <code>torchinfo.summary()</code>\u3067\u30e2\u30c7\u30eb\u306e\u8981\u7d04\u3092\u53d6\u5f97","text":"<p>\u30e2\u30c7\u30eb\u306b\u3064\u3044\u3066\u3055\u3089\u306b\u5b66\u3076\u305f\u3081\u306b\u3001<code>torchinfo</code>\u306e<code>summary()</code>\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3057\u307e\u3057\u3087\u3046\u3002</p> <p>\u4ee5\u4e0b\u3092\u6e21\u3057\u307e\u3059\uff1a * <code>model</code> - \u8981\u7d04\u3092\u53d6\u5f97\u3057\u305f\u3044\u30e2\u30c7\u30eb * <code>input_size</code> - \u30e2\u30c7\u30eb\u306b\u6e21\u3057\u305f\u3044\u30c7\u30fc\u30bf\u306e\u5f62\u72b6\u3002<code>efficientnet_b0</code>\u306e\u5834\u5408\u3001\u5165\u529b\u30b5\u30a4\u30ba\u306f<code>(batch_size, 3, 224, 224)</code>\u3067\u3059\u304c\u3001<code>efficientnet_bX</code>\u306e\u4ed6\u306e\u30d0\u30ea\u30a2\u30f3\u30c8\u306f\u7570\u306a\u308b\u5165\u529b\u30b5\u30a4\u30ba\u3092\u6301\u3061\u307e\u3059     * \u6ce8\u610f\uff1a \u591a\u304f\u306e\u73fe\u4ee3\u7684\u306a\u30e2\u30c7\u30eb\u306f<code>torch.nn.AdaptiveAvgPool2d()</code>\u306e\u304a\u304b\u3052\u3067\u3001\u69d8\u3005\u306a\u30b5\u30a4\u30ba\u306e\u5165\u529b\u753b\u50cf\u3092\u51e6\u7406\u3067\u304d\u307e\u3059\u3002\u3053\u306e\u5c64\u306f\u3001\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u4e0e\u3048\u3089\u308c\u305f\u5165\u529b\u306e<code>output_size</code>\u3092\u9069\u5fdc\u7684\u306b\u8abf\u6574\u3057\u307e\u3059\u3002\u7570\u306a\u308b\u30b5\u30a4\u30ba\u306e\u5165\u529b\u753b\u50cf\u3092<code>summary()</code>\u3084\u30e2\u30c7\u30eb\u306b\u6e21\u3059\u3053\u3068\u3067\u8a66\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059 * <code>col_names</code> - \u30e2\u30c7\u30eb\u306b\u3064\u3044\u3066\u8868\u793a\u3057\u305f\u3044\u69d8\u3005\u306a\u60c5\u5831\u5217 * <code>col_width</code> - \u8981\u7d04\u306e\u5217\u306e\u5e45 * <code>row_settings</code> - \u884c\u306b\u8868\u793a\u3059\u308b\u6a5f\u80fd</p> <pre><code># torchinfo\u3092\u4f7f\u7528\u3057\u3066\u8981\u7d04\u3092\u5370\u5237\uff08\u5b9f\u969b\u306e\u51fa\u529b\u306b\u3064\u3044\u3066\u306f\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u3092\u89e3\u9664\uff09\nsummary(model=model, \n        input_size=(32, 3, 224, 224), # \u3053\u308c\u304c \"input_size\" \u3067\u3042\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3001\"input_shape\" \u3067\u306f\u3042\u308a\u307e\u305b\u3093\n        # col_names=[\"input_size\"], # \u3088\u308a\u5c0f\u3055\u306a\u51fa\u529b\u306b\u3064\u3044\u3066\u306f\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u3092\u89e3\u9664\n        col_names=[\"input_size\", \"output_size\", \"num_params\", \"trainable\"],\n        col_width=20,\n        row_settings=[\"var_names\"]\n) \n</code></pre> <p></p> <p>\u3046\u308f\u3042\uff01\u3053\u308c\u306f\u5927\u304d\u306a\u30e2\u30c7\u30eb\u3067\u3059\uff01</p> <p>\u8981\u7d04\u306e\u51fa\u529b\u304b\u3089\u3001\u753b\u50cf\u30c7\u30fc\u30bf\u304c\u30e2\u30c7\u30eb\u3092\u901a\u904e\u3059\u308b\u969b\u306e\u69d8\u3005\u306a\u5165\u529b\u3068\u51fa\u529b\u306e\u5f62\u72b6\u5909\u5316\u3092\u3059\u3079\u3066\u898b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p> <p>\u305d\u3057\u3066\u3001\u30c7\u30fc\u30bf\u306e\u7570\u306a\u308b\u30d1\u30bf\u30fc\u30f3\u3092\u8a8d\u8b58\u3059\u308b\u305f\u3081\u306e\u8a13\u7df4\u6e08\u307f\u30d1\u30e9\u30e1\u30fc\u30bf\uff08\u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u91cd\u307f\uff09\u304c\u5927\u91cf\u306b\u3042\u308a\u307e\u3059\u3002</p> <p>\u53c2\u8003\u3068\u3057\u3066\u3001\u524d\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306e\u30e2\u30c7\u30ebTinyVGG\u306f8,083\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u3057\u305f\u304c\u3001<code>efficientnet_b0</code>\u306f5,288,548\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u3001\u7d04654\u500d\u306e\u5897\u52a0\u3067\u3059\uff01</p> <p>\u3069\u3046\u601d\u3044\u307e\u3059\u304b\u3001\u3053\u308c\u306f\u3088\u308a\u826f\u3044\u6027\u80fd\u3092\u610f\u5473\u3059\u308b\u3067\u3057\u3087\u3046\u304b\uff1f</p>","tags":["PyTorch","\u8ee2\u79fb\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","EfficientNet","\u6a5f\u68b0\u5b66\u7fd2","\u4e0a\u7d1a\u8005\u5411\u3051","\u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/07_pytorch_transfer_learning/#34","title":"3.4 \u30d9\u30fc\u30b9\u30e2\u30c7\u30eb\u306e\u51cd\u7d50\u3068\u51fa\u529b\u5c64\u306e\u8abf\u6574","text":"<p>\u8ee2\u79fb\u5b66\u7fd2\u306e\u30d7\u30ed\u30bb\u30b9\u306f\u901a\u5e38\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u9032\u307f\u307e\u3059\uff1a\u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u306e\u4e00\u90e8\u306e\u30d9\u30fc\u30b9\u5c64\uff08\u901a\u5e38\u306f<code>features</code>\u30bb\u30af\u30b7\u30e7\u30f3\uff09\u3092\u51cd\u7d50\u3057\u3001\u51fa\u529b\u5c64\uff08\u30d8\u30c3\u30c9/\u5206\u985e\u5668\u5c64\u3068\u3082\u547c\u3070\u308c\u308b\uff09\u3092\u81ea\u5206\u306e\u30cb\u30fc\u30ba\u306b\u5408\u308f\u305b\u3066\u8abf\u6574\u3057\u307e\u3059\u3002</p> <p></p> <p>\u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u306e\u51fa\u529b\u5c64\u3092\u81ea\u5206\u306e\u554f\u984c\u306b\u5408\u3046\u3088\u3046\u306b\u5909\u66f4\u3059\u308b\u3053\u3068\u3067\u3001\u51fa\u529b\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3067\u304d\u307e\u3059\u3002\u5143\u306e<code>torchvision.models.efficientnet_b0()</code>\u306f\u3001\u8a13\u7df4\u3055\u308c\u305f\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3067\u3042\u308bImageNet\u306b1000\u30af\u30e9\u30b9\u304c\u3042\u308b\u305f\u3081\u3001<code>out_features=1000</code>\u3067\u63d0\u4f9b\u3055\u308c\u307e\u3059\u3002\u3057\u304b\u3057\u3001\u30d4\u30b6\u3001\u30b9\u30c6\u30fc\u30ad\u3001\u5bff\u53f8\u306e\u753b\u50cf\u3092\u5206\u985e\u3059\u308b\u79c1\u305f\u3061\u306e\u554f\u984c\u3067\u306f\u3001<code>out_features=3</code>\u306e\u307f\u304c\u5fc5\u8981\u3067\u3059\u3002</p> <p><code>efficientnet_b0</code>\u30e2\u30c7\u30eb\u306e<code>features</code>\u30bb\u30af\u30b7\u30e7\u30f3\u306e\u3059\u3079\u3066\u306e\u5c64/\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u51cd\u7d50\u3057\u307e\u3057\u3087\u3046\u3002</p> <p>\u6ce8\u610f\uff1a \u5c64\u3092\u51cd\u7d50\u3059\u308b\u3068\u3044\u3046\u3053\u3068\u306f\u3001\u8a13\u7df4\u4e2d\u306b\u305d\u308c\u3089\u3092\u305d\u306e\u307e\u307e\u4fdd\u6301\u3059\u308b\u3053\u3068\u3092\u610f\u5473\u3057\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001\u30e2\u30c7\u30eb\u306b\u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u5c64\u304c\u3042\u308b\u5834\u5408\u3001\u305d\u308c\u3089\u3092\u51cd\u7d50\u3059\u308b\u3068\u3044\u3046\u3053\u3068\u306f\u3001\u300c\u8a13\u7df4\u4e2d\u306b\u3053\u308c\u3089\u306e\u5c64\u306e\u30d1\u30bf\u30fc\u30f3\u3092\u5909\u66f4\u305b\u305a\u3001\u305d\u306e\u307e\u307e\u4fdd\u6301\u3059\u308b\u300d\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002\u672c\u8cea\u7684\u306b\u3001ImageNet\u304b\u3089\u5b66\u7fd2\u3057\u305f\u30e2\u30c7\u30eb\u306e\u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u91cd\u307f/\u30d1\u30bf\u30fc\u30f3\u3092\u30d0\u30c3\u30af\u30dc\u30fc\u30f3\u3068\u3057\u3066\u4fdd\u6301\u3057\u3001\u51fa\u529b\u5c64\u306e\u307f\u3092\u5909\u66f4\u3057\u305f\u3044\u306e\u3067\u3059\u3002</p> <p><code>requires_grad=False</code>\u5c5e\u6027\u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001<code>features</code>\u30bb\u30af\u30b7\u30e7\u30f3\u306e\u3059\u3079\u3066\u306e\u5c64/\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u51cd\u7d50\u3067\u304d\u307e\u3059\u3002</p> <p><code>requires_grad=False</code>\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u3064\u3044\u3066\u3001PyTorch\u306f\u52fe\u914d\u66f4\u65b0\u3092\u8ffd\u8de1\u305b\u305a\u3001\u7d50\u679c\u3068\u3057\u3066\u3001\u3053\u308c\u3089\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u8a13\u7df4\u4e2d\u306b\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u30fc\u306b\u3088\u3063\u3066\u5909\u66f4\u3055\u308c\u307e\u305b\u3093\u3002</p> <p>\u672c\u8cea\u7684\u306b\u3001<code>requires_grad=False</code>\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u300c\u8a13\u7df4\u4e0d\u53ef\u80fd\u300d\u307e\u305f\u306f\u300c\u51cd\u7d50\u300d\u3055\u308c\u3066\u3044\u307e\u3059\u3002</p> <pre><code># \u30e2\u30c7\u30eb\u306e \"features\" \u30bb\u30af\u30b7\u30e7\u30f3\uff08\u7279\u5fb4\u62bd\u51fa\u5668\uff09\u306e\u3059\u3079\u3066\u306e\u30d9\u30fc\u30b9\u5c64\u3092 requires_grad=False \u306b\u8a2d\u5b9a\u3057\u3066\u51cd\u7d50\nfor param in model.features.parameters():\n    param.requires_grad = False\n</code></pre> <p>\u7279\u5fb4\u62bd\u51fa\u5668\u5c64\u304c\u51cd\u7d50\u3055\u308c\u307e\u3057\u305f\uff01</p> <p>\u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u306e<code>classifier</code>\u90e8\u5206\u3092\u79c1\u305f\u3061\u306e\u30cb\u30fc\u30ba\u306b\u5408\u308f\u305b\u3066\u8abf\u6574\u3057\u307e\u3057\u3087\u3046\u3002</p> <p>\u73fe\u5728\u3001\u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u306b\u306f\u3001ImageNet\u306b1000\u30af\u30e9\u30b9\u304c\u3042\u308b\u305f\u3081<code>out_features=1000</code>\u304c\u3042\u308a\u307e\u3059\u3002</p> <p>\u3057\u304b\u3057\u3001\u79c1\u305f\u3061\u306b\u306f1000\u30af\u30e9\u30b9\u306f\u306a\u304f\u3001\u30d4\u30b6\u3001\u30b9\u30c6\u30fc\u30ad\u3001\u5bff\u53f8\u306e3\u3064\u3057\u304b\u3042\u308a\u307e\u305b\u3093\u3002</p> <p>\u65b0\u3057\u3044\u4e00\u9023\u306e\u5c64\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u3067\u3001\u30e2\u30c7\u30eb\u306e<code>classifier</code>\u90e8\u5206\u3092\u5909\u66f4\u3067\u304d\u307e\u3059\u3002</p> <p>\u73fe\u5728\u306e<code>classifier</code>\u306f\u4ee5\u4e0b\u3067\u69cb\u6210\u3055\u308c\u3066\u3044\u307e\u3059\uff1a</p> <pre><code>(classifier): Sequential(\n    (0): Dropout(p=0.2, inplace=True)\n    (1): Linear(in_features=1280, out_features=1000, bias=True)\n</code></pre> <p><code>torch.nn.Dropout(p=0.2, inplace=True)</code>\u3092\u4f7f\u7528\u3057\u3066<code>Dropout</code>\u5c64\u3092\u540c\u3058\u307e\u307e\u4fdd\u3061\u307e\u3059\u3002</p> <p>\u6ce8\u610f\uff1a Dropout\u5c64\u306f\u3001\u78ba\u7387<code>p</code>\u30672\u3064\u306e\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u5c64\u9593\u306e\u63a5\u7d9a\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u524a\u9664\u3057\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001<code>p=0.2</code>\u306e\u5834\u5408\u3001\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u5c64\u9593\u306e\u63a5\u7d9a\u306e20%\u304c\u5404\u30d1\u30b9\u3067\u30e9\u30f3\u30c0\u30e0\u306b\u524a\u9664\u3055\u308c\u307e\u3059\u3002\u3053\u306e\u5b9f\u8df5\u306f\u3001\u6b8b\u308a\u306e\u63a5\u7d9a\u304c\u4ed6\u306e\u63a5\u7d9a\u306e\u524a\u9664\u3092\u88dc\u511f\u3059\u308b\u305f\u3081\u306b\u7279\u5fb4\u91cf\u3092\u5b66\u7fd2\u3059\u308b\u3053\u3068\u3092\u78ba\u5b9f\u306b\u3059\u308b\u3053\u3068\u3067\u3001\u30e2\u30c7\u30eb\u3092\u6b63\u5247\u5316\uff08\u904e\u5b66\u7fd2\u3092\u9632\u3050\uff09\u3059\u308b\u3053\u3068\u3092\u610f\u56f3\u3057\u3066\u3044\u307e\u3059\uff08\u3053\u308c\u3089\u306e\u6b8b\u308a\u306e\u7279\u5fb4\u91cf\u306f\u3088\u308a\u4e00\u822c\u7684\u3067\u3042\u308b\u3053\u3068\u3092\u9858\u3063\u3066\uff09\u3002</p> <p><code>Linear</code>\u51fa\u529b\u5c64\u306b\u3064\u3044\u3066\u306f<code>in_features=1280</code>\u3092\u4fdd\u6301\u3057\u307e\u3059\u304c\u3001<code>out_features</code>\u5024\u3092<code>class_names</code>\u306e\u9577\u3055\uff08<code>len(['pizza', 'steak', 'sushi']) = 3</code>\uff09\u306b\u5909\u66f4\u3057\u307e\u3059\u3002</p> <p>\u65b0\u3057\u3044<code>classifier</code>\u5c64\u306f<code>model</code>\u3068\u540c\u3058\u30c7\u30d0\u30a4\u30b9\u4e0a\u306b\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002</p> <pre><code># \u624b\u52d5\u30b7\u30fc\u30c9\u3092\u8a2d\u5b9a\ntorch.manual_seed(42)\ntorch.cuda.manual_seed(42)\n\n# class_names\u306e\u9577\u3055\u3092\u53d6\u5f97\uff08\u5404\u30af\u30e9\u30b9\u306b1\u3064\u306e\u51fa\u529b\u30e6\u30cb\u30c3\u30c8\uff09\noutput_shape = len(class_names)\n\n# \u5206\u985e\u5668\u5c64\u3092\u518d\u4f5c\u6210\u3057\u3001\u30bf\u30fc\u30b2\u30c3\u30c8\u30c7\u30d0\u30a4\u30b9\u306b\u30b7\u30fc\u30c9\u3059\u308b\nmodel.classifier = torch.nn.Sequential(\n    torch.nn.Dropout(p=0.2, inplace=True), \n    torch.nn.Linear(in_features=1280, \n                    out_features=output_shape, # \u30af\u30e9\u30b9\u6570\u3068\u540c\u3058\u51fa\u529b\u30e6\u30cb\u30c3\u30c8\u6570\n                    bias=True)).to(device)\n</code></pre> <p>\u7d20\u6674\u3089\u3057\u3044\uff01\u51fa\u529b\u5c64\u304c\u66f4\u65b0\u3055\u308c\u307e\u3057\u305f\u3002\u30e2\u30c7\u30eb\u306e\u5225\u306e\u8981\u7d04\u3092\u53d6\u5f97\u3057\u3066\u3001\u4f55\u304c\u5909\u308f\u3063\u305f\u304b\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002</p> <pre><code># \u7279\u5fb4\u91cf\u3092\u51cd\u7d50\u3057\u3001\u51fa\u529b\u5206\u985e\u5668\u5c64\u3092\u5909\u66f4\u3057\u305f*\u5f8c*\u306e\u8981\u7d04\u3092\u5b9f\u884c\uff08\u5b9f\u969b\u306e\u51fa\u529b\u306b\u3064\u3044\u3066\u306f\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u3092\u89e3\u9664\uff09\nsummary(model, \n        input_size=(32, 3, 224, 224), # \u3053\u308c\u304c \"input_size\" \u3067\u3042\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3001\"input_shape\" \u3067\u306f\u3042\u308a\u307e\u305b\u3093 (batch_size, color_channels, height, width)\n        verbose=0,\n        col_names=[\"input_size\", \"output_size\", \"num_params\", \"trainable\"],\n        col_width=20,\n        row_settings=[\"var_names\"]\n)\n</code></pre> <p></p> <p>\u304a\u304a\u3001\u304a\u304a\uff01\u3053\u3053\u306b\u306f\u304b\u306a\u308a\u306e\u5909\u5316\u304c\u3042\u308a\u307e\u3059\uff01</p> <p>\u305d\u308c\u3089\u3092\u898b\u3066\u3044\u304d\u307e\u3057\u3087\u3046\uff1a</p> <ul> <li>Trainable\u5217 - \u591a\u304f\u306e\u30d9\u30fc\u30b9\u5c64\uff08<code>features</code>\u90e8\u5206\u306e\u5c64\uff09\u306eTrainable\u5024\u304c<code>False</code>\u306b\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u5c5e\u6027<code>requires_grad=False</code>\u3092\u8a2d\u5b9a\u3057\u305f\u305f\u3081\u3067\u3059\u3002\u3053\u308c\u3092\u5909\u66f4\u3057\u306a\u3044\u9650\u308a\u3001\u3053\u308c\u3089\u306e\u5c64\u306f\u5c06\u6765\u306e\u8a13\u7df4\u3067\u66f4\u65b0\u3055\u308c\u307e\u305b\u3093\u3002</li> <li><code>classifier</code>\u306e\u51fa\u529b\u5f62\u72b6 - \u30e2\u30c7\u30eb\u306e<code>classifier</code>\u90e8\u5206\u306eOutput Shape\u5024\u304c<code>[32, 1000]</code>\u3067\u306f\u306a\u304f<code>[32, 3]</code>\u306b\u306a\u308a\u307e\u3057\u305f\u3002Trainable\u5024\u3082<code>True</code>\u3067\u3059\u3002\u3053\u308c\u306f\u3001\u305d\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u8a13\u7df4\u4e2d\u306b\u66f4\u65b0\u3055\u308c\u308b\u3053\u3068\u3092\u610f\u5473\u3057\u307e\u3059\u3002\u672c\u8cea\u7684\u306b\u3001<code>features</code>\u90e8\u5206\u3092\u4f7f\u7528\u3057\u3066<code>classifier</code>\u90e8\u5206\u306b\u753b\u50cf\u306e\u57fa\u672c\u8868\u73fe\u3092\u4f9b\u7d66\u3057\u3001<code>classifier</code>\u5c64\u304c\u305d\u306e\u57fa\u672c\u8868\u73fe\u304c\u79c1\u305f\u3061\u306e\u554f\u984c\u3068\u3069\u306e\u3088\u3046\u306b\u6574\u5408\u3059\u308b\u304b\u3092\u5b66\u7fd2\u3057\u307e\u3059\u3002</li> <li>\u8a13\u7df4\u53ef\u80fd\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u6e1b\u5c11 - \u4ee5\u524d\u306f5,288,548\u306e\u8a13\u7df4\u53ef\u80fd\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u3042\u308a\u307e\u3057\u305f\u3002\u3057\u304b\u3057\u3001\u30e2\u30c7\u30eb\u306e\u591a\u304f\u306e\u5c64\u3092\u51cd\u7d50\u3057\u3001<code>classifier</code>\u306e\u307f\u3092\u8a13\u7df4\u53ef\u80fd\u306e\u307e\u307e\u306b\u3057\u305f\u305f\u3081\u3001\u73fe\u5728\u306f3,843\u306e\u8a13\u7df4\u53ef\u80fd\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u307f\u3067\u3059\uff08TinyVGG\u30e2\u30c7\u30eb\u3088\u308a\u3082\u3055\u3089\u306b\u5c11\u306a\u3044\uff09\u3002\u305f\u3060\u3057\u30014,007,548\u306e\u975e\u8a13\u7df4\u53ef\u80fd\u30d1\u30e9\u30e1\u30fc\u30bf\u3082\u3042\u308a\u3001\u3053\u308c\u3089\u306f<code>classifier</code>\u5c64\u306b\u4f9b\u7d66\u3059\u308b\u305f\u3081\u306e\u5165\u529b\u753b\u50cf\u306e\u57fa\u672c\u8868\u73fe\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002</li> </ul> <p>\u6ce8\u610f\uff1a \u30e2\u30c7\u30eb\u306e\u8a13\u7df4\u53ef\u80fd\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u591a\u3044\u307b\u3069\u3001\u3088\u308a\u591a\u304f\u306e\u8a08\u7b97\u529b/\u3088\u308a\u9577\u3044\u8a13\u7df4\u6642\u9593\u304c\u5fc5\u8981\u3067\u3059\u3002\u30e2\u30c7\u30eb\u306e\u30d9\u30fc\u30b9\u5c64\u3092\u51cd\u7d50\u3057\u3001\u3088\u308a\u5c11\u306a\u3044\u8a13\u7df4\u53ef\u80fd\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6b8b\u3059\u3053\u3068\u3067\u3001\u30e2\u30c7\u30eb\u306f\u304b\u306a\u308a\u9ad8\u901f\u306b\u8a13\u7df4\u3055\u308c\u308b\u306f\u305a\u3067\u3059\u3002\u3053\u308c\u306f\u8ee2\u79fb\u5b66\u7fd2\u306e\u5927\u304d\u306a\u5229\u70b9\u306e1\u3064\u3067\u3001\u81ea\u5206\u306e\u554f\u984c\u306b\u985e\u4f3c\u3057\u305f\u554f\u984c\u3067\u8a13\u7df4\u3055\u308c\u305f\u30e2\u30c7\u30eb\u306e\u65e2\u306b\u5b66\u7fd2\u6e08\u307f\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u53d6\u5f97\u3057\u3001\u81ea\u5206\u306e\u554f\u984c\u306b\u5408\u3046\u3088\u3046\u306b\u51fa\u529b\u3092\u308f\u305a\u304b\u306b\u8abf\u6574\u3059\u308b\u3060\u3051\u3067\u3059\u3002</p>","tags":["PyTorch","\u8ee2\u79fb\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","EfficientNet","\u6a5f\u68b0\u5b66\u7fd2","\u4e0a\u7d1a\u8005\u5411\u3051","\u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/07_pytorch_transfer_learning/#4","title":"4. \u30e2\u30c7\u30eb\u8a13\u7df4","text":"<p>\u534a\u51cd\u7d50\u3055\u308c\u3001\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3055\u308c\u305f<code>classifier</code>\u3092\u6301\u3064\u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u304c\u3067\u304d\u305f\u306e\u3067\u3001\u8ee2\u79fb\u5b66\u7fd2\u306e\u5b9f\u969b\u306e\u52b9\u679c\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002</p> <p>\u8a13\u7df4\u3092\u958b\u59cb\u3059\u308b\u305f\u3081\u306b\u3001\u640d\u5931\u95a2\u6570\u3068\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u30fc\u3092\u4f5c\u6210\u3057\u307e\u3057\u3087\u3046\u3002</p> <p>\u307e\u3060\u30de\u30eb\u30c1\u30af\u30e9\u30b9\u5206\u985e\u306b\u53d6\u308a\u7d44\u3093\u3067\u3044\u308b\u306e\u3067\u3001\u640d\u5931\u95a2\u6570\u306b\u306f<code>nn.CrossEntropyLoss()</code>\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002</p> <p>\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u30fc\u306f<code>lr=0.001</code>\u3067<code>torch.optim.Adam()</code>\u3092\u7d99\u7d9a\u3057\u3066\u4f7f\u7528\u3057\u307e\u3059\u3002</p> <pre><code># \u640d\u5931\u3068\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u30fc\u3092\u5b9a\u7fa9\nloss_fn = nn.CrossEntropyLoss()\noptimizer = torch.optim.Adam(model.parameters(), lr=0.001)\n</code></pre> <pre><code># \u30e9\u30f3\u30c0\u30e0\u30b7\u30fc\u30c9\u3092\u8a2d\u5b9a\ntorch.manual_seed(42)\ntorch.mps.manual_seed(42)\n\n# \u30bf\u30a4\u30de\u30fc\u3092\u958b\u59cb\nfrom timeit import default_timer as timer \nstart_time = timer()\n\n# \u8a13\u7df4\u3092\u8a2d\u5b9a\u3057\u3001\u7d50\u679c\u3092\u4fdd\u5b58\nresults = engine.train(model=model.to(device=device),\n                       train_dataloader=train_dataloader,\n                       test_dataloader=test_dataloader,\n                       optimizer=optimizer,\n                       loss_fn=loss_fn,\n                       epochs=5,\n                       device=device,\n                       writer=None)\n\n# \u30bf\u30a4\u30de\u30fc\u3092\u7d42\u4e86\u3057\u3001\u304b\u304b\u3063\u305f\u6642\u9593\u3092\u5370\u5237\nend_time = timer()\nprint(f\"[INFO] \u7dcf\u8a13\u7df4\u6642\u9593: {end_time-start_time:.3f} \u79d2\")\n</code></pre> <pre><code>  0%|          | 0/5 [00:00&lt;?, ?it/s]/Users/vinsmoke/miniconda3/envs/deep-learning/lib/python3.12/site-packages/torch/utils/data/dataloader.py:683: UserWarning: 'pin_memory' argument is set as true but not supported on MPS now, then device pinned memory won't be used.\n  warnings.warn(warn_msg)\n 20%|\u2588\u2588        | 1/5 [00:02&lt;00:09,  2.35s/it]\n\nEpoch: 1 | train_loss: 1.0823 | train_acc: 0.4062 | test_loss: 0.8991 | test_acc: 0.5909\n\n 40%|\u2588\u2588\u2588\u2588      | 2/5 [00:03&lt;00:05,  1.71s/it]\n\nEpoch: 2 | train_loss: 0.8564 | train_acc: 0.7695 | test_loss: 0.7927 | test_acc: 0.8456\n\n 60%|\u2588\u2588\u2588\u2588\u2588\u2588    | 3/5 [00:04&lt;00:03,  1.51s/it]\n\nEpoch: 3 | train_loss: 0.7914 | train_acc: 0.7891 | test_loss: 0.7373 | test_acc: 0.8561\n\n 80%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  | 4/5 [00:06&lt;00:01,  1.41s/it]\n\nEpoch: 4 | train_loss: 0.7206 | train_acc: 0.7500 | test_loss: 0.6338 | test_acc: 0.8759\n\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5/5 [00:07&lt;00:00,  1.48s/it]\n\nEpoch: 5 | train_loss: 0.6368 | train_acc: 0.7812 | test_loss: 0.6190 | test_acc: 0.8665\n[INFO] \u7dcf\u8a13\u7df4\u6642\u9593: 7.524 \u79d2\n</code></pre> <p>\u3046\u308f\u3042\uff01\u30e2\u30c7\u30eb\u306f\u304b\u306a\u308a\u9ad8\u901f\u306b\u8a13\u7df4\u3055\u308c\u307e\u3057\u305f\u3002</p> <p>\u305d\u3057\u3066\u3001\u4ee5\u524d\u306e\u30e2\u30c7\u30eb\u7d50\u679c\u3092\u5927\u5e45\u306b\u4e0a\u56de\u3063\u305f\u3088\u3046\u3067\u3059\uff01</p> <p><code>efficientnet_b0</code>\u30d0\u30c3\u30af\u30dc\u30fc\u30f3\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3067\u3001\u30e2\u30c7\u30eb\u306f\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3067\u307b\u307c85%+\u306e\u7cbe\u5ea6\u3092\u9054\u6210\u3057\u3001TinyVGG\u3067\u9054\u6210\u3067\u304d\u305f\u3082\u306e\u306e\u7d042\u500d\u3067\u3059\u3002</p> <p>\u6570\u884c\u306e\u30b3\u30fc\u30c9\u3067\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u305f\u30e2\u30c7\u30eb\u3068\u3057\u3066\u306f\u60aa\u304f\u3042\u308a\u307e\u305b\u3093\u3002</p>","tags":["PyTorch","\u8ee2\u79fb\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","EfficientNet","\u6a5f\u68b0\u5b66\u7fd2","\u4e0a\u7d1a\u8005\u5411\u3051","\u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/07_pytorch_transfer_learning/#5","title":"5. \u640d\u5931\u66f2\u7dda\u306e\u53ef\u8996\u5316\u306b\u3088\u308b\u30e2\u30c7\u30eb\u8a55\u4fa1","text":"<p>\u30e2\u30c7\u30eb\u306f\u304b\u306a\u308a\u826f\u597d\u306b\u5b9f\u884c\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002</p> <p>\u6642\u9593\u306e\u7d4c\u904e\u3068\u3068\u3082\u306b\u8a13\u7df4\u304c\u3069\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u304b\u3092\u78ba\u8a8d\u3059\u308b\u305f\u3081\u306b\u3001\u640d\u5931\u66f2\u7dda\u3092\u30d7\u30ed\u30c3\u30c8\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002</p> <p><code>plot_loss_curves()</code>\u95a2\u6570\u3092\u4f7f\u7528\u3057\u3066\u640d\u5931\u66f2\u7dda\u3092\u30d7\u30ed\u30c3\u30c8\u3067\u304d\u307e\u3059\u3002</p> <p>\u3053\u306e\u95a2\u6570\u306f<code>helper_functions.py</code>\u30b9\u30af\u30ea\u30d7\u30c8\u306b\u4fdd\u5b58\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u30a4\u30f3\u30dd\u30fc\u30c8\u3092\u8a66\u307f\u3001\u6301\u3063\u3066\u3044\u306a\u3044\u5834\u5408\u306f\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u307e\u3059\u3002</p> <pre><code># helper_functions.py\u304b\u3089plot_loss_curves()\u95a2\u6570\u3092\u53d6\u5f97\nfrom helper_functions import plot_loss_curves\n\n# \u30e2\u30c7\u30eb\u306e\u640d\u5931\u66f2\u7dda\u3092\u30d7\u30ed\u30c3\u30c8\nplot_loss_curves(results)\n</code></pre> <p></p> <p>\u3053\u308c\u3089\u306f\u7d20\u6674\u3089\u3057\u3044\u640d\u5931\u66f2\u7dda\u3067\u3059\uff01</p> <p>\u4e21\u65b9\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\uff08\u8a13\u7df4\u3068\u30c6\u30b9\u30c8\uff09\u306e\u640d\u5931\u304c\u6b63\u3057\u3044\u65b9\u5411\u306b\u5411\u304b\u3063\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002</p> <p>\u7cbe\u5ea6\u5024\u306b\u3064\u3044\u3066\u3082\u540c\u69d8\u3067\u3001\u4e0a\u6607\u50be\u5411\u306b\u3042\u308a\u307e\u3059\u3002</p> <p>\u3053\u308c\u306f\u8ee2\u79fb\u5b66\u7fd2\u306e\u529b\u3092\u793a\u3057\u3066\u3044\u307e\u3059\u3002\u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3067\u3001\u5c11\u306a\u3044\u30c7\u30fc\u30bf\u3067\u77ed\u6642\u9593\u3067\u304b\u306a\u308a\u826f\u3044\u7d50\u679c\u3092\u5f97\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p> <p>\u30e2\u30c7\u30eb\u3092\u3088\u308a\u9577\u304f\u8a13\u7df4\u3057\u305f\u308a\u3001\u3088\u308a\u591a\u304f\u306e\u30c7\u30fc\u30bf\u3092\u8ffd\u52a0\u3057\u305f\u308a\u3059\u308b\u3068\u4f55\u304c\u8d77\u3053\u308b\u304b\u6c17\u306b\u306a\u308a\u307e\u305b\u3093\u304b\uff1f</p>","tags":["PyTorch","\u8ee2\u79fb\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","EfficientNet","\u6a5f\u68b0\u5b66\u7fd2","\u4e0a\u7d1a\u8005\u5411\u3051","\u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/07_pytorch_transfer_learning/#6","title":"6. \u30c6\u30b9\u30c8\u30bb\u30c3\u30c8\u306e\u753b\u50cf\u3067\u306e\u4e88\u6e2c","text":"<p>\u30e2\u30c7\u30eb\u306f\u5b9a\u91cf\u7684\u306b\u306f\u826f\u597d\u306b\u5b9f\u884c\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u304c\u3001\u5b9a\u6027\u7684\u306b\u306f\u3069\u3046\u3067\u3057\u3087\u3046\u304b\uff1f</p> <p>\u30c6\u30b9\u30c8\u30bb\u30c3\u30c8\uff08\u8a13\u7df4\u4e2d\u306b\u898b\u3089\u308c\u306a\u3044\uff09\u306e\u753b\u50cf\u3067\u30e2\u30c7\u30eb\u3092\u4f7f\u3063\u3066\u4e88\u6e2c\u3092\u884c\u3044\u3001\u305d\u308c\u3089\u3092\u30d7\u30ed\u30c3\u30c8\u3057\u3066\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002</p> <p>\u53ef\u8996\u5316\u3001\u53ef\u8996\u5316\u3001\u53ef\u8996\u5316\uff01</p> <p>\u30e2\u30c7\u30eb\u304c\u753b\u50cf\u3067\u4e88\u6e2c\u3092\u884c\u3046\u305f\u3081\u306b\u899a\u3048\u3066\u304a\u304f\u3079\u304d\u3053\u3068\u306e1\u3064\u306f\u3001\u753b\u50cf\u304c\u30e2\u30c7\u30eb\u304c\u8a13\u7df4\u3055\u308c\u305f\u753b\u50cf\u3068\u540c\u3058\u5f62\u5f0f\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308b\u3053\u3068\u3067\u3059\u3002</p> <p>\u3053\u308c\u306f\u3001\u753b\u50cf\u304c\u4ee5\u4e0b\u3092\u6301\u3064\u5fc5\u8981\u304c\u3042\u308b\u3053\u3068\u3092\u610f\u5473\u3057\u307e\u3059\uff1a</p> <ul> <li>\u540c\u3058\u5f62\u72b6 - \u753b\u50cf\u304c\u30e2\u30c7\u30eb\u304c\u8a13\u7df4\u3055\u308c\u305f\u3082\u306e\u3068\u7570\u306a\u308b\u5f62\u72b6\u306e\u5834\u5408\u3001\u5f62\u72b6\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3059</li> <li>\u540c\u3058\u30c7\u30fc\u30bf\u578b - \u753b\u50cf\u304c\u7570\u306a\u308b\u30c7\u30fc\u30bf\u578b\uff08\u4f8b\uff1a<code>torch.int8</code> vs <code>torch.float32</code>\uff09\u306e\u5834\u5408\u3001\u30c7\u30fc\u30bf\u578b\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3059</li> <li>\u540c\u3058\u30c7\u30d0\u30a4\u30b9 - \u753b\u50cf\u304c\u30e2\u30c7\u30eb\u3068\u7570\u306a\u308b\u30c7\u30d0\u30a4\u30b9\u4e0a\u306b\u3042\u308b\u5834\u5408\u3001\u30c7\u30d0\u30a4\u30b9\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3059</li> <li>\u540c\u3058\u5909\u63db - \u30e2\u30c7\u30eb\u304c\u7279\u5b9a\u306e\u65b9\u6cd5\u3067\u5909\u63db\u3055\u308c\u305f\u753b\u50cf\uff08\u4f8b\uff1a\u7279\u5b9a\u306e\u5e73\u5747\u3068\u6a19\u6e96\u504f\u5dee\u3067\u6b63\u898f\u5316\uff09\u3067\u8a13\u7df4\u3055\u308c\u3001\u7570\u306a\u308b\u65b9\u6cd5\u3067\u5909\u63db\u3055\u308c\u305f\u753b\u50cf\u3067\u4e88\u6e2c\u3092\u8a66\u307f\u308b\u5834\u5408\u3001\u3053\u308c\u3089\u306e\u4e88\u6e2c\u306f\u5916\u308c\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059</li> </ul> <p>\u6ce8\u610f\uff1a \u3053\u308c\u3089\u306e\u8981\u4ef6\u306f\u3001\u8a13\u7df4\u6e08\u307f\u30e2\u30c7\u30eb\u3067\u4e88\u6e2c\u3092\u884c\u3046\u5834\u5408\u306e\u3042\u3089\u3086\u308b\u7a2e\u985e\u306e\u30c7\u30fc\u30bf\u306b\u9069\u7528\u3055\u308c\u307e\u3059\u3002\u4e88\u6e2c\u3057\u305f\u3044\u30c7\u30fc\u30bf\u306f\u3001\u30e2\u30c7\u30eb\u304c\u8a13\u7df4\u3055\u308c\u305f\u306e\u3068\u540c\u3058\u5f62\u5f0f\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002</p> <p>\u3053\u308c\u3089\u3059\u3079\u3066\u3092\u5b9f\u884c\u3059\u308b\u305f\u3081\u306b\u3001\u4ee5\u4e0b\u3092\u884c\u3046<code>pred_and_plot_image()</code>\u95a2\u6570\u3092\u4f5c\u6210\u3057\u307e\u3059\uff1a</p> <ol> <li>\u8a13\u7df4\u6e08\u307f\u30e2\u30c7\u30eb\u3001\u30af\u30e9\u30b9\u540d\u306e\u30ea\u30b9\u30c8\u3001\u30bf\u30fc\u30b2\u30c3\u30c8\u753b\u50cf\u3078\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u3001\u753b\u50cf\u30b5\u30a4\u30ba\u3001\u5909\u63db\u3001\u30bf\u30fc\u30b2\u30c3\u30c8\u30c7\u30d0\u30a4\u30b9\u3092\u53d7\u3051\u53d6\u308b</li> <li><code>PIL.Image.open()</code>\u3067\u753b\u50cf\u3092\u958b\u304f</li> <li>\u753b\u50cf\u306e\u5909\u63db\u3092\u4f5c\u6210\uff08\u3053\u308c\u306f\u4e0a\u8a18\u3067\u4f5c\u6210\u3057\u305f<code>manual_transforms</code>\u306b\u30c7\u30d5\u30a9\u30eb\u30c8\u3059\u308b\u304b\u3001<code>weights.transforms()</code>\u304b\u3089\u751f\u6210\u3055\u308c\u305f\u5909\u63db\u3092\u4f7f\u7528\u3067\u304d\u307e\u3059\uff09</li> <li>\u30e2\u30c7\u30eb\u304c\u30bf\u30fc\u30b2\u30c3\u30c8\u30c7\u30d0\u30a4\u30b9\u4e0a\u306b\u3042\u308b\u3053\u3068\u3092\u78ba\u8a8d</li> <li><code>model.eval()</code>\u3067\u30e2\u30c7\u30eb\u8a55\u4fa1\u30e2\u30fc\u30c9\u3092\u30aa\u30f3\u306b\u3057\uff08\u3053\u308c\u306f\u63a8\u8ad6\u3067\u306f\u4f7f\u7528\u3055\u308c\u306a\u3044<code>nn.Dropout()</code>\u306a\u3069\u306e\u5c64\u3092\u30aa\u30d5\u306b\u3057\u307e\u3059\uff09\u3001\u63a8\u8ad6\u30e2\u30fc\u30c9\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u30de\u30cd\u30fc\u30b8\u30e3\u30fc\u3092\u4f7f\u7528</li> <li>\u30b9\u30c6\u30c3\u30d73\u3067\u4f5c\u6210\u3057\u305f\u5909\u63db\u3067\u30bf\u30fc\u30b2\u30c3\u30c8\u753b\u50cf\u3092\u5909\u63db\u3057\u3001<code>torch.unsqueeze(dim=0)</code>\u3067\u8ffd\u52a0\u306e\u30d0\u30c3\u30c1\u6b21\u5143\u3092\u8ffd\u52a0\u3057\u3066\u3001\u5165\u529b\u753b\u50cf\u304c<code>[batch_size, color_channels, height, width]</code>\u306e\u5f62\u72b6\u306b\u306a\u308b\u3088\u3046\u306b\u3059\u308b</li> <li>\u753b\u50cf\u3092\u30e2\u30c7\u30eb\u306b\u6e21\u3057\u3066\u30bf\u30fc\u30b2\u30c3\u30c8\u30c7\u30d0\u30a4\u30b9\u4e0a\u306b\u3042\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3001\u753b\u50cf\u3067\u4e88\u6e2c\u3092\u884c\u3046</li> <li><code>torch.softmax()</code>\u3067\u30e2\u30c7\u30eb\u306e\u51fa\u529b\u30ed\u30b8\u30c3\u30c8\u3092\u4e88\u6e2c\u78ba\u7387\u306b\u5909\u63db</li> <li><code>torch.argmax()</code>\u3067\u30e2\u30c7\u30eb\u306e\u4e88\u6e2c\u78ba\u7387\u3092\u4e88\u6e2c\u30e9\u30d9\u30eb\u306b\u5909\u63db</li> <li><code>matplotlib</code>\u3067\u753b\u50cf\u3092\u30d7\u30ed\u30c3\u30c8\u3057\u3001\u30bf\u30a4\u30c8\u30eb\u3092\u30b9\u30c6\u30c3\u30d79\u306e\u4e88\u6e2c\u30e9\u30d9\u30eb\u3068\u30b9\u30c6\u30c3\u30d78\u306e\u4e88\u6e2c\u78ba\u7387\u306b\u8a2d\u5b9a</li> </ol> <pre><code>from typing import List, Tuple\n\nfrom PIL import Image\n\n# 1. \u8a13\u7df4\u6e08\u307f\u30e2\u30c7\u30eb\u3001\u30af\u30e9\u30b9\u540d\u3001\u753b\u50cf\u30d1\u30b9\u3001\u753b\u50cf\u30b5\u30a4\u30ba\u3001\u5909\u63db\u3001\u30bf\u30fc\u30b2\u30c3\u30c8\u30c7\u30d0\u30a4\u30b9\u3092\u53d7\u3051\u53d6\u308b\ndef pred_and_plot_image(model: torch.nn.Module,\n                        image_path: str, \n                        class_names: List[str],\n                        image_size: Tuple[int, int] = (224, 224),\n                        transform: torchvision.transforms = None,\n                        device: torch.device=device):\n\n    # 2. \u753b\u50cf\u3092\u958b\u304f\n    img = Image.open(image_path)\n\n    # 3. \u753b\u50cf\u306e\u5909\u63db\u3092\u4f5c\u6210\uff08\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\uff09\n    if transform is not None:\n        image_transform = transform\n    else:\n        image_transform = transforms.Compose([\n            transforms.Resize(image_size),\n            transforms.ToTensor(),\n            transforms.Normalize(mean=[0.485, 0.456, 0.406],\n                                 std=[0.229, 0.224, 0.225]),\n        ])\n\n    ### \u753b\u50cf\u3067\u4e88\u6e2c ### \n\n    # 4. \u30e2\u30c7\u30eb\u304c\u30bf\u30fc\u30b2\u30c3\u30c8\u30c7\u30d0\u30a4\u30b9\u4e0a\u306b\u3042\u308b\u3053\u3068\u3092\u78ba\u8a8d\n    model.to(device)\n\n    # 5. \u30e2\u30c7\u30eb\u8a55\u4fa1\u30e2\u30fc\u30c9\u3068\u63a8\u8ad6\u30e2\u30fc\u30c9\u3092\u30aa\u30f3\u306b\u3059\u308b\n    model.eval()\n    with torch.inference_mode():\n      # 6. \u753b\u50cf\u3092\u5909\u63db\u3057\u3001\u8ffd\u52a0\u306e\u6b21\u5143\u3092\u8ffd\u52a0\uff08\u30e2\u30c7\u30eb\u306f[batch_size, color_channels, height, width]\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u5fc5\u8981\u3068\u3057\u307e\u3059\uff09\n      transformed_image = image_transform(img).unsqueeze(dim=0)\n\n      # 7. \u8ffd\u52a0\u306e\u6b21\u5143\u3092\u6301\u3064\u753b\u50cf\u3067\u4e88\u6e2c\u3092\u884c\u3044\u3001\u30bf\u30fc\u30b2\u30c3\u30c8\u30c7\u30d0\u30a4\u30b9\u306b\u9001\u4fe1\n      target_image_pred = model(transformed_image.to(device))\n\n    # 8. \u30ed\u30b8\u30c3\u30c8 -&gt; \u4e88\u6e2c\u78ba\u7387\u306b\u5909\u63db\uff08\u30de\u30eb\u30c1\u30af\u30e9\u30b9\u5206\u985e\u306b\u306ftorch.softmax()\u3092\u4f7f\u7528\uff09\n    target_image_pred_probs = torch.softmax(target_image_pred, dim=1)\n\n    # 9. \u4e88\u6e2c\u78ba\u7387 -&gt; \u4e88\u6e2c\u30e9\u30d9\u30eb\u306b\u5909\u63db\n    target_image_pred_label = torch.argmax(target_image_pred_probs, dim=1)\n\n    # 10. \u4e88\u6e2c\u30e9\u30d9\u30eb\u3068\u78ba\u7387\u3067\u753b\u50cf\u3092\u30d7\u30ed\u30c3\u30c8\n    plt.figure()\n    plt.imshow(img)\n    plt.title(f\"\u4e88\u6e2c: {class_names[target_image_pred_label]} | \u78ba\u7387: {target_image_pred_probs.max():.3f}\")\n    plt.axis(False)\n</code></pre> <p>\u30c6\u30b9\u30c8\u30bb\u30c3\u30c8\u304b\u3089\u3044\u304f\u3064\u304b\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u753b\u50cf\u3067\u4e88\u6e2c\u3092\u884c\u3063\u3066\u30c6\u30b9\u30c8\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002</p> <p><code>list(Path(test_dir).glob(\"*/*.jpg\"))</code>\u3092\u4f7f\u7528\u3057\u3066\u3059\u3079\u3066\u306e\u30c6\u30b9\u30c8\u753b\u50cf\u30d1\u30b9\u306e\u30ea\u30b9\u30c8\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002<code>glob()</code>\u30e1\u30bd\u30c3\u30c9\u306e\u661f\u306f\u300c\u3053\u306e\u30d1\u30bf\u30fc\u30f3\u306b\u4e00\u81f4\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u300d\u3092\u610f\u5473\u3057\u3001\u3064\u307e\u308a<code>.jpg</code>\u3067\u7d42\u308f\u308b\u30d5\u30a1\u30a4\u30eb\uff08\u3059\u3079\u3066\u306e\u753b\u50cf\uff09\u3092\u6307\u3057\u307e\u3059\u3002</p> <p>\u305d\u3057\u3066\u3001Python\u306e<code>random.sample(population, k)</code>\u3092\u4f7f\u7528\u3057\u3066\u3053\u308c\u3089\u306e\u4e00\u90e8\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3067\u304d\u307e\u3059\u3002\u3053\u3053\u3067<code>population</code>\u306f\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3059\u308b\u30b7\u30fc\u30b1\u30f3\u30b9\u3001<code>k</code>\u306f\u53d6\u5f97\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u6570\u3067\u3059\u3002</p> <pre><code># \u30c6\u30b9\u30c8\u30bb\u30c3\u30c8\u304b\u3089\u30e9\u30f3\u30c0\u30e0\u306a\u753b\u50cf\u30d1\u30b9\u306e\u30ea\u30b9\u30c8\u3092\u53d6\u5f97\nimport random\nnum_images_to_plot = 3\ntest_image_path_list = list(Path(test_dir).glob(\"*/*.jpg\")) # \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u304b\u3089\u3059\u3079\u3066\u306e\u753b\u50cf\u30d1\u30b9\u306e\u30ea\u30b9\u30c8\u3092\u53d6\u5f97\ntest_image_path_sample = random.sample(population=test_image_path_list, # \u3059\u3079\u3066\u306e\u30c6\u30b9\u30c8\u753b\u50cf\u30d1\u30b9\u3092\u901a\u308b\n                                       k=num_images_to_plot) # \u4e88\u6e2c\u3068\u30d7\u30ed\u30c3\u30c8\u306e\u305f\u3081\u306b 'k' \u500b\u306e\u753b\u50cf\u30d1\u30b9\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u9078\u629e\n\n# \u753b\u50cf\u3067\u4e88\u6e2c\u3092\u884c\u3044\u30d7\u30ed\u30c3\u30c8\nfor image_path in test_image_path_sample:\n    pred_and_plot_image(model=model, \n                        image_path=str(image_path),\n                        class_names=class_names,\n                        # transform=weights.transforms(), # \u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u91cd\u307f\u304b\u3089\u6307\u5b9a\u3055\u308c\u305f\u5909\u63db\u3092\u6e21\u3059\n                        image_size=(224, 224))\n</code></pre> <p> </p> <p>\u308f\u30fc\u3044\uff01\u3053\u308c\u3089\u306e\u4e88\u6e2c\u306f\u3001TinyVGG\u30e2\u30c7\u30eb\u304c\u4ee5\u524d\u306b\u884c\u3063\u3066\u3044\u305f\u3082\u306e\u3088\u308a\u3082\u306f\u308b\u304b\u306b\u826f\u304f\u898b\u3048\u307e\u3059\u3002</p>","tags":["PyTorch","\u8ee2\u79fb\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","EfficientNet","\u6a5f\u68b0\u5b66\u7fd2","\u4e0a\u7d1a\u8005\u5411\u3051","\u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/07_pytorch_transfer_learning/#61","title":"6.1 \u30ab\u30b9\u30bf\u30e0\u753b\u50cf\u3067\u306e\u4e88\u6e2c","text":"<p>\u30e2\u30c7\u30eb\u306f\u30c6\u30b9\u30c8\u30bb\u30c3\u30c8\u306e\u30c7\u30fc\u30bf\u3067\u5b9a\u6027\u7684\u306b\u826f\u597d\u306b\u5b9f\u884c\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\u3057\u304b\u3057\u3001\u81ea\u5206\u306e\u30ab\u30b9\u30bf\u30e0\u753b\u50cf\u3067\u306f\u3069\u3046\u3067\u3057\u3087\u3046\u304b\uff1f</p> <p>\u3053\u3053\u306b\u6a5f\u68b0\u5b66\u7fd2\u306e\u672c\u5f53\u306e\u697d\u3057\u3055\u304c\u3042\u308a\u307e\u3059\uff01\u8a13\u7df4\u3084\u30c6\u30b9\u30c8\u30bb\u30c3\u30c8\u4ee5\u5916\u306e\u81ea\u5206\u306e\u30ab\u30b9\u30bf\u30e0\u30c7\u30fc\u30bf\u3067\u4e88\u6e2c\u3092\u884c\u3046\u3053\u3068\u3067\u3059\u3002</p> <p>\u30ab\u30b9\u30bf\u30e0\u753b\u50cf\u3067\u30e2\u30c7\u30eb\u3092\u30c6\u30b9\u30c8\u3059\u308b\u305f\u3081\u306b\u3001\u4fe1\u983c\u3067\u304d\u308b<code>sushi.jpg</code>\u753b\u50cf\uff08\u5bff\u53f8\u306e\u753b\u50cf\uff09\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u307e\u3057\u3087\u3046\u3002</p> <p>\u305d\u3057\u3066\u3001\u4e0a\u8a18\u3067\u4f5c\u6210\u3057\u305f<code>pred_and_plot_image()</code>\u95a2\u6570\u306b\u6e21\u3057\u3066\u4f55\u304c\u8d77\u3053\u308b\u304b\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002</p> <pre><code># \u30ab\u30b9\u30bf\u30e0\u753b\u50cf\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\nimport requests\n\n# \u30ab\u30b9\u30bf\u30e0\u753b\u50cf\u30d1\u30b9\u3092\u8a2d\u5b9a\ncustom_image_path = data_path / \"sushi.jpg\"\n\n# \u30ab\u30b9\u30bf\u30e0\u753b\u50cf\u3067\u4e88\u6e2c\npred_and_plot_image(model=model,\n                    image_path=str(custom_image_path),\n                    class_names=class_names)\n</code></pre> <p></p> <p>\u7d20\u6674\u3089\u3057\u3044\uff01\u30e2\u30c7\u30eb\u306f\u5bff\u53f8\u306e\u753b\u50cf\u3092\u9ad8\u3044\u78ba\u4fe1\u5ea6\u3067\u6b63\u3057\u304f\u5206\u985e\u3057\u307e\u3057\u305f\u3002</p>","tags":["PyTorch","\u8ee2\u79fb\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","EfficientNet","\u6a5f\u68b0\u5b66\u7fd2","\u4e0a\u7d1a\u8005\u5411\u3051","\u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/07_pytorch_transfer_learning/#_8","title":"\u307e\u3068\u3081","text":"<p>\u3053\u306e\u8a18\u4e8b\u3067\u306f\u3001PyTorch\u306e\u8ee2\u79fb\u5b66\u7fd2\u3092\u4f7f\u7528\u3057\u3066\u753b\u50cf\u5206\u985e\u30e2\u30c7\u30eb\u306e\u6027\u80fd\u3092\u5287\u7684\u306b\u5411\u4e0a\u3055\u305b\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3057\u305f\u3002</p>","tags":["PyTorch","\u8ee2\u79fb\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","EfficientNet","\u6a5f\u68b0\u5b66\u7fd2","\u4e0a\u7d1a\u8005\u5411\u3051","\u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/07_pytorch_transfer_learning/#_9","title":"\u4e3b\u8981\u306a\u5b66\u7fd2\u30dd\u30a4\u30f3\u30c8","text":"<ul> <li>\u8ee2\u79fb\u5b66\u7fd2\u306e\u5a01\u529b - \u6bd4\u8f03\u7684\u5c11\u306a\u3044\u30ab\u30b9\u30bf\u30e0\u30c7\u30fc\u30bf\u3067\u512a\u79c0\u306a\u7d50\u679c\u3092\u5f97\u308b\u3053\u3068\u304c\u3067\u304d\u308b</li> <li>\u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u306e\u6d3b\u7528 - ImageNet\u3067\u8a13\u7df4\u3055\u308c\u305fEfficientNet_B0\u3092\u4f7f\u7528\u3057\u306685%\u4ee5\u4e0a\u306e\u7cbe\u5ea6\u3092\u9054\u6210</li> <li>\u5c64\u306e\u51cd\u7d50\u3068\u30ab\u30b9\u30bf\u30de\u30a4\u30ba - \u30d9\u30fc\u30b9\u5c64\u3092\u51cd\u7d50\u3057\u3001\u5206\u985e\u5668\u5c64\u306e\u307f\u3092\u8abf\u6574\u3059\u308b\u3053\u3068\u3067\u52b9\u7387\u7684\u306a\u8a13\u7df4\u3092\u5b9f\u73fe</li> <li>\u9069\u5207\u306a\u30c7\u30fc\u30bf\u524d\u51e6\u7406 - \u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u3068\u540c\u3058\u5909\u63db\u3092\u9069\u7528\u3059\u308b\u3053\u3068\u306e\u91cd\u8981\u6027</li> </ul>","tags":["PyTorch","\u8ee2\u79fb\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","EfficientNet","\u6a5f\u68b0\u5b66\u7fd2","\u4e0a\u7d1a\u8005\u5411\u3051","\u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/07_pytorch_transfer_learning/#_10","title":"\u6280\u8853\u7684\u306a\u30cf\u30a4\u30e9\u30a4\u30c8","text":"<ul> <li>\u30d1\u30e9\u30e1\u30fc\u30bf\u6570\u306e\u6bd4\u8f03: TinyVGG\uff088,083\u30d1\u30e9\u30e1\u30fc\u30bf\uff09vs EfficientNet_B0\uff085,288,548\u30d1\u30e9\u30e1\u30fc\u30bf\uff09</li> <li>\u8a13\u7df4\u6642\u9593: \u308f\u305a\u304b7.5\u79d2\u30675\u30a8\u30dd\u30c3\u30af\u5b8c\u4e86</li> <li>\u7cbe\u5ea6\u5411\u4e0a: \u524d\u56de\u306e\u7d0450%\u304b\u308985%\u4ee5\u4e0a\u3078\u3068\u5927\u5e45\u6539\u5584</li> <li>\u8a13\u7df4\u53ef\u80fd\u30d1\u30e9\u30e1\u30fc\u30bf: \u5c64\u306e\u51cd\u7d50\u306b\u3088\u308a3,843\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u307f\u304c\u66f4\u65b0\u5bfe\u8c61</li> </ul>","tags":["PyTorch","\u8ee2\u79fb\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","EfficientNet","\u6a5f\u68b0\u5b66\u7fd2","\u4e0a\u7d1a\u8005\u5411\u3051","\u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/07_pytorch_transfer_learning/#_11","title":"\u5b9f\u88c5\u3067\u4f7f\u7528\u3057\u305f\u4e3b\u8981\u6280\u8853","text":"<ol> <li><code>torchvision.models</code>\u304b\u3089\u306e\u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u53d6\u5f97</li> <li>\u7279\u5fb4\u91cf\u62bd\u51fa\u5668\u306e\u51cd\u7d50 (<code>requires_grad=False</code>)</li> <li>\u5206\u985e\u5668\u30d8\u30c3\u30c9\u306e\u30ab\u30b9\u30bf\u30de\u30a4\u30ba (\u51fa\u529b\u6b21\u5143\u30923\u306b\u5909\u66f4)</li> <li>\u9069\u5207\u306a\u30c7\u30fc\u30bf\u5909\u63db (ImageNet\u3068\u540c\u3058\u6b63\u898f\u5316)</li> <li>\u52b9\u7387\u7684\u306a\u8a13\u7df4\u6226\u7565 (\u5c11\u306a\u3044\u8a13\u7df4\u53ef\u80fd\u30d1\u30e9\u30e1\u30fc\u30bf)</li> </ol>","tags":["PyTorch","\u8ee2\u79fb\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","EfficientNet","\u6a5f\u68b0\u5b66\u7fd2","\u4e0a\u7d1a\u8005\u5411\u3051","\u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/07_pytorch_transfer_learning/#_12","title":"\u91cd\u8981\u306a\u30dd\u30a4\u30f3\u30c8","text":"<ul> <li>\u8ee2\u79fb\u5b66\u7fd2\u306f\u3001\u6bd4\u8f03\u7684\u5c11\u306a\u3044\u30ab\u30b9\u30bf\u30e0\u30c7\u30fc\u30bf\u3067\u512a\u308c\u305f\u7d50\u679c\u3092\u5f97\u308b\u3053\u3068\u3092\u53ef\u80fd\u306b\u3057\u307e\u3059</li> <li>\u8ee2\u79fb\u5b66\u7fd2\u306e\u529b\u3092\u77e5\u308b\u3053\u3068\u3067\u3001\u3059\u3079\u3066\u306e\u554f\u984c\u306e\u958b\u59cb\u6642\u306b\u300c\u81ea\u5206\u306e\u554f\u984c\u306b\u5bfe\u3059\u308b\u65e2\u5b58\u306e\u9ad8\u6027\u80fd\u30e2\u30c7\u30eb\u306f\u5b58\u5728\u3059\u308b\u304b\uff1f\u300d\u3068\u554f\u3046\u3053\u3068\u304c\u826f\u3044\u30a2\u30a4\u30c7\u30a2\u3067\u3059</li> <li>\u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\u3001\u30ab\u30b9\u30bf\u30e0\u30c7\u30fc\u30bf\u304c\u5143\u306e\u30e2\u30c7\u30eb\u304c\u8a13\u7df4\u3055\u308c\u305f\u306e\u3068\u540c\u3058\u65b9\u6cd5\u3067\u30d5\u30a9\u30fc\u30de\u30c3\u30c8/\u524d\u51e6\u7406\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u91cd\u8981\u3067\u3059\u3002\u305d\u3046\u3067\u306a\u3044\u3068\u6027\u80fd\u304c\u4f4e\u4e0b\u3059\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059</li> <li>\u30ab\u30b9\u30bf\u30e0\u30c7\u30fc\u30bf\u3067\u4e88\u6e2c\u3059\u308b\u5834\u5408\u3082\u540c\u69d8\u3067\u3001\u30ab\u30b9\u30bf\u30e0\u30c7\u30fc\u30bf\u304c\u30e2\u30c7\u30eb\u304c\u8a13\u7df4\u3055\u308c\u305f\u30c7\u30fc\u30bf\u3068\u540c\u3058\u5f62\u5f0f\u3067\u3042\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044</li> <li>PyTorch\u30c9\u30e1\u30a4\u30f3\u30e9\u30a4\u30d6\u30e9\u30ea\u3001HuggingFace Hub\u3001<code>timm</code>\uff08PyTorch Image Models\uff09\u306a\u3069\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u304b\u3089\u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u3092\u898b\u3064\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u5834\u6240\u304c\u3044\u304f\u3064\u304b\u3042\u308a\u307e\u3059</li> </ul> <p>\u8ee2\u79fb\u5b66\u7fd2\u306f\u73fe\u4ee3\u306e\u6df1\u5c64\u5b66\u7fd2\u306b\u304a\u3051\u308b\u6700\u3082\u5f37\u529b\u306a\u6280\u8853\u306e\u4e00\u3064\u3067\u3059\u3002\u3053\u306e\u77e5\u8b58\u3092\u6d3b\u7528\u3057\u3066\u3001\u3042\u306a\u305f\u81ea\u8eab\u306e\u753b\u50cf\u5206\u985e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u53d6\u308a\u7d44\u3093\u3067\u307f\u3066\u304f\u3060\u3055\u3044\uff01</p>","tags":["PyTorch","\u8ee2\u79fb\u5b66\u7fd2","\u6df1\u5c64\u5b66\u7fd2","\u753b\u50cf\u5206\u985e","EfficientNet","\u6a5f\u68b0\u5b66\u7fd2","\u4e0a\u7d1a\u8005\u5411\u3051","\u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","\u5b9f\u8df5"]},{"location":"PyTorch/08_pytorch_experiment_tracking/","title":"PyTorch\u5b9f\u9a13\u8ffd\u8de1 - FoodVision Mini\u5b9f\u9a13\u30d7\u30ed\u30b8\u30a7\u30af\u30c8","text":"","tags":["PyTorch","\u5b9f\u9a13\u8ffd\u8de1","TensorBoard","\u8ee2\u79fb\u5b66\u7fd2","\u753b\u50cf\u5206\u985e"]},{"location":"PyTorch/08_pytorch_experiment_tracking/#_1","title":"\u6982\u8981","text":"<p>\u6a5f\u68b0\u5b66\u7fd2\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u304c\u9032\u3080\u306b\u3064\u308c\u3066\u3001\u8907\u6570\u306e\u30e2\u30c7\u30eb\u3092\u8a13\u7df4\u3057\u3001\u305d\u306e\u7d50\u679c\u3092\u8ffd\u8de1\u3059\u308b\u3053\u3068\u304c\u91cd\u8981\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u306e\u8a18\u4e8b\u3067\u306f\u3001TensorBoard\u3092\u4f7f\u7528\u3057\u3066PyTorch\u306e\u5b9f\u9a13\u3092\u52b9\u7387\u7684\u306b\u8ffd\u8de1\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u7fd2\u3057\u307e\u3059\u3002\u30d4\u30b6\u3001\u30b9\u30c6\u30fc\u30ad\u3001\u5bff\u53f8\u3092\u5206\u985e\u3059\u308bFoodVision Mini\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u901a\u3058\u3066\u3001\u5b9f\u969b\u306e\u5b9f\u9a13\u8ffd\u8de1\u30ef\u30fc\u30af\u30d5\u30ed\u30fc\u3092\u4f53\u9a13\u3057\u3066\u3044\u304d\u307e\u3059\u3002</p>","tags":["PyTorch","\u5b9f\u9a13\u8ffd\u8de1","TensorBoard","\u8ee2\u79fb\u5b66\u7fd2","\u753b\u50cf\u5206\u985e"]},{"location":"PyTorch/08_pytorch_experiment_tracking/#_2","title":"\u5b66\u7fd2\u76ee\u6a19","text":"<ul> <li>\u5b9f\u9a13\u8ffd\u8de1\u306e\u91cd\u8981\u6027\u3068\u65b9\u6cd5\u3092\u7406\u89e3\u3059\u308b</li> <li>TensorBoard\u3092\u4f7f\u7528\u3057\u3066PyTorch\u306e\u5b9f\u9a13\u3092\u8a18\u9332\u3059\u308b</li> <li>\u8907\u6570\u306e\u30e2\u30c7\u30eb\u3068\u8a2d\u5b9a\u3092\u7cfb\u7d71\u7684\u306b\u6bd4\u8f03\u3059\u308b</li> <li>\u6700\u9069\u306a\u30e2\u30c7\u30eb\u3092\u9078\u629e\u3057\u3001\u8a55\u4fa1\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3076</li> </ul>","tags":["PyTorch","\u5b9f\u9a13\u8ffd\u8de1","TensorBoard","\u8ee2\u79fb\u5b66\u7fd2","\u753b\u50cf\u5206\u985e"]},{"location":"PyTorch/08_pytorch_experiment_tracking/#_3","title":"\u524d\u63d0\u77e5\u8b58","text":"<ul> <li>PyTorch\u306e\u57fa\u672c\u7684\u306a\u4f7f\u7528\u65b9\u6cd5</li> <li>\u8ee2\u79fb\u5b66\u7fd2\u306e\u6982\u5ff5</li> <li>\u753b\u50cf\u5206\u985e\u30bf\u30b9\u30af\u306e\u7406\u89e3</li> <li>Python \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u57fa\u790e</li> </ul>","tags":["PyTorch","\u5b9f\u9a13\u8ffd\u8de1","TensorBoard","\u8ee2\u79fb\u5b66\u7fd2","\u753b\u50cf\u5206\u985e"]},{"location":"PyTorch/08_pytorch_experiment_tracking/#_4","title":"\u5b9f\u9a13\u8ffd\u8de1\u3068\u306f\u4f55\u304b\uff1f","text":"<p>\u6a5f\u68b0\u5b66\u7fd2\u3068\u6df1\u5c64\u5b66\u7fd2\u306f\u975e\u5e38\u306b\u5b9f\u9a13\u7684\u306a\u5206\u91ce\u3067\u3059\u3002\u30c7\u30fc\u30bf\u3001\u30e2\u30c7\u30eb\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3001\u8a13\u7df4\u8a2d\u5b9a\u306e\u69d8\u3005\u306a\u7d44\u307f\u5408\u308f\u305b\u306e\u7d50\u679c\u3092\u8ffd\u8de1\u3057\u3001\u4f55\u304c\u52b9\u679c\u7684\u3067\u4f55\u304c\u305d\u3046\u3067\u306a\u3044\u304b\u3092\u628a\u63e1\u3059\u308b\u305f\u3081\u306b\u5b9f\u9a13\u8ffd\u8de1\u304c\u91cd\u8981\u306b\u306a\u308a\u307e\u3059\u3002</p>","tags":["PyTorch","\u5b9f\u9a13\u8ffd\u8de1","TensorBoard","\u8ee2\u79fb\u5b66\u7fd2","\u753b\u50cf\u5206\u985e"]},{"location":"PyTorch/08_pytorch_experiment_tracking/#_5","title":"\u306a\u305c\u5b9f\u9a13\u3092\u8ffd\u8de1\u3059\u308b\u306e\u304b\uff1f","text":"<p>\u5c11\u6570\u306e\u30e2\u30c7\u30eb\u3092\u5b9f\u884c\u3057\u3066\u3044\u308b\u5834\u5408\u306f\u3001\u5370\u5237\u51fa\u529b\u3068\u8f9e\u66f8\u3067\u7d50\u679c\u3092\u8ffd\u8de1\u3059\u308b\u3053\u3068\u3082\u53ef\u80fd\u3067\u3059\u3002\u3057\u304b\u3057\u3001\u5b9f\u9a13\u6570\u304c\u5897\u52a0\u3059\u308b\u306b\u3064\u308c\u3066\u3001\u3053\u306e\u5358\u7d14\u306a\u65b9\u6cd5\u3067\u306f\u7ba1\u7406\u304c\u56f0\u96e3\u306b\u306a\u308a\u307e\u3059\u3002</p>","tags":["PyTorch","\u5b9f\u9a13\u8ffd\u8de1","TensorBoard","\u8ee2\u79fb\u5b66\u7fd2","\u753b\u50cf\u5206\u985e"]},{"location":"PyTorch/08_pytorch_experiment_tracking/#_6","title":"\u5b9f\u9a13\u8ffd\u8de1\u65b9\u6cd5\u306e\u6bd4\u8f03","text":"\u65b9\u6cd5 \u8a2d\u5b9a \u5229\u70b9 \u6b20\u70b9 \u30b3\u30b9\u30c8 Python\u8f9e\u66f8\u3001CSV\u30d5\u30a1\u30a4\u30eb\u3001\u5370\u5237\u51fa\u529b \u306a\u3057 \u8a2d\u5b9a\u304c\u7c21\u5358\u3001\u7d14\u7c8b\u306aPython\u3067\u5b9f\u884c \u5927\u91cf\u306e\u5b9f\u9a13\u306e\u8ffd\u8de1\u304c\u56f0\u96e3 \u7121\u6599 TensorBoard \u6700\u5c0f\u9650\u3001<code>tensorboard</code>\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb PyTorch\u3068\u306e\u7d71\u5408\u3001\u5e83\u304f\u8a8d\u77e5\u3055\u308c\u4f7f\u7528\u3001\u7c21\u5358\u306b\u30b9\u30b1\u30fc\u30eb \u4ed6\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u307b\u3069\u30e6\u30fc\u30b6\u30fc\u4f53\u9a13\u304c\u826f\u304f\u306a\u3044 \u7121\u6599 Weights &amp; Biases \u6700\u5c0f\u9650\u3001<code>wandb</code>\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3001\u30a2\u30ab\u30a6\u30f3\u30c8\u4f5c\u6210 \u512a\u308c\u305f\u30e6\u30fc\u30b6\u30fc\u4f53\u9a13\u3001\u5b9f\u9a13\u306e\u516c\u958b\u3001\u307b\u307c\u5168\u3066\u8ffd\u8de1\u53ef\u80fd PyTorch\u306e\u5916\u90e8\u30ea\u30bd\u30fc\u30b9\u304c\u5fc5\u8981 \u500b\u4eba\u4f7f\u7528\u306f\u7121\u6599 MLFlow \u6700\u5c0f\u9650\u3001<code>mlflow</code>\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u8ffd\u8de1\u958b\u59cb \u5b8c\u5168\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u306eMLOps\u30e9\u30a4\u30d5\u30b5\u30a4\u30af\u30eb\u7ba1\u7406\u3001\u591a\u304f\u306e\u7d71\u5408 \u30ea\u30e2\u30fc\u30c8\u8ffd\u8de1\u30b5\u30fc\u30d0\u30fc\u306e\u8a2d\u5b9a\u304c\u4ed6\u3088\u308a\u56f0\u96e3 \u7121\u6599","tags":["PyTorch","\u5b9f\u9a13\u8ffd\u8de1","TensorBoard","\u8ee2\u79fb\u5b66\u7fd2","\u753b\u50cf\u5206\u985e"]},{"location":"PyTorch/08_pytorch_experiment_tracking/#_7","title":"\u74b0\u5883\u8a2d\u5b9a","text":"<p>\u307e\u305a\u3001\u5fc5\u8981\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u3001\u30c7\u30d0\u30a4\u30b9\u3092\u8a2d\u5b9a\u3057\u307e\u3059\uff1a</p> <pre><code># \u5fc5\u8981\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\nimport matplotlib.pyplot as plt\nimport torch\nimport torchvision\n\nfrom torch import nn\nfrom torchvision import transforms\nfrom torchinfo import summary\nfrom going_modular import data_setup, engine\n\n# \u30c7\u30d0\u30a4\u30b9\u8a2d\u5b9a\uff08Apple Silicon\u306eMac\u3067\u306fMPS\u3001\u305d\u308c\u4ee5\u5916\u306fCPU\uff09\ndevice = \"mps\" if torch.mps.is_available() else \"cpu\"\ndevice\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>'mps'\n</code></pre></p>","tags":["PyTorch","\u5b9f\u9a13\u8ffd\u8de1","TensorBoard","\u8ee2\u79fb\u5b66\u7fd2","\u753b\u50cf\u5206\u985e"]},{"location":"PyTorch/08_pytorch_experiment_tracking/#_8","title":"\u30b7\u30fc\u30c9\u8a2d\u5b9a\u7528\u306e\u30d8\u30eb\u30d1\u30fc\u95a2\u6570\u4f5c\u6210","text":"<p>\u5b9f\u9a13\u306e\u518d\u73fe\u6027\u3092\u78ba\u4fdd\u3059\u308b\u305f\u3081\u306b\u3001\u30e9\u30f3\u30c0\u30e0\u30b7\u30fc\u30c9\u3092\u8a2d\u5b9a\u3059\u308b\u95a2\u6570\u3092\u4f5c\u6210\u3057\u307e\u3059\uff1a</p> <pre><code>def set_seeds(seed: int=42):\n    \"\"\"PyTorch\u306e\u64cd\u4f5c\u7528\u306b\u30e9\u30f3\u30c0\u30e0\u30b7\u30fc\u30c9\u3092\u8a2d\u5b9a\u3059\u308b\n\n    Args:\n        seed (int, optional): \u8a2d\u5b9a\u3059\u308b\u30e9\u30f3\u30c0\u30e0\u30b7\u30fc\u30c9\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u306f42\n    \"\"\"\n    # \u4e00\u822c\u7684\u306atorch\u64cd\u4f5c\u7528\u306e\u30b7\u30fc\u30c9\u8a2d\u5b9a\n    torch.manual_seed(seed)\n    # MPS\u3067\u306etorch\u64cd\u4f5c\u7528\u306e\u30b7\u30fc\u30c9\u8a2d\u5b9a\n    torch.mps.manual_seed(seed)\n</code></pre>","tags":["PyTorch","\u5b9f\u9a13\u8ffd\u8de1","TensorBoard","\u8ee2\u79fb\u5b66\u7fd2","\u753b\u50cf\u5206\u985e"]},{"location":"PyTorch/08_pytorch_experiment_tracking/#1","title":"1. \u30c7\u30fc\u30bf\u306e\u53d6\u5f97","text":"<p>\u753b\u50cf\u5206\u985e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\uff08\u30d4\u30b6\u3001\u30b9\u30c6\u30fc\u30ad\u3001\u5bff\u53f8\uff09\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u307e\u3059\uff1a</p> <pre><code>import os\nimport zipfile\nfrom pathlib import Path\nimport requests\n\ndef download_data(source: str, \n                  destination: str,\n                  remove_source: bool = True) -&gt; Path:\n    \"\"\"\u30bd\u30fc\u30b9\u304b\u3089zip\u30d5\u30a1\u30a4\u30eb\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3001\u6307\u5b9a\u5148\u306b\u5c55\u958b\u3059\u308b\n\n    Args:\n        source (str): zip\u30d5\u30a1\u30a4\u30eb\u306eURL\n        destination (str): \u5c55\u958b\u5148\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\n        remove_source (bool): \u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u5f8c\u306b\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u3092\u524a\u9664\u3059\u308b\u304b\n\n    Returns:\n        pathlib.Path: \u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3055\u308c\u305f\u30c7\u30fc\u30bf\u3078\u306e\u30d1\u30b9\n    \"\"\"\n    # \u30c7\u30fc\u30bf\u30d5\u30a9\u30eb\u30c0\u306e\u30d1\u30b9\u8a2d\u5b9a\n    data_path = Path(\"data/\")\n    image_path = data_path / destination\n\n    # \u753b\u50cf\u30d5\u30a9\u30eb\u30c0\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u3001\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u6e96\u5099\n    if image_path.is_dir():\n        print(f\"[INFO] {image_path} \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304c\u5b58\u5728\u3059\u308b\u305f\u3081\u3001\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3092\u30b9\u30ad\u30c3\u30d7\u3057\u307e\u3059\u3002\")\n    else:\n        print(f\"[INFO] {image_path} \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304c\u898b\u3064\u304b\u3089\u306a\u3044\u305f\u3081\u3001\u4f5c\u6210\u3057\u307e\u3059...\")\n        image_path.mkdir(parents=True, exist_ok=True)\n\n        # \u30c7\u30fc\u30bf\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\n        target_file = Path(source).name\n        with open(data_path / target_file, \"wb\") as f:\n            request = requests.get(source)\n            print(f\"[INFO] {source}\u304b\u3089{target_file}\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u4e2d...\")\n            f.write(request.content)\n\n        # \u30c7\u30fc\u30bf\u3092\u5c55\u958b\n        with zipfile.ZipFile(data_path / target_file, \"r\") as zip_ref:\n            print(f\"[INFO] {target_file}\u30c7\u30fc\u30bf\u3092\u5c55\u958b\u4e2d...\") \n            zip_ref.extractall(image_path)\n\n        # zip\u30d5\u30a1\u30a4\u30eb\u3092\u524a\u9664\n        if remove_source:\n            os.remove(data_path / target_file)\n\n    return image_path\n\n# \u30c7\u30fc\u30bf\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\nimage_path = download_data(\n    source=\"https://github.com/vinsmoke-three/deeplearning-with-pytorch/raw/main/data/pizza_steak_sushi.zip\",\n    destination=\"pizza_steak_sushi\"\n)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>[INFO] data/pizza_steak_sushi \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304c\u5b58\u5728\u3059\u308b\u305f\u3081\u3001\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3092\u30b9\u30ad\u30c3\u30d7\u3057\u307e\u3059\u3002\n</code></pre></p>","tags":["PyTorch","\u5b9f\u9a13\u8ffd\u8de1","TensorBoard","\u8ee2\u79fb\u5b66\u7fd2","\u753b\u50cf\u5206\u985e"]},{"location":"PyTorch/08_pytorch_experiment_tracking/#2-dataloader","title":"2. \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3068DataLoader\u306e\u4f5c\u6210","text":"","tags":["PyTorch","\u5b9f\u9a13\u8ffd\u8de1","TensorBoard","\u8ee2\u79fb\u5b66\u7fd2","\u753b\u50cf\u5206\u985e"]},{"location":"PyTorch/08_pytorch_experiment_tracking/#21-transformdataloader","title":"2.1 \u624b\u52d5\u4f5c\u6210\u306etransform\u3092\u4f7f\u7528\u3057\u305fDataLoader","text":"<p>ImageNet\u5f62\u5f0f\u3067\u306e\u6b63\u898f\u5316\u3092\u542b\u3080\u5909\u63db\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u3092\u624b\u52d5\u3067\u4f5c\u6210\u3057\u307e\u3059\uff1a</p> <pre><code># \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u8a2d\u5b9a\ntrain_dir = image_path / \"train\"\ntest_dir = image_path / \"test\"\n\n# ImageNet\u6b63\u898f\u5316\u30ec\u30d9\u30eb\u306e\u8a2d\u5b9a\nnormalize = transforms.Normalize(mean=[0.485, 0.456, 0.406],\n                                 std=[0.229, 0.224, 0.225])\n\n# \u5909\u63db\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u3092\u624b\u52d5\u3067\u4f5c\u6210\nmanual_transforms = transforms.Compose([\n    transforms.Resize((224, 224)),\n    transforms.ToTensor(),\n    normalize\n])           \nprint(f\"\u624b\u52d5\u4f5c\u6210\u3055\u308c\u305f\u5909\u63db: {manual_transforms}\")\n\n# \u30c7\u30fc\u30bf\u30ed\u30fc\u30c0\u30fc\u3092\u4f5c\u6210\ntrain_dataloader, test_dataloader, class_names = data_setup.create_dataloaders(\n    train_dir=train_dir,\n    test_dir=test_dir,\n    transform=manual_transforms,\n    batch_size=32\n)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>\u624b\u52d5\u4f5c\u6210\u3055\u308c\u305f\u5909\u63db: Compose(\n    Resize(size=(224, 224), interpolation=bilinear, max_size=None, antialias=True)\n    ToTensor()\n    Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])\n)\n</code></pre></p>","tags":["PyTorch","\u5b9f\u9a13\u8ffd\u8de1","TensorBoard","\u8ee2\u79fb\u5b66\u7fd2","\u753b\u50cf\u5206\u985e"]},{"location":"PyTorch/08_pytorch_experiment_tracking/#22-transformdataloader","title":"2.2 \u81ea\u52d5\u4f5c\u6210\u306etransform\u3092\u4f7f\u7528\u3057\u305fDataLoader","text":"<p>\u4e8b\u524d\u8a13\u7df4\u3055\u308c\u305f\u91cd\u307f\u304b\u3089\u81ea\u52d5\u7684\u306b\u5909\u63db\u3092\u53d6\u5f97\u3059\u308b\u65b9\u6cd5\uff1a</p> <pre><code># \u4e8b\u524d\u8a13\u7df4\u3055\u308c\u305f\u91cd\u307f\u306e\u8a2d\u5b9a\nweights = torchvision.models.EfficientNet_B0_Weights.DEFAULT\n\n# \u91cd\u307f\u304b\u3089\u5909\u63db\u3092\u53d6\u5f97\nautomatic_transforms = weights.transforms() \nprint(f\"\u81ea\u52d5\u4f5c\u6210\u3055\u308c\u305f\u5909\u63db: {automatic_transforms}\")\n\n# \u30c7\u30fc\u30bf\u30ed\u30fc\u30c0\u30fc\u3092\u4f5c\u6210\ntrain_dataloader, test_dataloader, class_names = data_setup.create_dataloaders(\n    train_dir=train_dir,\n    test_dir=test_dir,\n    transform=automatic_transforms,\n    batch_size=32\n)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>\u81ea\u52d5\u4f5c\u6210\u3055\u308c\u305f\u5909\u63db: ImageClassification(\n    crop_size=[224]\n    resize_size=[256]\n    mean=[0.485, 0.456, 0.406]\n    std=[0.229, 0.224, 0.225]\n    interpolation=InterpolationMode.BICUBIC\n)\n</code></pre></p>","tags":["PyTorch","\u5b9f\u9a13\u8ffd\u8de1","TensorBoard","\u8ee2\u79fb\u5b66\u7fd2","\u753b\u50cf\u5206\u985e"]},{"location":"PyTorch/08_pytorch_experiment_tracking/#3","title":"3. \u4e8b\u524d\u8a13\u7df4\u30e2\u30c7\u30eb\u306e\u53d6\u5f97\u3068\u8abf\u6574","text":"<p>EfficientNet-B0\u30e2\u30c7\u30eb\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3001\u7279\u5fb4\u62bd\u51fa\u5668\u3068\u3057\u3066\u6e96\u5099\u3057\u307e\u3059\uff1a</p> <pre><code># EfficientNet_B0\u306e\u4e8b\u524d\u8a13\u7df4\u91cd\u307f\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\nweights = torchvision.models.EfficientNet_B0_Weights.DEFAULT\nmodel = torchvision.models.efficientnet_b0(weights=weights).to(device)\n\n# \u30d9\u30fc\u30b9\u30ec\u30a4\u30e4\u30fc\u3092\u30d5\u30ea\u30fc\u30ba\uff08requires_grad=False\u306b\u8a2d\u5b9a\uff09\nfor param in model.features.parameters():\n    param.requires_grad = False\n\n# \u65b0\u3057\u3044\u30ec\u30a4\u30e4\u30fc\u3092\u4f5c\u6210\u3059\u308b\u305f\u3081\u30b7\u30fc\u30c9\u3092\u8a2d\u5b9a\nset_seeds() \n\n# \u5206\u985e\u30d8\u30c3\u30c9\u3092\u554f\u984c\u306b\u5408\u308f\u305b\u3066\u66f4\u65b0\nmodel.classifier = torch.nn.Sequential(\n    nn.Dropout(p=0.2, inplace=True),\n    nn.Linear(in_features=1280, \n              out_features=len(class_names),\n              bias=True).to(device)\n)\n</code></pre>","tags":["PyTorch","\u5b9f\u9a13\u8ffd\u8de1","TensorBoard","\u8ee2\u79fb\u5b66\u7fd2","\u753b\u50cf\u5206\u985e"]},{"location":"PyTorch/08_pytorch_experiment_tracking/#4","title":"4. \u30e2\u30c7\u30eb\u306e\u8a13\u7df4\u3068\u7d50\u679c\u306e\u8ffd\u8de1","text":"<p>TensorBoard\u3092\u4f7f\u7528\u3057\u305f\u5b9f\u9a13\u8ffd\u8de1\u3092\u884c\u3046\u305f\u3081\u306b\u3001<code>SummaryWriter</code>\u3092\u4f7f\u7528\u3057\u307e\u3059\uff1a</p> <pre><code>try:\n    from torch.utils.tensorboard import SummaryWriter\nexcept:\n    print(\"[INFO] tensorboard\u304c\u898b\u3064\u304b\u308a\u307e\u305b\u3093...\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u4e2d\u3002\")\n    !pip install -q tensorboard\n    from torch.utils.tensorboard import SummaryWriter\n\n# \u30c7\u30d5\u30a9\u30eb\u30c8\u8a2d\u5b9a\u3067writer\u3092\u4f5c\u6210\nwriter = SummaryWriter()\n</code></pre>","tags":["PyTorch","\u5b9f\u9a13\u8ffd\u8de1","TensorBoard","\u8ee2\u79fb\u5b66\u7fd2","\u753b\u50cf\u5206\u985e"]},{"location":"PyTorch/08_pytorch_experiment_tracking/#train","title":"\u5b9f\u9a13\u8ffd\u8de1\u6a5f\u80fd\u4ed8\u304dtrain()\u95a2\u6570\u306e\u4f5c\u6210","text":"<pre><code>from typing import Dict, List\nfrom tqdm import tqdm\nfrom going_modular.engine import train_step, test_step\n\ndef train(model: torch.nn.Module, \n          train_dataloader: torch.utils.data.DataLoader, \n          test_dataloader: torch.utils.data.DataLoader, \n          optimizer: torch.optim.Optimizer,\n          loss_fn: torch.nn.Module,\n          epochs: int,\n          device: torch.device,\n          writer: torch.utils.tensorboard.writer.SummaryWriter = None\n          ) -&gt; Dict[str, List]:\n    \"\"\"PyTorch\u30e2\u30c7\u30eb\u3092\u8a13\u7df4\u3057\u3001TensorBoard\u3067\u7d50\u679c\u3092\u8ffd\u8de1\u3059\u308b\n\n    Args:\n        model: \u8a13\u7df4\u30fb\u30c6\u30b9\u30c8\u3059\u308bPyTorch\u30e2\u30c7\u30eb\n        train_dataloader: \u8a13\u7df4\u7528DataLoader\n        test_dataloader: \u30c6\u30b9\u30c8\u7528DataLoader\n        optimizer: PyTorch\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u30fc\n        loss_fn: PyTorch\u640d\u5931\u95a2\u6570\n        epochs: \u8a13\u7df4\u30a8\u30dd\u30c3\u30af\u6570\n        device: \u8a08\u7b97\u30c7\u30d0\u30a4\u30b9\n        writer: SummaryWriter \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\n\n    Returns:\n        \u8a13\u7df4\u30fb\u30c6\u30b9\u30c8\u640d\u5931\u304a\u3088\u3073\u7cbe\u5ea6\u306e\u30e1\u30c8\u30ea\u30af\u30b9\u3092\u542b\u3080\u8f9e\u66f8\n    \"\"\"\n    # \u7a7a\u306e\u7d50\u679c\u8f9e\u66f8\u3092\u4f5c\u6210\n    results = {\"train_loss\": [],\n               \"train_acc\": [],\n               \"test_loss\": [],\n               \"test_acc\": []}\n\n    # \u30a8\u30dd\u30c3\u30af\u6570\u5206\u306e\u30eb\u30fc\u30d7\u3067\u8a13\u7df4\u30fb\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\n    for epoch in tqdm(range(epochs)):\n        train_loss, train_acc = train_step(model=model,\n                                           dataloader=train_dataloader,\n                                           loss_fn=loss_fn,\n                                           optimizer=optimizer,\n                                           device=device)\n        test_loss, test_acc = test_step(model=model,\n                                        dataloader=test_dataloader,\n                                        loss_fn=loss_fn,\n                                        device=device)\n\n        # \u9032\u884c\u72b6\u6cc1\u3092\u5370\u5237\n        print(\n          f\"Epoch: {epoch+1} | \"\n          f\"train_loss: {train_loss:.4f} | \"\n          f\"train_acc: {train_acc:.4f} | \"\n          f\"test_loss: {test_loss:.4f} | \"\n          f\"test_acc: {test_acc:.4f}\"\n        )\n\n        # \u7d50\u679c\u8f9e\u66f8\u3092\u66f4\u65b0\n        results[\"train_loss\"].append(train_loss)\n        results[\"train_acc\"].append(train_acc)\n        results[\"test_loss\"].append(test_loss)\n        results[\"test_acc\"].append(test_acc)\n\n        ### \u65b0\u6a5f\u80fd: \u5b9f\u9a13\u8ffd\u8de1 ###\n        # writer\u304c\u5b58\u5728\u3059\u308b\u5834\u5408\u3001\u7d50\u679c\u3092\u30ed\u30b0\u306b\u8a18\u9332\n        if writer:\n            # \u640d\u5931\u7d50\u679c\u3092SummaryWriter\u306b\u8ffd\u52a0\n            writer.add_scalars(main_tag=\"Loss\", \n                               tag_scalar_dict={\"train_loss\": train_loss,\n                                                \"test_loss\": test_loss},\n                               global_step=epoch)\n\n            # \u7cbe\u5ea6\u7d50\u679c\u3092SummaryWriter\u306b\u8ffd\u52a0\n            writer.add_scalars(main_tag=\"Accuracy\", \n                               tag_scalar_dict={\"train_acc\": train_acc,\n                                                \"test_acc\": test_acc}, \n                               global_step=epoch)\n\n            # PyTorch\u30e2\u30c7\u30eb\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3092\u8ffd\u8de1\n            writer.add_graph(model=model, \n                             input_to_model=torch.randn(32, 3, 224, 224).to(device))\n\n    # writer\u3092\u9589\u3058\u308b\n    if writer:\n        writer.close()\n\n    # \u30a8\u30dd\u30c3\u30af\u7d42\u4e86\u6642\u306b\u7d50\u679c\u3092\u8fd4\u3059\n    return results\n</code></pre>","tags":["PyTorch","\u5b9f\u9a13\u8ffd\u8de1","TensorBoard","\u8ee2\u79fb\u5b66\u7fd2","\u753b\u50cf\u5206\u985e"]},{"location":"PyTorch/08_pytorch_experiment_tracking/#_9","title":"\u30e2\u30c7\u30eb\u306e\u8a13\u7df4\u5b9f\u884c","text":"<pre><code># \u640d\u5931\u95a2\u6570\u3068\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u30fc\u306e\u5b9a\u7fa9\nloss_fn = nn.CrossEntropyLoss()\noptimizer = torch.optim.Adam(model.parameters(), lr=0.001)\n\n# \u30e2\u30c7\u30eb\u306e\u8a13\u7df4\nset_seeds()\nresults = train(model=model.to(device),\n                train_dataloader=train_dataloader,\n                test_dataloader=test_dataloader,\n                optimizer=optimizer,\n                loss_fn=loss_fn,\n                epochs=5,\n                device=device,\n                writer=writer)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>Epoch: 1 | train_loss: 1.0823 | train_acc: 0.4062 | test_loss: 0.8991 | test_acc: 0.5909\nEpoch: 2 | train_loss: 0.9203 | train_acc: 0.6680 | test_loss: 0.7960 | test_acc: 0.8456\nEpoch: 3 | train_loss: 0.7825 | train_acc: 0.7578 | test_loss: 0.6825 | test_acc: 0.8864\nEpoch: 4 | train_loss: 0.6894 | train_acc: 0.8477 | test_loss: 0.6784 | test_acc: 0.8456\nEpoch: 5 | train_loss: 0.7096 | train_acc: 0.7148 | test_loss: 0.6878 | test_acc: 0.7131\n</code></pre></p>","tags":["PyTorch","\u5b9f\u9a13\u8ffd\u8de1","TensorBoard","\u8ee2\u79fb\u5b66\u7fd2","\u753b\u50cf\u5206\u985e"]},{"location":"PyTorch/08_pytorch_experiment_tracking/#5-tensorboard","title":"5. TensorBoard\u3067\u306e\u7d50\u679c\u78ba\u8a8d","text":"<p><code>SummaryWriter()</code>\u30af\u30e9\u30b9\u306f\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067runs/\u3068\u3044\u3046\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306bTensorBoard\u5f62\u5f0f\u3067\u30e2\u30c7\u30eb\u306e\u7d50\u679c\u3092\u4fdd\u5b58\u3057\u307e\u3059\u3002 TensorBoard\u306f\u3001TensorFlow\u30c1\u30fc\u30e0\u304c\u4f5c\u6210\u3057\u305f\u30e2\u30c7\u30eb\u3084\u30c7\u30fc\u30bf\u306b\u95a2\u3059\u308b\u60c5\u5831\u3092\u8868\u793a\u30fb\u691c\u67fb\u3059\u308b\u305f\u3081\u306e\u53ef\u8996\u5316\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3059\u3002</p> <p>TensorBoard\u3092\u8d77\u52d5\u3057\u3066\u7d50\u679c\u3092\u78ba\u8a8d\u3059\u308b\u3002</p> <p>TensorBoard\u3067\u306f\u3001\u8a13\u7df4\u30fb\u30c6\u30b9\u30c8\u640d\u5931\u304a\u3088\u3073\u7cbe\u5ea6\u306e\u63a8\u79fb\u3092\u30b0\u30e9\u30d5\u3067\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002</p> <p></p>","tags":["PyTorch","\u5b9f\u9a13\u8ffd\u8de1","TensorBoard","\u8ee2\u79fb\u5b66\u7fd2","\u753b\u50cf\u5206\u985e"]},{"location":"PyTorch/08_pytorch_experiment_tracking/#6","title":"6. \u5b9f\u9a13\u8ffd\u8de1\u306e\u305f\u3081\u306e\u30d8\u30eb\u30d1\u30fc\u95a2\u6570\u4f5c\u6210","text":"<p><code>SummaryWriter()</code>\u30af\u30e9\u30b9\u306f\u3001<code>log_dir</code>\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u6307\u5b9a\u3055\u308c\u305f\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u69d8\u3005\u306a\u60c5\u5831\u3092\u30ed\u30b0\u51fa\u529b\u3057\u307e\u3059\u3002</p> <p>\u5404\u5b9f\u9a13\u7528\u306b\u30ab\u30b9\u30bf\u30e0\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u4f5c\u6210\u3059\u308b\u30d8\u30eb\u30d1\u30fc\u95a2\u6570\u3092\u4f5c\u6210\u3057\u307e\u3057\u3087\u3046\u3002\u3064\u307e\u308a\u3001\u5404\u5b9f\u9a13\u304c\u72ec\u81ea\u306e\u30ed\u30b0\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u6301\u3064\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002</p> <p>\u4f8b\u3048\u3070\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u5185\u5bb9\u3092\u8ffd\u8de1\u3057\u305f\u3044\u3068\u3057\u307e\u3059\uff1a</p> <ul> <li>\u5b9f\u9a13\u65e5\u6642/\u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7 - \u5b9f\u9a13\u306f\u3044\u3064\u884c\u308f\u308c\u305f\u304b\uff1f</li> <li>\u5b9f\u9a13\u540d - \u5b9f\u9a13\u306b\u4ed8\u3051\u305f\u3044\u540d\u524d\u306f\u3042\u308b\u304b\uff1f</li> <li>\u30e2\u30c7\u30eb\u540d - \u3069\u306e\u30e2\u30c7\u30eb\u304c\u4f7f\u7528\u3055\u308c\u305f\u304b\uff1f</li> <li>\u8ffd\u52a0\u60c5\u5831 - \u4ed6\u306b\u8ffd\u8de1\u3059\u3079\u304d\u3082\u306e\u306f\u3042\u308b\u304b\uff1f</li> </ul> <p>\u7406\u60f3\u7684\u306b\u306f\u3001<code>log_dir</code>\u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u5f62\u5f0f\u306b\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\uff1a</p> <p><code>runs/YYYY-MM-DD/experiment_name/model_name/extra</code></p> <p>\u3053\u3053\u3067<code>YYYY-MM-DD</code>\u306f\u5b9f\u9a13\u304c\u5b9f\u884c\u3055\u308c\u305f\u65e5\u4ed8\u3067\u3059\uff08\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u6642\u523b\u3082\u8ffd\u52a0\u3067\u304d\u307e\u3059\uff09\u3002</p> <pre><code>def create_writer(experiment_name: str, \n                  model_name: str, \n                  extra: str=None) -&gt; torch.utils.tensorboard.writer.SummaryWriter():\n    \"\"\"\u7279\u5b9a\u306elog_dir\u306b\u4fdd\u5b58\u3059\u308btorch.utils.tensorboard.writer.SummaryWriter()\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\u3059\u308b\n\n    log_dir\u306f runs/timestamp/experiment_name/model_name/extra \u306e\u7d44\u307f\u5408\u308f\u305b\u306b\u306a\u308a\u307e\u3059\u3002\n\n    timestamp\u306f\u73fe\u5728\u306e\u65e5\u4ed8\u3092YYYY-MM-DD\u5f62\u5f0f\u3067\u8868\u793a\u3057\u307e\u3059\u3002\n\n    Args:\n        experiment_name (str): \u5b9f\u9a13\u306e\u540d\u524d\n        model_name (str): \u30e2\u30c7\u30eb\u306e\u540d\u524d\n        extra (str, optional): \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u8ffd\u52a0\u3059\u308b\u4efb\u610f\u306e\u5185\u5bb9\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u306fNone\n\n    Returns:\n        torch.utils.tensorboard.writer.SummaryWriter(): log_dir\u306b\u4fdd\u5b58\u3059\u308bwriter\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\n\n    \u4f7f\u7528\u4f8b:\n        # \"runs/2022-06-04/data_10_percent/effnetb2/5_epochs/\"\u306b\u4fdd\u5b58\u3059\u308bwriter\u3092\u4f5c\u6210\n        writer = create_writer(experiment_name=\"data_10_percent\",\n                               model_name=\"effnetb2\",\n                               extra=\"5_epochs\")\n        # \u4e0a\u8a18\u306f\u4ee5\u4e0b\u3068\u540c\u3058\u3067\u3059:\n        writer = SummaryWriter(log_dir=\"runs/2022-06-04/data_10_percent/effnetb2/5_epochs/\")\n    \"\"\"\n    from datetime import datetime\n    import os\n\n    # \u73fe\u5728\u306e\u65e5\u4ed8\u306e\u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7\u3092\u53d6\u5f97\uff08\u7279\u5b9a\u306e\u65e5\u306e\u3059\u3079\u3066\u306e\u5b9f\u9a13\u306f\u540c\u3058\u30d5\u30a9\u30eb\u30c0\u306b\u4fdd\u5b58\uff09\n    timestamp = datetime.now().strftime(\"%Y-%m-%d\") # \u73fe\u5728\u306e\u65e5\u4ed8\u3092YYYY-MM-DD\u5f62\u5f0f\u3067\u8fd4\u3059\n\n    if extra:\n        # \u30ed\u30b0\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u30d1\u30b9\u3092\u4f5c\u6210\n        log_dir = os.path.join(\"runs\", timestamp, experiment_name, model_name, extra)\n    else:\n        log_dir = os.path.join(\"runs\", timestamp, experiment_name, model_name)\n\n    print(f\"[INFO] SummaryWriter\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002\u4fdd\u5b58\u5148: {log_dir}...\")\n    return SummaryWriter(log_dir=log_dir)\n</code></pre> <p><code>create_writer()</code>\u95a2\u6570\u304c\u3067\u304d\u305f\u306e\u3067\u3001\u8a66\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002</p> <pre><code># \u30b5\u30f3\u30d7\u30ebwriter\u3092\u4f5c\u6210\nexample_writer = create_writer(experiment_name=\"data_10_percent\",\n                               model_name=\"effnetb0\",\n                               extra=\"5_epochs\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>[INFO] SummaryWriter\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002\u4fdd\u5b58\u5148: runs/2025-07-06/data_10_percent/effnetb0/5_epochs...\n</code></pre></p>","tags":["PyTorch","\u5b9f\u9a13\u8ffd\u8de1","TensorBoard","\u8ee2\u79fb\u5b66\u7fd2","\u753b\u50cf\u5206\u985e"]},{"location":"PyTorch/08_pytorch_experiment_tracking/#61-trainwriter","title":"6.1 <code>train()</code>\u95a2\u6570\u306b<code>writer</code>\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8ffd\u52a0","text":"<p><code>create_writer()</code>\u95a2\u6570\u306f\u7d20\u6674\u3089\u3057\u304f\u52d5\u4f5c\u3057\u307e\u3059\u3002</p> <p><code>train()</code>\u95a2\u6570\u306b<code>writer</code>\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u53d6\u308b\u6a5f\u80fd\u3092\u8ffd\u52a0\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u3053\u308c\u306b\u3088\u308a\u3001<code>train()</code>\u3092\u547c\u3073\u51fa\u3059\u305f\u3073\u306b\u4f7f\u7528\u3059\u308b<code>SummaryWriter()</code>\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u7a4d\u6975\u7684\u306b\u66f4\u65b0\u3067\u304d\u307e\u3059\u3002</p> <p>\u4f8b\u3048\u3070\u3001\u4e00\u9023\u306e\u5b9f\u9a13\u3092\u5b9f\u884c\u3057\u3001\u8907\u6570\u306e\u7570\u306a\u308b\u30e2\u30c7\u30eb\u306b\u5bfe\u3057\u3066<code>train()</code>\u3092\u8907\u6570\u56de\u547c\u3073\u51fa\u3057\u3066\u3044\u308b\u5834\u5408\u3001\u5404\u5b9f\u9a13\u3067\u7570\u306a\u308b<code>writer</code>\u3092\u4f7f\u7528\u3059\u308b\u3068\u826f\u3044\u3067\u3057\u3087\u3046\u3002</p> <p>1\u3064\u306e\u5b9f\u9a13\u306b\u3064\u304d1\u3064\u306e<code>writer</code> = 1\u3064\u306e\u5b9f\u9a13\u306b\u3064\u304d1\u3064\u306e\u30ed\u30b0\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3002</p> <p><code>train()</code>\u95a2\u6570\u3092\u8abf\u6574\u3059\u308b\u305f\u3081\u306b\u3001<code>writer</code>\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u95a2\u6570\u306b\u8ffd\u52a0\u3057\u3001<code>writer</code>\u304c\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u78ba\u8a8d\u3059\u308b\u30b3\u30fc\u30c9\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\u3042\u308b\u5834\u5408\u306f\u3001\u305d\u3053\u306b\u60c5\u5831\u3092\u8ffd\u8de1\u3057\u307e\u3059\u3002</p> <pre><code>from typing import Dict, List\nfrom tqdm import tqdm\n\n# train()\u306bwriter\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8ffd\u52a0\ndef train(model: torch.nn.Module, \n          train_dataloader: torch.utils.data.DataLoader, \n          test_dataloader: torch.utils.data.DataLoader, \n          optimizer: torch.optim.Optimizer,\n          loss_fn: torch.nn.Module,\n          epochs: int,\n          device: torch.device, \n          writer: torch.utils.tensorboard.writer.SummaryWriter = None\n          ) -&gt; Dict[str, List]:\n    \"\"\"PyTorch\u30e2\u30c7\u30eb\u3092\u8a13\u7df4\u30fb\u30c6\u30b9\u30c8\u3057\u307e\u3059\u3002\n\n    \u6307\u5b9a\u3055\u308c\u305f\u30a8\u30dd\u30c3\u30af\u6570\u306e\u9593\u3001train_step()\u3068test_step()\u95a2\u6570\u3092\u901a\u3057\u3066\n    \u5bfe\u8c61\u306ePyTorch\u30e2\u30c7\u30eb\u3092\u51e6\u7406\u3057\u3001\u540c\u3058\u30a8\u30dd\u30c3\u30af\u30eb\u30fc\u30d7\u5185\u3067\u30e2\u30c7\u30eb\u3092\n    \u8a13\u7df4\u30fb\u30c6\u30b9\u30c8\u3057\u307e\u3059\u3002\n\n    \u8a55\u4fa1\u30e1\u30c8\u30ea\u30af\u30b9\u3092\u5168\u4f53\u3092\u901a\u3057\u3066\u8a08\u7b97\u3001\u5370\u5237\u3001\u4fdd\u5b58\u3057\u307e\u3059\u3002\n\n    writer\u304c\u5b58\u5728\u3059\u308b\u5834\u5408\u3001\u6307\u5b9a\u3055\u308c\u305fwriter log_dir\u306b\u30e1\u30c8\u30ea\u30af\u30b9\u3092\u4fdd\u5b58\u3057\u307e\u3059\u3002\n\n    Args:\n      model: \u8a13\u7df4\u30fb\u30c6\u30b9\u30c8\u3059\u308bPyTorch\u30e2\u30c7\u30eb\n      train_dataloader: \u30e2\u30c7\u30eb\u3092\u8a13\u7df4\u3059\u308b\u305f\u3081\u306eDataLoader\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\n      test_dataloader: \u30e2\u30c7\u30eb\u3092\u30c6\u30b9\u30c8\u3059\u308b\u305f\u3081\u306eDataLoader\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\n      optimizer: \u640d\u5931\u95a2\u6570\u3092\u6700\u5c0f\u5316\u3059\u308b\u305f\u3081\u306ePyTorch\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u30fc\n      loss_fn: \u4e21\u65b9\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3067\u640d\u5931\u3092\u8a08\u7b97\u3059\u308b\u305f\u3081\u306ePyTorch\u640d\u5931\u95a2\u6570\n      epochs: \u4f55\u30a8\u30dd\u30c3\u30af\u8a13\u7df4\u3059\u308b\u304b\u3092\u793a\u3059\u6574\u6570\n      device: \u8a08\u7b97\u3059\u308b\u30bf\u30fc\u30b2\u30c3\u30c8\u30c7\u30d0\u30a4\u30b9\uff08\u4f8b\uff1a\"cuda\"\u307e\u305f\u306f\"cpu\"\uff09\n      writer: \u30e2\u30c7\u30eb\u7d50\u679c\u3092\u30ed\u30b0\u51fa\u529b\u3059\u308bSummaryWriter()\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\n\n    Returns:\n      \u8a13\u7df4\u30fb\u30c6\u30b9\u30c8\u640d\u5931\u304a\u3088\u3073\u8a13\u7df4\u30fb\u30c6\u30b9\u30c8\u7cbe\u5ea6\u30e1\u30c8\u30ea\u30af\u30b9\u306e\u8f9e\u66f8\u3002\n      \u5404\u30e1\u30c8\u30ea\u30af\u30b9\u306b\u306f\u30a8\u30dd\u30c3\u30af\u3054\u3068\u306e\u30ea\u30b9\u30c8\u306e\u5024\u304c\u3042\u308a\u307e\u3059\u3002\n      \u5f62\u5f0f: {train_loss: [...],\n                train_acc: [...],\n                test_loss: [...],\n                test_acc: [...]} \n      \u4f8b\uff1aepochs=2\u3067\u8a13\u7df4\u3057\u305f\u5834\u5408: \n              {train_loss: [2.0616, 1.0537],\n                train_acc: [0.3945, 0.3945],\n                test_loss: [1.2641, 1.5706],\n                test_acc: [0.3400, 0.2973]} \n    \"\"\"\n    # \u7a7a\u306e\u7d50\u679c\u8f9e\u66f8\u3092\u4f5c\u6210\n    results = {\"train_loss\": [],\n               \"train_acc\": [],\n               \"test_loss\": [],\n               \"test_acc\": []}\n\n    # \u6307\u5b9a\u3055\u308c\u305f\u30a8\u30dd\u30c3\u30af\u6570\u3060\u3051\u8a13\u7df4\u30fb\u30c6\u30b9\u30c8\u30b9\u30c6\u30c3\u30d7\u3092\u30eb\u30fc\u30d7\n    for epoch in tqdm(range(epochs)):\n        train_loss, train_acc = train_step(model=model,\n                                          dataloader=train_dataloader,\n                                          loss_fn=loss_fn,\n                                          optimizer=optimizer,\n                                          device=device)\n        test_loss, test_acc = test_step(model=model,\n          dataloader=test_dataloader,\n          loss_fn=loss_fn,\n          device=device)\n\n        # \u9032\u884c\u72b6\u6cc1\u3092\u5370\u5237\n        print(\n          f\"Epoch: {epoch+1} | \"\n          f\"train_loss: {train_loss:.4f} | \"\n          f\"train_acc: {train_acc:.4f} | \"\n          f\"test_loss: {test_loss:.4f} | \"\n          f\"test_acc: {test_acc:.4f}\"\n        )\n\n        # \u7d50\u679c\u8f9e\u66f8\u3092\u66f4\u65b0\n        results[\"train_loss\"].append(train_loss)\n        results[\"train_acc\"].append(train_acc)\n        results[\"test_loss\"].append(test_loss)\n        results[\"test_acc\"].append(test_acc)\n\n\n        ### \u65b0\u6a5f\u80fd: writer\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u4f7f\u7528\u3057\u3066\u5b9f\u9a13\u3092\u8ffd\u8de1 ###\n        # writer\u304c\u3042\u308b\u304b\u3069\u3046\u304b\u78ba\u8a8d\u3057\u3001\u3042\u308b\u5834\u5408\u306f\u30ed\u30b0\u51fa\u529b\n        if writer:\n            # \u7d50\u679c\u3092SummaryWriter\u306b\u8ffd\u52a0\n            writer.add_scalars(main_tag=\"Loss\", \n                               tag_scalar_dict={\"train_loss\": train_loss,\n                                                \"test_loss\": test_loss},\n                               global_step=epoch)\n            writer.add_scalars(main_tag=\"Accuracy\", \n                               tag_scalar_dict={\"train_acc\": train_acc,\n                                                \"test_acc\": test_acc}, \n                               global_step=epoch)\n\n            # writer\u3092\u9589\u3058\u308b\n            writer.close()\n        else:\n            pass\n    ### \u65b0\u6a5f\u80fd\u7d42\u4e86 ###\n\n    # \u30a8\u30dd\u30c3\u30af\u7d42\u4e86\u6642\u306b\u7d50\u679c\u3092\u8fd4\u3059\n    return results\n</code></pre>","tags":["PyTorch","\u5b9f\u9a13\u8ffd\u8de1","TensorBoard","\u8ee2\u79fb\u5b66\u7fd2","\u753b\u50cf\u5206\u985e"]},{"location":"PyTorch/08_pytorch_experiment_tracking/#7","title":"7. \u4e00\u9023\u306e\u30e2\u30c7\u30ea\u30f3\u30b0\u5b9f\u9a13\u306e\u8a2d\u5b9a","text":"","tags":["PyTorch","\u5b9f\u9a13\u8ffd\u8de1","TensorBoard","\u8ee2\u79fb\u5b66\u7fd2","\u753b\u50cf\u5206\u985e"]},{"location":"PyTorch/08_pytorch_experiment_tracking/#71","title":"7.1 \u3069\u306e\u3088\u3046\u306a\u5b9f\u9a13\u3092\u5b9f\u884c\u3059\u3079\u304d\u304b\uff1f","text":"<p>\u3053\u308c\u306f\u6a5f\u68b0\u5b66\u7fd2\u306b\u304a\u3051\u308b100\u4e07\u30c9\u30eb\u306e\u8cea\u554f\u3067\u3059\u3002</p> <p>\u306a\u305c\u306a\u3089\u3001\u5b9f\u884c\u3067\u304d\u308b\u5b9f\u9a13\u306b\u306f\u672c\u5f53\u306b\u5236\u9650\u304c\u306a\u3044\u304b\u3089\u3067\u3059\u3002</p> <p>\u3053\u306e\u3088\u3046\u306a\u81ea\u7531\u304c\u3042\u308b\u304b\u3089\u3053\u305d\u3001\u6a5f\u68b0\u5b66\u7fd2\u306f\u540c\u6642\u306b\u30a8\u30ad\u30b5\u30a4\u30c6\u30a3\u30f3\u30b0\u3067\u6050\u308d\u3057\u3044\u3082\u306e\u306a\u306e\u3067\u3059\u3002</p> <p>\u3053\u3053\u3067\u306f\u79d1\u5b66\u8005\u306e\u30b3\u30fc\u30c8\u3092\u7740\u3066\u3001\u6a5f\u68b0\u5b66\u7fd2\u5b9f\u8df5\u8005\u306e\u30e2\u30c3\u30c8\u30fc\u3092\u601d\u3044\u51fa\u3057\u3066\u304f\u3060\u3055\u3044\uff1a\u5b9f\u9a13\u3001\u5b9f\u9a13\u3001\u5b9f\u9a13\uff01</p> <p>\u3059\u3079\u3066\u306e\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u7570\u306a\u308b\u5b9f\u9a13\u306e\u51fa\u767a\u70b9\u3068\u306a\u308a\u307e\u3059\uff1a</p> <ul> <li>\u30a8\u30dd\u30c3\u30af\u6570\u3092\u5909\u66f4\u3059\u308b</li> <li>\u30ec\u30a4\u30e4\u30fc\u6570/\u96a0\u308c\u30e6\u30cb\u30c3\u30c8\u6570\u3092\u5909\u66f4\u3059\u308b</li> <li>\u30c7\u30fc\u30bf\u91cf\u3092\u5909\u66f4\u3059\u308b</li> <li>\u5b66\u7fd2\u7387\u3092\u5909\u66f4\u3059\u308b</li> <li>\u7570\u306a\u308b\u7a2e\u985e\u306e\u30c7\u30fc\u30bf\u62e1\u5f35\u3092\u8a66\u3059</li> <li>\u7570\u306a\u308b\u30e2\u30c7\u30eb\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3092\u9078\u629e\u3059\u308b</li> </ul> <p>\u5b9f\u8df5\u3068\u591a\u304f\u306e\u7570\u306a\u308b\u5b9f\u9a13\u3092\u5b9f\u884c\u3059\u308b\u3053\u3068\u3067\u3001\u30e2\u30c7\u30eb\u3092\u6539\u5584\u3059\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u3082\u306e\u306e\u76f4\u611f\u3092\u69cb\u7bc9\u3057\u59cb\u3081\u307e\u3059\u3002</p> <p>\u53ef\u80fd\u6027\u306e\u3042\u308b\u3068\u8a00\u3046\u306e\u306f\u610f\u56f3\u7684\u3067\u3059\u3002\u306a\u305c\u306a\u3089\u4fdd\u8a3c\u306f\u306a\u3044\u304b\u3089\u3067\u3059\u3002</p> <p>\u3057\u304b\u3057\u4e00\u822c\u7684\u306b\u3001\u82e6\u3044\u6559\u8a13\u306b\u7167\u3089\u3057\u3066\uff08\u3053\u308c\u306fAI\u306e\u4e16\u754c\u3067\u91cd\u8981\u306a\u30a8\u30c3\u30bb\u30a4\u306a\u306e\u3067\u4e8c\u5ea6\u76ee\u306e\u8a00\u53ca\u3067\u3059\uff09\u3001\u4e00\u822c\u7684\u306b\u30e2\u30c7\u30eb\u304c\u5927\u304d\u304f\uff08\u5b66\u7fd2\u53ef\u80fd\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u591a\u304f\uff09\u3001\u30c7\u30fc\u30bf\u304c\u591a\u3044\uff08\u5b66\u7fd2\u6a5f\u4f1a\u304c\u591a\u3044\uff09\u307b\u3069\u3001\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u304c\u5411\u4e0a\u3057\u307e\u3059\u3002</p> <p>\u305f\u3060\u3057\u3001\u6a5f\u68b0\u5b66\u7fd2\u554f\u984c\u306b\u6700\u521d\u306b\u53d6\u308a\u7d44\u3080\u3068\u304d\u306f\uff1a\u5c0f\u3055\u304f\u59cb\u3081\u3066\u3001\u4f55\u304b\u304c\u6a5f\u80fd\u3059\u308c\u3070\u30b9\u30b1\u30fc\u30eb\u30a2\u30c3\u30d7\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <p>\u6700\u521d\u306e\u5b9f\u9a13\u30d0\u30c3\u30c1\u306f\u3001\u5b9f\u884c\u306b\u6570\u79d2\u304b\u3089\u6570\u5206\u4ee5\u4e0a\u304b\u304b\u308b\u3079\u304d\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002</p> <p>\u5b9f\u9a13\u3092\u65e9\u304f\u884c\u3048\u308b\u307b\u3069\u3001\u4f55\u304c\u6a5f\u80fd\u3057\u306a\u3044\u304b\u3092\u65e9\u304f\u628a\u63e1\u3067\u304d\u3001\u305d\u306e\u7d50\u679c\u3001\u4f55\u304c\u6a5f\u80fd\u3059\u308b\u304b\u3092\u65e9\u304f\u628a\u63e1\u3067\u304d\u307e\u3059\u3002</p>","tags":["PyTorch","\u5b9f\u9a13\u8ffd\u8de1","TensorBoard","\u8ee2\u79fb\u5b66\u7fd2","\u753b\u50cf\u5206\u985e"]},{"location":"PyTorch/08_pytorch_experiment_tracking/#72","title":"7.2 \u3069\u306e\u3088\u3046\u306a\u5b9f\u9a13\u3092\u5b9f\u884c\u3059\u308b\u304b\uff1f","text":"<p>\u76ee\u6a19\u306f\u3001FoodVision Mini\u3092\u52d5\u304b\u3059\u30e2\u30c7\u30eb\u3092\u5927\u304d\u304f\u3057\u3059\u304e\u308b\u3053\u3068\u306a\u304f\u6539\u5584\u3059\u308b\u3053\u3068\u3067\u3059\u3002</p> <p>\u672c\u8cea\u7684\u306b\u3001\u7406\u60f3\u7684\u306a\u30e2\u30c7\u30eb\u306f\u9ad8\u3044\u30ec\u30d9\u30eb\u306e\u30c6\u30b9\u30c8\u30bb\u30c3\u30c8\u7cbe\u5ea6\uff0890%\u4ee5\u4e0a\uff09\u3092\u9054\u6210\u3057\u307e\u3059\u304c\u3001\u8a13\u7df4/\u63a8\u8ad6\u5b9f\u884c\uff08\u4e88\u6e2c\u4f5c\u6210\uff09\u306b\u6642\u9593\u304c\u304b\u304b\u308a\u3059\u304e\u307e\u305b\u3093\u3002</p> <p>\u591a\u304f\u306e\u9078\u629e\u80a2\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u30b7\u30f3\u30d7\u30eb\u306b\u4fdd\u3061\u307e\u3057\u3087\u3046\u3002</p> <p>\u4ee5\u4e0b\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u8a66\u3057\u3066\u307f\u307e\u3057\u3087\u3046</p> <ol> <li>\u7570\u306a\u308b\u30c7\u30fc\u30bf\u91cf\uff08\u30d4\u30b6\u3001\u30b9\u30c6\u30fc\u30ad\u3001\u5bff\u53f8\u306e10% vs 20%\uff09</li> <li>\u7570\u306a\u308b\u30e2\u30c7\u30eb\uff08<code>torchvision.models.efficientnet_b0</code> vs <code>torchvision.models.efficientnet_b2</code>\uff09</li> <li>\u7570\u306a\u308b\u8a13\u7df4\u6642\u9593\uff085\u30a8\u30dd\u30c3\u30af vs 10\u30a8\u30dd\u30c3\u30af\uff09</li> </ol> <p>\u3053\u308c\u3089\u3092\u5206\u89e3\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff1a</p> \u5b9f\u9a13\u756a\u53f7 \u8a13\u7df4\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8 \u30e2\u30c7\u30eb\uff08ImageNet\u3067\u4e8b\u524d\u8a13\u7df4\uff09 \u30a8\u30dd\u30c3\u30af\u6570 1 \u30d4\u30b6\u3001\u30b9\u30c6\u30fc\u30ad\u3001\u5bff\u53f8 10% EfficientNetB0 5 2 \u30d4\u30b6\u3001\u30b9\u30c6\u30fc\u30ad\u3001\u5bff\u53f8 10% EfficientNetB2 5 3 \u30d4\u30b6\u3001\u30b9\u30c6\u30fc\u30ad\u3001\u5bff\u53f8 10% EfficientNetB0 10 4 \u30d4\u30b6\u3001\u30b9\u30c6\u30fc\u30ad\u3001\u5bff\u53f8 10% EfficientNetB2 10 5 \u30d4\u30b6\u3001\u30b9\u30c6\u30fc\u30ad\u3001\u5bff\u53f8 20% EfficientNetB0 5 6 \u30d4\u30b6\u3001\u30b9\u30c6\u30fc\u30ad\u3001\u5bff\u53f8 20% EfficientNetB2 5 7 \u30d4\u30b6\u3001\u30b9\u30c6\u30fc\u30ad\u3001\u5bff\u53f8 20% EfficientNetB0 10 8 \u30d4\u30b6\u3001\u30b9\u30c6\u30fc\u30ad\u3001\u5bff\u53f8 20% EfficientNetB2 10 <p>\u5f90\u3005\u306b\u30b9\u30b1\u30fc\u30eb\u30a2\u30c3\u30d7\u3057\u3066\u3044\u308b\u70b9\u306b\u6ce8\u76ee\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <p>\u5404\u5b9f\u9a13\u3067\u3001\u30c7\u30fc\u30bf\u91cf\u3001\u30e2\u30c7\u30eb\u30b5\u30a4\u30ba\u3001\u8a13\u7df4\u306e\u9577\u3055\u3092\u5f90\u3005\u306b\u5897\u52a0\u3055\u305b\u3066\u3044\u307e\u3059\u3002</p> <p>\u6700\u7d42\u7684\u306b\u3001\u5b9f\u9a138\u306f\u5b9f\u9a131\u3068\u6bd4\u8f03\u3057\u3066\u30012\u500d\u306e\u30c7\u30fc\u30bf\u30012\u500d\u306e\u30e2\u30c7\u30eb\u30b5\u30a4\u30ba\u30012\u500d\u306e\u8a13\u7df4\u306e\u9577\u3055\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002</p>","tags":["PyTorch","\u5b9f\u9a13\u8ffd\u8de1","TensorBoard","\u8ee2\u79fb\u5b66\u7fd2","\u753b\u50cf\u5206\u985e"]},{"location":"PyTorch/08_pytorch_experiment_tracking/#73","title":"7.3 \u7570\u306a\u308b\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9","text":"<p>\u4e00\u9023\u306e\u5b9f\u9a13\u3092\u5b9f\u884c\u3057\u59cb\u3081\u308b\u524d\u306b\u3001\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304c\u6e96\u5099\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002</p> <p>2\u3064\u306e\u5f62\u5f0f\u306e\u8a13\u7df4\u30bb\u30c3\u30c8\u304c\u5fc5\u8981\u3067\u3059\uff1a</p> <ol> <li>Food101\u30d4\u30b6\u3001\u30b9\u30c6\u30fc\u30ad\u3001\u5bff\u53f8\u753b\u50cf\u306e10%\u306e\u30c7\u30fc\u30bf\u3092\u542b\u3080\u8a13\u7df4\u30bb\u30c3\u30c8\uff08\u4e0a\u8a18\u3067\u65e2\u306b\u4f5c\u6210\u3057\u307e\u3057\u305f\u304c\u3001\u5b8c\u5168\u6027\u306e\u305f\u3081\u306b\u518d\u5ea6\u884c\u3044\u307e\u3059\uff09</li> <li>Food101\u30d4\u30b6\u3001\u30b9\u30c6\u30fc\u30ad\u3001\u5bff\u53f8\u753b\u50cf\u306e20%\u306e\u30c7\u30fc\u30bf\u3092\u542b\u3080\u8a13\u7df4\u30bb\u30c3\u30c8</li> </ol> <p>\u4e00\u8cab\u6027\u306e\u305f\u3081\u306b\u3001\u3059\u3079\u3066\u306e\u5b9f\u9a13\u3067\u540c\u3058\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\uff0810%\u30c7\u30fc\u30bf\u5206\u5272\u304b\u3089\u306e\u3082\u306e\uff09\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002</p> <p>\u30b3\u30fc\u30b9GitHub\u304b\u3089\u5229\u7528\u53ef\u80fd\u306a\u69d8\u3005\u306a\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u3001\u5148\u307b\u3069\u4f5c\u6210\u3057\u305f<code>download_data()</code>\u95a2\u6570\u3092\u4f7f\u7528\u3057\u3066\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff1a</p> <pre><code># 10%\u306820%\u306e\u8a13\u7df4\u30c7\u30fc\u30bf\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\uff08\u5fc5\u8981\u306b\u5fdc\u3058\u3066\uff09\ndata_10_percent_path = download_data(\n    source=\"https://github.com/vinsmoke-three/deeplearning-with-pytorch/raw/main/data/pizza_steak_sushi.zip\",\n    destination=\"pizza_steak_sushi\"\n)\n\ndata_20_percent_path = download_data(\n    source=\"https://github.com/vinsmoke-three/deeplearning-with-pytorch/raw/main/data/pizza_steak_sushi_20_percent.zip\",\n    destination=\"pizza_steak_sushi_20_percent\"\n)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>[INFO] data/pizza_steak_sushi \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304c\u5b58\u5728\u3059\u308b\u305f\u3081\u3001\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3092\u30b9\u30ad\u30c3\u30d7\u3057\u307e\u3059\u3002\n[INFO] data/pizza_steak_sushi_20_percent \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304c\u898b\u3064\u304b\u3089\u306a\u3044\u305f\u3081\u3001\u4f5c\u6210\u3057\u307e\u3059...\n[INFO] https://github.com/vinsmoke-three/deeplearning-with-pytorch/raw/main/data/pizza_steak_sushi_20_percent.zip \u304b\u3089pizza_steak_sushi_20_percent.zip \u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u4e2d...\n[INFO] pizza_steak_sushi_20_percent.zip \u30c7\u30fc\u30bf\u3092\u5c55\u958b\u4e2d...\n</code></pre></p> <p>\u30c7\u30fc\u30bf\u304c\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3055\u308c\u307e\u3057\u305f\uff01</p> <p>\u6b21\u306b\u3001\u7570\u306a\u308b\u5b9f\u9a13\u3067\u4f7f\u7528\u3059\u308b\u30c7\u30fc\u30bf\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u3092\u8a2d\u5b9a\u3057\u307e\u3057\u3087\u3046\u3002</p> <p>\u7570\u306a\u308b\u8a13\u7df4\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u30d1\u30b9\u3092\u4f5c\u6210\u3057\u307e\u3059\u304c\u3001\u3059\u3079\u3066\u306e\u5b9f\u9a13\u3067\u540c\u3058\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\uff08\u30d4\u30b6\u3001\u30b9\u30c6\u30fc\u30ad\u3001\u5bff\u53f810%\u304b\u3089\u306e\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\uff09\u3092\u4f7f\u7528\u3059\u308b\u305f\u3081\u3001\u30c6\u30b9\u30c8\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u30d1\u30b9\u306f1\u3064\u3060\u3051\u5fc5\u8981\u3067\u3059\u3002</p> <pre><code># \u8a13\u7df4\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u30d1\u30b9\u306e\u8a2d\u5b9a\ntrain_dir_10_percent = data_10_percent_path / \"train\"\ntrain_dir_20_percent = data_20_percent_path / \"train\"\n\n# \u30c6\u30b9\u30c8\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u30d1\u30b9\u306e\u8a2d\u5b9a\uff08\u6ce8\u610f\uff1a\u7d50\u679c\u3092\u6bd4\u8f03\u3059\u308b\u305f\u3081\u4e21\u65b9\u3067\u540c\u3058\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u4f7f\u7528\uff09\ntest_dir = data_10_percent_path / \"test\"\n\n# \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u78ba\u8a8d\nprint(f\"\u8a13\u7df4\u30c7\u30a3\u30ec\u30af\u30c8\u30ea 10%: {train_dir_10_percent}\")\nprint(f\"\u8a13\u7df4\u30c7\u30a3\u30ec\u30af\u30c8\u30ea 20%: {train_dir_20_percent}\")\nprint(f\"\u30c6\u30b9\u30c8\u30c7\u30a3\u30ec\u30af\u30c8\u30ea: {test_dir}\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>\u8a13\u7df4\u30c7\u30a3\u30ec\u30af\u30c8\u30ea 10%: data/pizza_steak_sushi/train\n\u8a13\u7df4\u30c7\u30a3\u30ec\u30af\u30c8\u30ea 20%: data_pizza_steak_sushi_20_percent/train\n\u30c6\u30b9\u30c8\u30c7\u30a3\u30ec\u30af\u30c8\u30ea: data/pizza_steak_sushi/test\n</code></pre></p>","tags":["PyTorch","\u5b9f\u9a13\u8ffd\u8de1","TensorBoard","\u8ee2\u79fb\u5b66\u7fd2","\u753b\u50cf\u5206\u985e"]},{"location":"PyTorch/08_pytorch_experiment_tracking/#74-dataloader","title":"7.4 \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u5909\u63db\u3068DataLoader\u306e\u4f5c\u6210","text":"<p>\u6b21\u306b\u3001\u30e2\u30c7\u30eb\u7528\u306b\u753b\u50cf\u3092\u6e96\u5099\u3059\u308b\u305f\u3081\u306e\u4e00\u9023\u306e\u5909\u63db\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002</p> <p>\u4e00\u8cab\u6027\u3092\u4fdd\u3064\u305f\u3081\u306b\u3001\u624b\u52d5\u3067\u5909\u63db\u3092\u4f5c\u6210\u3057\uff08\u4e0a\u8a18\u3067\u884c\u3063\u305f\u3088\u3046\u306b\uff09\u3001\u3059\u3079\u3066\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3067\u540c\u3058\u5909\u63db\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002</p> <p>\u5909\u63db\u306f\u4ee5\u4e0b\u3092\u884c\u3044\u307e\u3059\uff1a</p> <ol> <li>\u3059\u3079\u3066\u306e\u753b\u50cf\u3092\u30ea\u30b5\u30a4\u30ba\uff08224, 224\u304b\u3089\u59cb\u3081\u307e\u3059\u304c\u3001\u3053\u308c\u306f\u5909\u66f4\u53ef\u80fd\uff09</li> <li>0\u304b\u30891\u306e\u5024\u3092\u6301\u3064\u30c6\u30f3\u30bd\u30eb\u306b\u5909\u63db</li> <li><code>torchvision.models</code>\u306e\u30e2\u30c7\u30eb\u304cImageNet\u3067\u4e8b\u524d\u8a13\u7df4\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3001\u305d\u306e\u5206\u5e03\u304cImageNet\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3068\u4e00\u81f4\u3059\u308b\u3088\u3046\u306b\u6b63\u898f\u5316</li> </ol> <pre><code>from torchvision import transforms\n\n# \u30c7\u30fc\u30bf\u5206\u5e03\u3092ImageNet\u3068\u4e00\u81f4\u3055\u305b\u308b\u305f\u3081\u306e\u5909\u63db\u3092\u4f5c\u6210\nnormalize = transforms.Normalize(mean=[0.485, 0.456, 0.406], # \u8272\u30c1\u30e3\u30f3\u30cd\u30eb\u3054\u3068\u306e\u5024 [red, green, blue]\n                                 std=[0.229, 0.224, 0.225]) # \u8272\u30c1\u30e3\u30f3\u30cd\u30eb\u3054\u3068\u306e\u5024 [red, green, blue]\n\n# \u5909\u63db\u3092\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306b\u69cb\u6210\nsimple_transform = transforms.Compose([\n    transforms.Resize((224, 224)), # 1. \u753b\u50cf\u3092\u30ea\u30b5\u30a4\u30ba\n    transforms.ToTensor(), # 2. \u753b\u50cf\u30920\u304b\u30891\u306e\u5024\u3092\u6301\u3064\u30c6\u30f3\u30bd\u30eb\u306b\u5909\u63db\n    normalize # 3. ImageNet\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3068\u5206\u5e03\u304c\u4e00\u81f4\u3059\u308b\u3088\u3046\u306b\u753b\u50cf\u3092\u6b63\u898f\u5316\n])\n</code></pre> <p>\u5909\u63db\u306e\u6e96\u5099\u304c\u3067\u304d\u307e\u3057\u305f\uff01</p> <p><code>data_setup.py</code>\u306e<code>create_dataloaders()</code>\u95a2\u6570\u3092\u4f7f\u7528\u3057\u3066DataLoader\u3092\u4f5c\u6210\u3057\u307e\u3057\u3087\u3046\u3002</p> <p>\u30d0\u30c3\u30c1\u30b5\u30a4\u30ba32\u3067DataLoader\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002</p> <p>\u3059\u3079\u3066\u306e\u5b9f\u9a13\u3067\u540c\u3058<code>test_dataloader</code>\u3092\u4f7f\u7528\u3057\u307e\u3059\uff08\u6bd4\u8f03\u306e\u4e00\u8cab\u6027\u3092\u4fdd\u3064\u305f\u3081\uff09\u3002</p> <pre><code>BATCH_SIZE = 32\n\n# 10%\u8a13\u7df4\u30fb\u30c6\u30b9\u30c8DataLoader\u3092\u4f5c\u6210\ntrain_dataloader_10_percent, test_dataloader, class_names = data_setup.create_dataloaders(\n    train_dir=train_dir_10_percent,\n    test_dir=test_dir, \n    transform=simple_transform,\n    batch_size=BATCH_SIZE\n)\n\n# 20%\u8a13\u7df4\u30fb\u30c6\u30b9\u30c8DataLoader\u3092\u4f5c\u6210\ntrain_dataloader_20_percent, test_dataloader, class_names = data_setup.create_dataloaders(\n    train_dir=train_dir_20_percent,\n    test_dir=test_dir,\n    transform=simple_transform,\n    batch_size=BATCH_SIZE\n)\n\n# \u5404dataloader\u5185\u306e\u30b5\u30f3\u30d7\u30eb\u6570/\u30d0\u30c3\u30c1\u6570\u3092\u78ba\u8a8d\uff08\u4e21\u5b9f\u9a13\u3067\u540c\u3058test_dataloader\u3092\u4f7f\u7528\uff09\nprint(f\"10%\u8a13\u7df4\u30c7\u30fc\u30bf\u5185\u306e\u30b5\u30a4\u30ba{BATCH_SIZE}\u306e\u30d0\u30c3\u30c1\u6570: {len(train_dataloader_10_percent)}\")\nprint(f\"20%\u8a13\u7df4\u30c7\u30fc\u30bf\u5185\u306e\u30b5\u30a4\u30ba{BATCH_SIZE}\u306e\u30d0\u30c3\u30c1\u6570: {len(train_dataloader_20_percent)}\")\nprint(f\"\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u5185\u306e\u30b5\u30a4\u30ba{BATCH_SIZE}\u306e\u30d0\u30c3\u30c1\u6570: {len(test_dataloader)} \uff08\u3059\u3079\u3066\u306e\u5b9f\u9a13\u3067\u540c\u3058\u30c6\u30b9\u30c8\u30bb\u30c3\u30c8\u3092\u4f7f\u7528\uff09\")\nprint(f\"\u30af\u30e9\u30b9\u6570: {len(class_names)}\u3001\u30af\u30e9\u30b9\u540d: {class_names}\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>10%\u8a13\u7df4\u30c7\u30fc\u30bf\u5185\u306e\u30b5\u30a4\u30ba32\u306e\u30d0\u30c3\u30c1\u6570: 8\n20%\u8a13\u7df4\u30c7\u30fc\u30bf\u5185\u306e\u30b5\u30a4\u30ba32\u306e\u30d0\u30c3\u30c1\u6570: 15\n\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u5185\u306e\u30b5\u30a4\u30ba32\u306e\u30d0\u30c3\u30c1\u6570: 3 \uff08\u3059\u3079\u3066\u306e\u5b9f\u9a13\u3067\u540c\u3058\u30c6\u30b9\u30c8\u30bb\u30c3\u30c8\u3092\u4f7f\u7528\uff09\n\u30af\u30e9\u30b9\u6570: 3\u3001\u30af\u30e9\u30b9\u540d: ['pizza', 'steak', 'sushi']\n</code></pre></p>","tags":["PyTorch","\u5b9f\u9a13\u8ffd\u8de1","TensorBoard","\u8ee2\u79fb\u5b66\u7fd2","\u753b\u50cf\u5206\u985e"]},{"location":"PyTorch/08_pytorch_experiment_tracking/#75","title":"7.5 \u7279\u5fb4\u62bd\u51fa\u5668\u30e2\u30c7\u30eb\u306e\u4f5c\u6210","text":"<p>\u30e2\u30c7\u30eb\u306e\u69cb\u7bc9\u3092\u958b\u59cb\u3059\u308b\u6642\u9593\u3067\u3059\u3002</p> <p>2\u3064\u306e\u7279\u5fb4\u62bd\u51fa\u5668\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3057\u307e\u3059\uff1a</p> <ol> <li><code>torchvision.models.efficientnet_b0()</code> \u4e8b\u524d\u8a13\u7df4\u30d0\u30c3\u30af\u30dc\u30fc\u30f3 + \u30ab\u30b9\u30bf\u30e0\u5206\u985e\u30d8\u30c3\u30c9\uff08\u7565\u3057\u3066EffNetB0\uff09</li> <li><code>torchvision.models.efficientnet_b2()</code> \u4e8b\u524d\u8a13\u7df4\u30d0\u30c3\u30af\u30dc\u30fc\u30f3 + \u30ab\u30b9\u30bf\u30e0\u5206\u985e\u30d8\u30c3\u30c9\uff08\u7565\u3057\u3066EffNetB2\uff09</li> </ol> <p>\u524d\u306e\u7ae0\u3067\u3001EffNetB0\u306e\u5206\u985e\u30d8\u30c3\u30c9\u3078\u306e<code>in_features</code>\u30d1\u30e9\u30e1\u30fc\u30bf\u304c<code>1280</code>\uff08\u30d0\u30c3\u30af\u30dc\u30fc\u30f3\u304c\u5165\u529b\u753b\u50cf\u3092\u30b5\u30a4\u30ba<code>1280</code>\u306e\u7279\u5fb4\u30d9\u30af\u30c8\u30eb\u306b\u5909\u63db\uff09\u3067\u3042\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u307e\u3057\u305f\u3002</p> <p>EffNetB2\u306f\u7570\u306a\u308b\u6570\u306e\u30ec\u30a4\u30e4\u30fc\u3068\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6301\u3064\u305f\u3081\u3001\u305d\u308c\u306b\u5fdc\u3058\u3066\u9069\u5fdc\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002</p> <p>\u6ce8\u610f: \u7570\u306a\u308b\u30e2\u30c7\u30eb\u3092\u4f7f\u7528\u3059\u308b\u969b\u306b\u6700\u521d\u306b\u691c\u67fb\u3059\u3079\u304d\u3053\u3068\u306e1\u3064\u306f\u3001\u5165\u529b\u3068\u51fa\u529b\u306e\u5f62\u72b6\u3067\u3059\u3002\u305d\u3046\u3059\u308b\u3053\u3068\u3067\u3001\u5165\u529b\u30c7\u30fc\u30bf\u3092\u3069\u306e\u3088\u3046\u306b\u6e96\u5099\u3057\u3001\u6b63\u3057\u3044\u51fa\u529b\u5f62\u72b6\u3092\u6301\u3064\u3088\u3046\u306b\u30e2\u30c7\u30eb\u3092\u66f4\u65b0\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u304b\u304c\u308f\u304b\u308a\u307e\u3059\u3002</p> <p><code>torchinfo.summary()</code>\u3092\u4f7f\u7528\u3057\u3001<code>input_size=(32, 3, 224, 224)</code>\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6e21\u3059\u3053\u3068\u3067\u3001EffNetB2\u306e\u5165\u529b\u3068\u51fa\u529b\u306e\u5f62\u72b6\u3092\u898b\u3064\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff08<code>(32, 3, 224, 224)</code>\u306f<code>(batch_size, color_channels, height, width)</code>\u3068\u7b49\u4fa1\u3001\u3064\u307e\u308a\u5358\u4e00\u306e\u30c7\u30fc\u30bf\u30d0\u30c3\u30c1\u304c\u30e2\u30c7\u30eb\u306b\u6e21\u3055\u308c\u308b\u3082\u306e\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u3059\uff09\u3002</p> <p>EffNetB2\u306e\u6700\u7d42\u30ec\u30a4\u30e4\u30fc\u3078\u306e\u5fc5\u8981\u306a\u5165\u529b\u5f62\u72b6\u3092\u898b\u3064\u3051\u308b\u305f\u3081\u306b\u3001\u4ee5\u4e0b\u3092\u884c\u3044\u307e\u3057\u3087\u3046\uff1a</p> <ol> <li><code>torchvision.models.efficientnet_b2(pretrained=True)</code>\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210</li> <li><code>torchinfo.summary()</code>\u3092\u5b9f\u884c\u3057\u3066\u69d8\u3005\u306a\u5165\u529b\u3068\u51fa\u529b\u306e\u5f62\u72b6\u3092\u78ba\u8a8d</li> <li>EffNetB2\u306e\u5206\u985e\u90e8\u5206\u306e<code>state_dict()</code>\u3092\u691c\u67fb\u3057\u3001\u91cd\u307f\u884c\u5217\u306e\u9577\u3055\u3092\u5370\u5237\u3057\u3066<code>in_features</code>\u306e\u6570\u3092\u5370\u5237</li> </ol> <pre><code>import torchvision\nfrom torch import nn\n\n# \u51fa\u529b\u7279\u5fb4\u6570\u3092\u53d6\u5f97\uff08\u30d4\u30b6\u3001\u30b9\u30c6\u30fc\u30ad\u3001\u5bff\u53f8\u306e\u5404\u30af\u30e9\u30b9\u306b1\u3064\u305a\u3064\uff09\nOUT_FEATURES = len(class_names)\n\n# EffNetB0\u7279\u5fb4\u62bd\u51fa\u5668\u3092\u4f5c\u6210\ndef create_effnetb0():\n    # 1. \u4e8b\u524d\u8a13\u7df4\u91cd\u307f\u3067\u30d9\u30fc\u30b9\u30e2\u30c7\u30eb\u3092\u53d6\u5f97\u3057\u3001\u30bf\u30fc\u30b2\u30c3\u30c8\u30c7\u30d0\u30a4\u30b9\u306b\u9001\u4fe1\n    weights = torchvision.models.EfficientNet_B0_Weights.DEFAULT\n    model = torchvision.models.efficientnet_b0(weights=weights).to(device)\n\n    # 2. \u30d9\u30fc\u30b9\u30e2\u30c7\u30eb\u30ec\u30a4\u30e4\u30fc\u3092\u30d5\u30ea\u30fc\u30ba\n    for param in model.features.parameters():\n        param.requires_grad = False\n\n    # 3. \u30b7\u30fc\u30c9\u3092\u8a2d\u5b9a\n    set_seeds()\n\n    # 4. \u5206\u985e\u30d8\u30c3\u30c9\u3092\u5909\u66f4\n    model.classifier = nn.Sequential(\n        nn.Dropout(p=0.2),\n        nn.Linear(in_features=1280, out_features=OUT_FEATURES)\n    ).to(device)\n\n    # 5. \u30e2\u30c7\u30eb\u306b\u540d\u524d\u3092\u4ed8\u3051\u308b\n    model.name = \"effnetb0\"\n    print(f\"[INFO] \u65b0\u3057\u3044{model.name}\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002\")\n    return model\n\n# EffNetB2\u7279\u5fb4\u62bd\u51fa\u5668\u3092\u4f5c\u6210\ndef create_effnetb2():\n    # 1. \u4e8b\u524d\u8a13\u7df4\u91cd\u307f\u3067\u30d9\u30fc\u30b9\u30e2\u30c7\u30eb\u3092\u53d6\u5f97\u3057\u3001\u30bf\u30fc\u30b2\u30c3\u30c8\u30c7\u30d0\u30a4\u30b9\u306b\u9001\u4fe1\n    weights = torchvision.models.EfficientNet_B2_Weights.DEFAULT\n    model = torchvision.models.efficientnet_b2(weights=weights).to(device)\n\n    # 2. \u30d9\u30fc\u30b9\u30e2\u30c7\u30eb\u30ec\u30a4\u30e4\u30fc\u3092\u30d5\u30ea\u30fc\u30ba\n    for param in model.features.parameters():\n        param.requires_grad = False\n\n    # 3. \u30b7\u30fc\u30c9\u3092\u8a2d\u5b9a\n    set_seeds()\n\n    # 4. \u5206\u985e\u30d8\u30c3\u30c9\u3092\u5909\u66f4\n    model.classifier = nn.Sequential(\n        nn.Dropout(p=0.3),\n        nn.Linear(in_features=1408, out_features=OUT_FEATURES)\n    ).to(device)\n\n    # 5. \u30e2\u30c7\u30eb\u306b\u540d\u524d\u3092\u4ed8\u3051\u308b\n    model.name = \"effnetb2\"\n    print(f\"[INFO] \u65b0\u3057\u3044{model.name}\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002\")\n    return model\n</code></pre> <p>EffNetB0\u3068EffNetB2\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\u3057\u3001\u305d\u308c\u3089\u306e<code>summary()</code>\u3092\u78ba\u8a8d\u3057\u3066\u30c6\u30b9\u30c8\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002</p> <pre><code>effnetb0 = create_effnetb0() \n\n# EffNetB0\u7279\u5fb4\u62bd\u51fa\u5668\u30e2\u30c7\u30eb\u306e\u30ec\u30a4\u30e4\u30fc\u306e\u51fa\u529b\u8981\u7d04\u3092\u53d6\u5f97\uff08\u5b8c\u5168\u306a\u51fa\u529b\u3092\u8868\u793a\u3059\u308b\u306b\u306f\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u3092\u5916\u3059\uff09\n# summary(model=effnetb0, \n#         input_size=(32, 3, 224, 224), # \u3053\u308c\u306f\"input_size\"\u3067\u3042\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3001\"input_shape\"\u3067\u306f\u306a\u3044\n#         # col_names=[\"input_size\"], # \u3088\u308a\u5c0f\u3055\u306a\u51fa\u529b\u306b\u306f\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u3092\u5916\u3059\n#         col_names=[\"input_size\", \"output_size\", \"num_params\", \"trainable\"],\n#         col_width=20,\n#         row_settings=[\"var_names\"]\n# ) \n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>[INFO] \u65b0\u3057\u3044effnetb0\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002\n</code></pre></p> <pre><code>effnetb2 = create_effnetb2()\n\n# EffNetB2\u7279\u5fb4\u62bd\u51fa\u5668\u30e2\u30c7\u30eb\u306e\u30ec\u30a4\u30e4\u30fc\u306e\u51fa\u529b\u8981\u7d04\u3092\u53d6\u5f97\uff08\u5b8c\u5168\u306a\u51fa\u529b\u3092\u8868\u793a\u3059\u308b\u306b\u306f\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u3092\u5916\u3059\uff09\n# summary(model=effnetb2, \n#         input_size=(32, 3, 224, 224), # \u3053\u308c\u306f\"input_size\"\u3067\u3042\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3001\"input_shape\"\u3067\u306f\u306a\u3044\n#         # col_names=[\"input_size\"], # \u3088\u308a\u5c0f\u3055\u306a\u51fa\u529b\u306b\u306f\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u3092\u5916\u3059\n#         col_names=[\"input_size\", \"output_size\", \"num_params\", \"trainable\"],\n#         col_width=20,\n#         row_settings=[\"var_names\"]\n# ) \n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>[INFO] \u65b0\u3057\u3044effnetb2\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002\n</code></pre></p> <p>\u8981\u7d04\u306e\u51fa\u529b\u3092\u898b\u308b\u3068\u3001EffNetB2\u30d0\u30c3\u30af\u30dc\u30fc\u30f3\u306fEffNetB0\u306e\u307b\u307c2\u500d\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u6570\u3092\u6301\u3063\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002</p> \u30e2\u30c7\u30eb \u7dcf\u30d1\u30e9\u30e1\u30fc\u30bf\u6570\uff08\u30d5\u30ea\u30fc\u30ba/\u30d8\u30c3\u30c9\u5909\u66f4\u524d\uff09 \u7dcf\u30d1\u30e9\u30e1\u30fc\u30bf\u6570\uff08\u30d5\u30ea\u30fc\u30ba/\u30d8\u30c3\u30c9\u5909\u66f4\u5f8c\uff09 \u7dcf\u8a13\u7df4\u53ef\u80fd\u30d1\u30e9\u30e1\u30fc\u30bf\u6570\uff08\u30d5\u30ea\u30fc\u30ba/\u30d8\u30c3\u30c9\u5909\u66f4\u5f8c\uff09 EfficientNetB0 5,288,548 4,011,391 3,843 EfficientNetB2 9,109,994 7,705,221 4,227 <p>\u3053\u308c\u306b\u3088\u308a\u3001EffNetB2\u30e2\u30c7\u30eb\u306e\u30d0\u30c3\u30af\u30dc\u30fc\u30f3\u306f\u3001\u30d4\u30b6\u3001\u30b9\u30c6\u30fc\u30ad\u3001\u5bff\u53f8\u30c7\u30fc\u30bf\u306e\u8868\u73fe\u3092\u5f62\u6210\u3059\u308b\u305f\u3081\u306e\u3088\u308a\u591a\u304f\u306e\u6a5f\u4f1a\u3092\u5f97\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002</p> <p>\u305f\u3060\u3057\u3001\u5404\u30e2\u30c7\u30eb\u306e\u8a13\u7df4\u53ef\u80fd\u30d1\u30e9\u30e1\u30fc\u30bf\uff08\u5206\u985e\u30d8\u30c3\u30c9\uff09\u306f\u305d\u308c\u307b\u3069\u7570\u306a\u308a\u307e\u305b\u3093\u3002</p> <p>\u3053\u308c\u3089\u306e\u8ffd\u52a0\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u3088\u308a\u826f\u3044\u7d50\u679c\u306b\u3064\u306a\u304c\u308b\u3067\u3057\u3087\u3046\u304b\uff1f</p> <p>\u5f85\u3063\u3066\u898b\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059...</p> <p>\u6ce8\u610f: \u5b9f\u9a13\u306e\u7cbe\u795e\u3067\u3001\u3053\u3053\u3067\u884c\u3063\u3066\u3044\u308b\u306e\u3068\u540c\u69d8\u306e\u65b9\u6cd5\u3067\u3001<code>torchvision.models</code>\u304b\u3089\u307b\u307c\u4efb\u610f\u306e\u30e2\u30c7\u30eb\u3092\u8a66\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001<code>torchvision.models.convnext_tiny()</code>\u3084<code>torchvision.models.convnext_small()</code>\u3092\u30df\u30c3\u30af\u30b9\u306b\u6295\u5165\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\u79c1\u306fEffNetB0\u3068EffNetB2\u3092\u4f8b\u3068\u3057\u3066\u9078\u3093\u3060\u3060\u3051\u3067\u3059\u3002</p>","tags":["PyTorch","\u5b9f\u9a13\u8ffd\u8de1","TensorBoard","\u8ee2\u79fb\u5b66\u7fd2","\u753b\u50cf\u5206\u985e"]},{"location":"PyTorch/08_pytorch_experiment_tracking/#76","title":"7.6 \u5b9f\u9a13\u306e\u4f5c\u6210\u3068\u8a13\u7df4\u30b3\u30fc\u30c9\u306e\u8a2d\u5b9a","text":"<p>\u30c7\u30fc\u30bf\u3092\u6e96\u5099\u3057\u3001\u30e2\u30c7\u30eb\u3092\u6e96\u5099\u3057\u305f\u306e\u3067\u3001\u3044\u304f\u3064\u304b\u306e\u5b9f\u9a13\u3092\u8a2d\u5b9a\u3059\u308b\u6642\u304c\u6765\u307e\u3057\u305f\uff01</p> <p>2\u3064\u306e\u30ea\u30b9\u30c8\u30681\u3064\u306e\u8f9e\u66f8\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u304b\u3089\u59cb\u3081\u307e\u3059\uff1a</p> <ol> <li>\u30c6\u30b9\u30c8\u3057\u305f\u3044\u30a8\u30dd\u30c3\u30af\u6570\u306e\u30ea\u30b9\u30c8\uff08<code>[5, 10]</code>\uff09</li> <li>\u30c6\u30b9\u30c8\u3057\u305f\u3044\u30e2\u30c7\u30eb\u306e\u30ea\u30b9\u30c8\uff08<code>[\"effnetb0\", \"effnetb2\"]</code>\uff09</li> <li>\u7570\u306a\u308b\u8a13\u7df4DataLoader\u306e\u8f9e\u66f8</li> </ol> <pre><code># 1. \u30a8\u30dd\u30c3\u30af\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\nnum_epochs = [5, 10]\n\n# 2. \u30e2\u30c7\u30eb\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\uff08\u5404\u5b9f\u9a13\u7528\u306b\u65b0\u3057\u3044\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\uff09\nmodels = [\"effnetb0\", \"effnetb2\"]\n\n# 3. \u69d8\u3005\u306adataloader\u306e\u305f\u3081\u306edataloaders\u8f9e\u66f8\u3092\u4f5c\u6210\ntrain_dataloaders = {\"data_10_percent\": train_dataloader_10_percent,\n                     \"data_20_percent\": train_dataloader_20_percent}\n</code></pre> <p>\u30ea\u30b9\u30c8\u3068\u8f9e\u66f8\u304c\u4f5c\u6210\u3055\u308c\u307e\u3057\u305f\uff01</p> <p>\u3053\u308c\u3067\u3001\u7570\u306a\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u305d\u308c\u305e\u308c\u3092\u53cd\u5fa9\u3057\u3001\u7570\u306a\u308b\u7d44\u307f\u5408\u308f\u305b\u306e\u305d\u308c\u305e\u308c\u3092\u8a66\u3059\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p> <p>\u307e\u305f\u3001\u5404\u5b9f\u9a13\u306e\u7d42\u4e86\u6642\u306b\u30e2\u30c7\u30eb\u3092\u4fdd\u5b58\u3057\u3001\u5f8c\u3067\u6700\u9ad8\u306e\u30e2\u30c7\u30eb\u3092\u30ed\u30fc\u30c9\u3057\u76f4\u3057\u3066\u4e88\u6e2c\u306b\u4f7f\u7528\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002</p> <p>\u5177\u4f53\u7684\u306b\u306f\u3001\u4ee5\u4e0b\u306e\u30b9\u30c6\u30c3\u30d7\u3092\u5b9f\u884c\u3057\u307e\u3057\u3087\u3046\uff1a</p> <ol> <li>\u30e9\u30f3\u30c0\u30e0\u30b7\u30fc\u30c9\u3092\u8a2d\u5b9a\uff08\u5b9f\u9a13\u7d50\u679c\u304c\u518d\u73fe\u53ef\u80fd\u306b\u306a\u308b\u3088\u3046\u306b\u3001\u5b9f\u969b\u306b\u306f\u540c\u3058\u5b9f\u9a13\u3092~3\u3064\u306e\u7570\u306a\u308b\u30b7\u30fc\u30c9\u3067\u5b9f\u884c\u3057\u3001\u7d50\u679c\u3092\u5e73\u5747\u5316\u3059\u308b\u3053\u3068\u3082\u3042\u308a\u307e\u3059\uff09</li> <li>\u7570\u306a\u308b\u5b9f\u9a13\u756a\u53f7\u3092\u8ffd\u8de1\uff08\u3053\u308c\u306f\u4e3b\u306b\u304d\u308c\u3044\u306a\u5370\u5237\u51fa\u529b\u306e\u305f\u3081\uff09</li> <li>\u7570\u306a\u308b\u8a13\u7df4DataLoader\u306e\u305d\u308c\u305e\u308c\u306b\u3064\u3044\u3066<code>train_dataloaders</code>\u8f9e\u66f8\u9805\u76ee\u3092\u30eb\u30fc\u30d7</li> <li>\u30a8\u30dd\u30c3\u30af\u6570\u306e\u30ea\u30b9\u30c8\u3092\u30eb\u30fc\u30d7</li> <li>\u7570\u306a\u308b\u30e2\u30c7\u30eb\u540d\u306e\u30ea\u30b9\u30c8\u3092\u30eb\u30fc\u30d7</li> <li>\u73fe\u5728\u5b9f\u884c\u4e2d\u306e\u5b9f\u9a13\u306e\u60c5\u5831\u5370\u5237\u51fa\u529b\u3092\u4f5c\u6210\uff08\u4f55\u304c\u8d77\u3053\u3063\u3066\u3044\u308b\u304b\u308f\u304b\u308b\u3088\u3046\u306b\uff09</li> <li>\u3069\u306e\u30e2\u30c7\u30eb\u304c\u30bf\u30fc\u30b2\u30c3\u30c8\u30e2\u30c7\u30eb\u304b\u3092\u78ba\u8a8d\u3057\u3001\u65b0\u3057\u3044EffNetB0\u307e\u305f\u306fEffNetB2\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\uff08\u3059\u3079\u3066\u306e\u30e2\u30c7\u30eb\u304c\u540c\u3058\u51fa\u767a\u70b9\u304b\u3089\u59cb\u307e\u308b\u3088\u3046\u306b\u3001\u5404\u5b9f\u9a13\u3067\u65b0\u3057\u3044\u30e2\u30c7\u30eb\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\uff09</li> <li>\u65b0\u3057\u3044\u5b9f\u9a13\u3054\u3068\u306b\u65b0\u3057\u3044\u640d\u5931\u95a2\u6570\uff08<code>torch.nn.CrossEntropyLoss()</code>\uff09\u3068\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u30fc\uff08<code>torch.optim.Adam(params=model.parameters(), lr=0.001)</code>\uff09\u3092\u4f5c\u6210</li> <li><code>writer</code>\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u9069\u5207\u306a\u8a73\u7d30\u3092\u6e21\u3057\u3066\u3001\u4fee\u6b63\u3055\u308c\u305f<code>train()</code>\u95a2\u6570\u3067\u30e2\u30c7\u30eb\u3092\u8a13\u7df4</li> <li><code>utils.py</code>\u306e<code>save_model()</code>\u3067\u9069\u5207\u306a\u30d5\u30a1\u30a4\u30eb\u540d\u3067\u30d5\u30a1\u30a4\u30eb\u306b\u8a13\u7df4\u6e08\u307f\u30e2\u30c7\u30eb\u3092\u4fdd\u5b58</li> </ol> <p>\u5358\u4e00\u306eJupyter/Google Colab\u30bb\u30eb\u5185\u3067\u3059\u3079\u3066\u306e\u5b9f\u9a13\u306b\u304b\u304b\u308b\u6642\u9593\u3092\u78ba\u8a8d\u3059\u308b\u305f\u3081\u306b\u3001<code>%%time</code>\u30de\u30b8\u30c3\u30af\u3082\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002</p> <pre><code>%%time\nfrom going_modular.utils import save_model\n\n# 1. \u30e9\u30f3\u30c0\u30e0\u30b7\u30fc\u30c9\u3092\u8a2d\u5b9a\nset_seeds(seed=42)\n\n# 2. \u5b9f\u9a13\u756a\u53f7\u3092\u8ffd\u8de1\nexperiment_number = 0\n\n# 3. \u5404DataLoader\u3092\u30eb\u30fc\u30d7\nfor dataloader_name, train_dataloader in train_dataloaders.items():\n\n    # 4. \u5404\u30a8\u30dd\u30c3\u30af\u6570\u3092\u30eb\u30fc\u30d7\n    for epochs in num_epochs: \n\n        # 5. \u5404\u30e2\u30c7\u30eb\u540d\u3092\u30eb\u30fc\u30d7\u3057\u3001\u540d\u524d\u306b\u57fa\u3065\u3044\u3066\u65b0\u3057\u3044\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\n        for model_name in models:\n\n            # 6. \u60c5\u5831\u5370\u5237\u51fa\u529b\u3092\u4f5c\u6210\n            experiment_number += 1\n            print(f\"[INFO] \u5b9f\u9a13\u756a\u53f7: {experiment_number}\")\n            print(f\"[INFO] \u30e2\u30c7\u30eb: {model_name}\")\n            print(f\"[INFO] DataLoader: {dataloader_name}\")\n            print(f\"[INFO] \u30a8\u30dd\u30c3\u30af\u6570: {epochs}\")  \n\n            # 7. \u30e2\u30c7\u30eb\u3092\u9078\u629e\n            if model_name == \"effnetb0\":\n                model = create_effnetb0() # \u6bce\u56de\u65b0\u3057\u3044\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\uff08\u5404\u5b9f\u9a13\u304c\u30b9\u30af\u30e9\u30c3\u30c1\u304b\u3089\u59cb\u307e\u308b\u305f\u3081\u91cd\u8981\uff09\n            else:\n                model = create_effnetb2() # \u6bce\u56de\u65b0\u3057\u3044\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\uff08\u5404\u5b9f\u9a13\u304c\u30b9\u30af\u30e9\u30c3\u30c1\u304b\u3089\u59cb\u307e\u308b\u305f\u3081\u91cd\u8981\uff09\n\n            # 8. \u3059\u3079\u3066\u306e\u30e2\u30c7\u30eb\u7528\u306b\u65b0\u3057\u3044\u640d\u5931\u3068\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u30fc\u3092\u4f5c\u6210\n            loss_fn = nn.CrossEntropyLoss()\n            optimizer = torch.optim.Adam(params=model.parameters(), lr=0.001)\n\n            # 9. \u30bf\u30fc\u30b2\u30c3\u30c8DataLoader\u3067\u30bf\u30fc\u30b2\u30c3\u30c8\u30e2\u30c7\u30eb\u3092\u8a13\u7df4\u3057\u3001\u5b9f\u9a13\u3092\u8ffd\u8de1\n            train(model=model,\n                  train_dataloader=train_dataloader,\n                  test_dataloader=test_dataloader, \n                  optimizer=optimizer,\n                  loss_fn=loss_fn,\n                  epochs=epochs,\n                  device=device,\n                  writer=create_writer(experiment_name=dataloader_name,\n                                       model_name=model_name,\n                                       extra=f\"{epochs}_epochs\"))\n\n            # 10. \u6700\u9ad8\u306e\u30e2\u30c7\u30eb\u3092\u623b\u305b\u308b\u3088\u3046\u306b\u30e2\u30c7\u30eb\u3092\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58\n            save_filepath = f\"07_{model_name}_{dataloader_name}_{epochs}_epochs.pth\"\n            save_model(model=model,\n                       target_dir=\"models\",\n                       model_name=save_filepath)\n            print(\"-\"*50 + \"\\n\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>[INFO] \u5b9f\u9a13\u756a\u53f7: 1\n[INFO] \u30e2\u30c7\u30eb: effnetb0\n[INFO] DataLoader: data_10_percent\n[INFO] \u30a8\u30dd\u30c3\u30af\u6570: 5\n[INFO] \u65b0\u3057\u3044effnetb0\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002\n[INFO] SummaryWriter\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002\u4fdd\u5b58\u5148: runs/2025-07-06/data_10_percent/effnetb0/5_epochs...\nEpoch: 1 | train_loss: 1.0823 | train_acc: 0.4062 | test_loss: 0.8991 | test_acc: 0.5909\nEpoch: 2 | train_loss: 0.9203 | train_acc: 0.6680 | test_loss: 0.7960 | test_acc: 0.8456\nEpoch: 3 | train_loss: 0.7825 | train_acc: 0.7578 | test_loss: 0.6825 | test_acc: 0.8864\nEpoch: 4 | train_loss: 0.6894 | train_acc: 0.8477 | test_loss: 0.6784 | test_acc: 0.8456\nEpoch: 5 | train_loss: 0.7096 | train_acc: 0.7148 | test_loss: 0.6878 | test_acc: 0.7131\n[INFO] \u30e2\u30c7\u30eb\u3092models/07_effnetb0_data_10_percent_5_epochs.pth\u306b\u4fdd\u5b58\u3057\u307e\u3057\u305f\n--------------------------------------------------\n\n[INFO] \u5b9f\u9a13\u756a\u53f7: 2\n[INFO] \u30e2\u30c7\u30eb: effnetb2\n[INFO] DataLoader: data_10_percent\n[INFO] \u30a8\u30dd\u30c3\u30af\u6570: 5\n...\n\uff088\u3064\u306e\u5b9f\u9a13\u3059\u3079\u3066\u304c\u9806\u6b21\u5b9f\u884c\u3055\u308c\u307e\u3059\uff09\n</code></pre></p>","tags":["PyTorch","\u5b9f\u9a13\u8ffd\u8de1","TensorBoard","\u8ee2\u79fb\u5b66\u7fd2","\u753b\u50cf\u5206\u985e"]},{"location":"PyTorch/08_pytorch_experiment_tracking/#8-tensorboard","title":"8. TensorBoard\u3067\u5b9f\u9a13\u3092\u8868\u793a","text":"<p>TensorBoard\u3067\u7d50\u679c\u3092\u78ba\u8a8d\u3057\u3066\u307f\u307e\u305b\u3093\u304b\uff1f</p> <p>VS Code\u307e\u305f\u306fJupyter/Colab\u304b\u3089tensorboard\u3092\u8d77\u52d5\u3057\u307e\u3059\u3002</p> <pre><code># Jupyter/Colab\u30ce\u30fc\u30c8\u30d6\u30c3\u30af\u3067\u306e\u5834\u5408\n# %load_ext tensorboard\n# %tensorboard --logdir runs\n</code></pre> <p>TensorBoard\u3067\u306f\u3001\u7570\u306a\u308b\u30e2\u30c7\u30ea\u30f3\u30b0\u5b9f\u9a13\u306e\u30c6\u30b9\u30c8\u640d\u5931\u5024\u3092\u53ef\u8996\u5316\u3067\u304d\u307e\u3059\u3002\u4e00\u822c\u7684\u306b\u3001\u3088\u308a\u591a\u304f\u306e\u30c7\u30fc\u30bf\u3001\u3088\u308a\u5927\u304d\u306a\u30e2\u30c7\u30eb\u3001\u3088\u308a\u9577\u3044\u8a13\u7df4\u6642\u9593\u304c\u826f\u3044\u7d50\u679c\u3092\u3082\u305f\u3089\u3059\u3068\u3044\u3046\u5168\u4f53\u7684\u306a\u30c8\u30ec\u30f3\u30c9\u3092\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002</p> <p>\u5b9f\u884c\u7d50\u679c: TensorBoard\u30c0\u30c3\u30b7\u30e5\u30dc\u30fc\u30c9\u304c\u8868\u793a\u3055\u308c\u3001\u4ee5\u4e0b\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3059\uff1a - 8\u3064\u306e\u5b9f\u9a13\u3059\u3079\u3066\u306e\u640d\u5931\u30fb\u7cbe\u5ea6\u30b0\u30e9\u30d5 - \u5b9f\u9a13\u9593\u306e\u6027\u80fd\u6bd4\u8f03 - \u6700\u3082\u4f4e\u3044\u30c6\u30b9\u30c8\u640d\u5931\u3092\u9054\u6210\u3057\u305f\u30e2\u30c7\u30eb\u306e\u7279\u5b9a</p> <p></p>","tags":["PyTorch","\u5b9f\u9a13\u8ffd\u8de1","TensorBoard","\u8ee2\u79fb\u5b66\u7fd2","\u753b\u50cf\u5206\u985e"]},{"location":"PyTorch/08_pytorch_experiment_tracking/#9","title":"9. \u6700\u9ad8\u306e\u30e2\u30c7\u30eb\u3092\u30ed\u30fc\u30c9\u3057\u3066\u4e88\u6e2c\u3092\u884c\u3046","text":"<p>8\u3064\u306e\u5b9f\u9a13\u306eTensorBoard\u30ed\u30b0\u3092\u898b\u308b\u3068\u3001\u5b9f\u9a13\u756a\u53f78\u304c\u5168\u4f53\u7684\u306b\u6700\u9ad8\u306e\u7d50\u679c\u3092\u9054\u6210\u3057\u305f\u3088\u3046\u3067\u3059\uff08\u6700\u9ad8\u306e\u30c6\u30b9\u30c8\u7cbe\u5ea6\u30012\u756a\u76ee\u306b\u4f4e\u3044\u30c6\u30b9\u30c8\u640d\u5931\uff09\u3002</p> <p>\u3053\u308c\u306f\u4ee5\u4e0b\u3092\u4f7f\u7528\u3057\u305f\u5b9f\u9a13\u3067\u3059\uff1a</p> <ul> <li>EffNetB2\uff08EffNetB0\u306e2\u500d\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\uff09</li> <li>20%\u30d4\u30b6\u3001\u30b9\u30c6\u30fc\u30ad\u3001\u5bff\u53f8\u8a13\u7df4\u30c7\u30fc\u30bf\uff08\u5143\u306e\u8a13\u7df4\u30c7\u30fc\u30bf\u306e2\u500d\uff09</li> <li>10\u30a8\u30dd\u30c3\u30af\uff08\u5143\u306e\u8a13\u7df4\u6642\u9593\u306e2\u500d\uff09</li> </ul> <p>\u672c\u8cea\u7684\u306b\u3001\u6700\u5927\u306e\u30e2\u30c7\u30eb\u304c\u6700\u9ad8\u306e\u7d50\u679c\u3092\u9054\u6210\u3057\u307e\u3057\u305f\u3002</p> <p>\u305f\u3060\u3057\u3001\u3053\u308c\u3089\u306e\u7d50\u679c\u304c\u4ed6\u306e\u30e2\u30c7\u30eb\u3088\u308a\u3082\u306f\u308b\u304b\u306b\u826f\u3044\u3068\u3044\u3046\u308f\u3051\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002</p> <p>\u540c\u3058\u30c7\u30fc\u30bf\u306e\u540c\u3058\u30e2\u30c7\u30eb\u304c\u534a\u5206\u306e\u8a13\u7df4\u6642\u9593\uff08\u5b9f\u9a13\u756a\u53f76\uff09\u3067\u985e\u4f3c\u306e\u7d50\u679c\u3092\u9054\u6210\u3057\u307e\u3057\u305f\u3002</p> <p>\u3053\u308c\u306f\u3001\u5b9f\u9a13\u306e\u6700\u3082\u5f71\u97ff\u529b\u306e\u3042\u308b\u90e8\u5206\u304c\u30d1\u30e9\u30e1\u30fc\u30bf\u6570\u3068\u30c7\u30fc\u30bf\u91cf\u3067\u3042\u3063\u305f\u3053\u3068\u3092\u793a\u5506\u3057\u3066\u3044\u307e\u3059\u3002</p> <p>\u7d50\u679c\u3092\u3055\u3089\u306b\u691c\u67fb\u3059\u308b\u3068\u3001\u4e00\u822c\u7684\u306b\u3088\u308a\u591a\u304f\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\uff08EffNetB2\uff09\u3068\u3088\u308a\u591a\u304f\u306e\u30c7\u30fc\u30bf\uff0820%\u30d4\u30b6\u3001\u30b9\u30c6\u30fc\u30ad\u3001\u5bff\u53f8\u8a13\u7df4\u30c7\u30fc\u30bf\uff09\u3092\u6301\u3064\u30e2\u30c7\u30eb\u304c\u3088\u308a\u826f\u3044\u6027\u80fd\uff08\u3088\u308a\u4f4e\u3044\u30c6\u30b9\u30c8\u640d\u5931\u3068\u3088\u308a\u9ad8\u3044\u30c6\u30b9\u30c8\u7cbe\u5ea6\uff09\u3092\u793a\u3059\u3088\u3046\u3067\u3059\u3002</p> <p>\u3053\u308c\u3092\u3055\u3089\u306b\u30c6\u30b9\u30c8\u3059\u308b\u305f\u3081\u306b\u3088\u308a\u591a\u304f\u306e\u5b9f\u9a13\u3092\u884c\u3046\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u304c\u3001\u4eca\u306e\u3068\u3053\u308d\u3001\u5b9f\u9a138\u306e\u6700\u9ad8\u6027\u80fd\u30e2\u30c7\u30eb\uff08<code>models/08_effnetb2_data_20_percent_10_epochs.pth</code>\u306b\u4fdd\u5b58\uff09\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u3001\u5b9a\u6027\u7684\u8a55\u4fa1\u3092\u5b9f\u884c\u3057\u307e\u3057\u3087\u3046\u3002</p> <p>\u8a00\u3044\u63db\u3048\u308c\u3070\u3001\u53ef\u8996\u5316\u3001\u53ef\u8996\u5316\u3001\u53ef\u8996\u5316\uff01\u3057\u307e\u3057\u3087\u3046\u3002</p> <p><code>create_effnetb2()</code>\u95a2\u6570\u3092\u4f7f\u7528\u3057\u3066\u65b0\u3057\u3044EffNetB2\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\u3057\u3001<code>torch.load()</code>\u3067\u4fdd\u5b58\u3055\u308c\u305f<code>state_dict()</code>\u3092\u30ed\u30fc\u30c9\u3059\u308b\u3053\u3068\u3067\u3001\u6700\u9ad8\u306e\u4fdd\u5b58\u3055\u308c\u305f\u30e2\u30c7\u30eb\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3067\u304d\u307e\u3059\u3002</p> <pre><code># \u6700\u9ad8\u306e\u30e2\u30c7\u30eb\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u3092\u8a2d\u5b9a\nbest_model_path = \"models/08_effnetb2_data_20_percent_10_epochs.pth\"\n\n# \u65b0\u3057\u3044EffNetB2\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\uff08\u4fdd\u5b58\u3055\u308c\u305fstate_dict()\u3092\u30ed\u30fc\u30c9\u3059\u308b\u305f\u3081\uff09\nbest_model = create_effnetb2()\n\n# \u4fdd\u5b58\u3055\u308c\u305f\u6700\u9ad8\u306e\u30e2\u30c7\u30ebstate_dict()\u3092\u30ed\u30fc\u30c9\nbest_model.load_state_dict(torch.load(best_model_path))\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>[INFO] \u65b0\u3057\u3044effnetb2\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002\n&lt;All keys matched successfully&gt;\n</code></pre></p> <p>\u6700\u9ad8\u306e\u30e2\u30c7\u30eb\u304c\u30ed\u30fc\u30c9\u3055\u308c\u307e\u3057\u305f\uff01</p> <p>\u3053\u3053\u306b\u3044\u308b\u9593\u306b\u3001\u30d5\u30a1\u30a4\u30eb\u30b5\u30a4\u30ba\u3092\u78ba\u8a8d\u3057\u307e\u3057\u3087\u3046\u3002</p> <p>\u3053\u308c\u306f\u5f8c\u3067\u30e2\u30c7\u30eb\u3092\u30c7\u30d7\u30ed\u30a4\u3059\u308b\uff08\u30a2\u30d7\u30ea\u306b\u7d44\u307f\u8fbc\u3080\uff09\u969b\u306e\u91cd\u8981\u306a\u8003\u616e\u4e8b\u9805\u3067\u3059\u3002</p> <p>\u30e2\u30c7\u30eb\u304c\u5927\u304d\u3059\u304e\u308b\u5834\u5408\u3001\u30c7\u30d7\u30ed\u30a4\u304c\u56f0\u96e3\u306b\u306a\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002</p> <pre><code># \u30e2\u30c7\u30eb\u30d5\u30a1\u30a4\u30eb\u30b5\u30a4\u30ba\u3092\u78ba\u8a8d\nfrom pathlib import Path\n\n# \u30e2\u30c7\u30eb\u30b5\u30a4\u30ba\u3092\u30d0\u30a4\u30c8\u3067\u53d6\u5f97\u3057\u3066\u304b\u3089\u30e1\u30ac\u30d0\u30a4\u30c8\u306b\u5909\u63db\neffnetb2_model_size = Path(best_model_path).stat().st_size // (1024*1024)\nprint(f\"EfficientNetB2\u7279\u5fb4\u62bd\u51fa\u5668\u30e2\u30c7\u30eb\u30b5\u30a4\u30ba: {effnetb2_model_size} MB\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>EfficientNetB2\u7279\u5fb4\u62bd\u51fa\u5668\u30e2\u30c7\u30eb\u30b5\u30a4\u30ba: 29 MB\n</code></pre></p> <p>\u3053\u308c\u307e\u3067\u306e\u6700\u9ad8\u306e\u30e2\u30c7\u30eb\u306f29MB\u306e\u30b5\u30a4\u30ba\u306e\u3088\u3046\u3067\u3059\u3002\u5f8c\u3067\u30c7\u30d7\u30ed\u30a4\u3057\u305f\u3044\u5834\u5408\u306f\u3053\u308c\u3092\u899a\u3048\u3066\u304a\u304d\u307e\u3059\u3002</p> <p>\u4e88\u6e2c\u3092\u4f5c\u6210\u3057\u3066\u53ef\u8996\u5316\u3059\u308b\u6642\u9593\u3067\u3059\u3002</p> <p>\u8a13\u7df4\u6e08\u307f\u30e2\u30c7\u30eb\u3092\u4f7f\u7528\u3057\u3066\u753b\u50cf\u306e\u4e88\u6e2c\u3092\u884c\u3046\u305f\u3081\u306e<code>pred_and_plot_image()</code>\u95a2\u6570\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002</p> <p><code>going_modular.predictions.py</code>\u304b\u3089<code>pred_and_plot_image()</code>\u95a2\u6570\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3059\u308b\u3053\u3068\u3067\u3001\u3053\u306e\u95a2\u6570\u3092\u518d\u5229\u7528\u3067\u304d\u307e\u3059\uff08\u518d\u5229\u7528\u3067\u304d\u308b\u3088\u3046\u306b\u30b9\u30af\u30ea\u30d7\u30c8\u306b<code>pred_and_plot_image()</code>\u95a2\u6570\u3092\u5165\u308c\u307e\u3057\u305f\uff09\u3002</p> <p>\u30e2\u30c7\u30eb\u304c\u4ee5\u524d\u306b\u898b\u305f\u3053\u3068\u306e\u306a\u3044\u69d8\u3005\u306a\u753b\u50cf\u3067\u4e88\u6e2c\u3092\u884c\u3046\u305f\u3081\u306b\u3001\u307e\u305a20%\u30d4\u30b6\u3001\u30b9\u30c6\u30fc\u30ad\u3001\u5bff\u53f8\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304b\u3089\u3059\u3079\u3066\u306e\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u306e\u30ea\u30b9\u30c8\u3092\u53d6\u5f97\u3057\u3001\u6b21\u306b\u3053\u308c\u3089\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u306e\u30b5\u30d6\u30bb\u30c3\u30c8\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u9078\u629e\u3057\u3066<code>pred_and_plot_image()</code>\u95a2\u6570\u306b\u6e21\u3057\u307e\u3059\u3002</p> <pre><code># \u753b\u50cf\u3067\u4e88\u6e2c\u3092\u884c\u3044\u30d7\u30ed\u30c3\u30c8\u3059\u308b\u95a2\u6570\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\nfrom going_modular.predictions import pred_and_plot_image\n\n# 20%\u30c6\u30b9\u30c8\u30bb\u30c3\u30c8\u304b\u3089\u30e9\u30f3\u30c0\u30e0\u306b3\u3064\u306e\u753b\u50cf\u306e\u30ea\u30b9\u30c8\u3092\u53d6\u5f97\nimport random\nnum_images_to_plot = 3\ntest_image_path_list = list(Path(data_20_percent_path / \"test\").glob(\"*/*.jpg\")) # 20%\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304b\u3089\u3059\u3079\u3066\u306e\u30c6\u30b9\u30c8\u753b\u50cf\u30d1\u30b9\u3092\u53d6\u5f97\ntest_image_path_sample = random.sample(population=test_image_path_list,\n                                       k=num_images_to_plot) # k\u500b\u306e\u753b\u50cf\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u9078\u629e\n\n# \u30e9\u30f3\u30c0\u30e0\u306a\u30c6\u30b9\u30c8\u753b\u50cf\u30d1\u30b9\u3092\u53cd\u5fa9\u3057\u3001\u4e88\u6e2c\u3092\u884c\u3044\u30d7\u30ed\u30c3\u30c8\nfor image_path in test_image_path_sample:\n    pred_and_plot_image(model=best_model,\n                        image_path=image_path,\n                        class_names=class_names,\n                        image_size=(224, 224))\n</code></pre> <p></p> <p></p> <p></p> <p>\u5b9f\u884c\u7d50\u679c:  3\u3064\u306e\u4e88\u6e2c\u7d50\u679c\u753b\u50cf\u304c\u8868\u793a\u3055\u308c\u307e\u3059\uff1a - \u5404\u753b\u50cf\u306b\u3064\u3044\u3066\u3001\u5b9f\u969b\u306e\u30af\u30e9\u30b9\u3068\u4e88\u6e2c\u30af\u30e9\u30b9\u304c\u8868\u793a - \u4e88\u6e2c\u78ba\u7387\u3082\u8868\u793a\u3055\u308c\u3001\u30e2\u30c7\u30eb\u306e\u4fe1\u983c\u5ea6\u304c\u78ba\u8a8d\u3067\u304d\u308b - \u30e2\u30c7\u30eb\u306f\u4e00\u822c\u7684\u306b\u9ad8\u3044\u4e88\u6e2c\u78ba\u7387\u3092\u793a\u3057\u3001\u4ee5\u524d\u306e\u30e2\u30c7\u30eb\u3088\u308a\u3082\u81ea\u4fe1\u3092\u6301\u3063\u305f\u6c7a\u5b9a\u3092\u884c\u3063\u3066\u3044\u308b</p> <p>\u7d20\u6674\u3089\u3057\u3044\uff01</p> <p>\u4e0a\u8a18\u306e\u30bb\u30eb\u3092\u6570\u56de\u5b9f\u884c\u3059\u308b\u3068\u3001\u30e2\u30c7\u30eb\u304c\u975e\u5e38\u306b\u3088\u304f\u52d5\u4f5c\u3057\u3001\u4ee5\u524d\u306b\u69cb\u7bc9\u3057\u305f\u30e2\u30c7\u30eb\u3088\u308a\u3082\u9ad8\u3044\u4e88\u6e2c\u78ba\u7387\u3092\u6301\u3064\u3053\u3068\u304c\u591a\u3044\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002</p> <p>\u3053\u308c\u306f\u3001\u30e2\u30c7\u30eb\u304c\u884c\u3063\u3066\u3044\u308b\u6c7a\u5b9a\u306b\u3088\u308a\u81ea\u4fe1\u3092\u6301\u3063\u3066\u3044\u308b\u3053\u3068\u3092\u793a\u5506\u3057\u3066\u3044\u307e\u3059\u3002</p>","tags":["PyTorch","\u5b9f\u9a13\u8ffd\u8de1","TensorBoard","\u8ee2\u79fb\u5b66\u7fd2","\u753b\u50cf\u5206\u985e"]},{"location":"PyTorch/08_pytorch_experiment_tracking/#91","title":"9.1 \u6700\u9ad8\u306e\u30e2\u30c7\u30eb\u3067\u30ab\u30b9\u30bf\u30e0\u753b\u50cf\u3092\u4e88\u6e2c","text":"<p>\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3067\u4e88\u6e2c\u3092\u884c\u3046\u306e\u306f\u30af\u30fc\u30eb\u3067\u3059\u304c\u3001\u6a5f\u68b0\u5b66\u7fd2\u306e\u672c\u5f53\u306e\u9b54\u6cd5\u306f\u72ec\u81ea\u306e\u30ab\u30b9\u30bf\u30e0\u753b\u50cf\u3067\u4e88\u6e2c\u3092\u884c\u3046\u3053\u3068\u3067\u3059\u3002</p> <p>\u4fe1\u983c\u3067\u304d\u308b\u5bff\u53f8\u306e\u753b\u50cf\uff08\u5bff\u53f8\u306e\u5199\u771f\uff09\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u3001\u30e2\u30c7\u30eb\u304c\u305d\u308c\u3067\u3069\u306e\u3088\u3046\u306b\u52d5\u4f5c\u3059\u308b\u304b\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002</p> <pre><code># \u30ab\u30b9\u30bf\u30e0\u753b\u50cf\u30d1\u30b9\ncustom_image_path = Path(\"data/sushi.jpg\")\n\n# \u30ab\u30b9\u30bf\u30e0\u753b\u50cf\u3067\u4e88\u6e2c\npred_and_plot_image(model=best_model,\n                    image_path=custom_image_path,\n                    class_names=class_names)\n</code></pre> <p></p>","tags":["PyTorch","\u5b9f\u9a13\u8ffd\u8de1","TensorBoard","\u8ee2\u79fb\u5b66\u7fd2","\u753b\u50cf\u5206\u985e"]},{"location":"PyTorch/08_pytorch_experiment_tracking/#_10","title":"\u307e\u3068\u3081","text":"","tags":["PyTorch","\u5b9f\u9a13\u8ffd\u8de1","TensorBoard","\u8ee2\u79fb\u5b66\u7fd2","\u753b\u50cf\u5206\u985e"]},{"location":"PyTorch/08_pytorch_experiment_tracking/#_11","title":"\u5b66\u7fd2\u30dd\u30a4\u30f3\u30c8\u306e\u632f\u308a\u8fd4\u308a","text":"<ol> <li> <p>\u5b9f\u9a13\u8ffd\u8de1\u306e\u4fa1\u5024: TensorBoard\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3067\u3001\u8907\u6570\u306e\u5b9f\u9a13\u3092\u7cfb\u7d71\u7684\u306b\u6bd4\u8f03\u3057\u3001\u6700\u9069\u306a\u69cb\u6210\u3092\u7279\u5b9a\u3067\u304d\u307e\u3057\u305f</p> </li> <li> <p>\u30b9\u30b1\u30fc\u30ea\u30f3\u30b0\u6cd5\u5247\u306e\u78ba\u8a8d: \u4e00\u822c\u7684\u306b\u3001\u3088\u308a\u591a\u304f\u306e\u30c7\u30fc\u30bf\u3001\u3088\u308a\u5927\u304d\u306a\u30e2\u30c7\u30eb\u3001\u3088\u308a\u9577\u3044\u8a13\u7df4\u6642\u9593\u304c\u826f\u3044\u7d50\u679c\u3092\u3082\u305f\u3089\u3059\u3053\u3068\u304c\u5b9f\u9a13\u3067\u78ba\u8a8d\u3055\u308c\u307e\u3057\u305f</p> </li> <li> <p>\u52b9\u7387\u7684\u306a\u5b9f\u9a13\u8a2d\u8a08: 8\u3064\u306e\u5b9f\u9a13\u3092\u4e00\u5ea6\u306b\u5b9f\u884c\u3059\u308b\u3053\u3068\u3067\u3001\u500b\u5225\u306e\u8981\u7d20\uff08\u30c7\u30fc\u30bf\u91cf\u3001\u30e2\u30c7\u30eb\u30b5\u30a4\u30ba\u3001\u8a13\u7df4\u6642\u9593\uff09\u306e\u5f71\u97ff\u3092\u7406\u89e3\u3067\u304d\u307e\u3057\u305f</p> </li> <li> <p>\u5b9f\u7528\u7684\u306a\u8003\u616e\u4e8b\u9805: \u6700\u9ad8\u306e\u30e2\u30c7\u30eb\uff0829MB\uff09\u306e\u30b5\u30a4\u30ba\u306f\u672c\u756a\u74b0\u5883\u3067\u306e\u5c55\u958b\u6642\u306b\u91cd\u8981\u306a\u8981\u7d20\u3068\u306a\u308a\u307e\u3059</p> </li> <li> <p>\u7d99\u7d9a\u7684\u6539\u5584: \u5b9f\u9a13\u8ffd\u8de1\u306b\u3088\u308a\u3001\u6a5f\u68b0\u5b66\u7fd2\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u52b9\u7387\u6027\u3068\u518d\u73fe\u6027\u304c\u5927\u5e45\u306b\u5411\u4e0a\u3057\u307e\u3057\u305f</p> </li> </ol>","tags":["PyTorch","\u5b9f\u9a13\u8ffd\u8de1","TensorBoard","\u8ee2\u79fb\u5b66\u7fd2","\u753b\u50cf\u5206\u985e"]},{"location":"PyTorch/09_pytorch_paper_replicating/","title":"Vision Transformer\u3092\u4e00\u304b\u3089\u5b9f\u88c5\u3057\u3066FoodVision Mini\u306b\u9069\u7528\u3059\u308b","text":"","tags":["PyTorch","Vision Transformer","ViT","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u8ad6\u6587\u5b9f\u88c5","\u6df1\u5c64\u5b66\u7fd2"]},{"location":"PyTorch/09_pytorch_paper_replicating/#_1","title":"\u6982\u8981","text":"<p>\u672c\u8a18\u4e8b\u3067\u306f\u3001\u6a5f\u68b0\u5b66\u7fd2\u8ad6\u6587\u306e\u518d\u73fe\u5b9f\u88c5\u306b\u3064\u3044\u3066\u5b9f\u8df5\u7684\u306b\u5b66\u3073\u307e\u3059\u3002\u5177\u4f53\u7684\u306b\u306f\u3001Vision Transformer\uff08ViT\uff09\u3092\u4e00\u304b\u3089\u5b9f\u88c5\u3057\u3001\u79c1\u305f\u3061\u306eFoodVision Mini\u554f\u984c\uff08\u30d4\u30b6\u3001\u30b9\u30c6\u30fc\u30ad\u3001\u5bff\u53f8\u306e\u753b\u50cf\u5206\u985e\uff09\u306b\u9069\u7528\u3057\u307e\u3059\u3002</p> <p>\u8ad6\u6587\u306e\u518d\u73fe\u5b9f\u88c5\u306f\u3001\u6700\u65b0\u306e\u6a5f\u68b0\u5b66\u7fd2\u6280\u8853\u3092\u7406\u89e3\u3057\u3001\u81ea\u5206\u306e\u554f\u984c\u306b\u5fdc\u7528\u3059\u308b\u305f\u3081\u306e\u91cd\u8981\u306a\u30b9\u30ad\u30eb\u3067\u3059\u3002\u3053\u306e\u8a18\u4e8b\u3092\u901a\u3058\u3066\u3001\u7814\u7a76\u8ad6\u6587\u3092\u8aad\u307f\u89e3\u304d\u3001\u6570\u5f0f\u3068\u30c6\u30ad\u30b9\u30c8\u3092PyTorch\u30b3\u30fc\u30c9\u306b\u5909\u63db\u3059\u308b\u65b9\u6cd5\u3092\u7fd2\u5f97\u3067\u304d\u307e\u3059\u3002</p> <p></p> <p>\u30de\u30a4\u30eb\u30b9\u30c8\u30fc\u30f3\u30d7\u30ed\u30b8\u30a7\u30af\u30c82\u3067\u306f\u3001Vision Transformer\uff08ViT\uff09\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3092\u518d\u73fe\u3057\u3001FoodVision Mini\u554f\u984c\u306b\u9069\u7528\u3057\u3066\u30d4\u30b6\u3001\u30b9\u30c6\u30fc\u30ad\u3001\u5bff\u53f8\u306e\u753b\u50cf\u3092\u5206\u985e\u3057\u307e\u3059\u3002</p>","tags":["PyTorch","Vision Transformer","ViT","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u8ad6\u6587\u5b9f\u88c5","\u6df1\u5c64\u5b66\u7fd2"]},{"location":"PyTorch/09_pytorch_paper_replicating/#_2","title":"\u524d\u63d0\u77e5\u8b58","text":"<ul> <li>PyTorch\u306e\u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9</li> <li>\u7573\u307f\u8fbc\u307f\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\uff08CNN\uff09\u306e\u7406\u89e3</li> <li>\u6df1\u5c64\u5b66\u7fd2\u306e\u57fa\u790e\u6982\u5ff5</li> <li>Python \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u7d4c\u9a13</li> </ul>","tags":["PyTorch","Vision Transformer","ViT","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u8ad6\u6587\u5b9f\u88c5","\u6df1\u5c64\u5b66\u7fd2"]},{"location":"PyTorch/09_pytorch_paper_replicating/#_3","title":"\u5b66\u7fd2\u76ee\u6a19","text":"<p>\u3053\u306e\u8a18\u4e8b\u3092\u8aad\u307f\u7d42\u3048\u308b\u9803\u306b\u306f\u3001\u4ee5\u4e0b\u306e\u3053\u3068\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff1a</p> <ol> <li>\u6a5f\u68b0\u5b66\u7fd2\u8ad6\u6587\u3092\u8aad\u307f\u89e3\u304f\u65b9\u6cd5\u3092\u7406\u89e3\u3059\u308b</li> <li>Vision Transformer\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306e\u4ed5\u7d44\u307f\u3092\u628a\u63e1\u3059\u308b</li> <li>\u8ad6\u6587\u306e\u6570\u5f0f\u3092PyTorch\u30b3\u30fc\u30c9\u306b\u5909\u63db\u3059\u308b</li> <li>\u4e00\u304b\u3089\u5b9f\u88c5\u3057\u305fViT\u30e2\u30c7\u30eb\u3067FoodVision Mini\u554f\u984c\u3092\u89e3\u304f</li> </ol>","tags":["PyTorch","Vision Transformer","ViT","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u8ad6\u6587\u5b9f\u88c5","\u6df1\u5c64\u5b66\u7fd2"]},{"location":"PyTorch/09_pytorch_paper_replicating/#_4","title":"\u8ad6\u6587\u518d\u73fe\u5b9f\u88c5\u3068\u306f\uff1f","text":"<p>\u6a5f\u68b0\u5b66\u7fd2\u306e\u5206\u91ce\u306f\u6025\u901f\u306b\u9032\u6b69\u3057\u3066\u304a\u308a\u3001\u591a\u304f\u306e\u9769\u65b0\u7684\u306a\u6280\u8853\u304c\u7814\u7a76\u8ad6\u6587\u3068\u3057\u3066\u767a\u8868\u3055\u308c\u3066\u3044\u307e\u3059\u3002</p> <p>\u8ad6\u6587\u518d\u73fe\u5b9f\u88c5\u306e\u76ee\u6a19\u306f\u3001\u3053\u308c\u3089\u306e\u9032\u6b69\u3092\u30b3\u30fc\u30c9\u3067\u518d\u73fe\u3057\u3001\u81ea\u5206\u306e\u554f\u984c\u306b\u5fdc\u7528\u3067\u304d\u308b\u6280\u8853\u3068\u3057\u3066\u6d3b\u7528\u3059\u308b\u3053\u3068\u3067\u3059\u3002</p> <p></p> <p>\u6a5f\u68b0\u5b66\u7fd2\u8ad6\u6587\u306e\u518d\u73fe\u5b9f\u88c5\u3067\u306f\u3001\u753b\u50cf/\u56f3\u8868\u3001\u6570\u5f0f\u3001\u30c6\u30ad\u30b9\u30c8\u3067\u69cb\u6210\u3055\u308c\u305f\u8ad6\u6587\u3092\u5b9f\u7528\u7684\u306a\u30b3\u30fc\u30c9\u306b\u5909\u63db\u3057\u307e\u3059\u3002\u56f3\u3001\u6570\u5f0f\u3001\u30c6\u30ad\u30b9\u30c8\u306fViT\u8ad6\u6587\u304b\u3089\u5f15\u7528\u3002</p> <p>\u4f8b\u3048\u3070\u3001\u65b0\u3057\u3044\u30e2\u30c7\u30eb\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u304c\u65e2\u5b58\u306e\u624b\u6cd5\u3088\u308a\u3082\u512a\u308c\u305f\u6027\u80fd\u3092\u793a\u3057\u305f\u5834\u5408\u3001\u305d\u306e\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3092\u81ea\u5206\u306e\u554f\u984c\u306b\u8a66\u3057\u3066\u307f\u305f\u3044\u3068\u601d\u3046\u3067\u3057\u3087\u3046\u3002</p>","tags":["PyTorch","Vision Transformer","ViT","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u8ad6\u6587\u5b9f\u88c5","\u6df1\u5c64\u5b66\u7fd2"]},{"location":"PyTorch/09_pytorch_paper_replicating/#vision-transformer","title":"Vision Transformer\u306b\u3064\u3044\u3066","text":"<p>Transformer\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306f\u5143\u3005\u3001\u8ad6\u6587Attention is all you need\u3067\u4e00\u6b21\u5143\uff081D\uff09\u306e\u30c6\u30ad\u30b9\u30c8\u30b7\u30fc\u30b1\u30f3\u30b9\u3092\u51e6\u7406\u3059\u308b\u305f\u3081\u306b\u8a2d\u8a08\u3055\u308c\u307e\u3057\u305f\u3002</p> <p>Vision Transformer\uff08ViT\uff09\u306f\u3001\u3053\u306eTransformer\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3092\u8996\u899a\u554f\u984c\u306b\u9069\u5fdc\u3055\u305b\u305f\u3082\u306e\u3067\u3059\uff08\u6700\u521d\u306f\u5206\u985e\u554f\u984c\u3001\u305d\u306e\u5f8c\u591a\u304f\u306e\u5fdc\u7528\u304c\u7d9a\u304d\u307e\u3057\u305f\uff09\u3002</p> <p>\u672c\u8a18\u4e8b\u3067\u306f\u3001\u5143\u8ad6\u6587An Image is Worth 16x16 Words: Transformers for Image Recognition at Scale\u306b\u57fa\u3065\u3044\u3066\u3001\u300c\u30d0\u30cb\u30e9 Vision Transformer\u300d\u3092\u69cb\u7bc9\u3057\u307e\u3059\u3002\u5143\u306e\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3092\u518d\u73fe\u3067\u304d\u308c\u3070\u3001\u4ed6\u306e\u30d0\u30ea\u30a8\u30fc\u30b7\u30e7\u30f3\u306b\u3082\u5bfe\u5fdc\u3067\u304d\u308b\u304b\u3089\u3067\u3059\u3002</p>","tags":["PyTorch","Vision Transformer","ViT","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u8ad6\u6587\u5b9f\u88c5","\u6df1\u5c64\u5b66\u7fd2"]},{"location":"PyTorch/09_pytorch_paper_replicating/#_5","title":"\u5b9f\u88c5\u5185\u5bb9","text":"","tags":["PyTorch","Vision Transformer","ViT","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u8ad6\u6587\u5b9f\u88c5","\u6df1\u5c64\u5b66\u7fd2"]},{"location":"PyTorch/09_pytorch_paper_replicating/#0","title":"0. \u74b0\u5883\u8a2d\u5b9a","text":"<p>\u307e\u305a\u3001\u5fc5\u8981\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u6e96\u5099\u3057\u307e\u3059\u3002PyTorch 1.12\u4ee5\u4e0a\u3068torchvision 0.13\u4ee5\u4e0a\u304c\u5fc5\u8981\u3067\u3059\u3002</p> <pre><code># \u5fc5\u8981\u306a\u30d0\u30fc\u30b8\u30e7\u30f3\u306e\u78ba\u8a8d\u3068\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\ntry:\n    import torch\n    import torchvision\n    assert int(torch.__version__.split(\".\")[1]) &gt;= 12 or int(torch.__version__.split(\".\")[0]) == 2, \"torch version should be 1.12+\"\n    assert int(torchvision.__version__.split(\".\")[1]) &gt;= 13, \"torchvision version should be 0.13+\"\n    print(f\"torch version: {torch.__version__}\")\n    print(f\"torchvision version: {torchvision.__version__}\")\nexcept:\n    print(f\"[INFO] torch/torchvision versions not as required, installing nightly versions.\")\n    !pip3 install -U torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118\n    import torch\n    import torchvision\n    print(f\"torch version: {torch.__version__}\")\n    print(f\"torchvision version: {torchvision.__version__}\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>torch version: 2.7.1\ntorchvision version: 0.22.1\n</code></pre></p> <p>\u7d9a\u3044\u3066\u3001\u5fc5\u8981\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u3001\u30c7\u30d0\u30a4\u30b9\u8a2d\u5b9a\u3092\u884c\u3044\u307e\u3059\uff1a</p> <pre><code># \u5fc5\u8981\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\nimport matplotlib.pyplot as plt\nimport torch\nimport torchvision\n\nfrom torch import nn\nfrom torchvision import transforms\nfrom torchinfo import summary\nfrom going_modular import data_setup, engine\nfrom helper_functions import download_data, set_seeds, plot_loss_curves\n\n# \u30c7\u30d0\u30a4\u30b9\u8a2d\u5b9a\uff08GPU\u5229\u7528\u53ef\u80fd\u6027\u306e\u78ba\u8a8d\uff09\ndevice = \"mps\" if torch.mps.is_available() else \"cpu\"\ndevice\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>'mps'\n</code></pre></p>","tags":["PyTorch","Vision Transformer","ViT","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u8ad6\u6587\u5b9f\u88c5","\u6df1\u5c64\u5b66\u7fd2"]},{"location":"PyTorch/09_pytorch_paper_replicating/#1","title":"1. \u30c7\u30fc\u30bf\u306e\u6e96\u5099","text":"<p>FoodVision Mini\u3067\u4f7f\u7528\u3059\u308b\u30d4\u30b6\u3001\u30b9\u30c6\u30fc\u30ad\u3001\u5bff\u53f8\u306e\u753b\u50cf\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u307e\u3059\uff1a</p> <pre><code># GitHub\u304b\u3089\u30d4\u30b6\u3001\u30b9\u30c6\u30fc\u30ad\u3001\u5bff\u53f8\u753b\u50cf\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\nimage_path = download_data(source=\"https://github.com/vinsmoke-three/deeplearning-with-pytorch/raw/main/data/pizza_steak_sushi.zip\",\n                           destination=\"pizza_steak_sushi\")\nimage_path\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>[INFO] data/pizza_steak_sushi directory exists, skipping download.\nPosixPath('data/pizza_steak_sushi')\n</code></pre></p> <p>\u30c7\u30fc\u30bf\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u8a2d\u5b9a\uff1a</p> <pre><code># \u8a13\u7df4\u7528\u3068\u30c6\u30b9\u30c8\u7528\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u30d1\u30b9\u3092\u8a2d\u5b9a\ntrain_dir = image_path / \"train\"\ntest_dir = image_path / \"test\"\n</code></pre>","tags":["PyTorch","Vision Transformer","ViT","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u8ad6\u6587\u5b9f\u88c5","\u6df1\u5c64\u5b66\u7fd2"]},{"location":"PyTorch/09_pytorch_paper_replicating/#2-dataloader","title":"2. \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3068DataLoader\u306e\u4f5c\u6210","text":"","tags":["PyTorch","Vision Transformer","ViT","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u8ad6\u6587\u5b9f\u88c5","\u6df1\u5c64\u5b66\u7fd2"]},{"location":"PyTorch/09_pytorch_paper_replicating/#21","title":"2.1 \u753b\u50cf\u5909\u63db\u306e\u6e96\u5099","text":"<p>ViT\u8ad6\u6587\u306eTable 3\u306b\u3088\u308b\u3068\u3001\u8a13\u7df4\u6642\u306e\u89e3\u50cf\u5ea6\u306f224\u00d7224\u30d4\u30af\u30bb\u30eb\u3067\u3059\u3002</p> <p></p> <p>ViT\u8ad6\u6587\u306eTable 3\u3067\u306f\u3001\u753b\u50cf\u30b5\u30a4\u30ba\u3084\u30d0\u30c3\u30c1\u30b5\u30a4\u30ba\u306a\u3069\u306e\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u8a2d\u5b9a\u304c\u793a\u3055\u308c\u3066\u3044\u307e\u3059\u3002</p> <p>\u3053\u306e\u60c5\u5831\u306b\u57fa\u3065\u3044\u3066\u753b\u50cf\u5909\u63db\u3092\u8a2d\u5b9a\u3057\u307e\u3059\uff1a</p> <pre><code># \u753b\u50cf\u30b5\u30a4\u30ba\u306e\u8a2d\u5b9a\uff08ViT\u8ad6\u6587\u306eTable 3\u304b\u3089\uff09\nIMG_SIZE = 224\n\n# \u624b\u52d5\u3067\u5909\u63db\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u3092\u4f5c\u6210\nmanual_transforms = transforms.Compose([\n    transforms.Resize((IMG_SIZE, IMG_SIZE)),  # 224x224\u306b\u30ea\u30b5\u30a4\u30ba\n    transforms.ToTensor(),                    # \u30c6\u30f3\u30bd\u30eb\u306b\u5909\u63db\n])\nprint(f\"\u624b\u52d5\u4f5c\u6210\u3055\u308c\u305f\u5909\u63db: {manual_transforms}\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>\u624b\u52d5\u4f5c\u6210\u3055\u308c\u305f\u5909\u63db: Compose(\n    Resize(size=(224, 224), interpolation=bilinear, max_size=None, antialias=True)\n    ToTensor()\n)\n</code></pre></p>","tags":["PyTorch","Vision Transformer","ViT","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u8ad6\u6587\u5b9f\u88c5","\u6df1\u5c64\u5b66\u7fd2"]},{"location":"PyTorch/09_pytorch_paper_replicating/#22-dataloader","title":"2.2 DataLoader\u306e\u4f5c\u6210","text":"<p>ViT\u8ad6\u6587\u3067\u306f\u30d0\u30c3\u30c1\u30b5\u30a4\u30ba4096\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u4e00\u822c\u7684\u306a\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u3067\u306f\u51e6\u7406\u304c\u56f0\u96e3\u306a\u305f\u3081\u3001\u30d0\u30c3\u30c1\u30b5\u30a4\u30ba32\u3092\u4f7f\u7528\u3057\u307e\u3059\uff1a</p> <pre><code># \u30d0\u30c3\u30c1\u30b5\u30a4\u30ba\u306e\u8a2d\u5b9a\uff08ViT\u8ad6\u6587\u3088\u308a\u5c0f\u3055\u304f\u8a2d\u5b9a\uff09\nBATCH_SIZE = 32  # ViT\u8ad6\u6587\u3088\u308a\u5c0f\u3055\u3044\u304c\u3001\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u5236\u7d04\u306e\u305f\u3081\n\n# \u30c7\u30fc\u30bf\u30ed\u30fc\u30c0\u30fc\u306e\u4f5c\u6210\ntrain_dataloader, test_dataloader, class_names = data_setup.create_dataloaders(\n    train_dir=train_dir,\n    test_dir=test_dir,\n    transform=manual_transforms,  # \u624b\u52d5\u4f5c\u6210\u3057\u305f\u5909\u63db\u3092\u4f7f\u7528\n    batch_size=BATCH_SIZE\n)\n\ntrain_dataloader, test_dataloader, class_names\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>/Users/vinsmoke/miniconda3/envs/deep-learning/lib/python3.12/site-packages/torch/utils/data/dataloader.py:683: UserWarning: 'pin_memory' argument is set as true but not supported on MPS now, then device pinned memory won't be used.\n  warnings.warn(warn_msg)\n\n(&lt;torch.utils.data.dataloader.DataLoader at 0x3586a46b0&gt;,\n &lt;torch.utils.data.dataloader.DataLoader at 0x358b17620&gt;,\n ['pizza', 'steak', 'sushi'])\n</code></pre></p>","tags":["PyTorch","Vision Transformer","ViT","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u8ad6\u6587\u5b9f\u88c5","\u6df1\u5c64\u5b66\u7fd2"]},{"location":"PyTorch/09_pytorch_paper_replicating/#23","title":"2.3 \u5358\u4e00\u753b\u50cf\u306e\u53ef\u8996\u5316","text":"<p>\u30c7\u30fc\u30bf\u304c\u6b63\u3057\u304f\u8aad\u307f\u8fbc\u307e\u308c\u3066\u3044\u308b\u304b\u78ba\u8a8d\u3057\u307e\u3057\u3087\u3046\uff1a</p> <pre><code># \u753b\u50cf\u30d0\u30c3\u30c1\u3092\u53d6\u5f97\nimage_batch, label_batch = next(iter(train_dataloader))\n\n# \u30d0\u30c3\u30c1\u304b\u3089\u5358\u4e00\u306e\u753b\u50cf\u3092\u53d6\u5f97\nimage, label = image_batch[0], label_batch[0]\n\n# \u30d0\u30c3\u30c1\u306e\u5f62\u72b6\u3092\u78ba\u8a8d\nimage.shape, label\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>(torch.Size([3, 224, 224]), tensor(2))\n</code></pre></p> <p>\u753b\u50cf\u3092\u53ef\u8996\u5316\uff1a</p> <pre><code># matplotlib\u3067\u753b\u50cf\u3092\u30d7\u30ed\u30c3\u30c8\nplt.imshow(image.permute(1, 2, 0))  # \u753b\u50cf\u6b21\u5143\u3092\u8abf\u6574 [color_channels, height, width] -&gt; [height, width, color_channels]\nplt.title(class_names[label])\nplt.axis(False);\n</code></pre> <p></p> <p>\u7d20\u6674\u3089\u3057\u3044\uff01\u753b\u50cf\u304c\u6b63\u3057\u304f\u30a4\u30f3\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u307e\u3059\u3002</p>","tags":["PyTorch","Vision Transformer","ViT","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u8ad6\u6587\u5b9f\u88c5","\u6df1\u5c64\u5b66\u7fd2"]},{"location":"PyTorch/09_pytorch_paper_replicating/#3-vit","title":"3. ViT\u8ad6\u6587\u306e\u518d\u73fe\u5b9f\u88c5\uff1a\u6982\u8981","text":"","tags":["PyTorch","Vision Transformer","ViT","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u8ad6\u6587\u5b9f\u88c5","\u6df1\u5c64\u5b66\u7fd2"]},{"location":"PyTorch/09_pytorch_paper_replicating/#31","title":"3.1 \u5165\u529b\u3068\u51fa\u529b\u3001\u5c64\u3068\u30d6\u30ed\u30c3\u30af","text":"<p>\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306f\u4e00\u822c\u7684\u306b\u5c64\uff08layer\uff09\u3067\u69cb\u6210\u3055\u308c\u307e\u3059\u3002</p> <p>\u5c64\u306e\u96c6\u5408\u306f\u30d6\u30ed\u30c3\u30af\uff08block\uff09\u3068\u547c\u3070\u308c\u307e\u3059\u3002</p> <p>\u591a\u304f\u306e\u30d6\u30ed\u30c3\u30af\u3092\u7a4d\u307f\u91cd\u306d\u308b\u3053\u3068\u3067\u3001\u5168\u4f53\u306e\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u304c\u69cb\u6210\u3055\u308c\u307e\u3059\u3002</p> <ul> <li>\u5c64 - \u5165\u529b\u3092\u53d7\u3051\u53d6\u308a\u3001\u4f55\u3089\u304b\u306e\u95a2\u6570\u3092\u9069\u7528\u3057\u3001\u51fa\u529b\u3092\u8fd4\u3059</li> <li>\u30d6\u30ed\u30c3\u30af - \u5c64\u306e\u96c6\u5408\u3001\u5165\u529b\u3092\u53d7\u3051\u53d6\u308a\u3001\u4e00\u9023\u306e\u95a2\u6570\u3092\u9069\u7528\u3057\u3001\u51fa\u529b\u3092\u8fd4\u3059</li> <li>\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\uff08\u30e2\u30c7\u30eb\uff09 - \u30d6\u30ed\u30c3\u30af\u306e\u96c6\u5408\u3001\u5165\u529b\u3092\u53d7\u3051\u53d6\u308a\u3001\u4e00\u9023\u306e\u95a2\u6570\u3092\u9069\u7528\u3057\u3001\u51fa\u529b\u3092\u8fd4\u3059</li> </ul> <p></p> <p>\u73fe\u4ee3\u306e\u6df1\u5c64\u5b66\u7fd2\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306f\u901a\u5e38\u3001\u5c64\u3068\u30d6\u30ed\u30c3\u30af\u306e\u96c6\u5408\u3067\u3059\u3002\u5c64\u306f\u5165\u529b\uff08\u6570\u5024\u8868\u73fe\u3068\u3057\u3066\u306e\u30c7\u30fc\u30bf\uff09\u3092\u53d7\u3051\u53d6\u308a\u3001\u4f55\u3089\u304b\u306e\u95a2\u6570\u3092\u4f7f\u3063\u3066\u64cd\u4f5c\u3057\u3001\u51fa\u529b\u3057\u307e\u3059\u3002</p>","tags":["PyTorch","Vision Transformer","ViT","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u8ad6\u6587\u5b9f\u88c5","\u6df1\u5c64\u5b66\u7fd2"]},{"location":"PyTorch/09_pytorch_paper_replicating/#32-vit","title":"3.2 \u5177\u4f53\u7684\u306aViT\u306e\u69cb\u6210\u8981\u7d20","text":"","tags":["PyTorch","Vision Transformer","ViT","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u8ad6\u6587\u5b9f\u88c5","\u6df1\u5c64\u5b66\u7fd2"]},{"location":"PyTorch/09_pytorch_paper_replicating/#321-figure-1","title":"3.2.1 Figure 1\u306e\u63a2\u7d22","text":"<p>ViT\u8ad6\u6587\u306eFigure 1\u304b\u3089\u3001\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306e\u4e3b\u8981\u306a\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3092\u7406\u89e3\u3057\u307e\u3057\u3087\u3046\uff1a</p> <p></p> <p>ViT\u8ad6\u6587\u306eFigure 1\u306f\u3001\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3092\u69cb\u6210\u3059\u308b\u69d8\u3005\u306a\u5165\u529b\u3001\u51fa\u529b\u3001\u5c64\u3001\u30d6\u30ed\u30c3\u30af\u3092\u793a\u3057\u3066\u3044\u307e\u3059\u3002</p> <p>ViT\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306f\u4ee5\u4e0b\u306e\u6bb5\u968e\u3067\u69cb\u6210\u3055\u308c\u307e\u3059\uff1a</p> <ul> <li>Patch + Position Embedding\uff08\u5165\u529b\uff09 - \u5165\u529b\u753b\u50cf\u3092\u753b\u50cf\u30d1\u30c3\u30c1\u306e\u30b7\u30fc\u30b1\u30f3\u30b9\u306b\u5909\u63db\u3057\u3001\u30d1\u30c3\u30c1\u306e\u9806\u5e8f\u3092\u6307\u5b9a\u3059\u308b\u4f4d\u7f6e\u756a\u53f7\u3092\u8ffd\u52a0</li> <li>Linear projection of flattened patches\uff08\u57cb\u3081\u8fbc\u307f\u30d1\u30c3\u30c1\uff09 - \u753b\u50cf\u30d1\u30c3\u30c1\u3092\u57cb\u3081\u8fbc\u307f\u8868\u73fe\u306b\u5909\u63db</li> <li>Norm - Layer Normalization\uff08\u6b63\u898f\u5316\u5c64\uff09</li> <li>Multi-Head Attention - \u30de\u30eb\u30c1\u30d8\u30c3\u30c9\u81ea\u5df1\u6ce8\u610f\u5c64\uff08MSA\uff09</li> <li>MLP - \u591a\u5c64\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3</li> <li>Transformer Encoder - \u4e0a\u8a18\u306e\u5c64\u3092\u7d44\u307f\u5408\u308f\u305b\u305f\u30d6\u30ed\u30c3\u30af</li> <li>MLP Head - \u5206\u985e\u306e\u305f\u3081\u306e\u51fa\u529b\u5c64</li> </ul>","tags":["PyTorch","Vision Transformer","ViT","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u8ad6\u6587\u5b9f\u88c5","\u6df1\u5c64\u5b66\u7fd2"]},{"location":"PyTorch/09_pytorch_paper_replicating/#322-4","title":"3.2.2 4\u3064\u306e\u6570\u5f0f\u306e\u63a2\u7d22","text":"<p>ViT\u8ad6\u6587\u306e3.1\u7bc0\u306b\u3042\u308b4\u3064\u306e\u6570\u5f0f\u304c\u3001\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306e\u6570\u5b66\u7684\u57fa\u76e4\u3092\u63d0\u4f9b\u3057\u307e\u3059\uff1a</p> <p></p> <p>\u3053\u308c\u3089\u306e4\u3064\u306e\u6570\u5f0f\u306f\u3001ViT\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306e4\u3064\u306e\u4e3b\u8981\u90e8\u5206\u306e\u6570\u5b66\u3092\u8868\u3057\u3066\u3044\u307e\u3059\u3002</p> <p>\u6570\u5f0f1\uff1a\u30d1\u30c3\u30c1\u57cb\u3081\u8fbc\u307f</p> \\[ \\mathbf{z}_{0} =\\left[\\mathbf{x}_{\\text {class }} ; \\mathbf{x}_{p}^{1} \\mathbf{E} ; \\mathbf{x}_{p}^{2} \\mathbf{E} ; \\cdots ; \\mathbf{x}_{p}^{N} \\mathbf{E}\\right]+\\mathbf{E}_{\\text {pos }} \\] <p>\u3053\u308c\u306f\u3001\u30af\u30e9\u30b9\u30c8\u30fc\u30af\u30f3\u3001\u30d1\u30c3\u30c1\u57cb\u3081\u8fbc\u307f\u3001\u4f4d\u7f6e\u57cb\u3081\u8fbc\u307f\u3092\u6271\u3044\u307e\u3059\u3002</p> <p>\u6570\u5f0f2\uff1aMSA\u30d6\u30ed\u30c3\u30af</p> \\[ \\mathbf{z}_{\\ell}^{\\prime} =\\operatorname{MSA}\\left(\\operatorname{LN}\\left(\\mathbf{z}_{\\ell-1}\\right)\\right)+\\mathbf{z}_{\\ell-1} \\] <p>LayerNorm\u3067\u30e9\u30c3\u30d7\u3055\u308c\u305fMulti-Head Attention\u5c64\u3068\u3001\u6b8b\u5dee\u63a5\u7d9a\u3092\u793a\u3057\u307e\u3059\u3002</p> <p>\u6570\u5f0f3\uff1aMLP\u30d6\u30ed\u30c3\u30af</p> \\[ \\mathbf{z}_{\\ell} =\\operatorname{MLP}\\left(\\operatorname{LN}\\left(\\mathbf{z}_{\\ell}^{\\prime}\\right)\\right)+\\mathbf{z}_{\\ell}^{\\prime} \\] <p>LayerNorm\u3067\u30e9\u30c3\u30d7\u3055\u308c\u305fMultilayer Perceptron\u5c64\u3068\u3001\u6b8b\u5dee\u63a5\u7d9a\u3092\u793a\u3057\u307e\u3059\u3002</p> <p>\u6570\u5f0f4\uff1a\u51fa\u529b</p> \\[ \\mathbf{y} =\\operatorname{LN}\\left(\\mathbf{z}_{L}^{0}\\right) \\] <p>\u6700\u7d42\u5c64\u3067\u306e\u51fa\u529b\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002</p>","tags":["PyTorch","Vision Transformer","ViT","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u8ad6\u6587\u5b9f\u88c5","\u6df1\u5c64\u5b66\u7fd2"]},{"location":"PyTorch/09_pytorch_paper_replicating/#323-table-1","title":"3.2.3 Table 1\u306e\u63a2\u7d22","text":"<p>Table 1\u306f\u3001\u69d8\u3005\u306aViT\u30e2\u30c7\u30eb\u306e\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u8a2d\u5b9a\u3092\u793a\u3057\u3066\u3044\u307e\u3059\uff1a</p> Model Layers Hidden size D MLP size Heads Params ViT-Base 12 768 3072 12 86M ViT-Large 24 1024 4096 16 307M ViT-Huge 32 1280 5120 16 632M <p>\u79c1\u305f\u3061\u306f\u6700\u5c0f\u306eViT-Base\u304b\u3089\u59cb\u3081\u3066\u3001\u3046\u307e\u304f\u3044\u3051\u3070\u3088\u308a\u5927\u304d\u306a\u30d0\u30ea\u30a2\u30f3\u30c8\u306b\u30b9\u30b1\u30fc\u30eb\u30a2\u30c3\u30d7\u3067\u304d\u307e\u3059\u3002</p> <ul> <li>Layers - Transformer Encoder\u30d6\u30ed\u30c3\u30af\u306e\u6570</li> <li>Hidden size D - \u57cb\u3081\u8fbc\u307f\u6b21\u5143</li> <li>MLP size - MLP\u5c64\u306e\u96a0\u308c\u30e6\u30cb\u30c3\u30c8\u6570</li> <li>Heads - Multi-Head Attention\u5c64\u306e\u30d8\u30c3\u30c9\u6570</li> <li>Params - \u30e2\u30c7\u30eb\u306e\u7dcf\u30d1\u30e9\u30e1\u30fc\u30bf\u6570</li> </ul>","tags":["PyTorch","Vision Transformer","ViT","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u8ad6\u6587\u5b9f\u88c5","\u6df1\u5c64\u5b66\u7fd2"]},{"location":"PyTorch/09_pytorch_paper_replicating/#4-1","title":"4. \u6570\u5f0f1\u306e\u5b9f\u88c5\uff1a\u30d1\u30c3\u30c1\u5206\u5272\u3068\u30af\u30e9\u30b9\u30fb\u4f4d\u7f6e\u30fb\u30d1\u30c3\u30c1\u57cb\u3081\u8fbc\u307f\u306e\u4f5c\u6210","text":"<p>\u79c1\u306e\u6a5f\u68b0\u5b66\u7fd2\u30a8\u30f3\u30b8\u30cb\u30a2\u306e\u53cb\u4eba\u304c\u3088\u304f\u300c\u3059\u3079\u3066\u306f\u57cb\u3081\u8fbc\u307f\u6b21\u7b2c\u3060\u300d\u3068\u8a00\u3063\u3066\u3044\u307e\u3057\u305f\u3002</p> <p>\u3064\u307e\u308a\u3001\u30c7\u30fc\u30bf\u3092\u826f\u3044\u5b66\u7fd2\u53ef\u80fd\u306a\u65b9\u6cd5\uff08\u57cb\u3081\u8fbc\u307f\u306f\u5b66\u7fd2\u53ef\u80fd\u306a\u8868\u73fe\uff09\u3067\u8868\u73fe\u3067\u304d\u308c\u3070\u3001\u5b66\u7fd2\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u826f\u3044\u6027\u80fd\u3092\u767a\u63ee\u3059\u308b\u53ef\u80fd\u6027\u304c\u9ad8\u3044\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002</p> <p>\u305d\u308c\u3092\u8e0f\u307e\u3048\u3066\u3001ViT\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306e\u30af\u30e9\u30b9\u3001\u4f4d\u7f6e\u3001\u30d1\u30c3\u30c1\u57cb\u3081\u8fbc\u307f\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u304b\u3089\u59cb\u3081\u307e\u3057\u3087\u3046\u3002</p> <p>\u307e\u305a\u30d1\u30c3\u30c1\u57cb\u3081\u8fbc\u307f\u304b\u3089\u59cb\u3081\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u5165\u529b\u753b\u50cf\u3092\u30d1\u30c3\u30c1\u306e\u30b7\u30fc\u30b1\u30f3\u30b9\u306b\u5909\u63db\u3057\u3001\u305d\u308c\u3089\u306e\u30d1\u30c3\u30c1\u3092\u57cb\u3081\u8fbc\u3080\u3053\u3068\u3092\u610f\u5473\u3057\u307e\u3059\u3002</p> <p>\u57cb\u3081\u8fbc\u307f\u306f\u4f55\u3089\u304b\u306e\u5f62\u5f0f\u306e\u5b66\u7fd2\u53ef\u80fd\u306a\u8868\u73fe\u3067\u3042\u308a\u3001\u591a\u304f\u306e\u5834\u5408\u30d9\u30af\u30c8\u30eb\u3067\u3042\u308b\u3053\u3068\u3092\u601d\u3044\u51fa\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <p>\u5b66\u7fd2\u53ef\u80fd\u3068\u3044\u3046\u7528\u8a9e\u304c\u91cd\u8981\u3067\u3059\u3002\u3053\u308c\u306f\u3001\u5165\u529b\u753b\u50cf\u306e\u6570\u5024\u8868\u73fe\uff08\u30e2\u30c7\u30eb\u304c\u898b\u308b\u3082\u306e\uff09\u304c\u6642\u9593\u3068\u3068\u3082\u306b\u6539\u5584\u3055\u308c\u308b\u3053\u3068\u3092\u610f\u5473\u3059\u308b\u304b\u3089\u3067\u3059\u3002</p> <p>ViT\u8ad6\u6587\u306e3.1\u7bc0\u306e\u5192\u982d\u6bb5\u843d\u306b\u5f93\u3063\u3066\u59cb\u3081\u307e\u3057\u3087\u3046\uff1a</p> <p>\u6a19\u6e96\u7684\u306aTransformer\u306f\u30011D\u30c8\u30fc\u30af\u30f3\u57cb\u3081\u8fbc\u307f\u306e\u30b7\u30fc\u30b1\u30f3\u30b9\u3092\u5165\u529b\u3068\u3057\u3066\u53d7\u3051\u53d6\u308a\u307e\u3059\u30022D\u753b\u50cf\u3092\u6271\u3046\u305f\u3081\u306b\u3001\u753b\u50cf \\(\\mathbf{x} \\in \\mathbb{R}^{H \\times W \\times C}\\) \u3092\u5e73\u5766\u5316\u3055\u308c\u305f2D\u30d1\u30c3\u30c1\u306e\u30b7\u30fc\u30b1\u30f3\u30b9 \\(\\mathbf{x}_{p} \\in \\mathbb{R}^{N \\times\\left(P^{2} \\cdot C\\right)}\\) \u306b\u5909\u5f62\u3057\u307e\u3059\u3002\u3053\u3053\u3067\\((H, W)\\)\u306f\u5143\u753b\u50cf\u306e\u89e3\u50cf\u5ea6\u3001\\(C\\)\u306f\u30c1\u30e3\u30f3\u30cd\u30eb\u6570\u3001\\((P, P)\\)\u306f\u5404\u753b\u50cf\u30d1\u30c3\u30c1\u306e\u89e3\u50cf\u5ea6\u3001\\(N=H W / P^{2}\\)\u306f\u7d50\u679c\u3068\u3057\u3066\u5f97\u3089\u308c\u308b\u30d1\u30c3\u30c1\u6570\u3067\u3001\u3053\u308c\u306fTransformer\u306e\u6709\u52b9\u306a\u5165\u529b\u30b7\u30fc\u30b1\u30f3\u30b9\u9577\u3067\u3082\u3042\u308a\u307e\u3059\u3002</p> <p>ViT\u8ad6\u6587\u306eTable 3\u304b\u3089\u300cTraining resolution is 224\u300d\u3068\u3044\u3046\u60c5\u5831\u3082\u5ff5\u982d\u306b\u7f6e\u3044\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002</p> <p></p> <p>ViT\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306eFigure 1\u304b\u3089Equation 1\u3078\u306e\u4f4d\u7f6e\u30fb\u30d1\u30c3\u30c1\u57cb\u3081\u8fbc\u307f\u90e8\u5206\u306e\u30de\u30c3\u30d4\u30f3\u30b0\u30023.1\u7bc0\u306e\u5192\u982d\u6bb5\u843d\u306f\u3001\u30d1\u30c3\u30c1\u57cb\u3081\u8fbc\u307f\u5c64\u306e\u7570\u306a\u308b\u5165\u529b\u30fb\u51fa\u529b\u5f62\u72b6\u3092\u8aac\u660e\u3057\u3066\u3044\u307e\u3059\u3002</p>","tags":["PyTorch","Vision Transformer","ViT","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u8ad6\u6587\u5b9f\u88c5","\u6df1\u5c64\u5b66\u7fd2"]},{"location":"PyTorch/09_pytorch_paper_replicating/#41","title":"4.1 \u30d1\u30c3\u30c1\u57cb\u3081\u8fbc\u307f\u306e\u5165\u529b\u30fb\u51fa\u529b\u5f62\u72b6\u3092\u624b\u8a08\u7b97\u3067\u6c42\u3081\u308b","text":"<p>\u307e\u305a\u3001\u3053\u308c\u3089\u306e\u5165\u529b\u30fb\u51fa\u529b\u5f62\u72b6\u306e\u5024\u3092\u624b\u8a08\u7b97\u3067\u6c42\u3081\u3066\u307f\u307e\u3057\u3087\u3046\u3002</p> <pre><code># \u30b5\u30f3\u30d7\u30eb\u5024\u3092\u4f5c\u6210\nheight = 224 # H (\"Training resolution is 224.\")\nwidth = 224 # W\ncolor_channels = 3 # C\npatch_size = 16 # P\n\n# N\uff08\u30d1\u30c3\u30c1\u6570\uff09\u3092\u8a08\u7b97\nnumber_of_patches = int((height * width) / patch_size**2)\nprint(f\"\u30d1\u30c3\u30c1\u30b5\u30a4\u30ba(P={patch_size})\u306b\u304a\u3051\u308b\u753b\u50cf\u9ad8\u3055(H={height})\u3001\u5e45(W={width})\u3067\u306e\u30d1\u30c3\u30c1\u6570(N): {number_of_patches}\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>\u30d1\u30c3\u30c1\u30b5\u30a4\u30ba(P=16)\u306b\u304a\u3051\u308b\u753b\u50cf\u9ad8\u3055(H=224)\u3001\u5e45(W=224)\u3067\u306e\u30d1\u30c3\u30c1\u6570(N): 196\n</code></pre></p> <p>\u30d1\u30c3\u30c1\u57cb\u3081\u8fbc\u307f\u5c64\u306e\u5165\u529b\u30fb\u51fa\u529b\u5f62\u72b6\u3092\u78ba\u8a8d\u3057\u307e\u3057\u3087\u3046\uff1a</p> <pre><code># \u5165\u529b\u5f62\u72b6\uff08\u5358\u4e00\u753b\u50cf\u306e\u30b5\u30a4\u30ba\uff09\nembedding_layer_input_shape = (height, width, color_channels)\n\n# \u51fa\u529b\u5f62\u72b6\nembedding_layer_output_shape = (number_of_patches, patch_size**2 * color_channels)\n\nprint(f\"\u5165\u529b\u5f62\u72b6\uff08\u5358\u4e002D\u753b\u50cf\uff09: {embedding_layer_input_shape}\")\nprint(f\"\u51fa\u529b\u5f62\u72b6\uff08\u30d1\u30c3\u30c1\u306b\u5e73\u5766\u5316\u3055\u308c\u305f\u5358\u4e002D\u753b\u50cf\uff09: {embedding_layer_output_shape}\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>\u5165\u529b\u5f62\u72b6\uff08\u5358\u4e002D\u753b\u50cf\uff09: (224, 224, 3)\n\u51fa\u529b\u5f62\u72b6\uff08\u30d1\u30c3\u30c1\u306b\u5e73\u5766\u5316\u3055\u308c\u305f\u5358\u4e002D\u753b\u50cf\uff09: (196, 768)\n</code></pre></p>","tags":["PyTorch","Vision Transformer","ViT","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u8ad6\u6587\u5b9f\u88c5","\u6df1\u5c64\u5b66\u7fd2"]},{"location":"PyTorch/09_pytorch_paper_replicating/#42","title":"4.2 \u5358\u4e00\u753b\u50cf\u3092\u30d1\u30c3\u30c1\u306b\u5909\u63db","text":"<p>\u753b\u50cf\u3092\u30d1\u30c3\u30c1\u306b\u5909\u63db\u3059\u308b\u69d8\u5b50\u3092\u53ef\u8996\u5316\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff1a</p> <pre><code># \u5358\u4e00\u753b\u50cf\u3092\u8868\u793a\nplt.imshow(image.permute(1, 2, 0)) # matplotlib\u306b\u5408\u308f\u305b\u3066\u8abf\u6574\nplt.title(class_names[label])\nplt.axis(False)\n</code></pre> <p></p> <p>\u307e\u305a\u3001\u753b\u50cf\u306e\u4e0a\u90e8\u884c\u306e\u30d1\u30c3\u30c1\u5316\u3055\u308c\u305f\u30d4\u30af\u30bb\u30eb\u3092\u53ef\u8996\u5316\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff1a</p> <pre><code># matplotlib\u7528\u306b\u753b\u50cf\u5f62\u72b6\u3092\u5909\u66f4 [color_channels, height, width] -&gt; [height, width, color_channels]\nimage_permuted = image.permute(1, 2, 0)\n\n# \u4e0a\u90e8\u884c\u306e\u30d1\u30c3\u30c1\u5316\u3055\u308c\u305f\u30d4\u30af\u30bb\u30eb\u3092\u30d7\u30ed\u30c3\u30c8\u3059\u308b\u305f\u3081\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\npatch_size = 16\nplt.figure(figsize=(patch_size, patch_size))\nplt.imshow(image_permuted[:patch_size, :, :])\n</code></pre> <p></p> <p>\u6b21\u306b\u3001\u4e0a\u90e8\u884c\u3092\u500b\u5225\u306e\u30d1\u30c3\u30c1\u306b\u5206\u5272\u3057\u307e\u3057\u3087\u3046\uff1a</p> <pre><code># \u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8a2d\u5b9a\u3068img_size\u3068patch_size\u306e\u4e92\u63db\u6027\u78ba\u8a8d\nimg_size = 224\npatch_size = 16\nnum_patches = img_size/patch_size\nassert img_size % patch_size == 0, \"\u753b\u50cf\u30b5\u30a4\u30ba\u306f\u30d1\u30c3\u30c1\u30b5\u30a4\u30ba\u3067\u5272\u308a\u5207\u308c\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\"\nprint(f\"\u884c\u3054\u3068\u306e\u30d1\u30c3\u30c1\u6570: {num_patches}\\n\u30d1\u30c3\u30c1\u30b5\u30a4\u30ba: {patch_size} pixels x {patch_size} pixels\")\n\n# \u4e00\u9023\u306e\u30b5\u30d6\u30d7\u30ed\u30c3\u30c8\u3092\u4f5c\u6210\nfig, axs = plt.subplots(nrows=1,\n                        ncols=img_size // patch_size, # \u5404\u30d1\u30c3\u30c1\u306b1\u5217\n                        figsize=(num_patches, num_patches),\n                        sharex=True,\n                        sharey=True)\n\n# \u4e0a\u90e8\u884c\u306e\u30d1\u30c3\u30c1\u6570\u3092\u53cd\u5fa9\u51e6\u7406\nfor i, patch in enumerate(range(0, img_size, patch_size)):\n    axs[i].imshow(image_permuted[:patch_size, patch:patch+patch_size, :]) # \u9ad8\u3055\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u4e00\u5b9a\u306b\u4fdd\u3061\u3001\u5e45\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u5909\u66f4\n    axs[i].set_xlabel(i+1) # \u30e9\u30d9\u30eb\u3092\u8a2d\u5b9a\n    axs[i].set_xticks([])\n    axs[i].set_yticks([])\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>\u884c\u3054\u3068\u306e\u30d1\u30c3\u30c1\u6570: 14.0\n\u30d1\u30c3\u30c1\u30b5\u30a4\u30ba: 16 pixels x 16 pixels\n</code></pre></p> <p></p> <p>\u4eca\u5ea6\u306f\u753b\u50cf\u5168\u4f53\u3092\u30d1\u30c3\u30c1\u5316\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff1a</p> <pre><code># \u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8a2d\u5b9a\nimg_size = 224\npatch_size = 16\nnum_patches = img_size/patch_size\nprint(f\"\u884c\u3054\u3068\u306e\u30d1\u30c3\u30c1\u6570: {num_patches}\\\n        \\n\u5217\u3054\u3068\u306e\u30d1\u30c3\u30c1\u6570: {num_patches}\\\n        \\n\u7dcf\u30d1\u30c3\u30c1\u6570: {num_patches*num_patches}\\\n        \\n\u30d1\u30c3\u30c1\u30b5\u30a4\u30ba: {patch_size} pixels x {patch_size} pixels\")\n\n# \u30b5\u30d6\u30d7\u30ed\u30c3\u30c8\u30b7\u30ea\u30fc\u30ba\u3092\u4f5c\u6210\nfig, axs = plt.subplots(nrows=img_size // patch_size,\n                        ncols=img_size // patch_size,\n                        figsize=(num_patches, num_patches),\n                        sharex=True,\n                        sharey=True)\n\n# \u753b\u50cf\u306e\u9ad8\u3055\u3068\u5e45\u3092\u30eb\u30fc\u30d7\nfor i, patch_height in enumerate(range(0, img_size, patch_size)): # \u9ad8\u3055\u3092\u53cd\u5fa9\n    for j, patch_width in enumerate(range(0, img_size, patch_size)): # \u5e45\u3092\u53cd\u5fa9\n        # \u7f6e\u63db\u3055\u308c\u305f\u753b\u50cf\u30d1\u30c3\u30c1\u3092\u30d7\u30ed\u30c3\u30c8\n        axs[i, j].imshow(image_permuted[patch_height:patch_height+patch_size,\n                                        patch_width:patch_width+patch_size,\n                                        :])\n        # \u30e9\u30d9\u30eb\u60c5\u5831\u3092\u8a2d\u5b9a\n        axs[i, j].set_ylabel(i+1,\n                             rotation=\"horizontal\",\n                             horizontalalignment=\"right\",\n                             verticalalignment=\"center\")\n        axs[i, j].set_xlabel(j+1)\n        axs[i, j].set_xticks([])\n        axs[i, j].set_yticks([])\n        axs[i, j].label_outer()\n\n# \u30b9\u30fc\u30d1\u30fc\u30bf\u30a4\u30c8\u30eb\u3092\u8a2d\u5b9a\nfig.suptitle(f\"{class_names[label]} -&gt; \u30d1\u30c3\u30c1\u5316\u6e08\u307f\", fontsize=16)\nplt.show()\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>\u884c\u3054\u3068\u306e\u30d1\u30c3\u30c1\u6570: 14.0        \n\u5217\u3054\u3068\u306e\u30d1\u30c3\u30c1\u6570: 14.0        \n\u7dcf\u30d1\u30c3\u30c1\u6570: 196.0        \n\u30d1\u30c3\u30c1\u30b5\u30a4\u30ba: 16 pixels x 16 pixels\n</code></pre></p> <p></p> <p>\u753b\u50cf\u306e\u30d1\u30c3\u30c1\u5316\u5b8c\u4e86\uff01\u7d20\u6674\u3089\u3057\u3044\u898b\u305f\u76ee\u3067\u3059\u306d\u3002</p>","tags":["PyTorch","Vision Transformer","ViT","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u8ad6\u6587\u5b9f\u88c5","\u6df1\u5c64\u5b66\u7fd2"]},{"location":"PyTorch/09_pytorch_paper_replicating/#43-torchnnconv2d","title":"4.3 <code>torch.nn.Conv2d()</code>\u306b\u3088\u308b\u753b\u50cf\u30d1\u30c3\u30c1\u306e\u4f5c\u6210","text":"<p>PyTorch\u3067\u30d1\u30c3\u30c1\u57cb\u3081\u8fbc\u307f\u5c64\u3092\u8907\u88fd\u3059\u308b\u4f5c\u696d\u306b\u79fb\u308a\u307e\u3057\u3087\u3046\u3002</p> <p>\u3053\u306e\u64cd\u4f5c\u306f\u3001\u7573\u307f\u8fbc\u307f\u64cd\u4f5c\u3068\u975e\u5e38\u306b\u4f3c\u3066\u3044\u307e\u3059\u3002\u5b9f\u969b\u3001ViT\u8ad6\u6587\u306e\u8457\u8005\u306f3.1\u7bc0\u3067\u3001\u30d1\u30c3\u30c1\u57cb\u3081\u8fbc\u307f\u306f\u7573\u307f\u8fbc\u307f\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\uff08CNN\uff09\u3067\u5b9f\u73fe\u3067\u304d\u308b\u3068\u8ff0\u3079\u3066\u3044\u307e\u3059\uff1a</p> <p>\u30cf\u30a4\u30d6\u30ea\u30c3\u30c9\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3002 \u751f\u306e\u753b\u50cf\u30d1\u30c3\u30c1\u306e\u4ee3\u66ff\u3068\u3057\u3066\u3001\u5165\u529b\u30b7\u30fc\u30b1\u30f3\u30b9\u306fCNN\u306e\u7279\u5fb4\u30de\u30c3\u30d7\u304b\u3089\u5f62\u6210\u3067\u304d\u307e\u3059\u3002</p> <p></p> <p><code>torch.nn.Conv2d()</code>\u5c64\u306e<code>kernel_size</code>\u3068<code>stride</code>\u30d1\u30e9\u30e1\u30fc\u30bf\u3092<code>patch_size</code>\u3068\u7b49\u3057\u304f\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u753b\u50cf\u3092\u30d1\u30c3\u30c1\u306b\u5206\u5272\u3057\u3001\u5404\u30d1\u30c3\u30c1\u306e\u5b66\u7fd2\u53ef\u80fd\u306a\u57cb\u3081\u8fbc\u307f\u3092\u4f5c\u6210\u3059\u308b\u5c64\u3092\u52b9\u679c\u7684\u306b\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002</p> <p><code>torch.nn.Conv2d()</code>\u5c64\u3067\u30d1\u30c3\u30c1\u4f5c\u6210\u3092\u8907\u88fd\u3059\u308b\u306b\u306f\u3001<code>kernel_size</code>\u3068<code>stride</code>\u3092<code>patch_size</code>\u3068\u7b49\u3057\u304f\u8a2d\u5b9a\u3057\u307e\u3059\uff1a</p> <pre><code>from torch import nn\n\n# \u30d1\u30c3\u30c1\u30b5\u30a4\u30ba\u3092\u8a2d\u5b9a\npatch_size=16\n\n# ViT\u8ad6\u6587\u306e\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u3067Conv2d\u5c64\u3092\u4f5c\u6210\nconv2d = nn.Conv2d(in_channels=3, # \u30ab\u30e9\u30fc\u30c1\u30e3\u30f3\u30cd\u30eb\u6570\n                   out_channels=768, # Table 1\u3088\u308a: Hidden size D\u3001\u3053\u308c\u304c\u57cb\u3081\u8fbc\u307f\u30b5\u30a4\u30ba\n                   kernel_size=patch_size,\n                   stride=patch_size,\n                   padding=0)\n</code></pre> <p>\u753b\u50cf\u3092\u7573\u307f\u8fbc\u307f\u5c64\u306b\u901a\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff1a</p> <pre><code># \u753b\u50cf\u3092\u7573\u307f\u8fbc\u307f\u5c64\u306b\u901a\u3059\nimage_out_of_conv = conv2d(image.unsqueeze(0)) # \u5358\u4e00\u30d0\u30c3\u30c1\u6b21\u5143\u3092\u8ffd\u52a0\nprint(image_out_of_conv.shape)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>torch.Size([1, 768, 14, 14])\n</code></pre></p> <p>\u30e9\u30f3\u30c0\u30e0\u306a5\u3064\u306e\u7573\u307f\u8fbc\u307f\u7279\u5fb4\u30de\u30c3\u30d7\u3092\u53ef\u8996\u5316\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff1a</p> <pre><code># \u30e9\u30f3\u30c0\u30e0\u306a5\u3064\u306e\u7573\u307f\u8fbc\u307f\u7279\u5fb4\u30de\u30c3\u30d7\u3092\u30d7\u30ed\u30c3\u30c8\nimport random\nrandom_indexes = random.sample(range(0, 758), k=5)\nprint(f\"\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304b\u3089\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u7573\u307f\u8fbc\u307f\u7279\u5fb4\u30de\u30c3\u30d7\u3092\u8868\u793a: {random_indexes}\")\n\n# \u30d7\u30ed\u30c3\u30c8\u4f5c\u6210\nfig, axs = plt.subplots(nrows=1, ncols=5, figsize=(12, 12))\n\n# \u30e9\u30f3\u30c0\u30e0\u306a\u753b\u50cf\u7279\u5fb4\u30de\u30c3\u30d7\u3092\u30d7\u30ed\u30c3\u30c8\nfor i, idx in enumerate(random_indexes):\n    image_conv_feature_map = image_out_of_conv[:, idx, :, :]\n    axs[i].imshow(image_conv_feature_map.squeeze().detach().numpy())\n    axs[i].set(xticklabels=[], yticklabels=[], xticks=[], yticks=[]);\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304b\u3089\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u7573\u307f\u8fbc\u307f\u7279\u5fb4\u30de\u30c3\u30d7\u3092\u8868\u793a: [678, 116, 559, 48, 577]\n</code></pre></p> <p></p>","tags":["PyTorch","Vision Transformer","ViT","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u8ad6\u6587\u5b9f\u88c5","\u6df1\u5c64\u5b66\u7fd2"]},{"location":"PyTorch/09_pytorch_paper_replicating/#44-torchnnflatten","title":"4.4 <code>torch.nn.Flatten()</code>\u306b\u3088\u308b\u30d1\u30c3\u30c1\u57cb\u3081\u8fbc\u307f\u306e\u5e73\u5766\u5316","text":"<p>\u753b\u50cf\u3092\u30d1\u30c3\u30c1\u57cb\u3081\u8fbc\u307f\u306b\u5909\u63db\u3057\u307e\u3057\u305f\u304c\u3001\u307e\u30602D\u5f62\u5f0f\u3067\u3059\u3002ViT\u30e2\u30c7\u30eb\u306e\u7406\u60f3\u7684\u306a\u51fa\u529b\u5f62\u72b6\u306b\u3059\u308b\u306b\u306f\u3069\u3046\u3059\u308c\u3070\u3088\u3044\u3067\u3057\u3087\u3046\u304b\uff1f</p> <pre><code># \u73fe\u5728\u306e\u30c6\u30f3\u30bd\u30eb\u5f62\u72b6\nprint(f\"\u73fe\u5728\u306e\u30c6\u30f3\u30bd\u30eb\u5f62\u72b6: {image_out_of_conv.shape} -&gt; [batch, embedding_dim, feature_map_height, feature_map_width]\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>\u73fe\u5728\u306e\u30c6\u30f3\u30bd\u30eb\u5f62\u72b6: torch.Size([1, 768, 14, 14]) -&gt; [batch, embedding_dim, feature_map_height, feature_map_width]\n</code></pre></p> <p><code>torch.nn.Flatten()</code>\u3092\u4f7f\u7528\u3057\u3066\u7279\u5fb4\u30de\u30c3\u30d7\u306e\u7a7a\u9593\u6b21\u5143\u3092\u5e73\u5766\u5316\u3057\u307e\u3057\u3087\u3046\uff1a</p> <pre><code># \u5e73\u5766\u5316\u5c64\u3092\u4f5c\u6210\nflatten = nn.Flatten(start_dim=2, # feature_map_height\uff08\u6b21\u51432\uff09\u3092\u5e73\u5766\u5316\n                     end_dim=3) # feature_map_width\uff08\u6b21\u51433\uff09\u3092\u5e73\u5766\u5316\n</code></pre> <p>\u3059\u3079\u3066\u3092\u307e\u3068\u3081\u3066\u307f\u307e\u3057\u3087\u3046\uff1a</p> <pre><code># 1. \u5358\u4e00\u753b\u50cf\u3092\u8868\u793a\nplt.imshow(image.permute(1, 2, 0)) # matplotlib\u7528\u306b\u8abf\u6574\nplt.title(class_names[label])\nplt.axis(False)\nprint(f\"\u5143\u753b\u50cf\u306e\u5f62\u72b6: {image.shape}\")\n\n# 2. \u753b\u50cf\u3092\u7279\u5fb4\u30de\u30c3\u30d7\u306b\u5909\u63db\nimage_out_of_conv = conv2d(image.unsqueeze(0)) # \u5f62\u72b6\u30a8\u30e9\u30fc\u3092\u907f\u3051\u308b\u305f\u3081\u30d0\u30c3\u30c1\u6b21\u5143\u3092\u8ffd\u52a0\nprint(f\"\u753b\u50cf\u7279\u5fb4\u30de\u30c3\u30d7\u306e\u5f62\u72b6: {image_out_of_conv.shape}\")\n\n# 3. \u7279\u5fb4\u30de\u30c3\u30d7\u3092\u5e73\u5766\u5316\nimage_out_of_conv_flattened = flatten(image_out_of_conv)\nprint(f\"\u5e73\u5766\u5316\u3055\u308c\u305f\u753b\u50cf\u7279\u5fb4\u30de\u30c3\u30d7\u306e\u5f62\u72b6: {image_out_of_conv_flattened.shape}\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>\u5143\u753b\u50cf\u306e\u5f62\u72b6: torch.Size([3, 224, 224])\n\u753b\u50cf\u7279\u5fb4\u30de\u30c3\u30d7\u306e\u5f62\u72b6: torch.Size([1, 768, 14, 14])\n\u5e73\u5766\u5316\u3055\u308c\u305f\u753b\u50cf\u7279\u5fb4\u30de\u30c3\u30d7\u306e\u5f62\u72b6: torch.Size([1, 768, 196])\n</code></pre></p> <p></p> <p>\u6b21\u5143\u3092\u518d\u914d\u7f6e\u3057\u3066\u6700\u7d42\u7684\u306a\u5f62\u72b6\u306b\u3057\u307e\u3057\u3087\u3046\uff1a</p> <pre><code># \u5e73\u5766\u5316\u3055\u308c\u305f\u753b\u50cf\u30d1\u30c3\u30c1\u57cb\u3081\u8fbc\u307f\u3092\u6b63\u3057\u3044\u5f62\u72b6\u306b\u53d6\u5f97\nimage_out_of_conv_flattened_reshaped = image_out_of_conv_flattened.permute(0, 2, 1) # [batch_size, P^2\u2022C, N] -&gt; [batch_size, N, P^2\u2022C]\nprint(f\"\u30d1\u30c3\u30c1\u57cb\u3081\u8fbc\u307f\u30b7\u30fc\u30b1\u30f3\u30b9\u5f62\u72b6: {image_out_of_conv_flattened_reshaped.shape} -&gt; [batch_size, num_patches, embedding_size]\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>\u30d1\u30c3\u30c1\u57cb\u3081\u8fbc\u307f\u30b7\u30fc\u30b1\u30f3\u30b9\u5f62\u72b6: torch.Size([1, 196, 768]) -&gt; [batch_size, num_patches, embedding_size]\n</code></pre></p>","tags":["PyTorch","Vision Transformer","ViT","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u8ad6\u6587\u5b9f\u88c5","\u6df1\u5c64\u5b66\u7fd2"]},{"location":"PyTorch/09_pytorch_paper_replicating/#45-vitpytorch","title":"4.5 ViT\u30d1\u30c3\u30c1\u57cb\u3081\u8fbc\u307f\u5c64\u3092PyTorch\u30e2\u30b8\u30e5\u30fc\u30eb\u306b\u5909\u63db","text":"<p>\u30d1\u30c3\u30c1\u57cb\u3081\u8fbc\u307f\u306e\u3059\u3079\u3066\u306e\u4f5c\u696d\u3092\u5358\u4e00\u306ePyTorch\u30ec\u30a4\u30e4\u30fc\u306b\u307e\u3068\u3081\u307e\u3057\u3087\u3046\uff1a</p> <pre><code># 1. nn.Module\u3092\u30b5\u30d6\u30af\u30e9\u30b9\u5316\u3059\u308b\u30af\u30e9\u30b9\u3092\u4f5c\u6210\nclass PatchEmbedding(nn.Module):\n    \"\"\"2D\u5165\u529b\u753b\u50cf\u30921D\u5b66\u7fd2\u53ef\u80fd\u57cb\u3081\u8fbc\u307f\u30d9\u30af\u30c8\u30eb\u30b7\u30fc\u30b1\u30f3\u30b9\u306b\u5909\u63db\u3057\u307e\u3059\u3002\n\n    Args:\n        in_channels (int): \u5165\u529b\u753b\u50cf\u306e\u30ab\u30e9\u30fc\u30c1\u30e3\u30f3\u30cd\u30eb\u6570\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u306f3\u3002\n        patch_size (int): \u5165\u529b\u753b\u50cf\u3092\u5909\u63db\u3059\u308b\u30d1\u30c3\u30c1\u306e\u30b5\u30a4\u30ba\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u306f16\u3002\n        embedding_dim (int): \u753b\u50cf\u3092\u5909\u63db\u3059\u308b\u57cb\u3081\u8fbc\u307f\u306e\u30b5\u30a4\u30ba\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u306f768\u3002\n    \"\"\"\n    # 2. \u9069\u5207\u306a\u5909\u6570\u3067\u30af\u30e9\u30b9\u3092\u521d\u671f\u5316\n    def __init__(self,\n                 in_channels:int=3,\n                 patch_size:int=16,\n                 embedding_dim:int=768):\n        super().__init__()\n\n        # 3. \u753b\u50cf\u3092\u30d1\u30c3\u30c1\u306b\u5909\u63db\u3059\u308b\u5c64\u3092\u4f5c\u6210\n        self.patcher = nn.Conv2d(in_channels=in_channels,\n                                 out_channels=embedding_dim,\n                                 kernel_size=patch_size,\n                                 stride=patch_size,\n                                 padding=0)\n\n        # 4. \u30d1\u30c3\u30c1\u7279\u5fb4\u30de\u30c3\u30d7\u3092\u5358\u4e00\u6b21\u5143\u306b\u5e73\u5766\u5316\u3059\u308b\u5c64\u3092\u4f5c\u6210\n        self.flatten = nn.Flatten(start_dim=2, # \u7279\u5fb4\u30de\u30c3\u30d7\u6b21\u5143\u306e\u307f\u3092\u5358\u4e00\u30d9\u30af\u30c8\u30eb\u306b\u5e73\u5766\u5316\n                                  end_dim=3)\n\n    # 5. forward\u30e1\u30bd\u30c3\u30c9\u3092\u5b9a\u7fa9\n    def forward(self, x):\n        # \u5165\u529b\u304c\u6b63\u3057\u3044\u5f62\u72b6\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u6210\n        image_resolution = x.shape[-1]\n        assert image_resolution % patch_size == 0, f\"\u5165\u529b\u753b\u50cf\u30b5\u30a4\u30ba\u306f\u30d1\u30c3\u30c1\u30b5\u30a4\u30ba\u3067\u5272\u308a\u5207\u308c\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u753b\u50cf\u5f62\u72b6: {image_resolution}\u3001\u30d1\u30c3\u30c1\u30b5\u30a4\u30ba: {patch_size}\"\n\n        # \u30d5\u30a9\u30ef\u30fc\u30c9\u30d1\u30b9\u3092\u5b9f\u884c\n        x_patched = self.patcher(x)\n        x_flattened = self.flatten(x_patched)\n        # 6. \u51fa\u529b\u5f62\u72b6\u304c\u6b63\u3057\u3044\u9806\u5e8f\u306b\u306a\u308b\u3088\u3046\u306b\u3059\u308b\n        return x_flattened.permute(0, 2, 1) # \u57cb\u3081\u8fbc\u307f\u304c\u6700\u5f8c\u306e\u6b21\u5143\u306b\u306a\u308b\u3088\u3046\u306b\u8abf\u6574\n</code></pre> <p><code>PatchEmbedding</code>\u5c64\u3092\u4f5c\u6210\u3067\u304d\u307e\u3057\u305f\uff01\u5358\u4e00\u753b\u50cf\u3067\u8a66\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff1a</p> <pre><code>set_seeds()\n\n# \u30d1\u30c3\u30c1\u57cb\u3081\u8fbc\u307f\u5c64\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\npatchify = PatchEmbedding(in_channels=3,\n                          patch_size=16,\n                          embedding_dim=768)\n\n# \u5358\u4e00\u753b\u50cf\u3092\u901a\u3059\nprint(f\"\u5165\u529b\u753b\u50cf\u5f62\u72b6: {image.unsqueeze(0).shape}\")\npatch_embedded_image = patchify(image.unsqueeze(0)) # \u30a8\u30e9\u30fc\u3092\u907f\u3051\u308b\u305f\u30810\u756a\u76ee\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306b\u8ffd\u52a0\u306e\u30d0\u30c3\u30c1\u6b21\u5143\u3092\u8ffd\u52a0\nprint(f\"\u51fa\u529b\u30d1\u30c3\u30c1\u57cb\u3081\u8fbc\u307f\u5f62\u72b6: {patch_embedded_image.shape}\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>\u5165\u529b\u753b\u50cf\u5f62\u72b6: torch.Size([1, 3, 224, 224])\n\u51fa\u529b\u30d1\u30c3\u30c1\u57cb\u3081\u8fbc\u307f\u5f62\u72b6: torch.Size([1, 196, 768])\n</code></pre></p>","tags":["PyTorch","Vision Transformer","ViT","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u8ad6\u6587\u5b9f\u88c5","\u6df1\u5c64\u5b66\u7fd2"]},{"location":"PyTorch/09_pytorch_paper_replicating/#46","title":"4.6 \u30af\u30e9\u30b9\u30c8\u30fc\u30af\u30f3\u57cb\u3081\u8fbc\u307f\u306e\u4f5c\u6210","text":"<p>\u30d1\u30c3\u30c1\u57cb\u3081\u8fbc\u307f\u3092\u4f5c\u6210\u3057\u305f\u306e\u3067\u3001\u6b21\u306f\u30af\u30e9\u30b9\u30c8\u30fc\u30af\u30f3\u57cb\u3081\u8fbc\u307f\u306b\u53d6\u308a\u7d44\u307f\u307e\u3057\u3087\u3046\u3002</p> <p>ViT\u8ad6\u6587\u306e3.1\u7bc0\u306e\u7b2c2\u6bb5\u843d\u3092\u8aad\u3080\u3068\uff1a</p> <p>BERT\u306e<code>[ class ]</code>\u30c8\u30fc\u30af\u30f3\u3068\u540c\u69d8\u306b\u3001\u57cb\u3081\u8fbc\u307e\u308c\u305f\u30d1\u30c3\u30c1\u306e\u30b7\u30fc\u30b1\u30f3\u30b9\u306b\u5b66\u7fd2\u53ef\u80fd\u306a\u57cb\u3081\u8fbc\u307f\u3092\u524d\u306b\u4ed8\u3051\u52a0\u3048\u307e\u3059\u3002</p> <p>\u30d1\u30c3\u30c1\u57cb\u3081\u8fbc\u307f\u30b7\u30fc\u30b1\u30f3\u30b9\u3092\u78ba\u8a8d\u3057\u307e\u3057\u3087\u3046\uff1a</p> <pre><code># \u30d1\u30c3\u30c1\u57cb\u3081\u8fbc\u307f\u3068\u30d1\u30c3\u30c1\u57cb\u3081\u8fbc\u307f\u5f62\u72b6\u3092\u8868\u793a\nprint(patch_embedded_image)\nprint(f\"\u30d1\u30c3\u30c1\u57cb\u3081\u8fbc\u307f\u5f62\u72b6: {patch_embedded_image.shape} -&gt; [batch_size, number_of_patches, embedding_dimension]\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>tensor([[[-0.9698,  0.2378, -0.2770,  ...,  0.7685, -0.4388,  0.3720],\n         [-0.9932,  0.2355, -0.2763,  ...,  0.7275, -0.4185,  0.3424],\n         ...\n         [-0.6786,  0.2779, -0.0972,  ...,  0.5548, -0.1956, -0.0277]]],\n       grad_fn=&lt;PermuteBackward0&gt;)\n\u30d1\u30c3\u30c1\u57cb\u3081\u8fbc\u307f\u5f62\u72b6: torch.Size([1, 196, 768]) -&gt; [batch_size, number_of_patches, embedding_dimension]\n</code></pre></p> <p>\u30af\u30e9\u30b9\u30c8\u30fc\u30af\u30f3\u306e\u5b66\u7fd2\u53ef\u80fd\u306a\u57cb\u3081\u8fbc\u307f\u3092\u4f5c\u6210\u3057\u307e\u3057\u3087\u3046\uff1a</p> <pre><code># \u30d0\u30c3\u30c1\u30b5\u30a4\u30ba\u3068\u57cb\u3081\u8fbc\u307f\u6b21\u5143\u3092\u53d6\u5f97\nbatch_size = patch_embedded_image.shape[0]\nembedding_dimension = patch_embedded_image.shape[-1]\n\n# \u57cb\u3081\u8fbc\u307f\u6b21\u5143\u3068\u540c\u3058\u30b5\u30a4\u30ba\u3092\u5171\u6709\u3059\u308b\u5b66\u7fd2\u53ef\u80fd\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u3057\u3066\u30af\u30e9\u30b9\u30c8\u30fc\u30af\u30f3\u57cb\u3081\u8fbc\u307f\u3092\u4f5c\u6210\nclass_token = nn.Parameter(torch.ones(batch_size, 1, embedding_dimension), # [batch_size, number_of_tokens, embedding_dimension]\n                           requires_grad=True) # \u57cb\u3081\u8fbc\u307f\u304c\u5b66\u7fd2\u53ef\u80fd\u3067\u3042\u308b\u3053\u3068\u3092\u78ba\u8a8d\n\n# class_token\u306e\u6700\u521d\u306e10\u4f8b\u3092\u8868\u793a\nprint(class_token[:, :, :10])\n\n# class_token\u5f62\u72b6\u3092\u51fa\u529b\nprint(f\"\u30af\u30e9\u30b9\u30c8\u30fc\u30af\u30f3\u5f62\u72b6: {class_token.shape} -&gt; [batch_size, number_of_tokens, embedding_dimension]\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>tensor([[[1., 1., 1., 1., 1., 1., 1., 1., 1., 1.]]], grad_fn=&lt;SliceBackward0&gt;)\n\u30af\u30e9\u30b9\u30c8\u30fc\u30af\u30f3\u5f62\u72b6: torch.Size([1, 1, 768]) -&gt; [batch_size, number_of_tokens, embedding_dimension]\n</code></pre></p> <p>\u30af\u30e9\u30b9\u30c8\u30fc\u30af\u30f3\u57cb\u3081\u8fbc\u307f\u3092\u30d1\u30c3\u30c1\u57cb\u3081\u8fbc\u307f\u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u524d\u306b\u8ffd\u52a0\u3057\u307e\u3057\u3087\u3046\uff1a</p> <pre><code># \u30af\u30e9\u30b9\u30c8\u30fc\u30af\u30f3\u57cb\u3081\u8fbc\u307f\u3092\u30d1\u30c3\u30c1\u57cb\u3081\u8fbc\u307f\u306e\u524d\u9762\u306b\u8ffd\u52a0\npatch_embedded_image_with_class_embedding = torch.cat((class_token, patch_embedded_image),\n                                                      dim=1) # \u6700\u521d\u306e\u6b21\u5143\u3067\u9023\u7d50\n\nprint(f\"\u30af\u30e9\u30b9\u30c8\u30fc\u30af\u30f3\u304c\u524d\u306b\u4ed8\u3051\u3089\u308c\u305f\u30d1\u30c3\u30c1\u57cb\u3081\u8fbc\u307f\u306e\u30b7\u30fc\u30b1\u30f3\u30b9\u5f62\u72b6: {patch_embedded_image_with_class_embedding.shape}\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>\u30af\u30e9\u30b9\u30c8\u30fc\u30af\u30f3\u304c\u524d\u306b\u4ed8\u3051\u3089\u308c\u305f\u30d1\u30c3\u30c1\u57cb\u3081\u8fbc\u307f\u306e\u30b7\u30fc\u30b1\u30f3\u30b9\u5f62\u72b6: torch.Size([1, 197, 768])\n</code></pre></p>","tags":["PyTorch","Vision Transformer","ViT","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u8ad6\u6587\u5b9f\u88c5","\u6df1\u5c64\u5b66\u7fd2"]},{"location":"PyTorch/09_pytorch_paper_replicating/#47","title":"4.7 \u4f4d\u7f6e\u57cb\u3081\u8fbc\u307f\u306e\u4f5c\u6210","text":"<p>\u30af\u30e9\u30b9\u30c8\u30fc\u30af\u30f3\u57cb\u3081\u8fbc\u307f\u3068\u30d1\u30c3\u30c1\u57cb\u3081\u8fbc\u307f\u304c\u3067\u304d\u305f\u306e\u3067\u3001\u4f4d\u7f6e\u57cb\u3081\u8fbc\u307f\u3092\u4f5c\u6210\u3057\u307e\u3057\u3087\u3046\u3002</p> <p>ViT\u8ad6\u6587\u306e3.1\u7bc0\u3088\u308a\uff1a</p> <p>\u4f4d\u7f6e\u57cb\u3081\u8fbc\u307f\u306f\u3001\u4f4d\u7f6e\u60c5\u5831\u3092\u4fdd\u6301\u3059\u308b\u305f\u3081\u306b\u30d1\u30c3\u30c1\u57cb\u3081\u8fbc\u307f\u306b\u8ffd\u52a0\u3055\u308c\u307e\u3059\u3002\u6a19\u6e96\u7684\u306a\u5b66\u7fd2\u53ef\u80fd\u306a1D\u4f4d\u7f6e\u57cb\u3081\u8fbc\u307f\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002</p> <p>\u5b66\u7fd2\u53ef\u80fd\u306a1D\u4f4d\u7f6e\u57cb\u3081\u8fbc\u307f\u3092\u4f5c\u6210\u3057\u307e\u3057\u3087\u3046\uff1a</p> <pre><code># N\uff08\u30d1\u30c3\u30c1\u6570\uff09\u3092\u8a08\u7b97\nnumber_of_patches = int((height * width) / patch_size**2)\n\n# \u57cb\u3081\u8fbc\u307f\u6b21\u5143\u3092\u53d6\u5f97\nembedding_dimension = patch_embedded_image_with_class_embedding.shape[2]\n\n# \u5b66\u7fd2\u53ef\u80fd\u306a1D\u4f4d\u7f6e\u57cb\u3081\u8fbc\u307f\u3092\u4f5c\u6210\nposition_embedding = nn.Parameter(torch.ones(1,\n                                             number_of_patches+1,\n                                             embedding_dimension),\n                                  requires_grad=True) # \u5b66\u7fd2\u53ef\u80fd\u3067\u3042\u308b\u3053\u3068\u3092\u78ba\u8a8d\n\nprint(f\"\u4f4d\u7f6e\u57cb\u3081\u8fbc\u307f\u5f62\u72b6: {position_embedding.shape} -&gt; [batch_size, number_of_patches, embedding_dimension]\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>\u4f4d\u7f6e\u57cb\u3081\u8fbc\u307f\u5f62\u72b6: torch.Size([1, 197, 768]) -&gt; [batch_size, number_of_patches, embedding_dimension]\n</code></pre></p> <p>\u4f4d\u7f6e\u57cb\u3081\u8fbc\u307f\u3092\u30af\u30e9\u30b9\u30c8\u30fc\u30af\u30f3\u304c\u524d\u306b\u4ed8\u3051\u3089\u308c\u305f\u30d1\u30c3\u30c1\u57cb\u3081\u8fbc\u307f\u30b7\u30fc\u30b1\u30f3\u30b9\u306b\u8ffd\u52a0\u3057\u307e\u3057\u3087\u3046\uff1a</p> <pre><code># \u4f4d\u7f6e\u57cb\u3081\u8fbc\u307f\u3092\u30d1\u30c3\u30c1\u304a\u3088\u3073\u30af\u30e9\u30b9\u30c8\u30fc\u30af\u30f3\u57cb\u3081\u8fbc\u307f\u306b\u8ffd\u52a0\npatch_and_position_embedding = patch_embedded_image_with_class_embedding + position_embedding\nprint(f\"\u30d1\u30c3\u30c1\u57cb\u3081\u8fbc\u307f\u3001\u30af\u30e9\u30b9\u30c8\u30fc\u30af\u30f3\u524d\u4ed8\u3051\u3001\u4f4d\u7f6e\u57cb\u3081\u8fbc\u307f\u8ffd\u52a0\u306e\u5f62\u72b6: {patch_and_position_embedding.shape}\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>\u30d1\u30c3\u30c1\u57cb\u3081\u8fbc\u307f\u3001\u30af\u30e9\u30b9\u30c8\u30fc\u30af\u30f3\u524d\u4ed8\u3051\u3001\u4f4d\u7f6e\u57cb\u3081\u8fbc\u307f\u8ffd\u52a0\u306e\u5f62\u72b6: torch.Size([1, 197, 768])\n</code></pre></p>","tags":["PyTorch","Vision Transformer","ViT","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u8ad6\u6587\u5b9f\u88c5","\u6df1\u5c64\u5b66\u7fd2"]},{"location":"PyTorch/09_pytorch_paper_replicating/#48","title":"4.8 \u3059\u3079\u3066\u3092\u307e\u3068\u3081\u308b\uff1a\u753b\u50cf\u304b\u3089\u57cb\u3081\u8fbc\u307f\u3078","text":"<p>ViT\u8ad6\u6587\u306e\u6570\u5f0f1\u3092\u8907\u88fd\u3059\u308b\u305f\u3081\u3001\u3059\u3079\u3066\u3092\u5358\u4e00\u306e\u30b3\u30fc\u30c9\u30bb\u30eb\u306b\u307e\u3068\u3081\u307e\u3057\u3087\u3046\uff1a</p> <pre><code>set_seeds()\n\n# 1. \u30d1\u30c3\u30c1\u30b5\u30a4\u30ba\u3092\u8a2d\u5b9a\npatch_size = 16\n\n# 2. \u5143\u753b\u50cf\u30c6\u30f3\u30bd\u30eb\u5f62\u72b6\u3092\u51fa\u529b\u3057\u3001\u753b\u50cf\u6b21\u5143\u3092\u53d6\u5f97\nprint(f\"\u753b\u50cf\u30c6\u30f3\u30bd\u30eb\u5f62\u72b6: {image.shape}\")\nheight, width = image.shape[1], image.shape[2]\n\n# 3. \u753b\u50cf\u30c6\u30f3\u30bd\u30eb\u3092\u53d6\u5f97\u3057\u3066\u30d0\u30c3\u30c1\u6b21\u5143\u3092\u8ffd\u52a0\nx = image.unsqueeze(0)\nprint(f\"\u30d0\u30c3\u30c1\u6b21\u5143\u4ed8\u304d\u5165\u529b\u753b\u50cf\u5f62\u72b6: {x.shape}\")\n\n# 4. \u30d1\u30c3\u30c1\u57cb\u3081\u8fbc\u307f\u5c64\u3092\u4f5c\u6210\npatch_embedding_layer = PatchEmbedding(in_channels=3,\n                                       patch_size=patch_size,\n                                       embedding_dim=768)\n\n# 5. \u30d1\u30c3\u30c1\u57cb\u3081\u8fbc\u307f\u5c64\u3092\u901a\u3057\u3066\u753b\u50cf\u3092\u6e21\u3059\npatch_embedding = patch_embedding_layer(x)\nprint(f\"\u30d1\u30c3\u30c1\u5316\u57cb\u3081\u8fbc\u307f\u5f62\u72b6: {patch_embedding.shape}\")\n\n# 6. \u30af\u30e9\u30b9\u30c8\u30fc\u30af\u30f3\u57cb\u3081\u8fbc\u307f\u3092\u4f5c\u6210\nbatch_size = patch_embedding.shape[0]\nembedding_dimension = patch_embedding.shape[-1]\nclass_token = nn.Parameter(torch.ones(batch_size, 1, embedding_dimension),\n                           requires_grad=True) # \u5b66\u7fd2\u53ef\u80fd\u3067\u3042\u308b\u3053\u3068\u3092\u78ba\u8a8d\nprint(f\"\u30af\u30e9\u30b9\u30c8\u30fc\u30af\u30f3\u57cb\u3081\u8fbc\u307f\u5f62\u72b6: {class_token.shape}\")\n\n# 7. \u30af\u30e9\u30b9\u30c8\u30fc\u30af\u30f3\u57cb\u3081\u8fbc\u307f\u3092\u30d1\u30c3\u30c1\u57cb\u3081\u8fbc\u307f\u306e\u524d\u306b\u8ffd\u52a0\npatch_embedding_class_token = torch.cat((class_token, patch_embedding), dim=1)\nprint(f\"\u30af\u30e9\u30b9\u30c8\u30fc\u30af\u30f3\u4ed8\u304d\u30d1\u30c3\u30c1\u57cb\u3081\u8fbc\u307f\u5f62\u72b6: {patch_embedding_class_token.shape}\")\n\n# 8. \u4f4d\u7f6e\u57cb\u3081\u8fbc\u307f\u3092\u4f5c\u6210\nnumber_of_patches = int((height * width) / patch_size**2)\nposition_embedding = nn.Parameter(torch.ones(1, number_of_patches+1, embedding_dimension),\n                                  requires_grad=True) # \u5b66\u7fd2\u53ef\u80fd\u3067\u3042\u308b\u3053\u3068\u3092\u78ba\u8a8d\n\n# 9. \u4f4d\u7f6e\u57cb\u3081\u8fbc\u307f\u3092\u30af\u30e9\u30b9\u30c8\u30fc\u30af\u30f3\u4ed8\u304d\u30d1\u30c3\u30c1\u57cb\u3081\u8fbc\u307f\u306b\u8ffd\u52a0\npatch_and_position_embedding = patch_embedding_class_token + position_embedding\nprint(f\"\u30d1\u30c3\u30c1\u3068\u4f4d\u7f6e\u57cb\u3081\u8fbc\u307f\u5f62\u72b6: {patch_and_position_embedding.shape}\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>\u753b\u50cf\u30c6\u30f3\u30bd\u30eb\u5f62\u72b6: torch.Size([3, 224, 224])\n\u30d0\u30c3\u30c1\u6b21\u5143\u4ed8\u304d\u5165\u529b\u753b\u50cf\u5f62\u72b6: torch.Size([1, 3, 224, 224])\n\u30d1\u30c3\u30c1\u5316\u57cb\u3081\u8fbc\u307f\u5f62\u72b6: torch.Size([1, 196, 768])\n\u30af\u30e9\u30b9\u30c8\u30fc\u30af\u30f3\u57cb\u3081\u8fbc\u307f\u5f62\u72b6: torch.Size([1, 1, 768])\n\u30af\u30e9\u30b9\u30c8\u30fc\u30af\u30f3\u4ed8\u304d\u30d1\u30c3\u30c1\u57cb\u3081\u8fbc\u307f\u5f62\u72b6: torch.Size([1, 197, 768])\n\u30d1\u30c3\u30c1\u3068\u4f4d\u7f6e\u57cb\u3081\u8fbc\u307f\u5f62\u72b6: torch.Size([1, 197, 768])\n</code></pre></p> <p>\u7d20\u6674\u3089\u3057\u3044\uff01\u5358\u4e00\u306e\u753b\u50cf\u304b\u3089\u5358\u4e00\u306e\u30b3\u30fc\u30c9\u30bb\u30eb\u3067\u30d1\u30c3\u30c1\u3068\u4f4d\u7f6e\u57cb\u3081\u8fbc\u307f\u307e\u3067\u5909\u63db\u3067\u304d\u307e\u3057\u305f\u3002</p> <p></p> <p>ViT\u8ad6\u6587\u306e\u6570\u5f0f1\u3092PyTorch\u30b3\u30fc\u30c9\u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3002\u3053\u308c\u304c\u8ad6\u6587\u518d\u73fe\u5b9f\u88c5\u306e\u672c\u8cea\u3067\u3001\u7814\u7a76\u8ad6\u6587\u3092\u5b9f\u7528\u7684\u306a\u30b3\u30fc\u30c9\u306b\u5909\u63db\u3059\u308b\u3053\u3068\u3067\u3059\u3002</p> <p>\u3053\u308c\u3067\u753b\u50cf\u3092\u30a8\u30f3\u30b3\u30fc\u30c9\u3057\u3001ViT\u8ad6\u6587\u306eFigure 1\u306eTransformer Encoder\u306b\u6e21\u3059\u65b9\u6cd5\u304c\u3067\u304d\u307e\u3057\u305f\u3002</p>","tags":["PyTorch","Vision Transformer","ViT","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u8ad6\u6587\u5b9f\u88c5","\u6df1\u5c64\u5b66\u7fd2"]},{"location":"PyTorch/09_pytorch_paper_replicating/#5-2msa","title":"5. \u6570\u5f0f2\u306e\u5b9f\u88c5\uff1a\u30de\u30eb\u30c1\u30d8\u30c3\u30c9\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\uff08MSA\uff09","text":"<p>\u5165\u529b\u30c7\u30fc\u30bf\u306e\u30d1\u30c3\u30c1\u5316\u3068\u57cb\u3081\u8fbc\u307f\u304c\u3067\u304d\u305f\u306e\u3067\u3001ViT\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306e\u6b21\u306e\u90e8\u5206\u306b\u79fb\u308a\u307e\u3057\u3087\u3046\u3002</p> <p>\u307e\u305a\u3001Transformer Encoder\u30bb\u30af\u30b7\u30e7\u30f3\u30922\u3064\u306e\u90e8\u5206\u306b\u5206\u89e3\u3057\u307e\u3059\uff08\u5c0f\u3055\u304f\u59cb\u3081\u3066\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u5897\u3084\u3057\u307e\u3059\uff09\u3002</p> <p>\u6700\u521d\u304c\u6570\u5f0f2\u3001\u6b21\u304c\u6570\u5f0f3\u3067\u3059\u3002</p> <p>\u6570\u5f0f2\u3092\u601d\u3044\u51fa\u3057\u3066\u304f\u3060\u3055\u3044\uff1a</p> \\[ \\mathbf{z}_{\\ell}^{\\prime} =\\operatorname{MSA}\\left(\\operatorname{LN}\\left(\\mathbf{z}_{\\ell-1}\\right)\\right)+\\mathbf{z}_{\\ell-1}, \\quad \\ell=1 \\ldots L \\] <p>\u3053\u308c\u306f\u3001LayerNorm\uff08LN\uff09\u5c64\u3067\u30e9\u30c3\u30d7\u3055\u308c\u305fMulti-Head Attention\uff08MSA\uff09\u5c64\u3068\u6b8b\u5dee\u63a5\u7d9a\uff08\u5c64\u3078\u306e\u5165\u529b\u304c\u5c64\u306e\u51fa\u529b\u306b\u8ffd\u52a0\u3055\u308c\u308b\uff09\u3092\u793a\u3057\u3066\u3044\u307e\u3059\u3002</p> <p>\u6570\u5f0f2\u3092\u300cMSA\u30d6\u30ed\u30c3\u30af\u300d\u3068\u547c\u3073\u307e\u3059\u3002</p> <p></p> <p>\u5de6\uff1aViT\u8ad6\u6587\u306eFigure 1\u3067\u3001Transformer Encoder\u30d6\u30ed\u30c3\u30af\u5185\u306eMulti-Head Attention\u3068Norm\u5c64\u3001\u304a\u3088\u3073\u6b8b\u5dee\u63a5\u7d9a\uff08+\uff09\u304c\u30cf\u30a4\u30e9\u30a4\u30c8\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u53f3\uff1aMulti-Head Self Attention\uff08MSA\uff09\u5c64\u3001Norm\u5c64\u3001\u6b8b\u5dee\u63a5\u7d9a\u3092ViT\u8ad6\u6587\u306e\u6570\u5f0f2\u306e\u5404\u90e8\u5206\u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3002</p>","tags":["PyTorch","Vision Transformer","ViT","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u8ad6\u6587\u5b9f\u88c5","\u6df1\u5c64\u5b66\u7fd2"]},{"location":"PyTorch/09_pytorch_paper_replicating/#51-layernormln","title":"5.1 LayerNorm\uff08LN\uff09\u5c64","text":"<p>Layer Normalization\uff08<code>torch.nn.LayerNorm()</code>\uff09\u306f\u3001\u6700\u5f8c\u306e\u6b21\u5143\u306b\u308f\u305f\u3063\u3066\u5165\u529b\u3092\u6b63\u898f\u5316\u3057\u307e\u3059\u3002</p> <p>PyTorch\u306e<code>torch.nn.LayerNorm()</code>\u306e\u4e3b\u8981\u30d1\u30e9\u30e1\u30fc\u30bf\u306f<code>normalized_shape</code>\u3067\u3001\u3053\u308c\u3092\u6b63\u898f\u5316\u3057\u305f\u3044\u6b21\u5143\u30b5\u30a4\u30ba\u3068\u7b49\u3057\u304f\u8a2d\u5b9a\u3067\u304d\u307e\u3059\uff08\u6211\u3005\u306e\u5834\u5408\u306fViT-Base\u3067\\(D\\)\u307e\u305f\u306f<code>768</code>\uff09\u3002</p>","tags":["PyTorch","Vision Transformer","ViT","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u8ad6\u6587\u5b9f\u88c5","\u6df1\u5c64\u5b66\u7fd2"]},{"location":"PyTorch/09_pytorch_paper_replicating/#52-msa","title":"5.2 \u30de\u30eb\u30c1\u30d8\u30c3\u30c9\u81ea\u5df1\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\uff08MSA\uff09\u5c64","text":"<p>\u81ea\u5df1\u6ce8\u610f\u3068\u30de\u30eb\u30c1\u30d8\u30c3\u30c9\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\uff08\u81ea\u5df1\u6ce8\u610f\u3092\u8907\u6570\u56de\u9069\u7528\uff09\u306e\u529b\u306f\u3001Attention is all you need\u7814\u7a76\u8ad6\u6587\u3067\u7d39\u4ecb\u3055\u308c\u305f\u5143\u306eTransformer\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306e\u5f62\u3067\u660e\u3089\u304b\u306b\u306a\u308a\u307e\u3057\u305f\u3002</p> <p>\u5143\u3005\u30c6\u30ad\u30b9\u30c8\u5165\u529b\u7528\u306b\u8a2d\u8a08\u3055\u308c\u305f\u5143\u306e\u81ea\u5df1\u6ce8\u610f\u30e1\u30ab\u30cb\u30ba\u30e0\u306f\u3001\u5358\u8a9e\u306e\u30b7\u30fc\u30b1\u30f3\u30b9\u3092\u53d7\u3051\u53d6\u308a\u3001\u3069\u306e\u5358\u8a9e\u304c\u4ed6\u306e\u5358\u8a9e\u306b\u3088\u308a\u591a\u304f\u306e\u300c\u6ce8\u610f\u300d\u3092\u6255\u3046\u3079\u304d\u304b\u3092\u8a08\u7b97\u3057\u307e\u3059\u3002</p> <p>\u753b\u50cf\u30d1\u30c3\u30c1\u306e\u30b7\u30fc\u30b1\u30f3\u30b9\u304c\u5165\u529b\u306a\u306e\u3067\u3001\u81ea\u5df1\u6ce8\u610f\u3068\u30de\u30eb\u30c1\u30d8\u30c3\u30c9\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u306f\u3001\u753b\u50cf\u306e\u3069\u306e\u30d1\u30c3\u30c1\u304c\u5225\u306e\u30d1\u30c3\u30c1\u3068\u6700\u3082\u95a2\u9023\u3057\u3066\u3044\u308b\u304b\u3092\u8a08\u7b97\u3057\u3001\u6700\u7d42\u7684\u306b\u753b\u50cf\u306e\u5b66\u7fd2\u3055\u308c\u305f\u8868\u73fe\u3092\u5f62\u6210\u3057\u307e\u3059\u3002</p>","tags":["PyTorch","Vision Transformer","ViT","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u8ad6\u6587\u5b9f\u88c5","\u6df1\u5c64\u5b66\u7fd2"]},{"location":"PyTorch/09_pytorch_paper_replicating/#53-pytorch2","title":"5.3 PyTorch\u5c64\u3067\u6570\u5f0f2\u3092\u8907\u88fd","text":"<p>\u6570\u5f0f2\u306eLayerNorm\uff08LN\uff09\u3068Multi-Head Attention\uff08MSA\uff09\u5c64\u306b\u3064\u3044\u3066\u8b70\u8ad6\u3057\u305f\u3053\u3068\u3092\u5b9f\u8df5\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff1a</p> <pre><code># 1. nn.Module\u3092\u7d99\u627f\u3059\u308b\u30af\u30e9\u30b9\u3092\u4f5c\u6210\nclass MultiheadSelfAttentionBlock(nn.Module):\n    \"\"\"\u30de\u30eb\u30c1\u30d8\u30c3\u30c9\u81ea\u5df1\u6ce8\u610f\u30d6\u30ed\u30c3\u30af\uff08\u300cMSA\u30d6\u30ed\u30c3\u30af\u300d\u306e\u7565\uff09\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n    \"\"\"\n    # 2. Table 1\u306e\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u30af\u30e9\u30b9\u3092\u521d\u671f\u5316\n    def __init__(self,\n                 embedding_dim:int=768, # Table 1\u306eViT-Base\u306eHidden size D\n                 num_heads:int=12, # Table 1\u306eViT-Base\u306eHeads\n                 attn_dropout:float=0): # \u8ad6\u6587\u3067\u306fMSABlocks\u3067\u30c9\u30ed\u30c3\u30d7\u30a2\u30a6\u30c8\u3092\u4f7f\u7528\u3057\u3066\u3044\u306a\u3044\u3088\u3046\u3067\u3059\n        super().__init__()\n\n        # 3. Norm\u5c64\uff08LN\uff09\u3092\u4f5c\u6210\n        self.layer_norm = nn.LayerNorm(normalized_shape=embedding_dim)\n\n        # 4. Multi-Head Attention\uff08MSA\uff09\u5c64\u3092\u4f5c\u6210\n        self.multihead_attn = nn.MultiheadAttention(embed_dim=embedding_dim,\n                                                    num_heads=num_heads,\n                                                    dropout=attn_dropout,\n                                                    batch_first=True) # \u30d0\u30c3\u30c1\u6b21\u5143\u304c\u6700\u521d\u306b\u6765\u308b\u304b\uff1f\n\n    # 5. \u30c7\u30fc\u30bf\u3092\u5c64\u306b\u901a\u3059forward()\u30e1\u30bd\u30c3\u30c9\u3092\u4f5c\u6210\n    def forward(self, x):\n        x = self.layer_norm(x)\n        attn_output, _ = self.multihead_attn(query=x, # \u30af\u30a8\u30ea\u57cb\u3081\u8fbc\u307f\n                                             key=x, # \u30ad\u30fc\u57cb\u3081\u8fbc\u307f\n                                             value=x, # \u30d0\u30ea\u30e5\u30fc\u57cb\u3081\u8fbc\u307f\n                                             need_weights=False) # \u91cd\u307f\u304c\u5fc5\u8981\u304b\u3001\u5c64\u306e\u51fa\u529b\u3060\u3051\u304b\uff1f\n        return attn_output\n</code></pre> <p>MSABlock\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\uff01<code>MultiheadSelfAttentionBlock</code>\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\u3057\u3001\u30bb\u30af\u30b7\u30e7\u30f34.8\u3067\u4f5c\u6210\u3057\u305f<code>patch_and_position_embedding</code>\u5909\u6570\u3092\u901a\u3057\u3066\u30c6\u30b9\u30c8\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff1a</p> <pre><code># MSABlock\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\nmultihead_self_attention_block = MultiheadSelfAttentionBlock(embedding_dim=768, # Table 1\u3088\u308a\n                                                             num_heads=12) # Table 1\u3088\u308a\n\n# \u30d1\u30c3\u30c1\u3068\u4f4d\u7f6e\u753b\u50cf\u57cb\u3081\u8fbc\u307f\u3092MSABlock\u306b\u901a\u3059\npatched_image_through_msa_block = multihead_self_attention_block(patch_and_position_embedding)\nprint(f\"MSA\u30d6\u30ed\u30c3\u30af\u306e\u5165\u529b\u5f62\u72b6: {patch_and_position_embedding.shape}\")\nprint(f\"MSA\u30d6\u30ed\u30c3\u30af\u306e\u51fa\u529b\u5f62\u72b6: {patched_image_through_msa_block.shape}\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>MSA\u30d6\u30ed\u30c3\u30af\u306e\u5165\u529b\u5f62\u72b6: torch.Size([1, 197, 768])\nMSA\u30d6\u30ed\u30c3\u30af\u306e\u51fa\u529b\u5f62\u72b6: torch.Size([1, 197, 768])\n</code></pre></p> <p></p> <p>\u5de6\uff1aMulti-Head Attention\u3068LayerNorm\u5c64\u304c\u30cf\u30a4\u30e9\u30a4\u30c8\u3055\u308c\u305fViT\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3002\u3053\u308c\u3089\u306e\u5c64\u304c\u8ad6\u6587\u306e3.1\u7bc0\u306e\u6570\u5f0f2\u3092\u69cb\u6210\u3057\u307e\u3059\u3002\u53f3\uff1aPyTorch\u5c64\u3092\u4f7f\u7528\u3057\u305f\u6570\u5f0f2\u306e\u8907\u88fd\uff08\u6700\u5f8c\u306e\u30b9\u30ad\u30c3\u30d7\u63a5\u7d9a\u3092\u9664\u304f\uff09\u3002</p> <p>\u6570\u5f0f2\u3092\u6b63\u5f0f\u306b\u8907\u88fd\u3057\u307e\u3057\u305f\uff08\u6700\u5f8c\u306e\u6b8b\u5dee\u63a5\u7d9a\u3092\u9664\u304d\u307e\u3059\u304c\u3001\u30bb\u30af\u30b7\u30e7\u30f37.1\u3067\u53d6\u308a\u4e0a\u3052\u307e\u3059\uff09\uff01</p>","tags":["PyTorch","Vision Transformer","ViT","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u8ad6\u6587\u5b9f\u88c5","\u6df1\u5c64\u5b66\u7fd2"]},{"location":"PyTorch/09_pytorch_paper_replicating/#6-3mlp","title":"6. \u6570\u5f0f3\u306e\u5b9f\u88c5\uff1a\u591a\u5c64\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3\uff08MLP\uff09","text":"<p>\u52e2\u3044\u306b\u4e57\u3063\u3066\u7d9a\u3051\u307e\u3057\u3087\u3046\uff01\u6570\u5f0f3\u3092\u8907\u88fd\u3057\u307e\u3059\uff1a</p> \\[ \\mathbf{z}_{\\ell} =\\operatorname{MLP}\\left(\\operatorname{LN}\\left(\\mathbf{z}_{\\ell}^{\\prime}\\right)\\right)+\\mathbf{z}_{\\ell}^{\\prime}, \\quad \\ell=1 \\ldots L \\] <p>\u3053\u3053\u3067MLP\u306f\u300cmultilayer perceptron\uff08\u591a\u5c64\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3\uff09\u300d\u3001LN\u306f\u300clayer normalization\u300d\u3092\u8868\u3057\u307e\u3059\u3002</p> <p>\u6700\u5f8c\u306e\u52a0\u7b97\u306f\u30b9\u30ad\u30c3\u30d7/\u6b8b\u5dee\u63a5\u7d9a\u3067\u3059\u3002</p> <p>\u6570\u5f0f3\u3092Transformer encoder\u306e\u300cMLP\u30d6\u30ed\u30c3\u30af\u300d\u3068\u547c\u3073\u307e\u3059\u3002</p> <p></p> <p>\u5de6\uff1aViT\u8ad6\u6587\u306eFigure 1\u3067\u3001Transformer Encoder\u30d6\u30ed\u30c3\u30af\u5185\u306eMLP\u3068Norm\u5c64\u3001\u304a\u3088\u3073\u6b8b\u5dee\u63a5\u7d9a\uff08+\uff09\u304c\u30cf\u30a4\u30e9\u30a4\u30c8\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u53f3\uff1a\u591a\u5c64\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3\uff08MLP\uff09\u5c64\u3001Norm\u5c64\uff08LN\uff09\u3001\u6b8b\u5dee\u63a5\u7d9a\u3092ViT\u8ad6\u6587\u306e\u6570\u5f0f3\u306e\u5404\u90e8\u5206\u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3002</p>","tags":["PyTorch","Vision Transformer","ViT","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u8ad6\u6587\u5b9f\u88c5","\u6df1\u5c64\u5b66\u7fd2"]},{"location":"PyTorch/09_pytorch_paper_replicating/#61-mlp","title":"6.1 MLP\u5c64","text":"<p>MLP\u3068\u3044\u3046\u7528\u8a9e\u306f\u3001\u307b\u307c\u4efb\u610f\u306e\u8907\u6570\u5c64\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u6307\u3059\u3053\u3068\u304c\u3067\u304d\u308b\u305f\u3081\u3001\u975e\u5e38\u306b\u5e83\u7bc4\u56f2\u3067\u3059\u3002</p> <p>\u3057\u304b\u3057\u3001\u4e00\u822c\u7684\u306b\u306f\u6b21\u306e\u30d1\u30bf\u30fc\u30f3\u306b\u5f93\u3044\u307e\u3059\uff1a</p> <p><code>\u7dda\u5f62\u5c64 -&gt; \u975e\u7dda\u5f62\u5c64 -&gt; \u7dda\u5f62\u5c64 -&gt; \u975e\u7dda\u5f62\u5c64</code></p> <p>ViT\u8ad6\u6587\u306e\u5834\u5408\u3001MLP\u69cb\u9020\u306f3.1\u7bc0\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\uff1a</p> <p>MLP\u306b\u306f\u3001GELU\u975e\u7dda\u5f62\u6027\u3092\u6301\u30642\u3064\u306e\u5c64\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002</p> <p>\u300c2\u3064\u306e\u5c64\u300d\u306f\u7dda\u5f62\u5c64\uff08PyTorch\u306e<code>torch.nn.Linear()</code>\uff09\u3092\u6307\u3057\u3001\u300cGELU\u975e\u7dda\u5f62\u6027\u300d\u306fGELU\uff08Gaussian Error Linear Units\uff09\u975e\u7dda\u5f62\u6d3b\u6027\u5316\u95a2\u6570\uff08PyTorch\u306e<code>torch.nn.GELU()</code>\uff09\u3067\u3059\u3002</p> <p>MLP\u30d6\u30ed\u30c3\u30af\u306b\u95a2\u3059\u308b\u3082\u3046\u4e00\u3064\u306e\u8a73\u7d30\u306f\u3001\u4ed8\u9332B.1\uff08Training\uff09\u307e\u3067\u73fe\u308c\u307e\u305b\u3093\uff1a</p> <p>\u30c9\u30ed\u30c3\u30d7\u30a2\u30a6\u30c8\u304c\u4f7f\u7528\u3055\u308c\u308b\u5834\u5408\u3001qkv-projection\u3068\u4f4d\u7f6e\u57cb\u3081\u8fbc\u307f\u3092\u30d1\u30c3\u30c1\u57cb\u3081\u8fbc\u307f\u306b\u76f4\u63a5\u8ffd\u52a0\u3057\u305f\u5f8c\u3092\u9664\u3044\u3066\u3001\u3059\u3079\u3066\u306e\u5bc6\u7d50\u5408\u5c64\u306e\u5f8c\u306b\u9069\u7528\u3055\u308c\u307e\u3059\u3002</p> <p>\u3053\u308c\u306f\u3001MLP\u30d6\u30ed\u30c3\u30af\u5185\u306e\u3059\u3079\u3066\u306e\u7dda\u5f62\u5c64\uff08\u307e\u305f\u306f\u5bc6\u7d50\u5408\u5c64\uff09\u306b\u30c9\u30ed\u30c3\u30d7\u30a2\u30a6\u30c8\u5c64\uff08PyTorch\u306e<code>torch.nn.Dropout()</code>\uff09\u304c\u3042\u308b\u3053\u3068\u3092\u610f\u5473\u3057\u307e\u3059\u3002</p>","tags":["PyTorch","Vision Transformer","ViT","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u8ad6\u6587\u5b9f\u88c5","\u6df1\u5c64\u5b66\u7fd2"]},{"location":"PyTorch/09_pytorch_paper_replicating/#62-pytorch3","title":"6.2 PyTorch\u5c64\u3067\u6570\u5f0f3\u3092\u8907\u88fd","text":"<p>\u6570\u5f0f3\u306eLayerNorm\uff08LN\uff09\u3068MLP\u5c64\u306b\u3064\u3044\u3066\u8b70\u8ad6\u3057\u305f\u3053\u3068\u3092\u5b9f\u8df5\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff1a</p> <pre><code># 1. nn.Module\u3092\u7d99\u627f\u3059\u308b\u30af\u30e9\u30b9\u3092\u4f5c\u6210\nclass MLPBlock(nn.Module):\n    \"\"\"\u5c64\u6b63\u898f\u5316\u591a\u5c64\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3\u30d6\u30ed\u30c3\u30af\uff08\u300cMLP\u30d6\u30ed\u30c3\u30af\u300d\u306e\u7565\uff09\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\"\"\"\n    # 2. Table 1\u3068Table 3\u306e\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u30af\u30e9\u30b9\u3092\u521d\u671f\u5316\n    def __init__(self,\n                 embedding_dim:int=768, # Table 1\u306eViT-Base\u306eHidden Size D\n                 mlp_size:int=3072, # Table 1\u306eViT-Base\u306eMLP size\n                 dropout:float=0.1): # Table 3\u306eViT-Base\u306eDropout\n        super().__init__()\n\n        # 3. Norm\u5c64\uff08LN\uff09\u3092\u4f5c\u6210\n        self.layer_norm = nn.LayerNorm(normalized_shape=embedding_dim)\n\n        # 4. Multilayer perceptron\uff08MLP\uff09\u5c64\u3092\u4f5c\u6210\n        self.mlp = nn.Sequential(\n            nn.Linear(in_features=embedding_dim,\n                      out_features=mlp_size),\n            nn.GELU(), # \"MLP\u306b\u306f\u3001GELU\u975e\u7dda\u5f62\u6027\u3092\u6301\u30642\u3064\u306e\u5c64\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\uff083.1\u7bc0\uff09\u3002\"\n            nn.Dropout(p=dropout),\n            nn.Linear(in_features=mlp_size, # \u4e0a\u306e\u5c64\u306eout_features\u3068\u540c\u3058in_features\u3092\u53d6\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\n                      out_features=embedding_dim), # embedding_dim\u306b\u623b\u3059\n            nn.Dropout(p=dropout) # \"\u30c9\u30ed\u30c3\u30d7\u30a2\u30a6\u30c8\u304c\u4f7f\u7528\u3055\u308c\u308b\u5834\u5408\u3001\u3059\u3079\u3066\u306e\u5bc6\u7d50\u5408\u5c64\u306e\u5f8c\u306b\u9069\u7528\u3055\u308c\u307e\u3059..\"\n        )\n\n    # 5. \u30c7\u30fc\u30bf\u3092\u5c64\u306b\u901a\u3059forward()\u30e1\u30bd\u30c3\u30c9\u3092\u4f5c\u6210\n    def forward(self, x):\n        x = self.layer_norm(x)\n        x = self.mlp(x)\n        return x\n</code></pre> <p>MLPBlock\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\uff01<code>MLPBlock</code>\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\u3057\u3001\u30bb\u30af\u30b7\u30e7\u30f35.3\u3067\u4f5c\u6210\u3057\u305f<code>patched_image_through_msa_block</code>\u5909\u6570\u3092\u901a\u3057\u3066\u30c6\u30b9\u30c8\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff1a</p> <pre><code># MLPBlock\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\nmlp_block = MLPBlock(embedding_dim=768, # Table 1\u3088\u308a\n                     mlp_size=3072, # Table 1\u3088\u308a\n                     dropout=0.1) # Table 3\u3088\u308a\n\n# MSABlock\u306e\u51fa\u529b\u3092MLPBlock\u306b\u901a\u3059\npatched_image_through_mlp_block = mlp_block(patched_image_through_msa_block)\nprint(f\"MLP\u30d6\u30ed\u30c3\u30af\u306e\u5165\u529b\u5f62\u72b6: {patched_image_through_msa_block.shape}\")\nprint(f\"MLP\u30d6\u30ed\u30c3\u30af\u306e\u51fa\u529b\u5f62\u72b6: {patched_image_through_mlp_block.shape}\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>MLP\u30d6\u30ed\u30c3\u30af\u306e\u5165\u529b\u5f62\u72b6: torch.Size([1, 197, 768])\nMLP\u30d6\u30ed\u30c3\u30af\u306e\u51fa\u529b\u5f62\u72b6: torch.Size([1, 197, 768])\n</code></pre></p> <p></p> <p>\u5de6\uff1aMLP\u3068Norm\u5c64\u304c\u30cf\u30a4\u30e9\u30a4\u30c8\u3055\u308c\u305fViT\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3002\u3053\u308c\u3089\u306e\u5c64\u304c\u8ad6\u6587\u306e3.1\u7bc0\u306e\u6570\u5f0f3\u3092\u69cb\u6210\u3057\u307e\u3059\u3002\u53f3\uff1aPyTorch\u5c64\u3092\u4f7f\u7528\u3057\u305f\u6570\u5f0f3\u306e\u8907\u88fd\uff08\u6700\u5f8c\u306e\u30b9\u30ad\u30c3\u30d7\u63a5\u7d9a\u3092\u9664\u304f\uff09\u3002</p> <p>\u6570\u5f0f3\u3092\u8907\u88fd\u3057\u307e\u3057\u305f\uff08\u6700\u5f8c\u306e\u6b8b\u5dee\u63a5\u7d9a\u3092\u9664\u304d\u307e\u3059\u304c\u3001\u30bb\u30af\u30b7\u30e7\u30f37.1\u3067\u53d6\u308a\u4e0a\u3052\u307e\u3059\uff09\uff01</p> <p>\u3053\u308c\u3067\u6570\u5f0f2\u30683\u3092PyTorch\u30b3\u30fc\u30c9\u3067\u4f5c\u6210\u3057\u305f\u306e\u3067\u3001\u305d\u308c\u3089\u3092\u7d44\u307f\u5408\u308f\u305b\u3066Transformer Encoder\u3092\u4f5c\u6210\u3057\u307e\u3057\u3087\u3046\u3002</p>","tags":["PyTorch","Vision Transformer","ViT","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u8ad6\u6587\u5b9f\u88c5","\u6df1\u5c64\u5b66\u7fd2"]},{"location":"PyTorch/09_pytorch_paper_replicating/#7-transformer-encoder","title":"7. Transformer Encoder\u306e\u4f5c\u6210","text":"<p>\u524d\u7de8\u3067\u4f5c\u6210\u3057\u305f<code>MultiheadSelfAttentionBlock</code>\uff08\u6570\u5f0f2\uff09\u3068<code>MLPBlock</code>\uff08\u6570\u5f0f3\uff09\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u3001ViT\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306eTransformer Encoder\u3092\u4f5c\u6210\u3057\u307e\u3057\u3087\u3046\u3002</p> <p>\u6df1\u5c64\u5b66\u7fd2\u306b\u304a\u3044\u3066\u3001\u300cencoder\u300d\u3084\u300cauto encoder\u300d\u306f\u4e00\u822c\u7684\u306b\u3001\u5165\u529b\u3092\u4f55\u3089\u304b\u306e\u6570\u5024\u8868\u73fe\u306b\u300c\u30a8\u30f3\u30b3\u30fc\u30c9\u300d\u3059\u308b\u5c64\u306e\u30b9\u30bf\u30c3\u30af\u3092\u6307\u3057\u307e\u3059\u3002</p> <p>ViT\u8ad6\u6587\u306e3.1\u7bc0\u306b\u3088\u308b\u3068\uff1a</p> <p>Transformer encoder\uff08Vaswani et al., 2017\uff09\u306f\u3001\u30de\u30eb\u30c1\u30d8\u30c3\u30c9\u81ea\u5df1\u6ce8\u610f\uff08MSA\uff09\u3068MLP\u30d6\u30ed\u30c3\u30af\u306e\u4ea4\u4e92\u306e\u5c64\u3067\u69cb\u6210\u3055\u308c\u307e\u3059\u3002\u3059\u3079\u3066\u306e\u30d6\u30ed\u30c3\u30af\u306e\u524d\u306bLayernorm\uff08LN\uff09\u304c\u9069\u7528\u3055\u308c\u3001\u3059\u3079\u3066\u306e\u30d6\u30ed\u30c3\u30af\u306e\u5f8c\u306b\u6b8b\u5dee\u63a5\u7d9a\u304c\u9069\u7528\u3055\u308c\u307e\u3059\u3002</p> <p>MSA\u30d6\u30ed\u30c3\u30af\u3068MLP\u30d6\u30ed\u30c3\u30af\u306f\u4f5c\u6210\u3057\u307e\u3057\u305f\u304c\u3001\u6b8b\u5dee\u63a5\u7d9a\u306f\u3069\u3046\u3067\u3057\u3087\u3046\u304b\uff1f</p> <p>\u6b8b\u5dee\u63a5\u7d9a\uff08\u30b9\u30ad\u30c3\u30d7\u63a5\u7d9a\u3068\u3082\u547c\u3070\u308c\u308b\uff09\u306f\u3001Deep Residual Learning for Image Recognition\u8ad6\u6587\u3067\u521d\u3081\u3066\u5c0e\u5165\u3055\u308c\u3001\u5c64\u306e\u5165\u529b\u3092\u5f8c\u7d9a\u306e\u51fa\u529b\u306b\u8ffd\u52a0\u3059\u308b\u3053\u3068\u3067\u5b9f\u73fe\u3055\u308c\u307e\u3059\u3002</p> <p>ViT\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306e\u5834\u5408\u3001\u6b8b\u5dee\u63a5\u7d9a\u306f\u3001MSA\u30d6\u30ed\u30c3\u30af\u306e\u5165\u529b\u304cMSA\u30d6\u30ed\u30c3\u30af\u306e\u51fa\u529b\u306b\u8ffd\u52a0\u3055\u308c\u3066\u304b\u3089MLP\u30d6\u30ed\u30c3\u30af\u306b\u6e21\u3055\u308c\u308b\u3053\u3068\u3092\u610f\u5473\u3057\u307e\u3059\u3002</p>","tags":["PyTorch","Vision Transformer","ViT","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u8ad6\u6587\u5b9f\u88c5","\u6df1\u5c64\u5b66\u7fd2"]},{"location":"PyTorch/09_pytorch_paper_replicating/#71-transformer-encoder","title":"7.1 \u30ab\u30b9\u30bf\u30e0\u4f5c\u6210\u5c64\u3092\u7d44\u307f\u5408\u308f\u305b\u3066Transformer Encoder\u3092\u4f5c\u6210","text":"<p>PyTorch\u3067\u4ee5\u524d\u4f5c\u6210\u3057\u305f\u5c64\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u3001ViT Transformer Encoder\u3092\u4f5c\u6210\u3057\u307e\u3057\u3087\u3046\uff1a</p> <pre><code># 1. nn.Module\u3092\u7d99\u627f\u3059\u308b\u30af\u30e9\u30b9\u3092\u4f5c\u6210\nclass TransformerEncoderBlock(nn.Module):\n    \"\"\"Transformer Encoder\u30d6\u30ed\u30c3\u30af\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\"\"\"\n    # 2. Table 1\u3068Table 3\u306e\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u30af\u30e9\u30b9\u3092\u521d\u671f\u5316\n    def __init__(self,\n                 embedding_dim:int=768, # Table 1\u306eViT-Base\u306eHidden size D\n                 num_heads:int=12, # Table 1\u306eViT-Base\u306eHeads\n                 mlp_size:int=3072, # Table 1\u306eViT-Base\u306eMLP size\n                 mlp_dropout:float=0.1, # Table 3\u306eViT-Base\u306e\u5bc6\u7d50\u5408\u5c64\u306e\u30c9\u30ed\u30c3\u30d7\u30a2\u30a6\u30c8\u91cf\n                 attn_dropout:float=0): # \u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u5c64\u306e\u30c9\u30ed\u30c3\u30d7\u30a2\u30a6\u30c8\u91cf\n        super().__init__()\n\n        # 3. MSA\u30d6\u30ed\u30c3\u30af\uff08\u6570\u5f0f2\uff09\u3092\u4f5c\u6210\n        self.msa_block = MultiheadSelfAttentionBlock(embedding_dim=embedding_dim,\n                                                     num_heads=num_heads,\n                                                     attn_dropout=attn_dropout)\n\n        # 4. MLP\u30d6\u30ed\u30c3\u30af\uff08\u6570\u5f0f3\uff09\u3092\u4f5c\u6210\n        self.mlp_block =  MLPBlock(embedding_dim=embedding_dim,\n                                   mlp_size=mlp_size,\n                                   dropout=mlp_dropout)\n\n    # 5. forward()\u30e1\u30bd\u30c3\u30c9\u3092\u4f5c\u6210\n    def forward(self, x):\n        # 6. MSA\u30d6\u30ed\u30c3\u30af\u7528\u306e\u6b8b\u5dee\u63a5\u7d9a\uff08\u5165\u529b\u3092\u51fa\u529b\u306b\u8ffd\u52a0\uff09\n        x =  self.msa_block(x) + x\n\n        # 7. MLP\u30d6\u30ed\u30c3\u30af\u7528\u306e\u6b8b\u5dee\u63a5\u7d9a\uff08\u5165\u529b\u3092\u51fa\u529b\u306b\u8ffd\u52a0\uff09\n        x = self.mlp_block(x) + x\n\n        return x\n</code></pre> <p>\u7d20\u6674\u3089\u3057\u3044\uff01Transformer Encoder\u30d6\u30ed\u30c3\u30af\u304c\u4f5c\u6210\u3067\u304d\u307e\u3057\u305f\uff01</p> <p></p> <p>\u5de6\uff1aViT\u8ad6\u6587\u306eFigure 1\u3067\u3001ViT\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306eTransformer Encoder\u304c\u30cf\u30a4\u30e9\u30a4\u30c8\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u53f3\uff1aViT\u8ad6\u6587\u306e\u6570\u5f0f2\u30683\u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3055\u308c\u305fTransformer Encoder\u3002</p> <p>\u30ec\u30b4\u306e\u3088\u3046\u306b\u5168\u4f53\u306e\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3092\u4e00\u3064\u305a\u3064\u30d4\u30fc\u30b9\uff08\u6570\u5f0f\uff09\u3054\u3068\u306b\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3057\u3066\u7d44\u307f\u7acb\u3066\u3066\u3044\u304f\u69d8\u5b50\u304c\u308f\u304b\u308a\u307e\u3059\u3002</p> <p>Transformer Encoder\u30d6\u30ed\u30c3\u30af\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\u3057\u3066\u30c6\u30b9\u30c8\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff1a</p> <pre><code># TransformerEncoderBlock\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\ntransformer_encoder_block = TransformerEncoderBlock()\n\n# \u5165\u529b\u5f62\u72b6(1, 197, 768) -&gt; (batch_size, num_patches, embedding_dimension)\u3067\u306e\u30b5\u30de\u30ea\u30fc\u3092\u8868\u793a\nsummary(model=transformer_encoder_block,\n        input_size=(1, 197, 768),\n        col_names=[\"input_size\", \"output_size\", \"num_params\", \"trainable\"],\n        col_width=20,\n        row_settings=[\"var_names\"])\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: \u3059\u3079\u3066\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3066\u304f\u3060\u3055\u3044\uff01\u5165\u529b\u304cTransformer Encoder\u30d6\u30ed\u30c3\u30af\u306eMSA\u30d6\u30ed\u30c3\u30af\u3068MLP\u30d6\u30ed\u30c3\u30af\u306e\u69d8\u3005\u306a\u5c64\u3092\u79fb\u52d5\u3059\u308b\u969b\u306b\u5f62\u72b6\u304c\u5909\u5316\u3057\u3001\u6700\u7d42\u7684\u306b\u5143\u306e\u5f62\u72b6\u306b\u623b\u308b\u306e\u304c\u308f\u304b\u308a\u307e\u3059\u3002</p>","tags":["PyTorch","Vision Transformer","ViT","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u8ad6\u6587\u5b9f\u88c5","\u6df1\u5c64\u5b66\u7fd2"]},{"location":"PyTorch/09_pytorch_paper_replicating/#72-pytorchtransformertransformer-encoder","title":"7.2 PyTorch\u306eTransformer\u5c64\u3067Transformer Encoder\u3092\u4f5c\u6210","text":"<p>\u3053\u308c\u307e\u3067\u3001Transformer Encoder\u30ec\u30a4\u30e4\u30fc\u306e\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3068\u30ec\u30a4\u30e4\u30fc\u81ea\u4f53\u3092\u81ea\u5206\u3067\u69cb\u7bc9\u3057\u3066\u304d\u307e\u3057\u305f\u3002</p> <p>\u3057\u304b\u3057\u3001\u4eba\u6c17\u3068\u52b9\u679c\u306e\u9ad8\u307e\u308a\u306b\u3088\u308a\u3001PyTorch\u306b\u306f<code>torch.nn</code>\u306e\u4e00\u90e8\u3068\u3057\u3066\u7d44\u307f\u8fbc\u307f\u306eTransformer\u30ec\u30a4\u30e4\u30fc\u304c\u3042\u308a\u307e\u3059\u3002</p> <p>\u4f8b\u3048\u3070\u3001<code>torch.nn.TransformerEncoderLayer()</code>\u3092\u4f7f\u7528\u3057\u3066\u3001\u4e0a\u8a18\u3068\u540c\u3058\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u4f5c\u6210\u3057\u305f\u3070\u304b\u308a\u306e<code>TransformerEncoderBlock</code>\u3092\u518d\u4f5c\u6210\u3067\u304d\u307e\u3059\uff1a</p> <pre><code># torch.nn.TransformerEncoderLayer()\u3067\u4e0a\u8a18\u3068\u540c\u3058\u3082\u306e\u3092\u4f5c\u6210\ntorch_transformer_encoder_layer = nn.TransformerEncoderLayer(d_model=768, # Table 1\u306eViT-Base\u306eHidden size D\n                                                             nhead=12, # Table 1\u306eViT-Base\u306eHeads\n                                                             dim_feedforward=3072, # Table 1\u306eViT-Base\u306eMLP size\n                                                             dropout=0.1, # Table 3\u306eViT-Base\u306e\u5bc6\u7d50\u5408\u5c64\u306e\u30c9\u30ed\u30c3\u30d7\u30a2\u30a6\u30c8\u91cf\n                                                             activation=\"gelu\", # GELU\u975e\u7dda\u5f62\u6d3b\u6027\u5316\n                                                             batch_first=True, # \u30d0\u30c3\u30c1\u304c\u6700\u521d\u306b\u6765\u308b\u304b\uff1f\n                                                             norm_first=True) # MSA/MLP\u5c64\u306e\u524d\u307e\u305f\u306f\u5f8c\u306b\u6b63\u898f\u5316\u3059\u308b\u304b\uff1f\n\ntorch_transformer_encoder_layer\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>TransformerEncoderLayer(\n  (self_attn): MultiheadAttention(\n    (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)\n  )\n  (linear1): Linear(in_features=768, out_features=3072, bias=True)\n  (dropout): Dropout(p=0.1, inplace=False)\n  (linear2): Linear(in_features=3072, out_features=768, bias=True)\n  (norm1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)\n  (norm2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)\n  (dropout1): Dropout(p=0.1, inplace=False)\n  (dropout2): Dropout(p=0.1, inplace=False)\n)\n</code></pre></p> <p>\u300cPyTorch\u30ec\u30a4\u30e4\u30fc\u3067Transformer Encoder\u3092\u3053\u3093\u306a\u306b\u7c21\u5358\u306b\u4f5c\u308c\u308b\u306a\u3089\u3001\u306a\u305c\u308f\u3056\u308f\u3056\u6570\u5f0f2\u30683\u3092\u518d\u73fe\u3057\u305f\u306e\u304b\uff1f\u300d\u3068\u601d\u3046\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002</p> <p>\u7b54\u3048\u306f\uff1a\u7df4\u7fd2\u3067\u3059\u3002</p> <p>\u8ad6\u6587\u306e\u4e00\u9023\u306e\u6570\u5f0f\u3068\u5c64\u3092\u8907\u88fd\u3057\u305f\u306e\u3067\u3001\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u5c64\u3092\u5909\u66f4\u3057\u3066\u4f55\u304b\u9055\u3046\u3053\u3068\u3092\u8a66\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p>","tags":["PyTorch","Vision Transformer","ViT","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u8ad6\u6587\u5b9f\u88c5","\u6df1\u5c64\u5b66\u7fd2"]},{"location":"PyTorch/09_pytorch_paper_replicating/#8-vit","title":"8. \u3059\u3079\u3066\u3092\u307e\u3068\u3081\u3066ViT\u3092\u4f5c\u6210","text":"<p>\u3053\u308c\u307e\u3067\u9577\u3044\u9053\u306e\u308a\u3092\u6b69\u3093\u3067\u304d\u307e\u3057\u305f\u304c\u3001\u4eca\u5ea6\u306f\u30d1\u30ba\u30eb\u306e\u3059\u3079\u3066\u306e\u30d4\u30fc\u30b9\u3092\u7d44\u307f\u5408\u308f\u305b\u308b\u8208\u596e\u7684\u306a\u4f5c\u696d\u306e\u6642\u9593\u3067\u3059\uff01</p> <p>\u4f5c\u6210\u3057\u305f\u3059\u3079\u3066\u306e\u30d6\u30ed\u30c3\u30af\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u3001\u5b8c\u5168\u306aViT\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3092\u8907\u88fd\u3057\u307e\u3059\u3002\u30d1\u30c3\u30c1\u3068\u4f4d\u7f6e\u57cb\u3081\u8fbc\u307f\u304b\u3089Transformer Encoder\u307e\u3067MLP\u30d8\u30c3\u30c9\u307e\u3067\u3002</p> <p>\u3057\u304b\u3057\u3001\u307e\u3060\u6570\u5f0f4\u3092\u4f5c\u6210\u3057\u3066\u3044\u307e\u305b\u3093\uff1a</p> \\[ \\mathbf{y} =\\operatorname{LN}\\left(\\mathbf{z}_{L}^{0}\\right) \\] <p>\u5fc3\u914d\u3042\u308a\u307e\u305b\u3093\u3002\u6570\u5f0f4\u3092\u5168\u4f53\u306eViT\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u30af\u30e9\u30b9\u306b\u7d44\u307f\u8fbc\u3080\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u5fc5\u8981\u306a\u306e\u306f<code>torch.nn.LayerNorm()</code>\u5c64\u3068<code>torch.nn.Linear()</code>\u5c64\u3060\u3051\u3067\u3001Transformer Encoder\u30ed\u30b8\u30c3\u30c8\u51fa\u529b\u306e0\u756a\u76ee\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\uff08\\(\\mathbf{z}_{L}^{0}\\)\uff09\u3092\u76ee\u6a19\u30af\u30e9\u30b9\u6570\u306b\u5909\u63db\u3057\u307e\u3059\u3002</p> <p>\u5b8c\u5168\u306a\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3092\u4f5c\u6210\u3059\u308b\u305f\u3081\u3001\u8907\u6570\u306e<code>TransformerEncoderBlock</code>\u3092\u7a4d\u307f\u91cd\u306d\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u305d\u308c\u3089\u306e\u30ea\u30b9\u30c8\u3092<code>torch.nn.Sequential()</code>\u306b\u6e21\u3059\u3053\u3068\u3067\u5b9f\u73fe\u3067\u304d\u307e\u3059\u3002</p> <p>ViT-Base\u306e\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u7126\u70b9\u3092\u5f53\u3066\u307e\u3059\u304c\u3001\u30b3\u30fc\u30c9\u306f\u4ed6\u306eViT\u30d0\u30ea\u30a2\u30f3\u30c8\u306b\u9069\u5fdc\u3067\u304d\u308b\u306f\u305a\u3067\u3059\u3002</p>","tags":["PyTorch","Vision Transformer","ViT","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u8ad6\u6587\u5b9f\u88c5","\u6df1\u5c64\u5b66\u7fd2"]},{"location":"PyTorch/09_pytorch_paper_replicating/#81-vit","title":"8.1 \u5b8c\u5168\u306aViT\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306e\u5b9f\u88c5","text":"<p>ViT\u3092\u5b9f\u73fe\u3059\u308b\u305f\u3081\u306b\u3001\u79c1\u305f\u3061\u306e\u6700\u5927\u306e\u30b3\u30fc\u30c9\u30d6\u30ed\u30c3\u30af\u306b\u306a\u308a\u307e\u3059\u304c\u3001\u3084\u308a\u9042\u3052\u307e\u3057\u3087\u3046\uff01</p> <pre><code># 1. nn.Module\u3092\u7d99\u627f\u3059\u308bViT\u30af\u30e9\u30b9\u3092\u4f5c\u6210\nclass ViT(nn.Module):\n    \"\"\"\u30c7\u30d5\u30a9\u30eb\u30c8\u3067ViT-Base\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6301\u3064Vision Transformer\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\"\"\"\n    # 2. Table 1\u3068Table 3\u306e\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u30af\u30e9\u30b9\u3092\u521d\u671f\u5316\n    def __init__(self,\n                 img_size:int=224, # ViT\u8ad6\u6587\u306eTable 3\u306eTraining resolution\n                 in_channels:int=3, # \u5165\u529b\u753b\u50cf\u306e\u30c1\u30e3\u30f3\u30cd\u30eb\u6570\n                 patch_size:int=16, # \u30d1\u30c3\u30c1\u30b5\u30a4\u30ba\n                 num_transformer_layers:int=12, # Table 1\u306eViT-Base\u306eLayers\n                 embedding_dim:int=768, # Table 1\u306eViT-Base\u306eHidden size D\n                 mlp_size:int=3072, # Table 1\u306eViT-Base\u306eMLP size\n                 num_heads:int=12, # Table 1\u306eViT-Base\u306eHeads\n                 attn_dropout:float=0, # \u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u5c04\u5f71\u306e\u30c9\u30ed\u30c3\u30d7\u30a2\u30a6\u30c8\n                 mlp_dropout:float=0.1, # \u5bc6\u7d50\u5408/MLP\u5c64\u306e\u30c9\u30ed\u30c3\u30d7\u30a2\u30a6\u30c8\n                 embedding_dropout:float=0.1, # \u30d1\u30c3\u30c1\u3068\u4f4d\u7f6e\u57cb\u3081\u8fbc\u307f\u306e\u30c9\u30ed\u30c3\u30d7\u30a2\u30a6\u30c8\n                 num_classes:int=1000): # ImageNet\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u3059\u304c\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u53ef\u80fd\n        super().__init__() # super().__init__()\u3092\u5fd8\u308c\u305a\u306b\uff01\n\n        # 3. \u753b\u50cf\u30b5\u30a4\u30ba\u304c\u30d1\u30c3\u30c1\u30b5\u30a4\u30ba\u3067\u5272\u308a\u5207\u308c\u308b\u3053\u3068\u3092\u78ba\u8a8d\n        assert img_size % patch_size == 0, f\"\u753b\u50cf\u30b5\u30a4\u30ba\u306f\u30d1\u30c3\u30c1\u30b5\u30a4\u30ba\u3067\u5272\u308a\u5207\u308c\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u753b\u50cf\u30b5\u30a4\u30ba: {img_size}\u3001\u30d1\u30c3\u30c1\u30b5\u30a4\u30ba: {patch_size}\u3002\"\n\n        # 4. \u30d1\u30c3\u30c1\u6570\u3092\u8a08\u7b97\uff08\u9ad8\u3055 * \u5e45/\u30d1\u30c3\u30c1^2\uff09\n        self.num_patches = (img_size * img_size) // patch_size**2\n\n        # 5. \u5b66\u7fd2\u53ef\u80fd\u306a\u30af\u30e9\u30b9\u57cb\u3081\u8fbc\u307f\u3092\u4f5c\u6210\uff08\u30d1\u30c3\u30c1\u57cb\u3081\u8fbc\u307f\u306e\u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u524d\u306b\u914d\u7f6e\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff09\n        self.class_embedding = nn.Parameter(data=torch.randn(1, 1, embedding_dim),\n                                            requires_grad=True)\n\n        # 6. \u5b66\u7fd2\u53ef\u80fd\u306a\u4f4d\u7f6e\u57cb\u3081\u8fbc\u307f\u3092\u4f5c\u6210\n        self.position_embedding = nn.Parameter(data=torch.randn(1, self.num_patches+1, embedding_dim),\n                                               requires_grad=True)\n\n        # 7. \u57cb\u3081\u8fbc\u307f\u30c9\u30ed\u30c3\u30d7\u30a2\u30a6\u30c8\u5024\u3092\u4f5c\u6210\n        self.embedding_dropout = nn.Dropout(p=embedding_dropout)\n\n        # 8. \u30d1\u30c3\u30c1\u57cb\u3081\u8fbc\u307f\u5c64\u3092\u4f5c\u6210\n        self.patch_embedding = PatchEmbedding(in_channels=in_channels,\n                                              patch_size=patch_size,\n                                              embedding_dim=embedding_dim)\n\n        # 9. Transformer Encoder\u30d6\u30ed\u30c3\u30af\u3092\u4f5c\u6210\uff08nn.Sequential()\u3092\u4f7f\u7528\u3057\u3066Transformer Encoder\u30d6\u30ed\u30c3\u30af\u3092\u30b9\u30bf\u30c3\u30af\uff09\n        # \u6ce8\uff1a\"*\"\u306f\"\u3059\u3079\u3066\"\u3092\u610f\u5473\u3057\u307e\u3059\n        self.transformer_encoder = nn.Sequential(*[TransformerEncoderBlock(embedding_dim=embedding_dim,\n                                                                            num_heads=num_heads,\n                                                                            mlp_size=mlp_size,\n                                                                            mlp_dropout=mlp_dropout) for _ in range(num_transformer_layers)])\n\n        # 10. \u5206\u985e\u5668\u30d8\u30c3\u30c9\u3092\u4f5c\u6210\n        self.classifier = nn.Sequential(\n            nn.LayerNorm(normalized_shape=embedding_dim),\n            nn.Linear(in_features=embedding_dim,\n                      out_features=num_classes)\n        )\n\n    # 11. forward()\u30e1\u30bd\u30c3\u30c9\u3092\u4f5c\u6210\n    def forward(self, x):\n        # 12. \u30d0\u30c3\u30c1\u30b5\u30a4\u30ba\u3092\u53d6\u5f97\n        batch_size = x.shape[0]\n\n        # 13. \u30af\u30e9\u30b9\u30c8\u30fc\u30af\u30f3\u57cb\u3081\u8fbc\u307f\u3092\u4f5c\u6210\u3057\u3066\u30d0\u30c3\u30c1\u30b5\u30a4\u30ba\u306b\u5408\u308f\u305b\u3066\u62e1\u5f35\uff08\u6570\u5f0f1\uff09\n        class_token = self.class_embedding.expand(batch_size, -1, -1) # \"-1\"\u306f\u6b21\u5143\u3092\u63a8\u8ad6\u3059\u308b\u3053\u3068\u3092\u610f\u5473\n\n        # 14. \u30d1\u30c3\u30c1\u57cb\u3081\u8fbc\u307f\u3092\u4f5c\u6210\uff08\u6570\u5f0f1\uff09\n        x = self.patch_embedding(x)\n\n        # 15. \u30af\u30e9\u30b9\u57cb\u3081\u8fbc\u307f\u3068\u30d1\u30c3\u30c1\u57cb\u3081\u8fbc\u307f\u3092\u9023\u7d50\uff08\u6570\u5f0f1\uff09\n        x = torch.cat((class_token, x), dim=1)\n\n        # 16. \u4f4d\u7f6e\u57cb\u3081\u8fbc\u307f\u3092\u30d1\u30c3\u30c1\u57cb\u3081\u8fbc\u307f\u306b\u8ffd\u52a0\uff08\u6570\u5f0f1\uff09\n        x = self.position_embedding + x\n\n        # 17. \u57cb\u3081\u8fbc\u307f\u30c9\u30ed\u30c3\u30d7\u30a2\u30a6\u30c8\u3092\u5b9f\u884c\uff08\u4ed8\u9332B.1\uff09\n        x = self.embedding_dropout(x)\n\n        # 18. \u30d1\u30c3\u30c1\u3001\u4f4d\u7f6e\u3001\u30af\u30e9\u30b9\u57cb\u3081\u8fbc\u307f\u3092transformer encoder\u30ec\u30a4\u30e4\u30fc\u306b\u901a\u3059\uff08\u6570\u5f0f2&amp;3\uff09\n        x = self.transformer_encoder(x)\n\n        # 19. 0\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u30ed\u30b8\u30c3\u30c8\u3092\u5206\u985e\u5668\u306b\u901a\u3059\uff08\u6570\u5f0f4\uff09\n        x = self.classifier(x[:, 0]) # \u30d0\u30c3\u30c1\u306e\u5404\u30b5\u30f3\u30d7\u30eb\u30670\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3067\u5b9f\u884c\n\n        return x\n</code></pre> <ol> <li>\ud83d\udd7a\ud83d\udc83\ud83e\udd73 \u3084\u3063\u305f\u30fc\uff01\uff01\uff01vision transformer\u3092\u69cb\u7bc9\u3057\u307e\u3057\u305f\uff01</li> </ol> <p>\u7d20\u6674\u3089\u3057\u3044\u52aa\u529b\u3067\u3057\u305f\uff01\u3086\u3063\u304f\u308a\u3068\u78ba\u5b9f\u306b\u5c64\u3068\u30d6\u30ed\u30c3\u30af\u3001\u5165\u529b\u3068\u51fa\u529b\u3092\u4f5c\u6210\u3057\u3001\u305d\u308c\u3089\u3092\u3059\u3079\u3066\u7d44\u307f\u5408\u308f\u305b\u3066\u72ec\u81ea\u306eViT\u3092\u69cb\u7bc9\u3057\u307e\u3057\u305f\uff01</p> <p>ViT\u30af\u30e9\u30b9\u3092\u30c6\u30b9\u30c8\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff1a</p> <pre><code>set_seeds()\n\n# \u5358\u4e00\u753b\u50cf\u3068\u540c\u3058\u5f62\u72b6\u306e\u30e9\u30f3\u30c0\u30e0\u30c6\u30f3\u30bd\u30eb\u3092\u4f5c\u6210\nrandom_image_tensor = torch.randn(1, 3, 224, 224) # (batch_size, color_channels, height, width)\n\n# \u4f5c\u696d\u4e2d\u306e\u30af\u30e9\u30b9\u6570\uff08pizza\u3001steak\u3001sushi\uff09\u3067ViT\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\nvit = ViT(num_classes=len(class_names))\n\n# \u30e9\u30f3\u30c0\u30e0\u753b\u50cf\u30c6\u30f3\u30bd\u30eb\u3092ViT\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306b\u6e21\u3059\nvit(random_image_tensor)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>tensor([[0.2525, 0.8748, 1.2374]], grad_fn=&lt;AddmmBackward0&gt;)\n</code></pre></p> <p>\u512a\u79c0\u3067\u3059\uff01\u30e9\u30f3\u30c0\u30e0\u753b\u50cf\u30c6\u30f3\u30bd\u30eb\u304cViT\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u5168\u4f53\u3092\u901a\u308a\u629c\u3051\u30013\u3064\u306e\u30ed\u30b8\u30c3\u30c8\u5024\uff08\u5404\u30af\u30e9\u30b9\u7528\u306b1\u3064\uff09\u3092\u51fa\u529b\u3057\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002</p>","tags":["PyTorch","Vision Transformer","ViT","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u8ad6\u6587\u5b9f\u88c5","\u6df1\u5c64\u5b66\u7fd2"]},{"location":"PyTorch/09_pytorch_paper_replicating/#9-vit","title":"9. ViT\u30e2\u30c7\u30eb\u306e\u8a13\u7df4\u30b3\u30fc\u30c9\u306e\u8a2d\u5b9a","text":"<p>\u7c21\u5358\u306a\u90e8\u5206\u306e\u6642\u9593\u3067\u3059\u3002\u8a13\u7df4\uff01</p> <p>\u306a\u305c\u7c21\u5358\u306a\u306e\u3067\u3057\u3087\u3046\u304b\uff1f\u30e2\u30c7\u30eb\uff08<code>vit</code>\uff09\u304b\u3089DataLoader\uff08<code>train_dataloader</code>\u3001<code>test_dataloader</code>\uff09\u307e\u3067\u3001\u5fc5\u8981\u306a\u3082\u306e\u306e\u307b\u3068\u3093\u3069\u304c\u6e96\u5099\u3067\u304d\u3066\u3044\u308b\u304b\u3089\u3067\u3059\u3002</p>","tags":["PyTorch","Vision Transformer","ViT","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u8ad6\u6587\u5b9f\u88c5","\u6df1\u5c64\u5b66\u7fd2"]},{"location":"PyTorch/09_pytorch_paper_replicating/#91","title":"9.1 \u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u30fc\u306e\u4f5c\u6210","text":"<p>ViT\u8ad6\u6587\u3067\u300coptimizer\u300d\u3092\u691c\u7d22\u3059\u308b\u3068\u30014.1\u7bc0\u306eTraining &amp; Fine-tuning\u3067\u4ee5\u4e0b\u304c\u8ff0\u3079\u3089\u308c\u3066\u3044\u307e\u3059\uff1a</p> <p>ResNet\u3092\u542b\u3080\u3059\u3079\u3066\u306e\u30e2\u30c7\u30eb\u3092\u3001\\(\\beta_{1}=0.9, \\beta_{2}=0.999\\)\u3001\u30d0\u30c3\u30c1\u30b5\u30a4\u30ba4096\u3001\u9ad8\u3044\u91cd\u307f\u6e1b\u88700.1\u3067Adam\u3092\u4f7f\u7528\u3057\u3066\u8a13\u7df4\u3057\u307e\u3059\u3002</p> <p>\u305d\u3053\u3067\u3001SGD\u3067\u306f\u306a\u304f\u300cAdam\u300d\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u30fc\uff08<code>torch.optim.Adam()</code>\uff09\u3092\u9078\u629e\u3059\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002</p>","tags":["PyTorch","Vision Transformer","ViT","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u8ad6\u6587\u5b9f\u88c5","\u6df1\u5c64\u5b66\u7fd2"]},{"location":"PyTorch/09_pytorch_paper_replicating/#92","title":"9.2 \u640d\u5931\u95a2\u6570\u306e\u4f5c\u6210","text":"<p>ViT\u8ad6\u6587\u3067\u300closs\u300d\u3084\u300closs function\u300d\u3084\u300ccriterion\u300d\u3092\u691c\u7d22\u3057\u3066\u3082\u7d50\u679c\u304c\u51fa\u307e\u305b\u3093\u3002</p> <p>\u3057\u304b\u3057\u3001\u4f5c\u696d\u3057\u3066\u3044\u308b\u76ee\u6a19\u554f\u984c\u304c\u591a\u30af\u30e9\u30b9\u5206\u985e\uff08ViT\u8ad6\u6587\u3068\u540c\u3058\uff09\u306a\u306e\u3067\u3001<code>torch.nn.CrossEntropyLoss()</code>\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002</p>","tags":["PyTorch","Vision Transformer","ViT","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u8ad6\u6587\u5b9f\u88c5","\u6df1\u5c64\u5b66\u7fd2"]},{"location":"PyTorch/09_pytorch_paper_replicating/#93-vit","title":"9.3 ViT\u30e2\u30c7\u30eb\u306e\u8a13\u7df4","text":"<p>\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u30fc\u3068\u640d\u5931\u95a2\u6570\u3092\u8a2d\u5b9a\u3057\u3066\u300110\u30a8\u30dd\u30c3\u30af\u8a13\u7df4\u3057\u307e\u3057\u3087\u3046\uff1a</p> <pre><code>from going_modular import engine\n\n# ViT\u8ad6\u6587\u306e\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u4f7f\u7528\u3057\u3066ViT\u30e2\u30c7\u30eb\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6700\u9069\u5316\u3059\u308b\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u30fc\u3092\u8a2d\u5b9a\noptimizer = torch.optim.Adam(params=vit.parameters(),\n                             lr=3e-3, # Table 3\u306eViT-* ImageNet-1k\u306eBase LR\n                             betas=(0.9, 0.999), # \u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3001ViT\u8ad6\u65874.1\u7bc0\u306b\u3082\u8a18\u8f09\n                             weight_decay=0.3) # ViT\u8ad6\u65874.1\u7bc0\u3068Table 3\u306eViT-* ImageNet-1k\u3088\u308a\n\n# \u591a\u30af\u30e9\u30b9\u5206\u985e\u7528\u306e\u640d\u5931\u95a2\u6570\u3092\u8a2d\u5b9a\nloss_fn = torch.nn.CrossEntropyLoss()\n\n# \u30b7\u30fc\u30c9\u3092\u8a2d\u5b9a\nset_seeds()\n\n# \u30e2\u30c7\u30eb\u3092\u8a13\u7df4\u3057\u3001\u8a13\u7df4\u7d50\u679c\u3092\u8f9e\u66f8\u306b\u4fdd\u5b58\nresults = engine.train(model=vit.to(device),\n                       train_dataloader=train_dataloader,\n                       test_dataloader=test_dataloader,\n                       optimizer=optimizer,\n                       loss_fn=loss_fn,\n                       epochs=10,\n                       device=device,\n                       writer=None)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>Epoch: 1 | train_loss: 5.4041 | train_acc: 0.3633 | test_loss: 5.1442 | test_acc: 0.2604\nEpoch: 2 | train_loss: 1.8898 | train_acc: 0.3359 | test_loss: 2.0569 | test_acc: 0.2604\n...\nEpoch: 10 | train_loss: 1.2541 | train_acc: 0.2617 | test_loss: 1.3891 | test_acc: 0.2604\n</code></pre></p> <p>\u7d20\u6674\u3089\u3057\u3044\uff01ViT\u30e2\u30c7\u30eb\u304c\u751f\u304d\u8fd4\u308a\u307e\u3057\u305f\uff01\u305f\u3060\u3057\u3001\u30d4\u30b6\u3001\u30b9\u30c6\u30fc\u30ad\u3001\u5bff\u53f8\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3067\u306e\u7d50\u679c\u306f\u3042\u307e\u308a\u826f\u304f\u306a\u3044\u3088\u3046\u3067\u3059\u3002</p>","tags":["PyTorch","Vision Transformer","ViT","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u8ad6\u6587\u5b9f\u88c5","\u6df1\u5c64\u5b66\u7fd2"]},{"location":"PyTorch/09_pytorch_paper_replicating/#94","title":"9.4 \u8a13\u7df4\u8a2d\u5b9a\u3067\u4e0d\u8db3\u3057\u3066\u3044\u308b\u3082\u306e","text":"<p>\u5143\u306eViT\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306f\u3001\u3044\u304f\u3064\u304b\u306e\u753b\u50cf\u5206\u985e\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u3067\u826f\u3044\u7d50\u679c\u3092\u9054\u6210\u3057\u307e\u3059\u3002\u3057\u304b\u3057\u3001\u79c1\u305f\u3061\u306e\u7d50\u679c\uff08\u3053\u308c\u307e\u3067\u306e\u3068\u3053\u308d\uff09\u306f\u305d\u308c\u307b\u3069\u826f\u304f\u3042\u308a\u307e\u305b\u3093\u3002</p> <p>\u3053\u308c\u306b\u306f\u3044\u304f\u3064\u304b\u306e\u7406\u7531\u304c\u8003\u3048\u3089\u308c\u307e\u3059\u304c\u3001\u4e3b\u306a\u3082\u306e\u306f\u30b9\u30b1\u30fc\u30eb\u3067\u3059\u3002</p> \u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u5024 ViT\u8ad6\u6587 \u79c1\u305f\u3061\u306e\u5b9f\u88c5 \u8a13\u7df4\u753b\u50cf\u6570 1.3M (ImageNet-1k), 14M (ImageNet-21k), 303M (JFT) 225 \u30a8\u30dd\u30c3\u30af\u6570 7\uff08\u6700\u5927\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u7528\uff09\u300190\u3001300\uff08ImageNet\u7528\uff09 10 \u30d0\u30c3\u30c1\u30b5\u30a4\u30ba 4096 32 <p>ViT\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306f\u8ad6\u6587\u3068\u540c\u3058\u3067\u3059\u304c\u3001ViT\u8ad6\u6587\u306e\u7d50\u679c\u306f\u3001\u306f\u308b\u304b\u306b\u591a\u304f\u306e\u30c7\u30fc\u30bf\u3068\u3088\u308a\u7cbe\u5de7\u306a\u8a13\u7df4\u30b9\u30ad\u30fc\u30e0\u3092\u4f7f\u7528\u3057\u3066\u9054\u6210\u3055\u308c\u307e\u3057\u305f\u3002</p>","tags":["PyTorch","Vision Transformer","ViT","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u8ad6\u6587\u5b9f\u88c5","\u6df1\u5c64\u5b66\u7fd2"]},{"location":"PyTorch/09_pytorch_paper_replicating/#10-torchvisionmodelsvit","title":"10. <code>torchvision.models</code>\u306e\u4e8b\u524d\u8a13\u7df4\u6e08\u307fViT\u3092\u540c\u3058\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3067\u4f7f\u7528","text":"<p>\u4e8b\u524d\u8a13\u7df4\u6e08\u307f\u30e2\u30c7\u30eb\u306e\u5229\u70b9\u306b\u3064\u3044\u3066\u8b70\u8ad6\u3057\u307e\u3057\u305f\u3002\u81ea\u5206\u3067ViT\u3092\u30bc\u30ed\u304b\u3089\u8a13\u7df4\u3057\u3066\u6700\u9069\u3067\u306a\u3044\u7d50\u679c\u3092\u5f97\u305f\u306e\u3067\u3001\u8ee2\u79fb\u5b66\u7fd2\u306e\u5229\u70b9\u304c\u672c\u5f53\u306b\u8f1d\u304d\u307e\u3059\u3002</p>","tags":["PyTorch","Vision Transformer","ViT","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u8ad6\u6587\u5b9f\u88c5","\u6df1\u5c64\u5b66\u7fd2"]},{"location":"PyTorch/09_pytorch_paper_replicating/#101","title":"10.1 \u306a\u305c\u4e8b\u524d\u8a13\u7df4\u6e08\u307f\u30e2\u30c7\u30eb\u3092\u4f7f\u7528\u3059\u308b\u306e\u304b\uff1f","text":"<p>\u591a\u304f\u306e\u73fe\u4ee3\u6a5f\u68b0\u5b66\u7fd2\u7814\u7a76\u8ad6\u6587\u3067\u91cd\u8981\u306a\u3053\u3068\u306f\u3001\u7d50\u679c\u306e\u591a\u304f\u304c\u5927\u898f\u6a21\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3068\u81a8\u5927\u306a\u8a08\u7b97\u30ea\u30bd\u30fc\u30b9\u3067\u5f97\u3089\u308c\u308b\u3053\u3068\u3067\u3059\u3002</p> <p>ViT\u8ad6\u6587\u306e4.2\u7bc0\u3092\u8aad\u3080\u3068\uff1a</p> <p>\u6700\u5f8c\u306b\u3001\u30d1\u30d6\u30ea\u30c3\u30afImageNet-21k\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3067\u4e8b\u524d\u8a13\u7df4\u3055\u308c\u305fViT-L/16\u30e2\u30c7\u30eb\u306f\u3001\u307b\u3068\u3093\u3069\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3067\u3082\u826f\u597d\u306b\u6a5f\u80fd\u3057\u3001\u4e8b\u524d\u8a13\u7df4\u306b\u3088\u308a\u5c11\u306a\u3044\u30ea\u30bd\u30fc\u30b9\u3092\u53d6\u308a\u307e\u3059\uff1a\u6a19\u6e96\u7684\u306a\u30af\u30e9\u30a6\u30c9TPUv3\u306e8\u30b3\u30a2\u3067\u7d0430\u65e5\u9593\u3067\u8a13\u7df4\u3067\u304d\u307e\u3059\u3002</p> <p>2022\u5e747\u6708\u73fe\u5728\u3001Google Cloud\u30678\u30b3\u30a2\u306eTPUv3\u3092\u30ec\u30f3\u30bf\u30eb\u3059\u308b\u4fa1\u683c\u306f\u30011\u6642\u9593\u3042\u305f\u308a8\u7c73\u30c9\u30eb\u3067\u3059\u3002</p> <p>30\u65e5\u9593\u9023\u7d9a\u3067\u30ec\u30f3\u30bf\u30eb\u3059\u308b\u30685,760\u7c73\u30c9\u30eb\u306e\u8cbb\u7528\u304c\u304b\u304b\u308a\u307e\u3059\u3002</p>","tags":["PyTorch","Vision Transformer","ViT","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u8ad6\u6587\u5b9f\u88c5","\u6df1\u5c64\u5b66\u7fd2"]},{"location":"PyTorch/09_pytorch_paper_replicating/#102-vit","title":"10.2 \u4e8b\u524d\u8a13\u7df4\u6e08\u307fViT\u30e2\u30c7\u30eb\u306e\u53d6\u5f97\u3068\u7279\u5fb4\u62bd\u51fa\u5668\u306e\u4f5c\u6210","text":"<p><code>torchvision.models</code>\u304b\u3089\u4e8b\u524d\u8a13\u7df4\u6e08\u307fViT-Base\u3092\u53d6\u5f97\u3057\u3001FoodVision Mini\u30e6\u30fc\u30b9\u30b1\u30fc\u30b9\u7528\u306b\u7279\u5fb4\u62bd\u51fa\u5668\u8ee2\u79fb\u5b66\u7fd2\u30e2\u30c7\u30eb\u306b\u5909\u63db\u3057\u307e\u3059\uff1a</p> <pre><code># 1. ViT-Base\u306e\u4e8b\u524d\u8a13\u7df4\u6e08\u307f\u91cd\u307f\u3092\u53d6\u5f97\npretrained_vit_weights = torchvision.models.ViT_B_16_Weights.DEFAULT # torchvision &gt;= 0.13\u304c\u5fc5\u8981\n\n# 2. \u4e8b\u524d\u8a13\u7df4\u6e08\u307f\u91cd\u307f\u3067ViT\u30e2\u30c7\u30eb\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u8a2d\u5b9a\npretrained_vit = torchvision.models.vit_b_16(weights=pretrained_vit_weights).to(device)\n\n# 3. \u30d9\u30fc\u30b9\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u30d5\u30ea\u30fc\u30ba\nfor parameter in pretrained_vit.parameters():\n    parameter.requires_grad = False\n\n# 4. \u5206\u985e\u5668\u30d8\u30c3\u30c9\u3092\u5909\u66f4\uff08\u7dda\u5f62\u30d8\u30c3\u30c9\u3067\u540c\u3058\u521d\u671f\u5316\u3092\u4fdd\u8a3c\u3059\u308b\u305f\u3081\u30b7\u30fc\u30c9\u3092\u8a2d\u5b9a\uff09\nset_seeds()\npretrained_vit.heads = nn.Linear(in_features=768, out_features=len(class_names)).to(device)\n</code></pre> <p>\u4e8b\u524d\u8a13\u7df4\u6e08\u307fViT\u7279\u5fb4\u62bd\u51fa\u5668\u30e2\u30c7\u30eb\u304c\u4f5c\u6210\u3055\u308c\u307e\u3057\u305f\uff01</p>","tags":["PyTorch","Vision Transformer","ViT","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u8ad6\u6587\u5b9f\u88c5","\u6df1\u5c64\u5b66\u7fd2"]},{"location":"PyTorch/09_pytorch_paper_replicating/#103-vit","title":"10.3 \u4e8b\u524d\u8a13\u7df4\u6e08\u307fViT\u30e2\u30c7\u30eb\u7528\u306e\u30c7\u30fc\u30bf\u6e96\u5099","text":"<p>\u4e8b\u524d\u8a13\u7df4\u6e08\u307f\u30e2\u30c7\u30eb\u306e\u305f\u3081\u306b\u753b\u50cf\u3092DataLoader\u306b\u5909\u63db\u3057\u307e\u3057\u3087\u3046\u3002</p> <p><code>torchvision.models</code>\u306e\u4e8b\u524d\u8a13\u7df4\u6e08\u307f\u30e2\u30c7\u30eb\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\u3001\u305d\u306e\u30e2\u30c7\u30eb\u3067required\u30c8\u30e9\u30f3\u30b9\u30d5\u30a9\u30fc\u30e0\u3092\u53d6\u5f97\u3059\u308b\u305f\u3081\u306b<code>transforms()</code>\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a</p> <pre><code># \u4e8b\u524d\u8a13\u7df4\u6e08\u307fViT\u91cd\u307f\u304b\u3089\u81ea\u52d5\u5909\u63db\u3092\u53d6\u5f97\npretrained_vit_transforms = pretrained_vit_weights.transforms()\nprint(pretrained_vit_transforms)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>ImageClassification(\n    crop_size=[224]\n    resize_size=[256]\n    mean=[0.485, 0.456, 0.406]\n    std=[0.229, 0.224, 0.225]\n    interpolation=InterpolationMode.BILINEAR\n)\n</code></pre></p> <p>DataLoader\u3092\u8a2d\u5b9a\u3057\u307e\u3059\uff1a</p> <pre><code># \u30c7\u30fc\u30bf\u30ed\u30fc\u30c0\u30fc\u3092\u8a2d\u5b9a\ntrain_dataloader_pretrained, test_dataloader_pretrained, class_names = data_setup.create_dataloaders(\n    train_dir=train_dir,\n    test_dir=test_dir,\n    transform=pretrained_vit_transforms,\n    batch_size=32\n)\n</code></pre>","tags":["PyTorch","Vision Transformer","ViT","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u8ad6\u6587\u5b9f\u88c5","\u6df1\u5c64\u5b66\u7fd2"]},{"location":"PyTorch/09_pytorch_paper_replicating/#104-vit","title":"10.4 \u7279\u5fb4\u62bd\u51fa\u5668ViT\u30e2\u30c7\u30eb\u306e\u8a13\u7df4","text":"<p>\u7279\u5fb4\u62bd\u51fa\u5668\u30e2\u30c7\u30eb\u3092\u8a13\u7df4\u3057\u307e\u3057\u3087\u3046\uff1a</p> <pre><code>from going_modular import engine\n\n# \u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u30fc\u3068\u640d\u5931\u95a2\u6570\u3092\u4f5c\u6210\noptimizer = torch.optim.Adam(params=pretrained_vit.parameters(),\n                             lr=1e-3)\nloss_fn = torch.nn.CrossEntropyLoss()\n\n# \u4e8b\u524d\u8a13\u7df4\u6e08\u307fViT\u7279\u5fb4\u62bd\u51fa\u5668\u30e2\u30c7\u30eb\u306e\u5206\u985e\u5668\u30d8\u30c3\u30c9\u3092\u8a13\u7df4\nset_seeds()\npretrained_vit_results = engine.train(model=pretrained_vit,\n                                      train_dataloader=train_dataloader_pretrained,\n                                      test_dataloader=test_dataloader_pretrained,\n                                      optimizer=optimizer,\n                                      loss_fn=loss_fn,\n                                      epochs=10,\n                                      device=device,\n                                      writer=None)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>Epoch: 1 | train_loss: 0.7665 | train_acc: 0.7227 | test_loss: 0.5432 | test_acc: 0.8665\nEpoch: 2 | train_loss: 0.3428 | train_acc: 0.9453 | test_loss: 0.3263 | test_acc: 0.8977\n...\nEpoch: 10 | train_loss: 0.0650 | train_acc: 0.9883 | test_loss: 0.1804 | test_acc: 0.9176\n</code></pre></p> <p>\u3059\u3054\u3044\uff01\u4e8b\u524d\u8a13\u7df4\u6e08\u307fViT\u7279\u5fb4\u62bd\u51fa\u5668\u306f\u3001\u540c\u3058\u6642\u9593\u3067\u30bc\u30ed\u304b\u3089\u8a13\u7df4\u3057\u305f\u30ab\u30b9\u30bf\u30e0ViT\u30e2\u30c7\u30eb\u3088\u308a\u3082\u306f\u308b\u304b\u306b\u826f\u3044\u6027\u80fd\u3092\u793a\u3057\u307e\u3057\u305f\u3002</p>","tags":["PyTorch","Vision Transformer","ViT","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u8ad6\u6587\u5b9f\u88c5","\u6df1\u5c64\u5b66\u7fd2"]},{"location":"PyTorch/09_pytorch_paper_replicating/#105-vit","title":"10.5 \u7279\u5fb4\u62bd\u51fa\u5668ViT\u30e2\u30c7\u30eb\u306e\u640d\u5931\u66f2\u7dda\u3092\u30d7\u30ed\u30c3\u30c8","text":"<p>\u640d\u5931\u66f2\u7dda\u3092\u78ba\u8a8d\u3057\u307e\u3057\u3087\u3046\uff1a</p> <pre><code># \u640d\u5931\u66f2\u7dda\u3092\u30d7\u30ed\u30c3\u30c8\nfrom helper_functions import plot_loss_curves\n\nplot_loss_curves(pretrained_vit_results)\n</code></pre> <p></p> <p>\u308f\u3042\uff01\u3053\u308c\u3089\u306f\u6559\u79d1\u66f8\u306b\u8fd1\u3044\uff08\u672c\u5f53\u306b\u826f\u3044\uff09\u640d\u5931\u66f2\u7dda\u3067\u3059\uff01</p> <p>\u305d\u308c\u304c\u8ee2\u79fb\u5b66\u7fd2\u306e\u529b\u3067\u3059\uff01\u540c\u3058\u30e2\u30c7\u30eb\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3067\u512a\u308c\u305f\u7d50\u679c\u3092\u5f97\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\u3002\u305f\u3060\u3057\u3001\u30ab\u30b9\u30bf\u30e0\u5b9f\u88c5\u306f\u30bc\u30ed\u304b\u3089\u8a13\u7df4\u3055\u308c\uff08\u6027\u80fd\u304c\u60aa\u3044\uff09\u3001\u3053\u306e\u7279\u5fb4\u62bd\u51fa\u5668\u30e2\u30c7\u30eb\u306fImageNet\u304b\u3089\u306e\u4e8b\u524d\u8a13\u7df4\u6e08\u307f\u91cd\u307f\u306e\u529b\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u3002</p>","tags":["PyTorch","Vision Transformer","ViT","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u8ad6\u6587\u5b9f\u88c5","\u6df1\u5c64\u5b66\u7fd2"]},{"location":"PyTorch/09_pytorch_paper_replicating/#106-vit","title":"10.6 \u7279\u5fb4\u62bd\u51fa\u5668ViT\u30e2\u30c7\u30eb\u306e\u4fdd\u5b58\u3068\u30d5\u30a1\u30a4\u30eb\u30b5\u30a4\u30ba\u306e\u78ba\u8a8d","text":"<p>ViT\u7279\u5fb4\u62bd\u51fa\u5668\u30e2\u30c7\u30eb\u304cFood Vision Mini\u554f\u984c\u3067\u975e\u5e38\u306b\u826f\u3044\u6027\u80fd\u3092\u793a\u3057\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002</p> <p>\u304a\u305d\u3089\u304f\u3001\u672c\u756a\u74b0\u5883\u306b\u30c7\u30d7\u30ed\u30a4\u3057\u3066\u307f\u305f\u3044\u3068\u601d\u3046\u3067\u3057\u3087\u3046\u3002\u307e\u305a\u3001\u30e2\u30c7\u30eb\u3092\u4fdd\u5b58\u3057\u307e\u3057\u3087\u3046\uff1a</p> <pre><code># \u30e2\u30c7\u30eb\u3092\u4fdd\u5b58\nfrom going_modular import utils\n\nutils.save_model(model=pretrained_vit,\n                 target_dir=\"models\",\n                 model_name=\"09_pretrained_vit_feature_extractor_pizza_steak_sushi.pth\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>[INFO] Saving model to: models/09_pretrained_vit_feature_extractor_pizza_steak_sushi.pth\n</code></pre></p> <p>\u30e2\u30c7\u30eb\u306e\u30b5\u30a4\u30ba\u3092\u78ba\u8a8d\u3057\u307e\u3057\u3087\u3046\uff1a</p> <pre><code>from pathlib import Path\n\n# \u30e2\u30c7\u30eb\u30b5\u30a4\u30ba\u3092\u30d0\u30a4\u30c8\u3067\u53d6\u5f97\u3057\u3066\u30e1\u30ac\u30d0\u30a4\u30c8\u306b\u5909\u63db\npretrained_vit_model_size = Path(\"models/09_pretrained_vit_feature_extractor_pizza_steak_sushi.pth\").stat().st_size // (1024*1024)\nprint(f\"\u4e8b\u524d\u8a13\u7df4\u6e08\u307fViT\u7279\u5fb4\u62bd\u51fa\u5668\u30e2\u30c7\u30eb\u30b5\u30a4\u30ba: {pretrained_vit_model_size} MB\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c: <pre><code>\u4e8b\u524d\u8a13\u7df4\u6e08\u307fViT\u7279\u5fb4\u62bd\u51fa\u5668\u30e2\u30c7\u30eb\u30b5\u30a4\u30ba: 327 MB\n</code></pre></p> <p>ViT\u7279\u5fb4\u62bd\u51fa\u5668\u30e2\u30c7\u30eb\u306f\u7d04327 MB\u306e\u30b5\u30a4\u30ba\u306b\u306a\u308a\u307e\u3057\u305f\u3002</p> <p>\u4ee5\u524d\u306eEffNetB2\u7279\u5fb4\u62bd\u51fa\u5668\u30e2\u30c7\u30eb\u3068\u6bd4\u8f03\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff1a</p> \u30e2\u30c7\u30eb \u30e2\u30c7\u30eb\u30b5\u30a4\u30ba (MB) \u30c6\u30b9\u30c8\u640d\u5931 \u30c6\u30b9\u30c8\u7cbe\u5ea6 EffNetB2\u7279\u5fb4\u62bd\u51fa\u5668^ 29 ~0.3906 ~0.9384 ViT\u7279\u5fb4\u62bd\u51fa\u5668 327 ~0.1084 ~0.9384 <p>EffNetB2\u30e2\u30c7\u30eb\u306f\u3001\u30c6\u30b9\u30c8\u640d\u5931\u3068\u7cbe\u5ea6\u3067\u985e\u4f3c\u3057\u305f\u7d50\u679c\u3067ViT\u30e2\u30c7\u30eb\u3088\u308a\u7d0411\u500d\u5c0f\u3055\u3044\u3067\u3059\u3002</p> <p>\u3057\u304b\u3057\u3001\u30c7\u30d7\u30ed\u30a4\u30e1\u30f3\u30c8\u306e\u89b3\u70b9\u304b\u3089\u3001\u3053\u308c\u30892\u3064\u306e\u30e2\u30c7\u30eb\u3092\u6bd4\u8f03\u3059\u308b\u5834\u5408\u3001ViT\u30e2\u30c7\u30eb\u306e\u8ffd\u52a0\u7cbe\u5ea6\u304c\u7d0411\u500d\u306e\u30e2\u30c7\u30eb\u30b5\u30a4\u30ba\u5897\u52a0\u306b\u5024\u3059\u308b\u304b\u3069\u3046\u304b\u3092\u691c\u8a0e\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002</p>","tags":["PyTorch","Vision Transformer","ViT","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u8ad6\u6587\u5b9f\u88c5","\u6df1\u5c64\u5b66\u7fd2"]},{"location":"PyTorch/09_pytorch_paper_replicating/#11","title":"11. \u30ab\u30b9\u30bf\u30e0\u753b\u50cf\u3067\u4e88\u6e2c\u3092\u884c\u3046","text":"<p>\u6700\u5f8c\u306b\u3001\u7a76\u6975\u306e\u30c6\u30b9\u30c8\u3001\u72ec\u81ea\u306e\u30ab\u30b9\u30bf\u30e0\u30c7\u30fc\u30bf\u3067\u4e88\u6e2c\u3059\u308b\u3053\u3068\u3067\u7d42\u4e86\u3057\u307e\u3057\u3087\u3046\u3002</p> <p>\u5bff\u53f8\u306e\u753b\u50cf\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u3001ViT\u7279\u5fb4\u62bd\u51fa\u5668\u3092\u4f7f\u7528\u3057\u3066\u4e88\u6e2c\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff1a</p> <pre><code># \u753b\u50cf\u3067\u4e88\u6e2c\u3092\u884c\u3044\u3001\u30d7\u30ed\u30c3\u30c8\u3059\u308b\u95a2\u6570\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\nfrom going_modular.predictions import pred_and_plot_image\n\n# \u30ab\u30b9\u30bf\u30e0\u753b\u50cf\u30d1\u30b9\u3092\u8a2d\u5b9a\ncustom_image_path = Path(\"data/sushi.jpg\")\n\n# \u30ab\u30b9\u30bf\u30e0\u753b\u50cf\u3067\u4e88\u6e2c\npred_and_plot_image(model=pretrained_vit,\n                    image_path=custom_image_path,\n                    class_names=class_names)\n</code></pre> <p></p> <p>\u5b9f\u884c\u7d50\u679c:  \u753b\u50cf\u304c\u6b63\u3057\u304f\u300csushi\u300d\u3068\u3057\u3066\u5206\u985e\u3055\u308c\u307e\u3057\u305f\uff01</p> <p>2\u3064\u306e\u89aa\u6307\u3092\u4e0a\u3052\u3066\uff01\u304a\u3081\u3067\u3068\u3046\u3054\u3056\u3044\u307e\u3059\uff01</p> <p>\u7814\u7a76\u8ad6\u6587\u304b\u3089\u72ec\u81ea\u306e\u30ab\u30b9\u30bf\u30e0\u753b\u50cf\u3067\u4f7f\u7528\u53ef\u80fd\u306a\u30e2\u30c7\u30eb\u30b3\u30fc\u30c9\u307e\u3067\u3001\u3059\u3079\u3066\u306e\u9053\u306e\u308a\u3092\u6b69\u3093\u3067\u304d\u307e\u3057\u305f\uff01</p>","tags":["PyTorch","Vision Transformer","ViT","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u8ad6\u6587\u5b9f\u88c5","\u6df1\u5c64\u5b66\u7fd2"]},{"location":"PyTorch/09_pytorch_paper_replicating/#_6","title":"\u4e3b\u306a\u8981\u70b9","text":"<ul> <li> <p>\u6a5f\u68b0\u5b66\u7fd2\u306e\u7206\u767a\u7684\u666e\u53ca\u306b\u3088\u308a\u3001\u9032\u6b69\u3092\u8a73\u8ff0\u3059\u308b\u65b0\u3057\u3044\u7814\u7a76\u8ad6\u6587\u304c\u6bce\u65e5\u51fa\u3066\u304d\u307e\u3059\u3002\u3059\u3079\u3066\u306b\u8ffd\u3044\u3064\u304f\u3053\u3068\u306f\u4e0d\u53ef\u80fd\u3067\u3059\u304c\u3001\u3053\u3053\u3067\u884c\u3063\u305f\u3088\u3046\u306b\u3001FoodVision Mini\u306e\u305f\u3081\u306e\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3\u8ad6\u6587\u3092\u8907\u88fd\u3059\u308b\u306a\u3069\u3001\u72ec\u81ea\u306e\u30e6\u30fc\u30b9\u30b1\u30fc\u30b9\u306b\u7d5e\u308a\u8fbc\u3080\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p> </li> <li> <p>\u6a5f\u68b0\u5b66\u7fd2\u7814\u7a76\u8ad6\u6587\u306b\u306f\u3001\u30b9\u30de\u30fc\u30c8\u306a\u4eba\u3005\u306e\u30c1\u30fc\u30e0\u306b\u3088\u308b\u6570\u304b\u6708\u306e\u7814\u7a76\u304c\u6570\u30da\u30fc\u30b8\u306b\u5727\u7e2e\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u591a\u3044\u3067\u3059\uff08\u305d\u306e\u305f\u3081\u3001\u3059\u3079\u3066\u306e\u8a73\u7d30\u3092\u62bd\u51fa\u3057\u3001\u8ad6\u6587\u3092\u5b8c\u5168\u306b\u8907\u88fd\u3059\u308b\u3053\u3068\u306f\u5c11\u3057\u6311\u6226\u7684\u306b\u306a\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\uff09\u3002</p> </li> <li> <p>\u8ad6\u6587\u8907\u88fd\u306e\u76ee\u6a19\u306f\u3001\u6a5f\u68b0\u5b66\u7fd2\u7814\u7a76\u8ad6\u6587\uff08\u30c6\u30ad\u30b9\u30c8\u3068\u6570\u5b66\uff09\u3092\u4f7f\u7528\u53ef\u80fd\u306a\u30b3\u30fc\u30c9\u306b\u5909\u63db\u3059\u308b\u3053\u3068\u3067\u3059\u3002</p> </li> <li> <p>\u6a5f\u68b0\u5b66\u7fd2\u7814\u7a76\u8ad6\u6587\u3092\u5165\u529b\u3068\u51fa\u529b\uff08\u5404\u5c64/\u30d6\u30ed\u30c3\u30af/\u30e2\u30c7\u30eb\u306b\u4f55\u304c\u5165\u3063\u3066\u4f55\u304c\u51fa\u308b\u304b\uff1f\uff09\u3068\u5c64\uff08\u5404\u5c64\u306f\u5165\u529b\u3092\u3069\u306e\u3088\u3046\u306b\u64cd\u4f5c\u3059\u308b\u304b\uff1f\uff09\u3068\u30d6\u30ed\u30c3\u30af\uff08\u5c64\u306e\u96c6\u5408\uff09\u306b\u5206\u89e3\u3057\u3001\u5404\u90e8\u5206\u3092\u30b9\u30c6\u30c3\u30d7\u3054\u3068\u306b\u8907\u88fd\u3059\u308b\u3053\u3068\u306f\u3001\u7406\u89e3\u306b\u975e\u5e38\u306b\u5f79\u7acb\u3061\u307e\u3059\u3002</p> </li> <li> <p>\u591a\u304f\u306e\u6700\u65b0\u30e2\u30c7\u30eb\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3067\u4e8b\u524d\u8a13\u7df4\u6e08\u307f\u30e2\u30c7\u30eb\u304c\u5229\u7528\u53ef\u80fd\u3067\u3001\u8ee2\u79fb\u5b66\u7fd2\u306e\u529b\u306b\u3088\u308a\u3001\u3053\u308c\u3089\u306f\u5c11\u306a\u3044\u30c7\u30fc\u30bf\u3067\u975e\u5e38\u306b\u826f\u3044\u6027\u80fd\u3092\u767a\u63ee\u3059\u308b\u3053\u3068\u304c\u591a\u3044\u3067\u3059\u3002</p> </li> <li> <p>\u3088\u308a\u5927\u304d\u306a\u30e2\u30c7\u30eb\u306f\u4e00\u822c\u7684\u306b\u3088\u308a\u826f\u3044\u6027\u80fd\u3092\u767a\u63ee\u3057\u307e\u3059\u304c\u3001\u3088\u308a\u5927\u304d\u306a\u30d5\u30c3\u30c8\u30d7\u30ea\u30f3\u30c8\u3082\u6301\u3061\u307e\u3059\uff08\u3088\u308a\u591a\u304f\u306e\u30b9\u30c8\u30ec\u30fc\u30b8\u30b9\u30da\u30fc\u30b9\u3092\u5360\u6709\u3057\u3001\u63a8\u8ad6\u306b\u3088\u308a\u9577\u3044\u6642\u9593\u304c\u304b\u304b\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\uff09\u3002</p> </li> </ul>","tags":["PyTorch","Vision Transformer","ViT","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u8ad6\u6587\u5b9f\u88c5","\u6df1\u5c64\u5b66\u7fd2"]},{"location":"PyTorch/09_pytorch_paper_replicating/#_7","title":"\u307e\u3068\u3081","text":"<p>\u672c\u8a18\u4e8b\u3067\u306f\u3001Vision Transformer\u306e\u5b8c\u5168\u306a\u5b9f\u88c5\u3092\u901a\u3058\u3066\u3001\u6a5f\u68b0\u5b66\u7fd2\u8ad6\u6587\u306e\u518d\u73fe\u5b9f\u88c5\u306b\u3064\u3044\u3066\u5305\u62ec\u7684\u306b\u5b66\u7fd2\u3057\u307e\u3057\u305f\u3002</p>","tags":["PyTorch","Vision Transformer","ViT","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u8ad6\u6587\u5b9f\u88c5","\u6df1\u5c64\u5b66\u7fd2"]},{"location":"PyTorch/09_pytorch_paper_replicating/#_8","title":"\u5b9f\u88c5\u3067\u9054\u6210\u3057\u305f\u6210\u679c\uff1a","text":"<ol> <li>Transformer Encoder\u306e\u69cb\u7bc9 - MSA\u30d6\u30ed\u30c3\u30af\u3068MLP\u30d6\u30ed\u30c3\u30af\u3092\u7d44\u307f\u5408\u308f\u305b\u305f\u5b8c\u5168\u306aEncoder</li> <li>\u5b8c\u5168\u306aViT\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306e\u5b9f\u88c5 - \u6570\u5f0f1\u301c4\u3092\u3059\u3079\u3066\u542b\u3080\u5b9f\u7528\u7684\u306aViT\u30e2\u30c7\u30eb</li> <li>\u8ee2\u79fb\u5b66\u7fd2\u306e\u5b9f\u88c5 - \u4e8b\u524d\u8a13\u7df4\u6e08\u307f\u30e2\u30c7\u30eb\u3092\u6d3b\u7528\u3057\u305f\u52b9\u7387\u7684\u306a\u5b66\u7fd2</li> <li>\u5b9f\u7528\u7684\u306a\u30b7\u30b9\u30c6\u30e0\u306e\u69cb\u7bc9 - \u30ab\u30b9\u30bf\u30e0\u753b\u50cf\u3067\u4e88\u6e2c\u53ef\u80fd\u306a\u5b8c\u5168\u306a\u30b7\u30b9\u30c6\u30e0</li> </ol>","tags":["PyTorch","Vision Transformer","ViT","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u8ad6\u6587\u5b9f\u88c5","\u6df1\u5c64\u5b66\u7fd2"]},{"location":"PyTorch/09_pytorch_paper_replicating/#_9","title":"\u5b66\u7fd2\u30dd\u30a4\u30f3\u30c8\uff1a","text":"<ol> <li>\u8ad6\u6587\u5b9f\u88c5\u306e\u30b9\u30ad\u30eb - \u7814\u7a76\u8ad6\u6587\u306e\u6570\u5f0f\u3092PyTorch\u30b3\u30fc\u30c9\u306b\u5909\u63db\u3059\u308b\u80fd\u529b</li> <li>\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u8a2d\u8a08 - \u30ec\u30b4\u30d6\u30ed\u30c3\u30af\u306e\u3088\u3046\u306b\u5c64\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u30e2\u30c7\u30eb\u3092\u69cb\u7bc9\u3059\u308b\u624b\u6cd5</li> <li>\u8ee2\u79fb\u5b66\u7fd2\u306e\u91cd\u8981\u6027 - \u4e8b\u524d\u8a13\u7df4\u6e08\u307f\u30e2\u30c7\u30eb\u306e\u5727\u5012\u7684\u306a\u5229\u70b9\u306e\u7406\u89e3</li> <li>\u5b9f\u7528\u6027\u306e\u8003\u616e - \u30e2\u30c7\u30eb\u30b5\u30a4\u30ba\u3068\u6027\u80fd\u306e\u30c8\u30ec\u30fc\u30c9\u30aa\u30d5\u306e\u91cd\u8981\u6027</li> </ol>","tags":["PyTorch","Vision Transformer","ViT","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u8ad6\u6587\u5b9f\u88c5","\u6df1\u5c64\u5b66\u7fd2"]},{"location":"PyTorch/09_pytorch_paper_replicating/#_10","title":"\u6280\u8853\u7684\u9054\u6210:","text":"<ul> <li>\u30bc\u30ed\u304b\u3089\u306eViT\u5b9f\u88c5\uff0885,800,963\u30d1\u30e9\u30e1\u30fc\u30bf\uff09</li> <li>\u8ee2\u79fb\u5b66\u7fd2\u306b\u3088\u308b\u9ad8\u7cbe\u5ea6\u30e2\u30c7\u30eb\uff08test_acc: 0.9176\uff09</li> <li>\u5b9f\u969b\u306e\u753b\u50cf\u306b\u5bfe\u3059\u308b\u4e88\u6e2c\u30b7\u30b9\u30c6\u30e0\u306e\u69cb\u7bc9</li> <li>\u30e2\u30c7\u30eb\u306e\u4fdd\u5b58\u3068\u30c7\u30d7\u30ed\u30a4\u30e1\u30f3\u30c8\u6e96\u5099</li> </ul>","tags":["PyTorch","Vision Transformer","ViT","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u8ad6\u6587\u5b9f\u88c5","\u6df1\u5c64\u5b66\u7fd2"]},{"location":"PyTorch/09_pytorch_paper_replicating/#_11","title":"\u8ffd\u52a0\u5b66\u7fd2\u30ea\u30bd\u30fc\u30b9","text":"<ul> <li>Better plain ViT baselines for ImageNet-1k - ViT\u306e\u6539\u826f\u7248\u306b\u3064\u3044\u3066</li> <li>lucidrains/vit-pytorch - \u69d8\u3005\u306aViT\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306e\u5b9f\u88c5\u96c6</li> <li>PyTorch\u306eViT\u5b9f\u88c5 - \u516c\u5f0f\u5b9f\u88c5</li> <li>Jay Alammar\u306e\u30a2\u30c6\u30f3\u30b7\u30e7\u30f3\u6a5f\u69cb\u89e3\u8aac</li> </ul>","tags":["PyTorch","Vision Transformer","ViT","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u8ad6\u6587\u5b9f\u88c5","\u6df1\u5c64\u5b66\u7fd2"]},{"location":"PyTorch/09_pytorch_paper_replicating/#_12","title":"\u6ce8\u610f\u4e8b\u9805","text":"<ul> <li>\u8a08\u7b97\u30ea\u30bd\u30fc\u30b9: ViT\u306f\u5927\u304d\u306a\u30e2\u30c7\u30eb\u3067\u3042\u308a\u3001\u5341\u5206\u306aGPU\u30e1\u30e2\u30ea\u304c\u5fc5\u8981\u3067\u3059</li> <li>\u30c7\u30fc\u30bf\u8981\u4ef6: \u6700\u9069\u306a\u6027\u80fd\u306b\u306f\u5927\u91cf\u306e\u30c7\u30fc\u30bf\u304c\u5fc5\u8981\u3067\u3059\u304c\u3001\u8ee2\u79fb\u5b66\u7fd2\u3067\u8efd\u6e1b\u53ef\u80fd</li> <li>\u30c7\u30d7\u30ed\u30a4\u30e1\u30f3\u30c8: \u30e2\u30c7\u30eb\u30b5\u30a4\u30ba\u3068\u63a8\u8ad6\u901f\u5ea6\u306e\u30d0\u30e9\u30f3\u30b9\u3092\u8003\u616e\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059</li> </ul> <p>Vision Transformer\u306e\u5b9f\u88c5\u3092\u901a\u3058\u3066\u3001\u73fe\u4ee3\u7684\u306a\u6df1\u5c64\u5b66\u7fd2\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306e\u7406\u89e3\u3068\u5b9f\u88c5\u30b9\u30ad\u30eb\u3092\u5927\u5e45\u306b\u5411\u4e0a\u3055\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\u3002\u3053\u308c\u3089\u306e\u77e5\u8b58\u306f\u3001\u4ed6\u306e\u6700\u65b0\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306e\u7406\u89e3\u3068\u5b9f\u88c5\u306b\u3082\u5fdc\u7528\u3067\u304d\u308b\u3067\u3057\u3087\u3046\u3002</p>","tags":["PyTorch","Vision Transformer","ViT","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u8ad6\u6587\u5b9f\u88c5","\u6df1\u5c64\u5b66\u7fd2"]},{"location":"PyTorch/09_pytorch_paper_replicating/#_13","title":"\u53c2\u8003\u6587\u732e","text":"<ul> <li>An Image is Worth 16x16 Words: Transformers for Image Recognition at Scale</li> <li>Attention is All You Need</li> <li>Deep Residual Learning for Image Recognition</li> <li>PyTorch Documentation</li> </ul>","tags":["PyTorch","Vision Transformer","ViT","\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3","\u8ad6\u6587\u5b9f\u88c5","\u6df1\u5c64\u5b66\u7fd2"]},{"location":"PyTorch/10_pytorch_model_deployment/","title":"PyTorch\u30e2\u30c7\u30eb\u306e\u30c7\u30d7\u30ed\u30a4\u30e1\u30f3\u30c8 - FoodVision Big\u306e\u69cb\u7bc9\u3068Hugging Face Spaces\u3078\u306e\u516c\u958b","text":"","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u30c7\u30d7\u30ed\u30a4\u30e1\u30f3\u30c8","Gradio","Hugging Face","\u753b\u50cf\u5206\u985e","MLOps","\u8ee2\u79fb\u5b66\u7fd2"]},{"location":"PyTorch/10_pytorch_model_deployment/#_1","title":"\u6982\u8981","text":"<p>\u672c\u8a18\u4e8b\u3067\u306f\u3001PyTorch\u3067\u69cb\u7bc9\u3057\u305f\u753b\u50cf\u5206\u985e\u30e2\u30c7\u30eb\u300cFoodVision Big\u300d\u3092\u5b9f\u969b\u306b\u4f7f\u3048\u308bWeb\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3068\u3057\u3066\u30c7\u30d7\u30ed\u30a4\u3059\u308b\u65b9\u6cd5\u3092\u89e3\u8aac\u3057\u307e\u3059\u3002101\u7a2e\u985e\u306e\u98df\u54c1\u3092\u5206\u985e\u3067\u304d\u308b\u30e2\u30c7\u30eb\u306e\u5b66\u7fd2\u304b\u3089\u3001Gradio\u3092\u4f7f\u3063\u305f\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306e\u4f5c\u6210\u3001\u305d\u3057\u3066Hugging Face Spaces\u3078\u306e\u516c\u958b\u307e\u3067\u3001\u5b9f\u8df5\u7684\u306aMLOps\u306e\u57fa\u790e\u3092\u5b66\u3073\u307e\u3059\u3002</p>","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u30c7\u30d7\u30ed\u30a4\u30e1\u30f3\u30c8","Gradio","Hugging Face","\u753b\u50cf\u5206\u985e","MLOps","\u8ee2\u79fb\u5b66\u7fd2"]},{"location":"PyTorch/10_pytorch_model_deployment/#_2","title":"\u524d\u63d0\u77e5\u8b58","text":"<ul> <li>PyTorch\u306e\u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9</li> <li>\u753b\u50cf\u5206\u985e\u30bf\u30b9\u30af\u306e\u57fa\u790e\u77e5\u8b58</li> <li>Python\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u57fa\u672c</li> <li>\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u64cd\u4f5c\u306e\u57fa\u672c</li> </ul>","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u30c7\u30d7\u30ed\u30a4\u30e1\u30f3\u30c8","Gradio","Hugging Face","\u753b\u50cf\u5206\u985e","MLOps","\u8ee2\u79fb\u5b66\u7fd2"]},{"location":"PyTorch/10_pytorch_model_deployment/#_3","title":"\u5b9f\u88c5\u5185\u5bb9","text":"","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u30c7\u30d7\u30ed\u30a4\u30e1\u30f3\u30c8","Gradio","Hugging Face","\u753b\u50cf\u5206\u985e","MLOps","\u8ee2\u79fb\u5b66\u7fd2"]},{"location":"PyTorch/10_pytorch_model_deployment/#_4","title":"\u6a5f\u68b0\u5b66\u7fd2\u30e2\u30c7\u30eb\u306e\u30c7\u30d7\u30ed\u30a4\u30e1\u30f3\u30c8\u3068\u306f\uff1f","text":"<p>\u6a5f\u68b0\u5b66\u7fd2\u30e2\u30c7\u30eb\u306e\u30c7\u30d7\u30ed\u30a4\u30e1\u30f3\u30c8\u3068\u306f\u3001\u5b66\u7fd2\u6e08\u307f\u306e\u30e2\u30c7\u30eb\u3092\u4ed6\u306e\u4eba\u3084\u30b7\u30b9\u30c6\u30e0\u304c\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u30d7\u30ed\u30bb\u30b9\u306e\u3053\u3068\u3067\u3059\u3002</p> <p>\u4f8b\u3048\u3070\uff1a</p> <ul> <li>\u30b9\u30de\u30fc\u30c8\u30d5\u30a9\u30f3\u3067\u98df\u3079\u7269\u306e\u5199\u771f\u3092\u64ae\u5f71\u3057\u3001FoodVision\u30e2\u30c7\u30eb\u3067\u30d4\u30b6\u3001\u30b9\u30c6\u30fc\u30ad\u3001\u5bff\u53f8\u306a\u3069\u306b\u5206\u985e\u3059\u308b</li> <li>\u9280\u884c\u306e\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u304c\u53d6\u5f15\u304c\u8a50\u6b3a\u304b\u3069\u3046\u304b\u3092\u6a5f\u68b0\u5b66\u7fd2\u30e2\u30c7\u30eb\u3067\u5224\u5b9a\u3057\u3066\u304b\u3089\u9001\u91d1\u3092\u5b9f\u884c\u3059\u308b</li> <li>\u30aa\u30da\u30ec\u30fc\u30c6\u30a3\u30f3\u30b0\u30b7\u30b9\u30c6\u30e0\u304c\u4f7f\u7528\u30d1\u30bf\u30fc\u30f3\u3092\u4e88\u6e2c\u3057\u3066\u96fb\u529b\u6d88\u8cbb\u3092\u6700\u9069\u5316\u3059\u308b</li> </ul>","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u30c7\u30d7\u30ed\u30a4\u30e1\u30f3\u30c8","Gradio","Hugging Face","\u753b\u50cf\u5206\u985e","MLOps","\u8ee2\u79fb\u5b66\u7fd2"]},{"location":"PyTorch/10_pytorch_model_deployment/#_5","title":"\u30c7\u30d7\u30ed\u30a4\u30e1\u30f3\u30c8\u306e\u7a2e\u985e","text":"<p>\u6a5f\u68b0\u5b66\u7fd2\u30e2\u30c7\u30eb\u306e\u30c7\u30d7\u30ed\u30a4\u30e1\u30f3\u30c8\u3092\u8003\u3048\u308b\u969b\u306f\u3001\u4ee5\u4e0b\u306e\u554f\u3044\u304b\u3089\u59cb\u3081\u308b\u3068\u826f\u3044\u3067\u3057\u3087\u3046\uff1a</p> <p>\u300c\u79c1\u306e\u30e2\u30c7\u30eb\u306b\u3068\u3063\u3066\u6700\u3082\u7406\u60f3\u7684\u306a\u4f7f\u7528\u30b7\u30ca\u30ea\u30aa\u306f\u4f55\u304b\uff1f\u300d</p> <p>FoodVision Big\u306e\u5834\u5408\u3001\u7406\u60f3\u7684\u306a\u30b7\u30ca\u30ea\u30aa\u306f\uff1a 1. \u30e2\u30d0\u30a4\u30eb\u30c7\u30d0\u30a4\u30b9\u3067\u5199\u771f\u3092\u64ae\u5f71\u3059\u308b\uff08\u30a2\u30d7\u30ea\u307e\u305f\u306fWeb\u30d6\u30e9\u30a6\u30b6\u7d4c\u7531\uff09 2. \u4e88\u6e2c\u7d50\u679c\u304c\u9ad8\u901f\u306b\u8fd4\u3063\u3066\u304f\u308b</p> <p>\u3053\u308c\u306f\u4ee5\u4e0b\u306e2\u3064\u306e\u91cd\u8981\u306a\u554f\u3044\u306b\u5206\u89e3\u3067\u304d\u307e\u3059\uff1a</p> <ol> <li>\u3069\u3053\u306b\u914d\u7f6e\u3059\u308b\u304b\uff1f - \u30e2\u30c7\u30eb\u3092\u3069\u3053\u306b\u4fdd\u5b58\u3059\u308b\u304b</li> <li>\u3069\u306e\u3088\u3046\u306b\u6a5f\u80fd\u3059\u308b\u304b\uff1f - \u4e88\u6e2c\u306f\u5373\u5ea7\u306b\u8fd4\u3059\u304b\u3001\u5f8c\u3067\u8fd4\u3059\u304b</li> </ol>","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u30c7\u30d7\u30ed\u30a4\u30e1\u30f3\u30c8","Gradio","Hugging Face","\u753b\u50cf\u5206\u985e","MLOps","\u8ee2\u79fb\u5b66\u7fd2"]},{"location":"PyTorch/10_pytorch_model_deployment/#_6","title":"\u30c7\u30d7\u30ed\u30a4\u30e1\u30f3\u30c8\u5834\u6240\u306e\u6bd4\u8f03","text":"\u30c7\u30d7\u30ed\u30a4\u5834\u6240 \u30e1\u30ea\u30c3\u30c8 \u30c7\u30e1\u30ea\u30c3\u30c8 \u30aa\u30f3\u30c7\u30d0\u30a4\u30b9\uff08\u30a8\u30c3\u30b8/\u30d6\u30e9\u30a6\u30b6\u5185\uff09 \u975e\u5e38\u306b\u9ad8\u901f\uff08\u30c7\u30fc\u30bf\u304c\u30c7\u30d0\u30a4\u30b9\u3092\u96e2\u308c\u306a\u3044\uff09 \u8a08\u7b97\u80fd\u529b\u304c\u9650\u5b9a\u7684\uff08\u5927\u304d\u306a\u30e2\u30c7\u30eb\u306f\u5b9f\u884c\u306b\u6642\u9593\u304c\u304b\u304b\u308b\uff09 \u30d7\u30e9\u30a4\u30d0\u30b7\u30fc\u3092\u4fdd\u8b77\uff08\u30c7\u30fc\u30bf\u304c\u30c7\u30d0\u30a4\u30b9\u3092\u96e2\u308c\u306a\u3044\uff09 \u30b9\u30c8\u30ec\u30fc\u30b8\u5bb9\u91cf\u304c\u9650\u5b9a\u7684\uff08\u5c0f\u3055\u306a\u30e2\u30c7\u30eb\u30b5\u30a4\u30ba\u304c\u5fc5\u8981\uff09 \u30a4\u30f3\u30bf\u30fc\u30cd\u30c3\u30c8\u63a5\u7d9a\u4e0d\u8981\uff08\u5834\u5408\u306b\u3088\u308b\uff09 \u30c7\u30d0\u30a4\u30b9\u56fa\u6709\u306e\u30b9\u30ad\u30eb\u304c\u5fc5\u8981\u306a\u5834\u5408\u304c\u591a\u3044 \u30af\u30e9\u30a6\u30c9 \u307b\u307c\u7121\u5236\u9650\u306e\u8a08\u7b97\u80fd\u529b\uff08\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u30b9\u30b1\u30fc\u30eb\u30a2\u30c3\u30d7\u53ef\u80fd\uff09 \u30b3\u30b9\u30c8\u304c\u5236\u5fa1\u4e0d\u80fd\u306b\u306a\u308b\u53ef\u80fd\u6027\uff08\u9069\u5207\u306a\u30b9\u30b1\u30fc\u30ea\u30f3\u30b0\u5236\u9650\u304c\u306a\u3044\u5834\u5408\uff09 1\u3064\u306e\u30e2\u30c7\u30eb\u3092\u30c7\u30d7\u30ed\u30a4\u3057\u3066\u3069\u3053\u3067\u3082\u4f7f\u7528\u53ef\u80fd\uff08API\u7d4c\u7531\uff09 \u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u9045\u5ef6\u306b\u3088\u308a\u4e88\u6e2c\u304c\u9045\u304f\u306a\u308b\u53ef\u80fd\u6027 \u65e2\u5b58\u306e\u30af\u30e9\u30a6\u30c9\u30a8\u30b3\u30b7\u30b9\u30c6\u30e0\u3068\u306e\u9023\u643a \u30c7\u30fc\u30bf\u304c\u30c7\u30d0\u30a4\u30b9\u3092\u96e2\u308c\u308b\uff08\u30d7\u30e9\u30a4\u30d0\u30b7\u30fc\u306e\u61f8\u5ff5\uff09","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u30c7\u30d7\u30ed\u30a4\u30e1\u30f3\u30c8","Gradio","Hugging Face","\u753b\u50cf\u5206\u985e","MLOps","\u8ee2\u79fb\u5b66\u7fd2"]},{"location":"PyTorch/10_pytorch_model_deployment/#_7","title":"\u74b0\u5883\u306e\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7","text":"<p>\u307e\u305a\u5fc5\u8981\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u307e\u3059\uff1a</p> <pre><code># \u5fc5\u8981\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\nimport matplotlib.pyplot as plt\nimport torch\nimport torchvision\n\nfrom torch import nn\nfrom torchvision import transforms\nfrom torchinfo import summary\nfrom going_modular import data_setup, engine\nfrom helper_functions import download_data, set_seeds, plot_loss_curves\n</code></pre> <p>\u30c7\u30d0\u30a4\u30b9\u306b\u4f9d\u5b58\u3057\u306a\u3044\u30b3\u30fc\u30c9\u3092\u8a2d\u5b9a\uff1a</p> <pre><code>device = \"mps\" if torch.mps.is_available() else \"cpu\"\ndevice\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c\uff1a <pre><code>'mps'\n</code></pre></p>","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u30c7\u30d7\u30ed\u30a4\u30e1\u30f3\u30c8","Gradio","Hugging Face","\u753b\u50cf\u5206\u985e","MLOps","\u8ee2\u79fb\u5b66\u7fd2"]},{"location":"PyTorch/10_pytorch_model_deployment/#1-efficientnetb2","title":"1. EfficientNetB2\u7279\u5fb4\u62bd\u51fa\u5668\u306e\u4f5c\u6210","text":"","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u30c7\u30d7\u30ed\u30a4\u30e1\u30f3\u30c8","Gradio","Hugging Face","\u753b\u50cf\u5206\u985e","MLOps","\u8ee2\u79fb\u5b66\u7fd2"]},{"location":"PyTorch/10_pytorch_model_deployment/#11-efficientnetb2","title":"1.1 EfficientNetB2\u7279\u5fb4\u62bd\u51fa\u5668\u3092\u4f5c\u6210\u3059\u308b\u95a2\u6570","text":"<p>\u8ee2\u79fb\u5b66\u7fd2\u3092\u6d3b\u7528\u3059\u308b\u305f\u3081\u3001\u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u306eEfficientNetB2\u30e2\u30c7\u30eb\u3092\u4f7f\u7528\u3057\u307e\u3059\uff1a</p> <pre><code>def create_effnetb2_model(num_classes:int=3, \n                          seed:int=42):\n    \"\"\"EfficientNetB2\u7279\u5fb4\u62bd\u51fa\u30e2\u30c7\u30eb\u3068\u5909\u63db\u51e6\u7406\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\n    Args:\n        num_classes (int, optional): \u5206\u985e\u5668\u30d8\u30c3\u30c9\u306e\u30af\u30e9\u30b9\u6570\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u306f3\u3002\n        seed (int, optional): \u30e9\u30f3\u30c0\u30e0\u30b7\u30fc\u30c9\u5024\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u306f42\u3002\n\n    Returns:\n        model (torch.nn.Module): EfficientNetB2\u7279\u5fb4\u62bd\u51fa\u30e2\u30c7\u30eb\n        transforms (torchvision.transforms): EfficientNetB2\u7528\u306e\u753b\u50cf\u5909\u63db\u51e6\u7406\n    \"\"\"\n    # 1, 2, 3. EfficientNetB2\u306e\u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u91cd\u307f\u3001\u5909\u63db\u51e6\u7406\u3001\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\n    weights = torchvision.models.EfficientNet_B2_Weights.DEFAULT\n    transforms = weights.transforms()\n    model = torchvision.models.efficientnet_b2(weights=weights)\n\n    # 4. \u30d9\u30fc\u30b9\u30e2\u30c7\u30eb\u306e\u5168\u30ec\u30a4\u30e4\u30fc\u3092\u51cd\u7d50\n    for param in model.parameters():\n        param.requires_grad = False\n\n    # 5. \u518d\u73fe\u6027\u306e\u305f\u3081\u30e9\u30f3\u30c0\u30e0\u30b7\u30fc\u30c9\u3092\u8a2d\u5b9a\u3057\u3066\u5206\u985e\u5668\u30d8\u30c3\u30c9\u3092\u5909\u66f4\n    torch.manual_seed(seed)\n    model.classifier = nn.Sequential(\n        nn.Dropout(p=0.3, inplace=True),\n        nn.Linear(in_features=1408, out_features=num_classes),\n    )\n\n    return model, transforms\n</code></pre>","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u30c7\u30d7\u30ed\u30a4\u30e1\u30f3\u30c8","Gradio","Hugging Face","\u753b\u50cf\u5206\u985e","MLOps","\u8ee2\u79fb\u5b66\u7fd2"]},{"location":"PyTorch/10_pytorch_model_deployment/#2-foodvision-big","title":"2. FoodVision Big\u306e\u4f5c\u6210","text":"","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u30c7\u30d7\u30ed\u30a4\u30e1\u30f3\u30c8","Gradio","Hugging Face","\u753b\u50cf\u5206\u985e","MLOps","\u8ee2\u79fb\u5b66\u7fd2"]},{"location":"PyTorch/10_pytorch_model_deployment/#21-food101","title":"2.1 Food101\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u7528\u306e\u30e2\u30c7\u30eb\u3068\u5909\u63db\u51e6\u7406\u306e\u4f5c\u6210","text":"<p>Food101\u306f101\u7a2e\u985e\u306e\u98df\u54c1\u30af\u30e9\u30b9\u3092\u6301\u3064\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3067\u3059\u3002\u5148\u307b\u3069\u4f5c\u6210\u3057\u305f\u95a2\u6570\u3092\u4f7f\u3063\u3066\u3001101\u30af\u30e9\u30b9\u5bfe\u5fdc\u306e\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3057\u307e\u3059\uff1a</p> <pre><code># Food101\u306e101\u30af\u30e9\u30b9\u306b\u5bfe\u5fdc\u3057\u305fEfficientNetB2\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\neffnetb2_food101, effnetb2_transforms = create_effnetb2_model(num_classes=101)\n</code></pre> <p>\u30c7\u30fc\u30bf\u62e1\u5f35\u3092\u542b\u3080\u5b66\u7fd2\u7528\u306e\u5909\u63db\u51e6\u7406\u3092\u4f5c\u6210\uff1a</p> <pre><code># Food101\u5b66\u7fd2\u30c7\u30fc\u30bf\u7528\u306e\u5909\u63db\u51e6\u7406\uff08\u5b66\u7fd2\u753b\u50cf\u306b\u306e\u307f\u30c7\u30fc\u30bf\u62e1\u5f35\u3092\u9069\u7528\uff09\nfood101_train_transforms = torchvision.transforms.Compose([\n    torchvision.transforms.TrivialAugmentWide(),\n    effnetb2_transforms,\n])\n</code></pre> <p>\u5909\u63db\u51e6\u7406\u306e\u6bd4\u8f03\uff1a</p> <pre><code>print(f\"\u5b66\u7fd2\u7528\u5909\u63db\u51e6\u7406:\\n{food101_train_transforms}\\n\") \nprint(f\"\u30c6\u30b9\u30c8\u7528\u5909\u63db\u51e6\u7406:\\n{effnetb2_transforms}\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c\uff1a <pre><code>\u5b66\u7fd2\u7528\u5909\u63db\u51e6\u7406:\nCompose(\n    TrivialAugmentWide(num_magnitude_bins=31, interpolation=InterpolationMode.NEAREST, fill=None)\n    ImageClassification(\n    crop_size=[288]\n    resize_size=[288]\n    mean=[0.485, 0.456, 0.406]\n    std=[0.229, 0.224, 0.225]\n    interpolation=InterpolationMode.BICUBIC\n)\n)\n\n\u30c6\u30b9\u30c8\u7528\u5909\u63db\u51e6\u7406:\nImageClassification(\n    crop_size=[288]\n    resize_size=[288]\n    mean=[0.485, 0.456, 0.406]\n    std=[0.229, 0.224, 0.225]\n    interpolation=InterpolationMode.BICUBIC\n)\n</code></pre></p>","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u30c7\u30d7\u30ed\u30a4\u30e1\u30f3\u30c8","Gradio","Hugging Face","\u753b\u50cf\u5206\u985e","MLOps","\u8ee2\u79fb\u5b66\u7fd2"]},{"location":"PyTorch/10_pytorch_model_deployment/#22-foodvision-big","title":"2.2 FoodVision Big\u7528\u306e\u30c7\u30fc\u30bf\u53d6\u5f97","text":"<p>PyTorch\u306e<code>torchvision.datasets.Food101()</code>\u3092\u4f7f\u7528\u3057\u3066\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\uff1a</p> <pre><code>from torchvision import datasets\nfrom pathlib import Path\n\n# \u30c7\u30fc\u30bf\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u8a2d\u5b9a\ndata_dir = Path(\"data\")\n\n# \u5b66\u7fd2\u30c7\u30fc\u30bf\u306e\u53d6\u5f97\uff08~750\u753b\u50cf \u00d7 101\u98df\u54c1\u30af\u30e9\u30b9\uff09\ntrain_data = datasets.Food101(root=data_dir,\n                              split=\"train\",\n                              transform=food101_train_transforms,\n                              download=True)\n\n# \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u53d6\u5f97\uff08~250\u753b\u50cf \u00d7 101\u98df\u54c1\u30af\u30e9\u30b9\uff09\ntest_data = datasets.Food101(root=data_dir,\n                             split=\"test\",\n                             transform=effnetb2_transforms,\n                             download=True)\n</code></pre> <p>\u30af\u30e9\u30b9\u540d\u306e\u78ba\u8a8d\uff1a</p> <pre><code># Food101\u306e\u30af\u30e9\u30b9\u540d\u3092\u53d6\u5f97\nfood101_class_names = train_data.classes\n\n# \u6700\u521d\u306e10\u500b\u3092\u8868\u793a\nfood101_class_names[:10]\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c\uff1a <pre><code>['apple_pie',\n 'baby_back_ribs',\n 'baklava',\n 'beef_carpaccio',\n 'beef_tartare',\n 'beet_salad',\n 'beignets',\n 'bibimbap',\n 'bread_pudding',\n 'breakfast_burrito']\n</code></pre></p>","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u30c7\u30d7\u30ed\u30a4\u30e1\u30f3\u30c8","Gradio","Hugging Face","\u753b\u50cf\u5206\u985e","MLOps","\u8ee2\u79fb\u5b66\u7fd2"]},{"location":"PyTorch/10_pytorch_model_deployment/#23-food101","title":"2.3 \u9ad8\u901f\u5b9f\u9a13\u306e\u305f\u3081\u306eFood101\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u30b5\u30d6\u30bb\u30c3\u30c8\u4f5c\u6210","text":"<p>\u5b66\u7fd2\u3092\u9ad8\u901f\u5316\u3059\u308b\u305f\u3081\u3001\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e20%\u306e\u307f\u3092\u4f7f\u7528\u3057\u307e\u3059\uff1a</p> <pre><code>def split_dataset(dataset:torchvision.datasets, split_size:float=0.2, seed:int=42):\n    \"\"\"\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u6307\u5b9a\u3055\u308c\u305f\u6bd4\u7387\u3067\u30e9\u30f3\u30c0\u30e0\u306b\u5206\u5272\u3057\u307e\u3059\u3002\n\n    Args:\n        dataset (torchvision.datasets): PyTorch\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\n        split_size (float, optional): \u5206\u5272\u30b5\u30a4\u30ba\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u306f0.2\n        seed (int, optional): \u30e9\u30f3\u30c0\u30e0\u30b7\u30fc\u30c9\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u306f42\n\n    Returns:\n        tuple: (\u5206\u52721, \u5206\u52722)\u306e\u30bf\u30d7\u30eb\n    \"\"\"\n    # \u5143\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u9577\u306b\u57fa\u3065\u3044\u3066\u5206\u5272\u9577\u3092\u4f5c\u6210\n    length_1 = int(len(dataset) * split_size) # \u5e0c\u671b\u3059\u308b\u9577\u3055\n    length_2 = len(dataset) - length_1 # \u6b8b\u308a\u306e\u9577\u3055\n\n    # \u60c5\u5831\u3092\u8868\u793a\n    print(f\"[INFO] \u9577\u3055{len(dataset)}\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u4ee5\u4e0b\u306e\u30b5\u30a4\u30ba\u306b\u5206\u5272: {length_1} ({int(split_size*100)}%), {length_2} ({int((1-split_size)*100)}%)\")\n\n    # \u6307\u5b9a\u3055\u308c\u305f\u30e9\u30f3\u30c0\u30e0\u30b7\u30fc\u30c9\u3067\u5206\u5272\u3092\u4f5c\u6210\n    random_split_1, random_split_2 = torch.utils.data.random_split(dataset, \n                                                                   lengths=[length_1, length_2],\n                                                                   generator=torch.manual_seed(seed))\n    return random_split_1, random_split_2\n</code></pre> <p>20%\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u5206\u5272\u3092\u4f5c\u6210\uff1a</p> <pre><code># Food101\u306e\u5b66\u7fd2\u30c7\u30fc\u30bf\u306e20%\u5206\u5272\u3092\u4f5c\u6210\ntrain_data_food101_20_percent, _ = split_dataset(dataset=train_data,\n                                                 split_size=0.2)\n\n# Food101\u306e\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e20%\u5206\u5272\u3092\u4f5c\u6210\ntest_data_food101_20_percent, _ = split_dataset(dataset=test_data,\n                                                split_size=0.2)\n\nlen(train_data_food101_20_percent), len(test_data_food101_20_percent)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c\uff1a <pre><code>[INFO] \u9577\u305575750\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u4ee5\u4e0b\u306e\u30b5\u30a4\u30ba\u306b\u5206\u5272: 15150 (20%), 60600 (80%)\n[INFO] \u9577\u305525250\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u4ee5\u4e0b\u306e\u30b5\u30a4\u30ba\u306b\u5206\u5272: 5050 (20%), 20200 (80%)\n(15150, 5050)\n</code></pre></p>","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u30c7\u30d7\u30ed\u30a4\u30e1\u30f3\u30c8","Gradio","Hugging Face","\u753b\u50cf\u5206\u985e","MLOps","\u8ee2\u79fb\u5b66\u7fd2"]},{"location":"PyTorch/10_pytorch_model_deployment/#24-food101dataloader","title":"2.4 Food101\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092DataLoader\u306b\u5909\u63db","text":"<pre><code>import os\n\nBATCH_SIZE = 32\nNUM_WORKERS = 2 if os.cpu_count() &lt;= 4 else 4\n\n# Food101 20%\u5b66\u7fd2\u7528DataLoader\u3092\u4f5c\u6210\ntrain_dataloader_food101_20_percent = torch.utils.data.DataLoader(train_data_food101_20_percent,\n                                                                  batch_size=BATCH_SIZE,\n                                                                  shuffle=True,\n                                                                  num_workers=NUM_WORKERS)\n# Food101 20%\u30c6\u30b9\u30c8\u7528DataLoader\u3092\u4f5c\u6210\ntest_dataloader_food101_20_percent = torch.utils.data.DataLoader(test_data_food101_20_percent,\n                                                                 batch_size=BATCH_SIZE,\n                                                                 shuffle=False,\n                                                                 num_workers=NUM_WORKERS)\n</code></pre>","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u30c7\u30d7\u30ed\u30a4\u30e1\u30f3\u30c8","Gradio","Hugging Face","\u753b\u50cf\u5206\u985e","MLOps","\u8ee2\u79fb\u5b66\u7fd2"]},{"location":"PyTorch/10_pytorch_model_deployment/#25-foodvision-big","title":"2.5 FoodVision Big\u30e2\u30c7\u30eb\u306e\u5b66\u7fd2","text":"<p>\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u3068\u640d\u5931\u95a2\u6570\u3092\u8a2d\u5b9a\u3057\u3001\u30e2\u30c7\u30eb\u3092\u5b66\u7fd2\u3057\u307e\u3059\u3002\u30e9\u30d9\u30eb\u30b9\u30e0\u30fc\u30b8\u30f3\u30b0\u3092\u4f7f\u7528\u3057\u3066\u6b63\u5247\u5316\u3092\u884c\u3044\u307e\u3059\uff1a</p> <pre><code>from going_modular import engine\n\n# \u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u306e\u8a2d\u5b9a\noptimizer = torch.optim.Adam(params=effnetb2_food101.parameters(),\n                             lr=1e-3)\n\n# \u640d\u5931\u95a2\u6570\u306e\u8a2d\u5b9a\uff08\u30af\u30e9\u30b9\u6570\u304c\u591a\u3044\u305f\u3081\u30e9\u30d9\u30eb\u30b9\u30e0\u30fc\u30b8\u30f3\u30b0\u3092\u4f7f\u7528\uff09\nloss_fn = torch.nn.CrossEntropyLoss(label_smoothing=0.1)\n\n# \u5143\u306eFood101\u8ad6\u6587\u306e56.4%\u306e\u7cbe\u5ea6\u309220%\u306e\u30c7\u30fc\u30bf\u3067\u8d85\u3048\u308b\u3053\u3068\u304c\u76ee\u6a19\nset_seeds()    \neffnetb2_food101_results = engine.train(model=effnetb2_food101.to(device),\n                                        train_dataloader=train_dataloader_food101_20_percent,\n                                        test_dataloader=test_dataloader_food101_20_percent,\n                                        optimizer=optimizer,\n                                        loss_fn=loss_fn,\n                                        epochs=5,\n                                        device=device,\n                                        writer=None)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c\uff1a <pre><code>Epoch: 1 | train_loss: 3.6376 | train_acc: 0.2799 | test_loss: 2.7740 | test_acc: 0.4924\nEpoch: 2 | train_loss: 2.8583 | train_acc: 0.4370 | test_loss: 2.4678 | test_acc: 0.5420\nEpoch: 3 | train_loss: 2.6578 | train_acc: 0.4840 | test_loss: 2.3479 | test_acc: 0.5655\nEpoch: 4 | train_loss: 2.5458 | train_acc: 0.5093 | test_loss: 2.3044 | test_acc: 0.5769\nEpoch: 5 | train_loss: 2.4973 | train_acc: 0.5215 | test_loss: 2.2772 | test_acc: 0.5766\n</code></pre></p> <p>\u7d20\u6674\u3089\u3057\u3044\uff01\u5143\u306eFood101\u8ad6\u6587\u306e56.4%\u306e\u7cbe\u5ea6\u3092\u3001\u308f\u305a\u304b20%\u306e\u5b66\u7fd2\u30c7\u30fc\u30bf\u3067\u8d85\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\u3002\u3053\u308c\u304c\u8ee2\u79fb\u5b66\u7fd2\u306e\u529b\u3067\u3059\uff01</p>","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u30c7\u30d7\u30ed\u30a4\u30e1\u30f3\u30c8","Gradio","Hugging Face","\u753b\u50cf\u5206\u985e","MLOps","\u8ee2\u79fb\u5b66\u7fd2"]},{"location":"PyTorch/10_pytorch_model_deployment/#26-foodvision-big","title":"2.6 FoodVision Big\u30e2\u30c7\u30eb\u306e\u640d\u5931\u66f2\u7dda\u306e\u78ba\u8a8d","text":"<pre><code>from helper_functions import plot_loss_curves\n\n# FoodVision Big\u306e\u640d\u5931\u66f2\u7dda\u3092\u78ba\u8a8d\nplot_loss_curves(effnetb2_food101_results)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c\uff1a </p> <p>\u6b63\u5247\u5316\u6280\u8853\uff08\u30c7\u30fc\u30bf\u62e1\u5f35\u3068\u30e9\u30d9\u30eb\u30b9\u30e0\u30fc\u30b8\u30f3\u30b0\uff09\u306b\u3088\u308a\u3001\u30e2\u30c7\u30eb\u306e\u904e\u5b66\u7fd2\u3092\u9632\u3050\u3053\u3068\u304c\u3067\u304d\u3066\u3044\u307e\u3059\u3002\u5b66\u7fd2\u640d\u5931\u304c\u30c6\u30b9\u30c8\u640d\u5931\u3088\u308a\u3082\u307e\u3060\u9ad8\u3044\u3053\u3068\u304b\u3089\u3001\u30e2\u30c7\u30eb\u306b\u306f\u307e\u3060\u5b66\u7fd2\u80fd\u529b\u304c\u6b8b\u3063\u3066\u304a\u308a\u3001\u3055\u3089\u306a\u308b\u5b66\u7fd2\u3067\u6539\u5584\u306e\u4f59\u5730\u304c\u3042\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002</p>","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u30c7\u30d7\u30ed\u30a4\u30e1\u30f3\u30c8","Gradio","Hugging Face","\u753b\u50cf\u5206\u985e","MLOps","\u8ee2\u79fb\u5b66\u7fd2"]},{"location":"PyTorch/10_pytorch_model_deployment/#27-foodvision-big","title":"2.7 FoodVision Big\u306e\u4fdd\u5b58\u3068\u8aad\u307f\u8fbc\u307f","text":"<p>\u5b66\u7fd2\u3057\u305f\u30e2\u30c7\u30eb\u3092\u4fdd\u5b58\u3057\u307e\u3059\uff1a</p> <pre><code>from going_modular import utils\n\n# \u30e2\u30c7\u30eb\u30d1\u30b9\u306e\u4f5c\u6210\neffnetb2_food101_model_path = \"10_pretrained_effnetb2_feature_extractor_food101_20_percent.pth\" \n\n# FoodVision Big\u30e2\u30c7\u30eb\u3092\u4fdd\u5b58\nutils.save_model(model=effnetb2_food101,\n                 target_dir=\"models\",\n                 model_name=effnetb2_food101_model_path)\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c\uff1a <pre><code>[INFO] Saving model to: models/10_pretrained_effnetb2_feature_extractor_food101_20_percent.pth\n</code></pre></p> <p>\u4fdd\u5b58\u3057\u305f\u30e2\u30c7\u30eb\u3092\u8aad\u307f\u8fbc\u3093\u3067\u78ba\u8a8d\uff1a</p> <pre><code># Food101\u5bfe\u5fdc\u306eEfficientNetB2\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\nloaded_effnetb2_food101, effnetb2_transforms = create_effnetb2_model(num_classes=101)\n\n# \u4fdd\u5b58\u3055\u308c\u305f\u30e2\u30c7\u30eb\u306estate_dict()\u3092\u8aad\u307f\u8fbc\u307f\nloaded_effnetb2_food101.load_state_dict(torch.load(\"models/10_pretrained_effnetb2_feature_extractor_food101_20_percent.pth\"))\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c\uff1a <pre><code>&lt;All keys matched successfully&gt;\n</code></pre></p>","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u30c7\u30d7\u30ed\u30a4\u30e1\u30f3\u30c8","Gradio","Hugging Face","\u753b\u50cf\u5206\u985e","MLOps","\u8ee2\u79fb\u5b66\u7fd2"]},{"location":"PyTorch/10_pytorch_model_deployment/#28-foodvision-big","title":"2.8 FoodVision Big\u30e2\u30c7\u30eb\u306e\u30b5\u30a4\u30ba\u78ba\u8a8d","text":"<p>FoodVision Big\u306f101\u30af\u30e9\u30b9\u3092\u5206\u985e\u3067\u304d\u307e\u3059\u3002</p> <pre><code>from pathlib import Path\n\n# \u30e2\u30c7\u30eb\u30b5\u30a4\u30ba\u3092\u30d0\u30a4\u30c8\u3067\u53d6\u5f97\u3057\u3001\u30e1\u30ac\u30d0\u30a4\u30c8\u306b\u5909\u63db\npretrained_effnetb2_food101_model_size = Path(\"models\", effnetb2_food101_model_path).stat().st_size // (1024*1024)\nprint(f\"\u4e8b\u524d\u5b66\u7fd2\u6e08\u307fEfficientNetB2\u7279\u5fb4\u62bd\u51fa\u5668Food101\u30e2\u30c7\u30eb\u30b5\u30a4\u30ba: {pretrained_effnetb2_food101_model_size} MB\")\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c\uff1a <pre><code>\u4e8b\u524d\u5b66\u7fd2\u6e08\u307fEfficientNetB2\u7279\u5fb4\u62bd\u51fa\u5668Food101\u30e2\u30c7\u30eb\u30b5\u30a4\u30ba: 30 MB\n</code></pre></p>","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u30c7\u30d7\u30ed\u30a4\u30e1\u30f3\u30c8","Gradio","Hugging Face","\u753b\u50cf\u5206\u985e","MLOps","\u8ee2\u79fb\u5b66\u7fd2"]},{"location":"PyTorch/10_pytorch_model_deployment/#3-foodvision-big","title":"3. FoodVision Big\u30e2\u30c7\u30eb\u3092\u30c7\u30d7\u30ed\u30a4\u53ef\u80fd\u306a\u30a2\u30d7\u30ea\u306b\u5909\u63db","text":"","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u30c7\u30d7\u30ed\u30a4\u30e1\u30f3\u30c8","Gradio","Hugging Face","\u753b\u50cf\u5206\u985e","MLOps","\u8ee2\u79fb\u5b66\u7fd2"]},{"location":"PyTorch/10_pytorch_model_deployment/#31","title":"3.1 \u30c7\u30e2\u7528\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u9020\u306e\u4f5c\u6210","text":"<pre><code>from pathlib import Path\n\n# FoodVision Big\u30c7\u30e2\u30d1\u30b9\u306e\u4f5c\u6210\nfoodvision_big_demo_path = Path(\"demos/foodvision_big/\")\n\n# FoodVision Big\u30c7\u30e2\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u4f5c\u6210\nfoodvision_big_demo_path.mkdir(parents=True, exist_ok=True)\n\n# FoodVision Big\u30c7\u30e2\u4f8b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u4f5c\u6210\n(foodvision_big_demo_path / \"examples\").mkdir(parents=True, exist_ok=True)\n</code></pre> <p>\u5fc5\u8981\u306a\u30d5\u30a1\u30a4\u30eb\u3092\u79fb\u52d5\uff1a</p> <pre><code># \u30b5\u30f3\u30d7\u30eb\u753b\u50cf\u3092\u30b3\u30d4\u30fc\n!cp data/sushi.jpg demos/foodvision_big/examples/sushi.jpg\n\n# \u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u3092FoodVision Big\u30c7\u30e2\u30d5\u30a9\u30eb\u30c0\u306b\u79fb\u52d5\n!mv models/10_pretrained_effnetb2_feature_extractor_food101_20_percent.pth demos/foodvision_big\n</code></pre>","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u30c7\u30d7\u30ed\u30a4\u30e1\u30f3\u30c8","Gradio","Hugging Face","\u753b\u50cf\u5206\u985e","MLOps","\u8ee2\u79fb\u5b66\u7fd2"]},{"location":"PyTorch/10_pytorch_model_deployment/#32-food101class_namestxt","title":"3.2 Food101\u30af\u30e9\u30b9\u540d\u3092\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58\uff08<code>class_names.txt</code>\uff09","text":"<p>101\u500b\u306e\u30af\u30e9\u30b9\u540d\u3092\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58\u3057\u307e\u3059\uff1a</p> <pre><code># Food101\u30af\u30e9\u30b9\u540d\u306e\u30d1\u30b9\u3092\u4f5c\u6210\nfoodvision_big_class_names_path = foodvision_big_demo_path / \"class_names.txt\"\n\n# Food101\u30af\u30e9\u30b9\u540d\u30ea\u30b9\u30c8\u3092\u30d5\u30a1\u30a4\u30eb\u306b\u66f8\u304d\u8fbc\u307f\nwith open(foodvision_big_class_names_path, \"w\") as f:\n    print(f\"[INFO] Food101\u30af\u30e9\u30b9\u540d\u3092{foodvision_big_class_names_path}\u306b\u4fdd\u5b58\")\n    f.write(\"\\n\".join(food101_class_names)) # \u5404\u30af\u30e9\u30b9\u9593\u306b\u6539\u884c\u3092\u633f\u5165\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c\uff1a <pre><code>[INFO] Food101\u30af\u30e9\u30b9\u540d\u3092demos/foodvision_big/class_names.txt\u306b\u4fdd\u5b58\n</code></pre></p> <p>\u4fdd\u5b58\u3057\u305f\u30af\u30e9\u30b9\u540d\u3092\u8aad\u307f\u8fbc\u3093\u3067\u78ba\u8a8d\uff1a</p> <pre><code># Food101\u30af\u30e9\u30b9\u540d\u30d5\u30a1\u30a4\u30eb\u3092\u958b\u3044\u3066\u5404\u884c\u3092\u30ea\u30b9\u30c8\u306b\u8aad\u307f\u8fbc\u307f\nwith open(foodvision_big_class_names_path, \"r\") as f:\n    food101_class_names_loaded = [food.strip() for food in  f.readlines()]\n\n# \u8aad\u307f\u8fbc\u3093\u3060\u6700\u521d\u306e5\u3064\u306e\u30af\u30e9\u30b9\u540d\u3092\u8868\u793a\nfood101_class_names_loaded[:5]\n</code></pre> <p>\u5b9f\u884c\u7d50\u679c\uff1a <pre><code>['apple_pie', 'baby_back_ribs', 'baklava', 'beef_carpaccio', 'beef_tartare']\n</code></pre></p>","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u30c7\u30d7\u30ed\u30a4\u30e1\u30f3\u30c8","Gradio","Hugging Face","\u753b\u50cf\u5206\u985e","MLOps","\u8ee2\u79fb\u5b66\u7fd2"]},{"location":"PyTorch/10_pytorch_model_deployment/#33-foodvision-bigpythonmodelpy","title":"3.3 FoodVision Big\u30e2\u30c7\u30eb\u3092Python\u30b9\u30af\u30ea\u30d7\u30c8\u306b\u5909\u63db\uff08<code>model.py</code>\uff09","text":"<pre><code>%%writefile demos/foodvision_big/model.py\nimport torch\nimport torchvision\n\nfrom torch import nn\n\n\ndef create_effnetb2_model(num_classes:int=3, \n                          seed:int=42):\n    \"\"\"EfficientNetB2\u7279\u5fb4\u62bd\u51fa\u30e2\u30c7\u30eb\u3068\u5909\u63db\u51e6\u7406\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\n    Args:\n        num_classes (int, optional): \u5206\u985e\u5668\u30d8\u30c3\u30c9\u306e\u30af\u30e9\u30b9\u6570\u3002\n            \u30c7\u30d5\u30a9\u30eb\u30c8\u306f3\u3002\n        seed (int, optional): \u30e9\u30f3\u30c0\u30e0\u30b7\u30fc\u30c9\u5024\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u306f42\u3002\n\n    Returns:\n        model (torch.nn.Module): EfficientNetB2\u7279\u5fb4\u62bd\u51fa\u30e2\u30c7\u30eb\n        transforms (torchvision.transforms): EfficientNetB2\u753b\u50cf\u5909\u63db\u51e6\u7406\n    \"\"\"\n    # EfficientNetB2\u306e\u4e8b\u524d\u5b66\u7fd2\u6e08\u307f\u91cd\u307f\u3001\u5909\u63db\u51e6\u7406\u3001\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\n    weights = torchvision.models.EfficientNet_B2_Weights.DEFAULT\n    transforms = weights.transforms()\n    model = torchvision.models.efficientnet_b2(weights=weights)\n\n    # \u30d9\u30fc\u30b9\u30e2\u30c7\u30eb\u306e\u5168\u30ec\u30a4\u30e4\u30fc\u3092\u51cd\u7d50\n    for param in model.parameters():\n        param.requires_grad = False\n\n    # \u518d\u73fe\u6027\u306e\u305f\u3081\u30e9\u30f3\u30c0\u30e0\u30b7\u30fc\u30c9\u3092\u8a2d\u5b9a\u3057\u3066\u5206\u985e\u5668\u30d8\u30c3\u30c9\u3092\u5909\u66f4\n    torch.manual_seed(seed)\n    model.classifier = nn.Sequential(\n        nn.Dropout(p=0.3, inplace=True),\n        nn.Linear(in_features=1408, out_features=num_classes),\n    )\n\n    return model, transforms\n</code></pre>","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u30c7\u30d7\u30ed\u30a4\u30e1\u30f3\u30c8","Gradio","Hugging Face","\u753b\u50cf\u5206\u985e","MLOps","\u8ee2\u79fb\u5b66\u7fd2"]},{"location":"PyTorch/10_pytorch_model_deployment/#34-foodvision-big-gradiopythonapppy","title":"3.4 FoodVision Big Gradio\u30a2\u30d7\u30ea\u3092Python\u30b9\u30af\u30ea\u30d7\u30c8\u306b\u5909\u63db\uff08<code>app.py</code>\uff09","text":"<pre><code>%%writefile demos/foodvision_big/app.py\n### 1. \u30a4\u30f3\u30dd\u30fc\u30c8\u3068\u30af\u30e9\u30b9\u540d\u306e\u8a2d\u5b9a ### \nimport gradio as gr\nimport os\nimport torch\n\nfrom model import create_effnetb2_model\nfrom timeit import default_timer as timer\nfrom typing import Tuple, Dict\n\n# \u30af\u30e9\u30b9\u540d\u3092\u8a2d\u5b9a\nwith open(\"class_names.txt\", \"r\") as f: # class_names.txt\u304b\u3089\u8aad\u307f\u8fbc\u307f\n    class_names = [food_name.strip() for food_name in  f.readlines()]\n\n### 2. \u30e2\u30c7\u30eb\u3068\u5909\u63db\u51e6\u7406\u306e\u6e96\u5099 ###    \n\n# \u30e2\u30c7\u30eb\u3092\u4f5c\u6210\neffnetb2, effnetb2_transforms = create_effnetb2_model(\n    num_classes=101, # len(class_names)\u3082\u4f7f\u7528\u53ef\u80fd\n)\n\n# \u4fdd\u5b58\u3055\u308c\u305f\u91cd\u307f\u3092\u8aad\u307f\u8fbc\u307f\neffnetb2.load_state_dict(\n    torch.load(\n        f=\"10_pretrained_effnetb2_feature_extractor_food101_20_percent.pth\",\n        map_location=torch.device(\"cpu\"),  # CPU\u306b\u8aad\u307f\u8fbc\u307f\n    )\n)\n\n### 3. \u4e88\u6e2c\u95a2\u6570 ###\n\n# \u4e88\u6e2c\u95a2\u6570\u3092\u4f5c\u6210\ndef predict(img) -&gt; Tuple[Dict, float]:\n    \"\"\"\u753b\u50cf\u3092\u5909\u63db\u3057\u3066\u4e88\u6e2c\u3092\u5b9f\u884c\u3057\u3001\u4e88\u6e2c\u7d50\u679c\u3068\u6240\u8981\u6642\u9593\u3092\u8fd4\u3057\u307e\u3059\u3002\n    \"\"\"\n    # \u30bf\u30a4\u30de\u30fc\u3092\u958b\u59cb\n    start_time = timer()\n\n    # \u5bfe\u8c61\u753b\u50cf\u3092\u5909\u63db\u3057\u3066\u30d0\u30c3\u30c1\u6b21\u5143\u3092\u8ffd\u52a0\n    img = effnetb2_transforms(img).unsqueeze(0)\n\n    # \u30e2\u30c7\u30eb\u3092\u8a55\u4fa1\u30e2\u30fc\u30c9\u306b\u3057\u3066\u63a8\u8ad6\u30e2\u30fc\u30c9\u3092\u30aa\u30f3\u306b\u3059\u308b\n    effnetb2.eval()\n    with torch.inference_mode():\n        # \u5909\u63db\u3055\u308c\u305f\u753b\u50cf\u3092\u30e2\u30c7\u30eb\u306b\u901a\u3057\u3001\u4e88\u6e2c\u30ed\u30b8\u30c3\u30c8\u3092\u4e88\u6e2c\u78ba\u7387\u306b\u5909\u63db\n        pred_probs = torch.softmax(effnetb2(img), dim=1)\n\n    # \u5404\u4e88\u6e2c\u30af\u30e9\u30b9\u306e\u4e88\u6e2c\u30e9\u30d9\u30eb\u3068\u4e88\u6e2c\u78ba\u7387\u306e\u8f9e\u66f8\u3092\u4f5c\u6210\uff08Gradio\u306e\u51fa\u529b\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u5fc5\u8981\u306a\u5f62\u5f0f\uff09\n    pred_labels_and_probs = {class_names[i]: float(pred_probs[0][i]) for i in range(len(class_names))}\n\n    # \u4e88\u6e2c\u6642\u9593\u3092\u8a08\u7b97\n    pred_time = round(timer() - start_time, 5)\n\n    # \u4e88\u6e2c\u8f9e\u66f8\u3068\u4e88\u6e2c\u6642\u9593\u3092\u8fd4\u3059 \n    return pred_labels_and_probs, pred_time\n\n### 4. Gradio\u30a2\u30d7\u30ea ###\n\n# \u30bf\u30a4\u30c8\u30eb\u3001\u8aac\u660e\u3001\u8a18\u4e8b\u306e\u6587\u5b57\u5217\u3092\u4f5c\u6210\ntitle = \"FoodVision Big\"\ndescription = \"101\u7a2e\u985e\u306e\u98df\u54c1\u753b\u50cf\u3092\u5206\u985e\u3059\u308bEfficientNetB2\u7279\u5fb4\u62bd\u51fa\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30fc\u30d3\u30b8\u30e7\u30f3\u30e2\u30c7\u30eb\u3002\"\narticle = \"[10. PyTorch\u30e2\u30c7\u30eb\u30c7\u30d7\u30ed\u30a4\u30e1\u30f3\u30c8](https://vinsmoke-three.com/PyTorch/10_pytorch_model_deployment/)\u3067\u4f5c\u6210\u3002\"\n\n# \"examples/\"\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304b\u3089\u4f8b\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\nexample_list = [[\"examples/\" + example] for example in os.listdir(\"examples\")]\n\n# Gradio\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u4f5c\u6210 \ndemo = gr.Interface(\n    fn=predict,\n    inputs=gr.Image(type=\"pil\"),\n    outputs=[\n        gr.Label(num_top_classes=5, label=\"\u4e88\u6e2c\u7d50\u679c\"),\n        gr.Number(label=\"\u4e88\u6e2c\u6642\u9593 (\u79d2)\"),\n    ],\n    examples=example_list,\n    title=title,\n    description=description,\n    article=article,\n)\n\n# \u30a2\u30d7\u30ea\u3092\u8d77\u52d5\uff01\ndemo.launch()\n</code></pre>","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u30c7\u30d7\u30ed\u30a4\u30e1\u30f3\u30c8","Gradio","Hugging Face","\u753b\u50cf\u5206\u985e","MLOps","\u8ee2\u79fb\u5b66\u7fd2"]},{"location":"PyTorch/10_pytorch_model_deployment/#35-foodvision-bigrequirementstxt","title":"3.5 FoodVision Big\u7528\u306e\u8981\u4ef6\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\uff08<code>requirements.txt</code>\uff09","text":"<pre><code>%%writefile demos/foodvision_big/requirements.txt\ntorch&gt;=2.3.1,&lt;2.8.0\ntorchvision&gt;=0.18.1,&lt;0.23.0\ngradio&gt;=5.35.0,&lt;6.0.0\n</code></pre>","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u30c7\u30d7\u30ed\u30a4\u30e1\u30f3\u30c8","Gradio","Hugging Face","\u753b\u50cf\u5206\u985e","MLOps","\u8ee2\u79fb\u5b66\u7fd2"]},{"location":"PyTorch/10_pytorch_model_deployment/#36-foodvision-bighugging-face-spaces","title":"3.6 FoodVision Big\u30a2\u30d7\u30ea\u3092Hugging Face Spaces\u306b\u30c7\u30d7\u30ed\u30a4","text":"<p>\u6700\u5f8c\u306b\u3001\u4f5c\u6210\u3057\u305fFoodVision Big\u30a2\u30d7\u30ea\u3092Hugging Face Spaces\u306b\u30c7\u30d7\u30ed\u30a4\u3057\u3066\u3001\u4e16\u754c\u4e2d\u306e\u4eba\u3005\u304c\u4f7f\u3048\u308b\u3088\u3046\u306b\u3057\u307e\u3059\uff01</p> <p>\u30c7\u30d7\u30ed\u30a4\u624b\u9806\uff1a</p> <ol> <li>Hugging Face\u30a2\u30ab\u30a6\u30f3\u30c8\u3092\u4f5c\u6210</li> <li>\u30d7\u30ed\u30d5\u30a3\u30fc\u30eb\u304b\u3089\u300cNew Space\u300d\u3092\u30af\u30ea\u30c3\u30af\u3057\u3066Space\uff08\u30b3\u30fc\u30c9\u30ea\u30dd\u30b8\u30c8\u30ea\uff09\u3092\u958b\u59cb</li> <li>Space\u306b\u540d\u524d\u3092\u4ed8\u3051\u308b\uff08\u4f8b\uff1a<code>vinsmoke-three/foodvision_big</code>\uff09</li> <li>\u30e9\u30a4\u30bb\u30f3\u30b9\u3092\u9078\u629e\uff08\u4f8b\uff1aMIT\uff09</li> <li>Space SDK\u3068\u3057\u3066Gradio\u3092\u9078\u629e</li> <li>\u516c\u958b/\u975e\u516c\u958b\u3092\u9078\u629e\uff08\u516c\u958b\u63a8\u5968\uff09</li> <li>\u300cCreate Space\u300d\u3092\u30af\u30ea\u30c3\u30af</li> <li>\u30bf\u30fc\u30df\u30ca\u30eb\u3067\u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u30af\u30ed\u30fc\u30f3\uff1a    <pre><code>git clone https://huggingface.co/spaces/[YOUR_USERNAME]/[YOUR_SPACE_NAME]\n</code></pre></li> <li><code>foodvision_big</code>\u30d5\u30a9\u30eb\u30c0\u306e\u5185\u5bb9\u3092\u30af\u30ed\u30fc\u30f3\u3057\u305f\u30ea\u30dd\u30b8\u30c8\u30ea\u30d5\u30a9\u30eb\u30c0\u306b\u30b3\u30d4\u30fc</li> <li>Git LFS\uff08Large File Storage\uff09\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb</li> <li>Git LFS\u3092\u6709\u52b9\u5316\uff1a     <pre><code>git lfs install\n</code></pre></li> <li>10MB\u4ee5\u4e0a\u306e\u30d5\u30a1\u30a4\u30eb\u3092Git LFS\u3067\u8ffd\u8de1\uff1a     <pre><code>git lfs track \"10_pretrained_effnetb2_feature_extractor_food101_20_percent.pth\"\n</code></pre></li> <li><code>.gitattributes</code>\u3092\u8ffd\u8de1\uff08Git LFS\u306e\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\uff09\uff1a     <pre><code>git add .gitattributes\n</code></pre></li> <li>\u6b8b\u308a\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u8ffd\u52a0\u3057\u3066\u30b3\u30df\u30c3\u30c8\uff1a     <pre><code>git add *\ngit commit -m \"first commit\"\n</code></pre></li> <li>Hugging Face\u306b\u30d7\u30c3\u30b7\u30e5\uff08\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\uff09\uff1a     <pre><code>git push\n</code></pre></li> <li>3-5\u5206\u5f85\u3063\u3066\u30d3\u30eb\u30c9\u304c\u5b8c\u4e86\u3057\u3001\u30a2\u30d7\u30ea\u304c\u516c\u958b\u3055\u308c\u308b\u306e\u3092\u5f85\u3064</li> </ol> <p>\u3059\u3079\u3066\u304c\u6b63\u3057\u304f\u52d5\u4f5c\u3059\u308c\u3070\u3001FoodVision Big Gradio\u30c7\u30e2\u304c\u98df\u54c1\u3092\u5206\u985e\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff01</p> <p>\u5b8c\u6210\u3057\u305f\u30c7\u30e2\u306f\u3053\u3061\u3089\u3067\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002</p> <p></p> <p>\u7d20\u6674\u3089\u3057\u3044\u6210\u679c\u3067\u3059\uff01\u5358\u7d14\u306a\u76f4\u7dda\u3092\u4e88\u6e2c\u3059\u308bPyTorch\u30e2\u30c7\u30eb\u304b\u3089\u59cb\u307e\u308a\u3001\u4eca\u3067\u306f\u4e16\u754c\u4e2d\u306e\u4eba\u3005\u304c\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30fc\u30d3\u30b8\u30e7\u30f3\u30e2\u30c7\u30eb\u3092\u69cb\u7bc9\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\uff01</p>","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u30c7\u30d7\u30ed\u30a4\u30e1\u30f3\u30c8","Gradio","Hugging Face","\u753b\u50cf\u5206\u985e","MLOps","\u8ee2\u79fb\u5b66\u7fd2"]},{"location":"PyTorch/10_pytorch_model_deployment/#_8","title":"\u91cd\u8981\u306a\u30dd\u30a4\u30f3\u30c8","text":"","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u30c7\u30d7\u30ed\u30a4\u30e1\u30f3\u30c8","Gradio","Hugging Face","\u753b\u50cf\u5206\u985e","MLOps","\u8ee2\u79fb\u5b66\u7fd2"]},{"location":"PyTorch/10_pytorch_model_deployment/#_9","title":"\u30c7\u30d7\u30ed\u30a4\u30e1\u30f3\u30c8\u306e\u91cd\u8981\u6027","text":"<ul> <li>\u30c7\u30d7\u30ed\u30a4\u30e1\u30f3\u30c8\u306f\u5b66\u7fd2\u3068\u540c\u3058\u304f\u3089\u3044\u91cd\u8981\u3067\u3059\u3002 \u826f\u3044\u30e2\u30c7\u30eb\u304c\u3067\u304d\u305f\u3089\u3001\u6700\u521d\u306b\u8003\u3048\u308b\u3079\u304d\u306f\u300c\u3069\u306e\u3088\u3046\u306b\u30c7\u30d7\u30ed\u30a4\u3057\u3066\u4ed6\u306e\u4eba\u304c\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u304b\u300d\u3067\u3059\u3002\u30c7\u30d7\u30ed\u30a4\u30e1\u30f3\u30c8\u306b\u3088\u308a\u3001\u30d7\u30e9\u30a4\u30d9\u30fc\u30c8\u306a\u5b66\u7fd2\u30fb\u30c6\u30b9\u30c8\u30bb\u30c3\u30c8\u3067\u306f\u306a\u304f\u3001\u5b9f\u4e16\u754c\u3067\u30e2\u30c7\u30eb\u3092\u30c6\u30b9\u30c8\u3067\u304d\u307e\u3059\u3002</li> </ul>","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u30c7\u30d7\u30ed\u30a4\u30e1\u30f3\u30c8","Gradio","Hugging Face","\u753b\u50cf\u5206\u985e","MLOps","\u8ee2\u79fb\u5b66\u7fd2"]},{"location":"PyTorch/10_pytorch_model_deployment/#3","title":"\u6a5f\u68b0\u5b66\u7fd2\u30e2\u30c7\u30eb\u30c7\u30d7\u30ed\u30a4\u30e1\u30f3\u30c8\u306e3\u3064\u306e\u8cea\u554f","text":"<ol> <li>\u30e2\u30c7\u30eb\u306e\u6700\u3082\u7406\u60f3\u7684\u306a\u4f7f\u7528\u30b1\u30fc\u30b9\u306f\u4f55\u304b\uff08\u3069\u306e\u7a0b\u5ea6\u306e\u6027\u80fd\u3068\u901f\u5ea6\u3067\u52d5\u4f5c\u3059\u308b\u304b\uff09</li> <li>\u30e2\u30c7\u30eb\u3092\u3069\u3053\u306b\u914d\u7f6e\u3059\u308b\u304b\uff08\u30aa\u30f3\u30c7\u30d0\u30a4\u30b9\u304b\u30af\u30e9\u30a6\u30c9\u304b\uff09</li> <li>\u30e2\u30c7\u30eb\u306f\u3069\u306e\u3088\u3046\u306b\u6a5f\u80fd\u3059\u308b\u304b\uff08\u4e88\u6e2c\u306f\u30aa\u30f3\u30e9\u30a4\u30f3\u304b\u30aa\u30d5\u30e9\u30a4\u30f3\u304b\uff09</li> </ol>","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u30c7\u30d7\u30ed\u30a4\u30e1\u30f3\u30c8","Gradio","Hugging Face","\u753b\u50cf\u5206\u985e","MLOps","\u8ee2\u79fb\u5b66\u7fd2"]},{"location":"PyTorch/10_pytorch_model_deployment/#_10","title":"\u30c7\u30d7\u30ed\u30a4\u30e1\u30f3\u30c8\u30aa\u30d7\u30b7\u30e7\u30f3","text":"<ul> <li>\u9078\u629e\u80a2\u306f\u8c4a\u5bcc\u3067\u3059\u304c\u3001\u30b7\u30f3\u30d7\u30eb\u306b\u59cb\u3081\u308b\u3053\u3068\u304c\u91cd\u8981\u3067\u3059\u3002 \u73fe\u5728\u306e\u6700\u826f\u306e\u65b9\u6cd5\u306e1\u3064\u306f\u3001Gradio\u3092\u4f7f\u7528\u3057\u3066\u30c7\u30e2\u3092\u4f5c\u6210\u3057\u3001Hugging Face Spaces\u3067\u30db\u30b9\u30c8\u3059\u308b\u3053\u3068\u3067\u3059\u3002\u30b7\u30f3\u30d7\u30eb\u306b\u59cb\u3081\u3066\u3001\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u30b9\u30b1\u30fc\u30eb\u30a2\u30c3\u30d7\u3057\u307e\u3057\u3087\u3046\u3002</li> </ul>","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u30c7\u30d7\u30ed\u30a4\u30e1\u30f3\u30c8","Gradio","Hugging Face","\u753b\u50cf\u5206\u985e","MLOps","\u8ee2\u79fb\u5b66\u7fd2"]},{"location":"PyTorch/10_pytorch_model_deployment/#_11","title":"\u7d99\u7d9a\u7684\u306a\u5b9f\u9a13","text":"<ul> <li>\u5b9f\u9a13\u3092\u7d9a\u3051\u308b\u3053\u3068\u304c\u91cd\u8981\u3067\u3059\u3002 \u6a5f\u68b0\u5b66\u7fd2\u30e2\u30c7\u30eb\u306e\u30cb\u30fc\u30ba\u306f\u6642\u9593\u3068\u3068\u3082\u306b\u5909\u5316\u3059\u308b\u305f\u3081\u3001\u5358\u4e00\u306e\u30e2\u30c7\u30eb\u3092\u30c7\u30d7\u30ed\u30a4\u3059\u308b\u3053\u3068\u304c\u6700\u7d42\u30b9\u30c6\u30c3\u30d7\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304c\u5909\u5316\u3057\u305f\u308a\u3001\u65b0\u3057\u3044\u7814\u7a76\u304c\u767a\u8868\u3055\u308c\u3066\u3088\u308a\u826f\u3044\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u304c\u5229\u7528\u53ef\u80fd\u306b\u306a\u3063\u305f\u308a\u3059\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002</li> </ul>","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u30c7\u30d7\u30ed\u30a4\u30e1\u30f3\u30c8","Gradio","Hugging Face","\u753b\u50cf\u5206\u985e","MLOps","\u8ee2\u79fb\u5b66\u7fd2"]},{"location":"PyTorch/10_pytorch_model_deployment/#mlops","title":"MLOps\u306e\u5b9f\u8df5","text":"<ul> <li>\u6a5f\u68b0\u5b66\u7fd2\u30e2\u30c7\u30eb\u306e\u30c7\u30d7\u30ed\u30a4\u30e1\u30f3\u30c8\u306fMLOps\uff08\u6a5f\u68b0\u5b66\u7fd2\u904b\u7528\uff09\u3068\u3044\u3046\u30a8\u30f3\u30b8\u30cb\u30a2\u30ea\u30f3\u30b0\u5b9f\u8df5\u306e\u4e00\u90e8\u3067\u3059\u3002 MLOps\u306fDevOps\uff08\u958b\u767a\u904b\u7528\uff09\u306e\u62e1\u5f35\u3067\u3001\u30e2\u30c7\u30eb\u5b66\u7fd2\u306b\u95a2\u308f\u308b\u3059\u3079\u3066\u306e\u30a8\u30f3\u30b8\u30cb\u30a2\u30ea\u30f3\u30b0\u90e8\u5206\uff08\u30c7\u30fc\u30bf\u53ce\u96c6\u3068\u4fdd\u5b58\u3001\u30c7\u30fc\u30bf\u524d\u51e6\u7406\u3001\u30e2\u30c7\u30eb\u30c7\u30d7\u30ed\u30a4\u3001\u30e2\u30c7\u30eb\u76e3\u8996\u3001\u30d0\u30fc\u30b8\u30e7\u30f3\u7ba1\u7406\u306a\u3069\uff09\u3092\u542b\u307f\u307e\u3059\u3002</li> </ul>","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u30c7\u30d7\u30ed\u30a4\u30e1\u30f3\u30c8","Gradio","Hugging Face","\u753b\u50cf\u5206\u985e","MLOps","\u8ee2\u79fb\u5b66\u7fd2"]},{"location":"PyTorch/10_pytorch_model_deployment/#_12","title":"\u307e\u3068\u3081","text":"<p>\u672c\u8a18\u4e8b\u3067\u306f\u3001PyTorch\u3067\u69cb\u7bc9\u3057\u305f\u753b\u50cf\u5206\u985e\u30e2\u30c7\u30eb\u300cFoodVision Big\u300d\u3092\u5b9f\u969b\u306b\u4f7f\u3048\u308bWeb\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3068\u3057\u3066\u30c7\u30d7\u30ed\u30a4\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3057\u305f\u3002\u4e3b\u306a\u5b66\u7fd2\u30dd\u30a4\u30f3\u30c8\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\uff1a</p> <ol> <li>\u8ee2\u79fb\u5b66\u7fd2\u306e\u5a01\u529b - \u308f\u305a\u304b20%\u306e\u30c7\u30fc\u30bf\u3067\u5143\u306e\u8ad6\u6587\u306e\u7cbe\u5ea6\u3092\u4e0a\u56de\u308b\u7d50\u679c\u3092\u9054\u6210</li> <li>\u52b9\u7387\u7684\u306a\u30e2\u30c7\u30eb\u8a2d\u8a08 - EfficientNetB2\u3092\u4f7f\u7528\u3057\u3001\u6027\u80fd\u3068\u901f\u5ea6\u306e\u30d0\u30e9\u30f3\u30b9\u3092\u5b9f\u73fe</li> <li>\u5b9f\u8df5\u7684\u306a\u30c7\u30d7\u30ed\u30a4\u30e1\u30f3\u30c8 - Gradio\u3092\u4f7f\u7528\u3057\u305f\u76f4\u611f\u7684\u306a\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306e\u4f5c\u6210</li> <li>\u30a2\u30af\u30bb\u30b7\u30d3\u30ea\u30c6\u30a3\u306e\u5411\u4e0a - Hugging Face Spaces\u3092\u901a\u3058\u3066\u4e16\u754c\u4e2d\u304b\u3089\u30a2\u30af\u30bb\u30b9\u53ef\u80fd\u306b</li> </ol> <p>\u6a5f\u68b0\u5b66\u7fd2\u30e2\u30c7\u30eb\u306e\u771f\u306e\u4fa1\u5024\u306f\u3001\u5b9f\u969b\u306b\u4f7f\u308f\u308c\u3066\u3053\u305d\u767a\u63ee\u3055\u308c\u307e\u3059\u3002\u512a\u308c\u305f\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u3082\u91cd\u8981\u3067\u3059\u304c\u3001\u305d\u308c\u3092\u9069\u5207\u306b\u30c7\u30d7\u30ed\u30a4\u3057\u3001\u4eba\u3005\u304c\u5229\u7528\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u3053\u3068\u3082\u540c\u69d8\u306b\u91cd\u8981\u3067\u3059\u3002\u4eca\u56de\u5b66\u3093\u3060\u6280\u8853\u3092\u6d3b\u7528\u3057\u3066\u3001\u3042\u306a\u305f\u306e\u30e2\u30c7\u30eb\u3082\u4e16\u754c\u306b\u516c\u958b\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff01</p>","tags":["PyTorch","\u6a5f\u68b0\u5b66\u7fd2","\u30c7\u30d7\u30ed\u30a4\u30e1\u30f3\u30c8","Gradio","Hugging Face","\u753b\u50cf\u5206\u985e","MLOps","\u8ee2\u79fb\u5b66\u7fd2"]}]}